// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/api.proto
#ifndef GRPC_api_2fapi_2eproto__INCLUDED
#define GRPC_api_2fapi_2eproto__INCLUDED

#include "api/api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace protocol {

class Wallet final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Wallet";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> PrepareAsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(PrepareAsyncGetAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> PrepareAsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(PrepareAsyncGetAccountByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::protocol::AccountBalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>> AsyncGetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>>(AsyncGetAccountBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>> PrepareAsyncGetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>>(PrepareAsyncGetAccountBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::protocol::BlockBalanceTrace* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>> AsyncGetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>>(AsyncGetBlockBalanceTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>> PrepareAsyncGetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>>(PrepareAsyncGetBlockBalanceTraceRaw(context, request, cq));
    }
    // Please use CreateTransaction2 instead of this function.
    virtual ::grpc::Status CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncCreateTransactionRaw(context, request, cq));
    }
    // Use this function instead of CreateTransaction.
    virtual ::grpc::Status CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateTransaction2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateTransaction2Raw(context, request, cq));
    }
    virtual ::grpc::Status BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>> AsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>>(AsyncBroadcastTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>> PrepareAsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>>(PrepareAsyncBroadcastTransactionRaw(context, request, cq));
    }
    // Please use UpdateAccount2 instead of this function.
    virtual ::grpc::Status UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncUpdateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncSetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncSetAccountIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncSetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncSetAccountIdRaw(context, request, cq));
    }
    // Use this function instead of UpdateAccount.
    virtual ::grpc::Status UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateAccount2Raw(context, request, cq));
    }
    // Please use VoteWitnessAccount2 instead of this function.
    virtual ::grpc::Status VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncVoteWitnessAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncVoteWitnessAccountRaw(context, request, cq));
    }
    // modify the consume_user_resource_percent
    virtual ::grpc::Status UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateSettingRaw(context, request, cq));
    }
    // modify the energy_limit
    virtual ::grpc::Status UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateEnergyLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateEnergyLimitRaw(context, request, cq));
    }
    // Use this function instead of VoteWitnessAccount.
    virtual ::grpc::Status VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncVoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncVoteWitnessAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncVoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncVoteWitnessAccount2Raw(context, request, cq));
    }
    // Please use CreateAssetIssue2 instead of this function.
    virtual ::grpc::Status CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateAssetIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncCreateAssetIssueRaw(context, request, cq));
    }
    // Use this function instead of CreateAssetIssue.
    virtual ::grpc::Status CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateAssetIssue2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateAssetIssue2Raw(context, request, cq));
    }
    // Please use UpdateWitness2 instead of this function.
    virtual ::grpc::Status UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateWitnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncUpdateWitnessRaw(context, request, cq));
    }
    // Use this function instead of UpdateWitness.
    virtual ::grpc::Status UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateWitness2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateWitness2Raw(context, request, cq));
    }
    // Please use CreateAccount2 instead of this function.
    virtual ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    // Use this function instead of CreateAccount.
    virtual ::grpc::Status CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateAccount2Raw(context, request, cq));
    }
    // Please use CreateWitness2 instead of this function.
    virtual ::grpc::Status CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncCreateWitnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncCreateWitnessRaw(context, request, cq));
    }
    // Use this function instead of CreateWitness.
    virtual ::grpc::Status CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateWitness2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateWitness2Raw(context, request, cq));
    }
    // Please use TransferAsset2 instead of this function.
    virtual ::grpc::Status TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncTransferAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncTransferAssetRaw(context, request, cq));
    }
    // Use this function instead of TransferAsset.
    virtual ::grpc::Status TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncTransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncTransferAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncTransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncTransferAsset2Raw(context, request, cq));
    }
    // Please use ParticipateAssetIssue2 instead of this function.
    virtual ::grpc::Status ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncParticipateAssetIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncParticipateAssetIssueRaw(context, request, cq));
    }
    // Use this function instead of ParticipateAssetIssue.
    virtual ::grpc::Status ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncParticipateAssetIssue2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncParticipateAssetIssue2Raw(context, request, cq));
    }
    // Please use FreezeBalance2 instead of this function.
    virtual ::grpc::Status FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncFreezeBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncFreezeBalanceRaw(context, request, cq));
    }
    // Use this function instead of FreezeBalance.
    virtual ::grpc::Status FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncFreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncFreezeBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncFreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncFreezeBalance2Raw(context, request, cq));
    }
    // Please use UnfreezeBalance2 instead of this function.
    virtual ::grpc::Status UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUnfreezeBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncUnfreezeBalanceRaw(context, request, cq));
    }
    // Use this function instead of UnfreezeBalance.
    virtual ::grpc::Status UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUnfreezeBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUnfreezeBalance2Raw(context, request, cq));
    }
    // Please use UnfreezeAsset2 instead of this function.
    virtual ::grpc::Status UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUnfreezeAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncUnfreezeAssetRaw(context, request, cq));
    }
    // Use this function instead of UnfreezeAsset.
    virtual ::grpc::Status UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUnfreezeAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUnfreezeAsset2Raw(context, request, cq));
    }
    // Please use WithdrawBalance2 instead of this function.
    virtual ::grpc::Status WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncWithdrawBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncWithdrawBalanceRaw(context, request, cq));
    }
    // Use this function instead of WithdrawBalance.
    virtual ::grpc::Status WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncWithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncWithdrawBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncWithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncWithdrawBalance2Raw(context, request, cq));
    }
    // Please use UpdateAsset2 instead of this function.
    virtual ::grpc::Status UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncUpdateAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncUpdateAssetRaw(context, request, cq));
    }
    // Use this function instead of UpdateAsset.
    virtual ::grpc::Status UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateAsset2Raw(context, request, cq));
    }
    virtual ::grpc::Status ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncProposalCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncProposalCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncProposalApproveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncProposalApproveRaw(context, request, cq));
    }
    virtual ::grpc::Status ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncProposalDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncProposalDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncBuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncBuyStorageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncBuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncBuyStorageRaw(context, request, cq));
    }
    virtual ::grpc::Status BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncBuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncBuyStorageBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncBuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncBuyStorageBytesRaw(context, request, cq));
    }
    virtual ::grpc::Status SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncSellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncSellStorageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncSellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncSellStorageRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncExchangeCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncExchangeCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncExchangeInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncExchangeInjectRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncExchangeWithdrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncExchangeWithdrawRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncExchangeTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncExchangeTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncMarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncMarketSellAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncMarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncMarketSellAssetRaw(context, request, cq));
    }
    virtual ::grpc::Status MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncMarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncMarketCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncMarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncMarketCancelOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>> AsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>>(AsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>> PrepareAsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>>(PrepareAsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> AsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(AsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>> AsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>>(AsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>> PrepareAsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>>(PrepareAsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> AsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(AsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>> AsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>>(AsyncGetMarketPairListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>> PrepareAsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>>(PrepareAsyncGetMarketPairListRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>> AsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>>(AsyncListNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>> PrepareAsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>>(PrepareAsyncListNodesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>> AsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>>(AsyncGetAccountNetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>> PrepareAsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>>(PrepareAsyncGetAccountNetRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountResourceMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>> AsyncGetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>>(AsyncGetAccountResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>> PrepareAsyncGetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>>(PrepareAsyncGetAccountResourceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    // Please use GetNowBlock2 instead of this function.
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    // Use this function instead of GetNowBlock.
    virtual ::grpc::Status GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> AsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(AsyncGetNowBlock2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> PrepareAsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(PrepareAsyncGetNowBlock2Raw(context, request, cq));
    }
    // Please use GetBlockByNum2 instead of this function.
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    // Use this function instead of GetBlockByNum.
    virtual ::grpc::Status GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> AsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(AsyncGetBlockByNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> PrepareAsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(PrepareAsyncGetBlockByNum2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetBlockByIdRaw(context, request, cq));
    }
    // Please use GetBlockByLimitNext2 instead of this function.
    virtual ::grpc::Status GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> AsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(AsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> PrepareAsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(PrepareAsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    // Use this function instead of GetBlockByLimitNext.
    virtual ::grpc::Status GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockListExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>> AsyncGetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>>(AsyncGetBlockByLimitNext2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>> PrepareAsyncGetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>>(PrepareAsyncGetBlockByLimitNext2Raw(context, request, cq));
    }
    // Please use GetBlockByLatestNum2 instead of this function.
    virtual ::grpc::Status GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> AsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(AsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>> PrepareAsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>>(PrepareAsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    // Use this function instead of GetBlockByLatestNum.
    virtual ::grpc::Status GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockListExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>> AsyncGetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>>(AsyncGetBlockByLatestNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>> PrepareAsyncGetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>>(PrepareAsyncGetBlockByLatestNum2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncGetTransactionByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncDeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncDeployContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncDeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncDeployContractRaw(context, request, cq));
    }
    virtual ::grpc::Status GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>> AsyncGetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>>(AsyncGetContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>> PrepareAsyncGetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>>(PrepareAsyncGetContractRaw(context, request, cq));
    }
    virtual ::grpc::Status GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContractDataWrapper* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>> AsyncGetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>>(AsyncGetContractInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>> PrepareAsyncGetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>>(PrepareAsyncGetContractInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncTriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncTriggerContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncTriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncTriggerContractRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncTriggerConstantContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncTriggerConstantContractRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncClearContractABIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncClearContractABIRaw(context, request, cq));
    }
    virtual ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> PrepareAsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(PrepareAsyncListWitnessesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>> AsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>>(AsyncGetDelegatedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>> PrepareAsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>>(PrepareAsyncGetDelegatedResourceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::DelegatedResourceAccountIndex* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>> AsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>>(AsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>> PrepareAsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>>(PrepareAsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ProposalList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>> AsyncListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>>(AsyncListProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>> PrepareAsyncListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>>(PrepareAsyncListProposalsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ProposalList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>> AsyncGetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>>(AsyncGetPaginatedProposalListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>> PrepareAsyncGetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>>(PrepareAsyncGetPaginatedProposalListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Proposal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>> AsyncGetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>>(AsyncGetProposalByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>> PrepareAsyncGetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>>(PrepareAsyncGetProposalByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> AsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(AsyncListExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> PrepareAsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(PrepareAsyncListExchangesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ExchangeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> AsyncGetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(AsyncGetPaginatedExchangeListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> PrepareAsyncGetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(PrepareAsyncGetPaginatedExchangeListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>> AsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>>(AsyncGetExchangeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>> PrepareAsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>>(PrepareAsyncGetExchangeByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ChainParameters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>> AsyncGetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>>(AsyncGetChainParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>> PrepareAsyncGetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>>(PrepareAsyncGetChainParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncTotalTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    // Please use GetTransactionSign2 instead of this function.
    virtual ::grpc::Status GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncGetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncGetTransactionSignRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    // Use this function instead of GetTransactionSign.
    virtual ::grpc::Status GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncGetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncGetTransactionSign2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncGetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncGetTransactionSign2Raw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncCreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncCreateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncCreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncCreateAddressRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::protocol::EasyTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> AsyncEasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(AsyncEasyTransferAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferAssetRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::protocol::EasyTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> AsyncEasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(AsyncEasyTransferAssetByPrivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferAssetByPrivateRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::protocol::EasyTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> AsyncEasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(AsyncEasyTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::protocol::EasyTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> AsyncEasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(AsyncEasyTransferByPrivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferByPrivateRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>> AsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>>(AsyncGenerateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>> PrepareAsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>>(PrepareAsyncGenerateAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>> AsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>>(AsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>> PrepareAsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>>(PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncAccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncAccountPermissionUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncAccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncAccountPermissionUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncAddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncAddSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncAddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncAddSignRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionSignWeight* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>> AsyncGetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>>(AsyncGetTransactionSignWeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>> PrepareAsyncGetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>>(PrepareAsyncGetTransactionSignWeightRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionApprovedList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>> AsyncGetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>>(AsyncGetTransactionApprovedListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>> PrepareAsyncGetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>>(PrepareAsyncGetTransactionApprovedListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetRewardInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetRewardInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetBrokerageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetBrokerageInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncUpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncUpdateBrokerageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncUpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncUpdateBrokerageRaw(context, request, cq));
    }
    // for shiededTransaction
    virtual ::grpc::Status CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateShieldedTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateShieldedTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>> AsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>>(AsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>> PrepareAsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>>(PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> AsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(AsyncScanNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>> AsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>>(AsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>> PrepareAsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>>(PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> AsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(AsyncScanNoteByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByOvkRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetSpendingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetSpendingKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::ExpandedSpendingKeyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>> AsyncGetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>>(AsyncGetExpandedSpendingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>> PrepareAsyncGetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>>(PrepareAsyncGetExpandedSpendingKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetAkFromAskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetAkFromAskRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetNkFromNskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetNkFromNskRaw(context, request, cq));
    }
    virtual ::grpc::Status GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::protocol::IncomingViewingKeyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>> AsyncGetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>>(AsyncGetIncomingViewingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>> PrepareAsyncGetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>>(PrepareAsyncGetIncomingViewingKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DiversifierMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>> AsyncGetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>>(AsyncGetDiversifierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>> PrepareAsyncGetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>>(PrepareAsyncGetDiversifierRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ShieldedAddressInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>> AsyncGetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>>(AsyncGetNewShieldedAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>> PrepareAsyncGetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>>(PrepareAsyncGetNewShieldedAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::protocol::PaymentAddressMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>> AsyncGetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>>(AsyncGetZenPaymentAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>> PrepareAsyncGetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>>(PrepareAsyncGetZenPaymentAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetRcmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetRcmRaw(context, request, cq));
    }
    virtual ::grpc::Status IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>> AsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>>(AsyncIsSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>> PrepareAsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>>(PrepareAsyncIsSpendRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(context, request, cq));
    }
    virtual ::grpc::Status GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetShieldTransactionHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetShieldTransactionHashRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncCreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncCreateSpendAuthSigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncCreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncCreateSpendAuthSigRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncCreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncCreateShieldNullifierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncCreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncCreateShieldNullifierRaw(context, request, cq));
    }
    // for shielded contract
    virtual ::grpc::Status CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::protocol::ShieldedTRC20Parameters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>> AsyncCreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>>(AsyncCreateShieldedContractParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>> PrepareAsyncCreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>>(PrepareAsyncCreateShieldedContractParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::protocol::ShieldedTRC20Parameters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>> AsyncCreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>>(AsyncCreateShieldedContractParametersWithoutAskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>> PrepareAsyncCreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>>(PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    virtual ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>> AsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>>(AsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>> PrepareAsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>>(PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::protocol::BytesMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> AsyncGetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(AsyncGetTriggerInputForShieldedTRC20ContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>> PrepareAsyncGetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>>(PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncCreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncCreateCommonTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncCreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncCreateCommonTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>> AsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>>(AsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>> PrepareAsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>>(PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetBurnTrxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetBurnTrxRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionFromPendingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncGetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncGetTransactionFromPendingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::TransactionIdList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>> AsyncGetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>>(AsyncGetTransactionListFromPendingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>> PrepareAsyncGetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>>(PrepareAsyncGetTransactionListFromPendingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetPendingSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetPendingSizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use CreateTransaction2 instead of this function.
      virtual void CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of CreateTransaction.
      virtual void CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use UpdateAccount2 instead of this function.
      virtual void UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of UpdateAccount.
      virtual void UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use VoteWitnessAccount2 instead of this function.
      virtual void VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // modify the consume_user_resource_percent
      virtual void UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // modify the energy_limit
      virtual void UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of VoteWitnessAccount.
      virtual void VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use CreateAssetIssue2 instead of this function.
      virtual void CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of CreateAssetIssue.
      virtual void CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use UpdateWitness2 instead of this function.
      virtual void UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of UpdateWitness.
      virtual void UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use CreateAccount2 instead of this function.
      virtual void CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of CreateAccount.
      virtual void CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use CreateWitness2 instead of this function.
      virtual void CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of CreateWitness.
      virtual void CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use TransferAsset2 instead of this function.
      virtual void TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of TransferAsset.
      virtual void TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use ParticipateAssetIssue2 instead of this function.
      virtual void ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of ParticipateAssetIssue.
      virtual void ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use FreezeBalance2 instead of this function.
      virtual void FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of FreezeBalance.
      virtual void FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use UnfreezeBalance2 instead of this function.
      virtual void UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of UnfreezeBalance.
      virtual void UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use UnfreezeAsset2 instead of this function.
      virtual void UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of UnfreezeAsset.
      virtual void UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use WithdrawBalance2 instead of this function.
      virtual void WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of WithdrawBalance.
      virtual void WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use UpdateAsset2 instead of this function.
      virtual void UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of UpdateAsset.
      virtual void UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetNowBlock2 instead of this function.
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetNowBlock.
      virtual void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetBlockByNum2 instead of this function.
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetBlockByNum.
      virtual void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetBlockByLimitNext2 instead of this function.
      virtual void GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetBlockByLimitNext.
      virtual void GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetBlockByLatestNum2 instead of this function.
      virtual void GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetBlockByLatestNum.
      virtual void GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      // Please use GetTransactionSign2 instead of this function.
      virtual void GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      // Use this function instead of GetTransactionSign.
      virtual void GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for shiededTransaction
      virtual void CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for shielded contract
      virtual void CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>* AsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountBalanceResponse>* PrepareAsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>* AsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockBalanceTrace>* PrepareAsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>* AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Return>* PrepareAsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>* AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>* PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>* AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>* PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>* AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>* PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeList>* PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>* AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountNetMessage>* PrepareAsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>* AsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AccountResourceMessage>* PrepareAsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* PrepareAsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>* AsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>* PrepareAsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockList>* PrepareAsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>* AsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockListExtention>* PrepareAsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>* AsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContract>* PrepareAsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>* AsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SmartContractDataWrapper>* PrepareAsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>* AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>* PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>* AsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>* PrepareAsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>* AsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>* PrepareAsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>* AsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ProposalList>* PrepareAsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>* AsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Proposal>* PrepareAsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* AsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* PrepareAsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>* AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>* PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>* AsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ChainParameters>* PrepareAsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* AsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* AsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* AsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* AsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>* AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>* PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>* AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>* PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>* AsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionSignWeight>* PrepareAsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>* AsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionApprovedList>* PrepareAsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NodeInfo>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>* AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>* PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>* AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>* PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>* AsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExpandedSpendingKeyMessage>* PrepareAsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>* AsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncomingViewingKeyMessage>* PrepareAsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>* AsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DiversifierMessage>* PrepareAsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>* AsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedAddressInfo>* PrepareAsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>* AsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::PaymentAddressMessage>* PrepareAsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>* AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>* PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>* AsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>* PrepareAsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>* AsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ShieldedTRC20Parameters>* PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>* AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>* PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* AsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BytesMessage>* PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>* AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>* PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionFromPendingRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncGetTransactionFromPendingRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>* AsyncGetTransactionListFromPendingRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionIdList>* PrepareAsyncGetTransactionListFromPendingRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetPendingSizeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetPendingSizeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> PrepareAsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(PrepareAsyncGetAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> PrepareAsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(PrepareAsyncGetAccountByIdRaw(context, request, cq));
    }
    ::grpc::Status GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::protocol::AccountBalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>> AsyncGetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>>(AsyncGetAccountBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>> PrepareAsyncGetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>>(PrepareAsyncGetAccountBalanceRaw(context, request, cq));
    }
    ::grpc::Status GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::protocol::BlockBalanceTrace* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>> AsyncGetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>>(AsyncGetBlockBalanceTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>> PrepareAsyncGetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>>(PrepareAsyncGetBlockBalanceTraceRaw(context, request, cq));
    }
    ::grpc::Status CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncCreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncCreateTransactionRaw(context, request, cq));
    }
    ::grpc::Status CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateTransaction2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateTransaction2Raw(context, request, cq));
    }
    ::grpc::Status BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>> AsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>>(AsyncBroadcastTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>> PrepareAsyncBroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Return>>(PrepareAsyncBroadcastTransactionRaw(context, request, cq));
    }
    ::grpc::Status UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncUpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncUpdateAccountRaw(context, request, cq));
    }
    ::grpc::Status SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncSetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncSetAccountIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncSetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncSetAccountIdRaw(context, request, cq));
    }
    ::grpc::Status UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateAccount2Raw(context, request, cq));
    }
    ::grpc::Status VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncVoteWitnessAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncVoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncVoteWitnessAccountRaw(context, request, cq));
    }
    ::grpc::Status UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateSettingRaw(context, request, cq));
    }
    ::grpc::Status UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateEnergyLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateEnergyLimitRaw(context, request, cq));
    }
    ::grpc::Status VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncVoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncVoteWitnessAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncVoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncVoteWitnessAccount2Raw(context, request, cq));
    }
    ::grpc::Status CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateAssetIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncCreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncCreateAssetIssueRaw(context, request, cq));
    }
    ::grpc::Status CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateAssetIssue2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateAssetIssue2Raw(context, request, cq));
    }
    ::grpc::Status UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateWitnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncUpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncUpdateWitnessRaw(context, request, cq));
    }
    ::grpc::Status UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateWitness2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateWitness2Raw(context, request, cq));
    }
    ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    ::grpc::Status CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateAccount2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateAccount2Raw(context, request, cq));
    }
    ::grpc::Status CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncCreateWitnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncCreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncCreateWitnessRaw(context, request, cq));
    }
    ::grpc::Status CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateWitness2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateWitness2Raw(context, request, cq));
    }
    ::grpc::Status TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncTransferAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncTransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncTransferAssetRaw(context, request, cq));
    }
    ::grpc::Status TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncTransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncTransferAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncTransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncTransferAsset2Raw(context, request, cq));
    }
    ::grpc::Status ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncParticipateAssetIssueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncParticipateAssetIssueRaw(context, request, cq));
    }
    ::grpc::Status ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncParticipateAssetIssue2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncParticipateAssetIssue2Raw(context, request, cq));
    }
    ::grpc::Status FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncFreezeBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncFreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncFreezeBalanceRaw(context, request, cq));
    }
    ::grpc::Status FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncFreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncFreezeBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncFreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncFreezeBalance2Raw(context, request, cq));
    }
    ::grpc::Status UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUnfreezeBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncUnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncUnfreezeBalanceRaw(context, request, cq));
    }
    ::grpc::Status UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUnfreezeBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUnfreezeBalance2Raw(context, request, cq));
    }
    ::grpc::Status UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUnfreezeAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncUnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncUnfreezeAssetRaw(context, request, cq));
    }
    ::grpc::Status UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUnfreezeAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUnfreezeAsset2Raw(context, request, cq));
    }
    ::grpc::Status WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncWithdrawBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncWithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncWithdrawBalanceRaw(context, request, cq));
    }
    ::grpc::Status WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncWithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncWithdrawBalance2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncWithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncWithdrawBalance2Raw(context, request, cq));
    }
    ::grpc::Status UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncUpdateAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncUpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncUpdateAssetRaw(context, request, cq));
    }
    ::grpc::Status UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateAsset2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateAsset2Raw(context, request, cq));
    }
    ::grpc::Status ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncProposalCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncProposalCreateRaw(context, request, cq));
    }
    ::grpc::Status ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncProposalApproveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncProposalApproveRaw(context, request, cq));
    }
    ::grpc::Status ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncProposalDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncProposalDeleteRaw(context, request, cq));
    }
    ::grpc::Status BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncBuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncBuyStorageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncBuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncBuyStorageRaw(context, request, cq));
    }
    ::grpc::Status BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncBuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncBuyStorageBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncBuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncBuyStorageBytesRaw(context, request, cq));
    }
    ::grpc::Status SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncSellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncSellStorageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncSellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncSellStorageRaw(context, request, cq));
    }
    ::grpc::Status ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncExchangeCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncExchangeCreateRaw(context, request, cq));
    }
    ::grpc::Status ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncExchangeInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncExchangeInjectRaw(context, request, cq));
    }
    ::grpc::Status ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncExchangeWithdrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncExchangeWithdrawRaw(context, request, cq));
    }
    ::grpc::Status ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncExchangeTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncExchangeTransactionRaw(context, request, cq));
    }
    ::grpc::Status MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncMarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncMarketSellAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncMarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncMarketSellAssetRaw(context, request, cq));
    }
    ::grpc::Status MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncMarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncMarketCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncMarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncMarketCancelOrderRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>> AsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>>(AsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>> PrepareAsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>>(PrepareAsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> AsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(AsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    ::grpc::Status GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>> AsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>>(AsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>> PrepareAsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>>(PrepareAsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> AsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(AsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    ::grpc::Status GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>> AsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>>(AsyncGetMarketPairListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>> PrepareAsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>>(PrepareAsyncGetMarketPairListRaw(context, request, cq));
    }
    ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>> AsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>>(AsyncListNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>> PrepareAsyncListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>>(PrepareAsyncListNodesRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueByAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>> AsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>>(AsyncGetAccountNetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>> PrepareAsyncGetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>>(PrepareAsyncGetAccountNetRaw(context, request, cq));
    }
    ::grpc::Status GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountResourceMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>> AsyncGetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>>(AsyncGetAccountResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>> PrepareAsyncGetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>>(PrepareAsyncGetAccountResourceRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> AsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(AsyncGetNowBlock2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> PrepareAsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(PrepareAsyncGetNowBlock2Raw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> AsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(AsyncGetBlockByNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> PrepareAsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(PrepareAsyncGetBlockByNum2Raw(context, request, cq));
    }
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    ::grpc::Status GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetBlockByIdRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> AsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(AsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> PrepareAsyncGetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(PrepareAsyncGetBlockByLimitNextRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockListExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>> AsyncGetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>>(AsyncGetBlockByLimitNext2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>> PrepareAsyncGetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>>(PrepareAsyncGetBlockByLimitNext2Raw(context, request, cq));
    }
    ::grpc::Status GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> AsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(AsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>> PrepareAsyncGetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>>(PrepareAsyncGetBlockByLatestNumRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockListExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>> AsyncGetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>>(AsyncGetBlockByLatestNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>> PrepareAsyncGetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>>(PrepareAsyncGetBlockByLatestNum2Raw(context, request, cq));
    }
    ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncGetTransactionByIdRaw(context, request, cq));
    }
    ::grpc::Status DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncDeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncDeployContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncDeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncDeployContractRaw(context, request, cq));
    }
    ::grpc::Status GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>> AsyncGetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>>(AsyncGetContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>> PrepareAsyncGetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>>(PrepareAsyncGetContractRaw(context, request, cq));
    }
    ::grpc::Status GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContractDataWrapper* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>> AsyncGetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>>(AsyncGetContractInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>> PrepareAsyncGetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>>(PrepareAsyncGetContractInfoRaw(context, request, cq));
    }
    ::grpc::Status TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncTriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncTriggerContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncTriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncTriggerContractRaw(context, request, cq));
    }
    ::grpc::Status TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncTriggerConstantContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncTriggerConstantContractRaw(context, request, cq));
    }
    ::grpc::Status ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncClearContractABIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncClearContractABIRaw(context, request, cq));
    }
    ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> PrepareAsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(PrepareAsyncListWitnessesRaw(context, request, cq));
    }
    ::grpc::Status GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>> AsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>>(AsyncGetDelegatedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>> PrepareAsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>>(PrepareAsyncGetDelegatedResourceRaw(context, request, cq));
    }
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::DelegatedResourceAccountIndex* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>> AsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>>(AsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>> PrepareAsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>>(PrepareAsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    ::grpc::Status ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ProposalList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>> AsyncListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>>(AsyncListProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>> PrepareAsyncListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>>(PrepareAsyncListProposalsRaw(context, request, cq));
    }
    ::grpc::Status GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ProposalList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>> AsyncGetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>>(AsyncGetPaginatedProposalListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>> PrepareAsyncGetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>>(PrepareAsyncGetPaginatedProposalListRaw(context, request, cq));
    }
    ::grpc::Status GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Proposal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>> AsyncGetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>>(AsyncGetProposalByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>> PrepareAsyncGetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>>(PrepareAsyncGetProposalByIdRaw(context, request, cq));
    }
    ::grpc::Status ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> AsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(AsyncListExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> PrepareAsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(PrepareAsyncListExchangesRaw(context, request, cq));
    }
    ::grpc::Status GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ExchangeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> AsyncGetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(AsyncGetPaginatedExchangeListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> PrepareAsyncGetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(PrepareAsyncGetPaginatedExchangeListRaw(context, request, cq));
    }
    ::grpc::Status GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>> AsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>>(AsyncGetExchangeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>> PrepareAsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>>(PrepareAsyncGetExchangeByIdRaw(context, request, cq));
    }
    ::grpc::Status GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ChainParameters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>> AsyncGetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>>(AsyncGetChainParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>> PrepareAsyncGetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>>(PrepareAsyncGetChainParametersRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncTotalTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncTotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncTotalTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetNextMaintenanceTimeRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncGetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncGetTransactionSignRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncGetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncGetTransactionSign2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncGetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncGetTransactionSign2Raw(context, request, cq));
    }
    ::grpc::Status CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncCreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncCreateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncCreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncCreateAddressRaw(context, request, cq));
    }
    ::grpc::Status EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::protocol::EasyTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> AsyncEasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(AsyncEasyTransferAssetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferAssetRaw(context, request, cq));
    }
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::protocol::EasyTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> AsyncEasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(AsyncEasyTransferAssetByPrivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferAssetByPrivateRaw(context, request, cq));
    }
    ::grpc::Status EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::protocol::EasyTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> AsyncEasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(AsyncEasyTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferRaw(context, request, cq));
    }
    ::grpc::Status EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::protocol::EasyTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> AsyncEasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(AsyncEasyTransferByPrivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>> PrepareAsyncEasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>>(PrepareAsyncEasyTransferByPrivateRaw(context, request, cq));
    }
    ::grpc::Status GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>> AsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>>(AsyncGenerateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>> PrepareAsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>>(PrepareAsyncGenerateAddressRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>> AsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>>(AsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>> PrepareAsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>>(PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    ::grpc::Status AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncAccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncAccountPermissionUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncAccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncAccountPermissionUpdateRaw(context, request, cq));
    }
    ::grpc::Status AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncAddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncAddSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncAddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncAddSignRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionSignWeight* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>> AsyncGetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>>(AsyncGetTransactionSignWeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>> PrepareAsyncGetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>>(PrepareAsyncGetTransactionSignWeightRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionApprovedList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>> AsyncGetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>>(AsyncGetTransactionApprovedListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>> PrepareAsyncGetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>>(PrepareAsyncGetTransactionApprovedListRaw(context, request, cq));
    }
    ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    ::grpc::Status GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetRewardInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetRewardInfoRaw(context, request, cq));
    }
    ::grpc::Status GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetBrokerageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetBrokerageInfoRaw(context, request, cq));
    }
    ::grpc::Status UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncUpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncUpdateBrokerageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncUpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncUpdateBrokerageRaw(context, request, cq));
    }
    ::grpc::Status CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateShieldedTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateShieldedTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>> AsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>>(AsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>> PrepareAsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>>(PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    ::grpc::Status ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> AsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(AsyncScanNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>> AsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>>(AsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>> PrepareAsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>>(PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> AsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(AsyncScanNoteByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByOvkRaw(context, request, cq));
    }
    ::grpc::Status GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetSpendingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetSpendingKeyRaw(context, request, cq));
    }
    ::grpc::Status GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::ExpandedSpendingKeyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>> AsyncGetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>>(AsyncGetExpandedSpendingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>> PrepareAsyncGetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>>(PrepareAsyncGetExpandedSpendingKeyRaw(context, request, cq));
    }
    ::grpc::Status GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetAkFromAskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetAkFromAskRaw(context, request, cq));
    }
    ::grpc::Status GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetNkFromNskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetNkFromNskRaw(context, request, cq));
    }
    ::grpc::Status GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::protocol::IncomingViewingKeyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>> AsyncGetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>>(AsyncGetIncomingViewingKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>> PrepareAsyncGetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>>(PrepareAsyncGetIncomingViewingKeyRaw(context, request, cq));
    }
    ::grpc::Status GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DiversifierMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>> AsyncGetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>>(AsyncGetDiversifierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>> PrepareAsyncGetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>>(PrepareAsyncGetDiversifierRaw(context, request, cq));
    }
    ::grpc::Status GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ShieldedAddressInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>> AsyncGetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>>(AsyncGetNewShieldedAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>> PrepareAsyncGetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>>(PrepareAsyncGetNewShieldedAddressRaw(context, request, cq));
    }
    ::grpc::Status GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::protocol::PaymentAddressMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>> AsyncGetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>>(AsyncGetZenPaymentAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>> PrepareAsyncGetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>>(PrepareAsyncGetZenPaymentAddressRaw(context, request, cq));
    }
    ::grpc::Status GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetRcmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetRcmRaw(context, request, cq));
    }
    ::grpc::Status IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>> AsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>>(AsyncIsSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>> PrepareAsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>>(PrepareAsyncIsSpendRaw(context, request, cq));
    }
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(context, request, cq));
    }
    ::grpc::Status GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetShieldTransactionHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetShieldTransactionHashRaw(context, request, cq));
    }
    ::grpc::Status CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncCreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncCreateSpendAuthSigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncCreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncCreateSpendAuthSigRaw(context, request, cq));
    }
    ::grpc::Status CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncCreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncCreateShieldNullifierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncCreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncCreateShieldNullifierRaw(context, request, cq));
    }
    ::grpc::Status CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::protocol::ShieldedTRC20Parameters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>> AsyncCreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>>(AsyncCreateShieldedContractParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>> PrepareAsyncCreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>>(PrepareAsyncCreateShieldedContractParametersRaw(context, request, cq));
    }
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::protocol::ShieldedTRC20Parameters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>> AsyncCreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>>(AsyncCreateShieldedContractParametersWithoutAskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>> PrepareAsyncCreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>>(PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(context, request, cq));
    }
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>> AsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>>(AsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>> PrepareAsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>>(PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::protocol::BytesMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> AsyncGetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(AsyncGetTriggerInputForShieldedTRC20ContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>> PrepareAsyncGetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>>(PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(context, request, cq));
    }
    ::grpc::Status CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncCreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncCreateCommonTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncCreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncCreateCommonTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>> AsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>>(AsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>> PrepareAsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>>(PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    ::grpc::Status GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetBurnTrxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetBurnTrxRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionFromPendingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncGetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncGetTransactionFromPendingRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::TransactionIdList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>> AsyncGetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>>(AsyncGetTransactionListFromPendingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>> PrepareAsyncGetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>>(PrepareAsyncGetTransactionListFromPendingRaw(context, request, cq));
    }
    ::grpc::Status GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetPendingSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetPendingSizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) override;
      void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) override;
      void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, std::function<void(::grpc::Status)>) override;
      void GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, std::function<void(::grpc::Status)>) override;
      void BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, std::function<void(::grpc::Status)>) override;
      void ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, std::function<void(::grpc::Status)>) override;
      void GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, std::function<void(::grpc::Status)>) override;
      void GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) override;
      void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, std::function<void(::grpc::Status)>) override;
      void GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, std::function<void(::grpc::Status)>) override;
      void GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)>) override;
      void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)>) override;
      void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, std::function<void(::grpc::Status)>) override;
      void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)>) override;
      void ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)>) override;
      void GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, std::function<void(::grpc::Status)>) override;
      void GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) override;
      void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) override;
      void GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)>) override;
      void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, std::function<void(::grpc::Status)>) override;
      void GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)>) override;
      void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, std::function<void(::grpc::Status)>) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)>) override;
      void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) override;
      void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)>) override;
      void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) override;
      void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, std::function<void(::grpc::Status)>) override;
      void GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, std::function<void(::grpc::Status)>) override;
      void GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, std::function<void(::grpc::Status)>) override;
      void GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, std::function<void(::grpc::Status)>) override;
      void GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, std::function<void(::grpc::Status)>) override;
      void GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)>) override;
      void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)>) override;
      void CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)>) override;
      void CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) override;
      void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) override;
      void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)>) override;
      void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)>) override;
      void GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionFromPending(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionListFromPending(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetPendingSize(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>* AsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>* PrepareAsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>* AsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>* PrepareAsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Return>* AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Return>* PrepareAsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* PrepareAsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>* AsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>* PrepareAsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* PrepareAsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* AsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* PrepareAsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* PrepareAsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* AsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* PrepareAsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>* AsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>* PrepareAsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>* AsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>* PrepareAsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* AsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* PrepareAsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* AsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* PrepareAsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* AsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* PrepareAsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>* AsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Proposal>* PrepareAsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* AsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* PrepareAsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>* AsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>* PrepareAsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* AsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* AsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* AsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* AsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* PrepareAsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>* AsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>* PrepareAsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>* AsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>* PrepareAsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>* AsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>* PrepareAsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>* AsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>* PrepareAsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>* AsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>* PrepareAsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>* AsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>* PrepareAsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>* AsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>* PrepareAsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* AsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* PrepareAsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* AsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* AsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionFromPendingRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncGetTransactionFromPendingRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>* AsyncGetTransactionListFromPendingRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionIdList>* PrepareAsyncGetTransactionListFromPendingRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetPendingSizeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetPendingSizeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockBalanceTrace_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTransaction2_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAccountId_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAccount2_;
    const ::grpc::internal::RpcMethod rpcmethod_VoteWitnessAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEnergyLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_VoteWitnessAccount2_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAssetIssue_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAssetIssue2_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWitness_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWitness2_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount2_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWitness_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWitness2_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferAsset2_;
    const ::grpc::internal::RpcMethod rpcmethod_ParticipateAssetIssue_;
    const ::grpc::internal::RpcMethod rpcmethod_ParticipateAssetIssue2_;
    const ::grpc::internal::RpcMethod rpcmethod_FreezeBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_FreezeBalance2_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeBalance2_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_UnfreezeAsset2_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawBalance2_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAsset2_;
    const ::grpc::internal::RpcMethod rpcmethod_ProposalCreate_;
    const ::grpc::internal::RpcMethod rpcmethod_ProposalApprove_;
    const ::grpc::internal::RpcMethod rpcmethod_ProposalDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_BuyStorage_;
    const ::grpc::internal::RpcMethod rpcmethod_BuyStorageBytes_;
    const ::grpc::internal::RpcMethod rpcmethod_SellStorage_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeCreate_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeInject_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeWithdraw_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_MarketSellAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_MarketCancelOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderByAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketPriceByPair_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderListByPair_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketPairList_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountNet_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountResource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueListByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionCountByBlockNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLimitNext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLimitNext2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLatestNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByLatestNum2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionById_;
    const ::grpc::internal::RpcMethod rpcmethod_DeployContract_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContract_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContractInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerContract_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerConstantContract_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearContractABI_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWitnesses_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegatedResource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegatedResourceAccountIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProposals_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPaginatedProposalList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProposalById_;
    const ::grpc::internal::RpcMethod rpcmethod_ListExchanges_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPaginatedExchangeList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExchangeById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChainParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPaginatedAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextMaintenanceTime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionSign_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionSign2_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_EasyTransferAsset_;
    const ::grpc::internal::RpcMethod rpcmethod_EasyTransferAssetByPrivate_;
    const ::grpc::internal::RpcMethod rpcmethod_EasyTransfer_;
    const ::grpc::internal::RpcMethod rpcmethod_EasyTransferByPrivate_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionInfoById_;
    const ::grpc::internal::RpcMethod rpcmethod_AccountPermissionUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_AddSign_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionSignWeight_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionApprovedList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodeInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRewardInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBrokerageInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBrokerage_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateShieldedTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMerkleTreeVoucherInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanNoteByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanAndMarkNoteByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanNoteByOvk_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpendingKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExpandedSpendingKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAkFromAsk_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNkFromNsk_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIncomingViewingKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDiversifier_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNewShieldedAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetZenPaymentAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRcm_;
    const ::grpc::internal::RpcMethod rpcmethod_IsSpend_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetShieldTransactionHash_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSpendAuthSig_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateShieldNullifier_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateShieldedContractParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateShieldedContractParametersWithoutAsk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanShieldedTRC20NotesByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanShieldedTRC20NotesByOvk_;
    const ::grpc::internal::RpcMethod rpcmethod_IsShieldedTRC20ContractNoteSpent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTriggerInputForShieldedTRC20Contract_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCommonTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionInfoByBlockNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurnTrx_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionFromPending_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionListFromPending_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPendingSize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status GetAccountById(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status GetAccountBalance(::grpc::ServerContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response);
    virtual ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response);
    // Please use CreateTransaction2 instead of this function.
    virtual ::grpc::Status CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response);
    // Use this function instead of CreateTransaction.
    virtual ::grpc::Status CreateTransaction2(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response);
    // Please use UpdateAccount2 instead of this function.
    virtual ::grpc::Status UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response);
    virtual ::grpc::Status SetAccountId(::grpc::ServerContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response);
    // Use this function instead of UpdateAccount.
    virtual ::grpc::Status UpdateAccount2(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response);
    // Please use VoteWitnessAccount2 instead of this function.
    virtual ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response);
    // modify the consume_user_resource_percent
    virtual ::grpc::Status UpdateSetting(::grpc::ServerContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response);
    // modify the energy_limit
    virtual ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response);
    // Use this function instead of VoteWitnessAccount.
    virtual ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response);
    // Please use CreateAssetIssue2 instead of this function.
    virtual ::grpc::Status CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response);
    // Use this function instead of CreateAssetIssue.
    virtual ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response);
    // Please use UpdateWitness2 instead of this function.
    virtual ::grpc::Status UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response);
    // Use this function instead of UpdateWitness.
    virtual ::grpc::Status UpdateWitness2(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response);
    // Please use CreateAccount2 instead of this function.
    virtual ::grpc::Status CreateAccount(::grpc::ServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response);
    // Use this function instead of CreateAccount.
    virtual ::grpc::Status CreateAccount2(::grpc::ServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response);
    // Please use CreateWitness2 instead of this function.
    virtual ::grpc::Status CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response);
    // Use this function instead of CreateWitness.
    virtual ::grpc::Status CreateWitness2(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response);
    // Please use TransferAsset2 instead of this function.
    virtual ::grpc::Status TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response);
    // Use this function instead of TransferAsset.
    virtual ::grpc::Status TransferAsset2(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response);
    // Please use ParticipateAssetIssue2 instead of this function.
    virtual ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response);
    // Use this function instead of ParticipateAssetIssue.
    virtual ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response);
    // Please use FreezeBalance2 instead of this function.
    virtual ::grpc::Status FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response);
    // Use this function instead of FreezeBalance.
    virtual ::grpc::Status FreezeBalance2(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response);
    // Please use UnfreezeBalance2 instead of this function.
    virtual ::grpc::Status UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response);
    // Use this function instead of UnfreezeBalance.
    virtual ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response);
    // Please use UnfreezeAsset2 instead of this function.
    virtual ::grpc::Status UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response);
    // Use this function instead of UnfreezeAsset.
    virtual ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response);
    // Please use WithdrawBalance2 instead of this function.
    virtual ::grpc::Status WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response);
    // Use this function instead of WithdrawBalance.
    virtual ::grpc::Status WithdrawBalance2(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response);
    // Please use UpdateAsset2 instead of this function.
    virtual ::grpc::Status UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response);
    // Use this function instead of UpdateAsset.
    virtual ::grpc::Status UpdateAsset2(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ProposalCreate(::grpc::ServerContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ProposalApprove(::grpc::ServerContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ProposalDelete(::grpc::ServerContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status BuyStorage(::grpc::ServerContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status BuyStorageBytes(::grpc::ServerContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status SellStorage(::grpc::ServerContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ExchangeCreate(::grpc::ServerContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ExchangeInject(::grpc::ServerContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ExchangeTransaction(::grpc::ServerContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status MarketSellAsset(::grpc::ServerContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status MarketCancelOrder(::grpc::ServerContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetMarketOrderById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response);
    virtual ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response);
    virtual ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response);
    virtual ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response);
    virtual ::grpc::Status GetMarketPairList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response);
    virtual ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response);
    virtual ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response);
    virtual ::grpc::Status GetAccountResource(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response);
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    virtual ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    // Please use GetNowBlock2 instead of this function.
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    // Use this function instead of GetNowBlock.
    virtual ::grpc::Status GetNowBlock2(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response);
    // Please use GetBlockByNum2 instead of this function.
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
    // Use this function instead of GetBlockByNum.
    virtual ::grpc::Status GetBlockByNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response);
    virtual ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response);
    // Please use GetBlockByLimitNext2 instead of this function.
    virtual ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response);
    // Use this function instead of GetBlockByLimitNext.
    virtual ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response);
    // Please use GetBlockByLatestNum2 instead of this function.
    virtual ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response);
    // Use this function instead of GetBlockByLatestNum.
    virtual ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response);
    virtual ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response);
    virtual ::grpc::Status DeployContract(::grpc::ServerContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetContract(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response);
    virtual ::grpc::Status GetContractInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response);
    virtual ::grpc::Status TriggerContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status TriggerConstantContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ClearContractABI(::grpc::ServerContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response);
    virtual ::grpc::Status GetDelegatedResource(::grpc::ServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response);
    virtual ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response);
    virtual ::grpc::Status ListProposals(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response);
    virtual ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response);
    virtual ::grpc::Status GetProposalById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response);
    virtual ::grpc::Status ListExchanges(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response);
    virtual ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response);
    virtual ::grpc::Status GetExchangeById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response);
    virtual ::grpc::Status GetChainParameters(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response);
    virtual ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
    // Warning: do not invoke this interface provided by others.
    // Please use GetTransactionSign2 instead of this function.
    virtual ::grpc::Status GetTransactionSign(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response);
    // Warning: do not invoke this interface provided by others.
    // Use this function instead of GetTransactionSign.
    virtual ::grpc::Status GetTransactionSign2(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status CreateAddress(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferAsset(::grpc::ServerContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransfer(::grpc::ServerContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status GenerateAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response);
    virtual ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response);
    virtual ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status AddSign(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response);
    virtual ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response);
    virtual ::grpc::Status GetNodeInfo(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response);
    virtual ::grpc::Status GetRewardInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status UpdateBrokerage(::grpc::ServerContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response);
    // for shiededTransaction
    virtual ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response);
    virtual ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response);
    virtual ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response);
    virtual ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response);
    virtual ::grpc::Status GetSpendingKey(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response);
    virtual ::grpc::Status GetAkFromAsk(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status GetNkFromNsk(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response);
    virtual ::grpc::Status GetDiversifier(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response);
    virtual ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response);
    virtual ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response);
    virtual ::grpc::Status GetRcm(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status IsSpend(::grpc::ServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response);
    virtual ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response);
    // for shielded contract
    virtual ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response);
    virtual ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response);
    virtual ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response);
    virtual ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response);
    virtual ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response);
    virtual ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response);
    virtual ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response);
    virtual ::grpc::Status GetBurnTrx(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response);
    virtual ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response);
    virtual ::grpc::Status GetPendingSize(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountById() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountById(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountBalance(::grpc::ServerContext* context, ::protocol::AccountBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AccountBalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockBalanceTrace(::grpc::ServerContext* context, ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockBalanceTrace>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransaction(::grpc::ServerContext* context, ::protocol::TransferContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransaction2(::grpc::ServerContext* context, ::protocol::TransferContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTransaction(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Return>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount(::grpc::ServerContext* context, ::protocol::AccountUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAccountId() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAccountId(::grpc::ServerContext* context, ::protocol::SetAccountIdContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount2(::grpc::ServerContext* context, ::protocol::AccountUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWitnessAccount(::grpc::ServerContext* context, ::protocol::VoteWitnessContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSetting(::grpc::ServerContext* context, ::protocol::UpdateSettingContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEnergyLimit(::grpc::ServerContext* context, ::protocol::UpdateEnergyLimitContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWitnessAccount2(::grpc::ServerContext* context, ::protocol::VoteWitnessContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAssetIssue(::grpc::ServerContext* context, ::protocol::AssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAssetIssue2(::grpc::ServerContext* context, ::protocol::AssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWitness(::grpc::ServerContext* context, ::protocol::WitnessUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWitness2(::grpc::ServerContext* context, ::protocol::WitnessUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccount() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::protocol::AccountCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount2(::grpc::ServerContext* context, ::protocol::AccountCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWitness() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWitness(::grpc::ServerContext* context, ::protocol::WitnessCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWitness2(::grpc::ServerContext* context, ::protocol::WitnessCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferAsset() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferAsset(::grpc::ServerContext* context, ::protocol::TransferAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferAsset2(::grpc::ServerContext* context, ::protocol::TransferAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParticipateAssetIssue(::grpc::ServerContext* context, ::protocol::ParticipateAssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParticipateAssetIssue2(::grpc::ServerContext* context, ::protocol::ParticipateAssetIssueContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreezeBalance(::grpc::ServerContext* context, ::protocol::FreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreezeBalance2(::grpc::ServerContext* context, ::protocol::FreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeBalance(::grpc::ServerContext* context, ::protocol::UnfreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeBalance2(::grpc::ServerContext* context, ::protocol::UnfreezeBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeAsset(::grpc::ServerContext* context, ::protocol::UnfreezeAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeAsset2(::grpc::ServerContext* context, ::protocol::UnfreezeAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawBalance(::grpc::ServerContext* context, ::protocol::WithdrawBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawBalance2(::grpc::ServerContext* context, ::protocol::WithdrawBalanceContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAsset(::grpc::ServerContext* context, ::protocol::UpdateAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAsset2(::grpc::ServerContext* context, ::protocol::UpdateAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalCreate(::grpc::ServerContext* context, ::protocol::ProposalCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalApprove(::grpc::ServerContext* context, ::protocol::ProposalApproveContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalDelete(::grpc::ServerContext* context, ::protocol::ProposalDeleteContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BuyStorage() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyStorage(::grpc::ServerContext* context, ::protocol::BuyStorageContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyStorageBytes(::grpc::ServerContext* context, ::protocol::BuyStorageBytesContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SellStorage() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSellStorage(::grpc::ServerContext* context, ::protocol::SellStorageContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeCreate(::grpc::ServerContext* context, ::protocol::ExchangeCreateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeInject(::grpc::ServerContext* context, ::protocol::ExchangeInjectContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeWithdraw(::grpc::ServerContext* context, ::protocol::ExchangeWithdrawContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeTransaction(::grpc::ServerContext* context, ::protocol::ExchangeTransactionContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketSellAsset(::grpc::ServerContext* context, ::protocol::MarketSellAssetContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketCancelOrder(::grpc::ServerContext* context, ::protocol::MarketCancelOrderContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderByAccount(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPriceByPair(::grpc::ServerContext* context, ::protocol::MarketOrderPair* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketPriceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderListByPair(::grpc::ServerContext* context, ::protocol::MarketOrderPair* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPairList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderPairList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNodes() {
      ::grpc::Service::MarkMethodAsync(53);
    }
    ~WithAsyncMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodes(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NodeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodAsync(54);
    }
    ~WithAsyncMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodAsync(55);
    }
    ~WithAsyncMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountNet(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AccountNetMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodAsync(56);
    }
    ~WithAsyncMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountResource(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AccountResourceMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodAsync(57);
    }
    ~WithAsyncMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodAsync(58);
    }
    ~WithAsyncMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueListByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodAsync(59);
    }
    ~WithAsyncMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(60);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodAsync(61);
    }
    ~WithAsyncMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock2(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(62);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodAsync(63);
    }
    ~WithAsyncMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum2(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodAsync(64);
    }
    ~WithAsyncMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockById() {
      ::grpc::Service::MarkMethodAsync(65);
    }
    ~WithAsyncMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodAsync(66);
    }
    ~WithAsyncMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLimitNext(::grpc::ServerContext* context, ::protocol::BlockLimit* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodAsync(67);
    }
    ~WithAsyncMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLimitNext2(::grpc::ServerContext* context, ::protocol::BlockLimit* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockListExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodAsync(68);
    }
    ~WithAsyncMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLatestNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodAsync(69);
    }
    ~WithAsyncMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLatestNum2(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockListExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodAsync(70);
    }
    ~WithAsyncMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeployContract() {
      ::grpc::Service::MarkMethodAsync(71);
    }
    ~WithAsyncMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployContract(::grpc::ServerContext* context, ::protocol::CreateSmartContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContract() {
      ::grpc::Service::MarkMethodAsync(72);
    }
    ~WithAsyncMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContract(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::SmartContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodAsync(73);
    }
    ~WithAsyncMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContractInfo(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::SmartContractDataWrapper>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerContract() {
      ::grpc::Service::MarkMethodAsync(74);
    }
    ~WithAsyncMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerContract(::grpc::ServerContext* context, ::protocol::TriggerSmartContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodAsync(75);
    }
    ~WithAsyncMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerConstantContract(::grpc::ServerContext* context, ::protocol::TriggerSmartContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodAsync(76);
    }
    ~WithAsyncMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearContractABI(::grpc::ServerContext* context, ::protocol::ClearABIContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodAsync(77);
    }
    ~WithAsyncMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::WitnessList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodAsync(78);
    }
    ~WithAsyncMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResource(::grpc::ServerContext* context, ::protocol::DelegatedResourceMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DelegatedResourceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodAsync(79);
    }
    ~WithAsyncMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DelegatedResourceAccountIndex>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListProposals() {
      ::grpc::Service::MarkMethodAsync(80);
    }
    ~WithAsyncMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProposals(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ProposalList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodAsync(81);
    }
    ~WithAsyncMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedProposalList(::grpc::ServerContext* context, ::protocol::PaginatedMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ProposalList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProposalById() {
      ::grpc::Service::MarkMethodAsync(82);
    }
    ~WithAsyncMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProposalById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Proposal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListExchanges() {
      ::grpc::Service::MarkMethodAsync(83);
    }
    ~WithAsyncMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExchanges(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ExchangeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodAsync(84);
    }
    ~WithAsyncMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedExchangeList(::grpc::ServerContext* context, ::protocol::PaginatedMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ExchangeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodAsync(85);
    }
    ~WithAsyncMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExchangeById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Exchange>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodAsync(86);
    }
    ~WithAsyncMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChainParameters(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ChainParameters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(87);
    }
    ~WithAsyncMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(88);
    }
    ~WithAsyncMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::protocol::PaginatedMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodAsync(89);
    }
    ~WithAsyncMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTransaction(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodAsync(90);
    }
    ~WithAsyncMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextMaintenanceTime(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodAsync(91);
    }
    ~WithAsyncMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSign(::grpc::ServerContext* context, ::protocol::TransactionSign* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodAsync(92);
    }
    ~WithAsyncMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSign2(::grpc::ServerContext* context, ::protocol::TransactionSign* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAddress() {
      ::grpc::Service::MarkMethodAsync(93);
    }
    ~WithAsyncMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAddress(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodAsync(94);
    }
    ~WithAsyncMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferAsset(::grpc::ServerContext* context, ::protocol::EasyTransferAssetMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::EasyTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodAsync(95);
    }
    ~WithAsyncMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferAssetByPrivate(::grpc::ServerContext* context, ::protocol::EasyTransferAssetByPrivateMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::EasyTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodAsync(96);
    }
    ~WithAsyncMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransfer(::grpc::ServerContext* context, ::protocol::EasyTransferMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::EasyTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodAsync(97);
    }
    ~WithAsyncMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferByPrivate(::grpc::ServerContext* context, ::protocol::EasyTransferByPrivateMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::EasyTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodAsync(98);
    }
    ~WithAsyncMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAddress(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AddressPrKeyPairMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodAsync(99);
    }
    ~WithAsyncMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodAsync(100);
    }
    ~WithAsyncMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountPermissionUpdate(::grpc::ServerContext* context, ::protocol::AccountPermissionUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSign() {
      ::grpc::Service::MarkMethodAsync(101);
    }
    ~WithAsyncMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSign(::grpc::ServerContext* context, ::protocol::TransactionSign* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodAsync(102);
    }
    ~WithAsyncMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSignWeight(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionSignWeight>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodAsync(103);
    }
    ~WithAsyncMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionApprovedList(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionApprovedList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodAsync(104);
    }
    ~WithAsyncMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NodeInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodAsync(105);
    }
    ~WithAsyncMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRewardInfo(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodAsync(106);
    }
    ~WithAsyncMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBrokerageInfo(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodAsync(107);
    }
    ~WithAsyncMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBrokerage(::grpc::ServerContext* context, ::protocol::UpdateBrokerageContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodAsync(108);
    }
    ~WithAsyncMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedTransaction(::grpc::ServerContext* context, ::protocol::PrivateParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodAsync(109);
    }
    ~WithAsyncMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::protocol::OutputPointInfo* request, ::grpc::ServerAsyncResponseWriter< ::protocol::IncrementalMerkleVoucherInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodAsync(110);
    }
    ~WithAsyncMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodAsync(111);
    }
    ~WithAsyncMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptAndMarkParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesMarked>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodAsync(112);
    }
    ~WithAsyncMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByOvk(::grpc::ServerContext* context, ::protocol::OvkDecryptParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodAsync(113);
    }
    ~WithAsyncMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpendingKey(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodAsync(114);
    }
    ~WithAsyncMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExpandedSpendingKey(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ExpandedSpendingKeyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodAsync(115);
    }
    ~WithAsyncMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAkFromAsk(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodAsync(116);
    }
    ~WithAsyncMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNkFromNsk(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodAsync(117);
    }
    ~WithAsyncMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIncomingViewingKey(::grpc::ServerContext* context, ::protocol::ViewingKeyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::IncomingViewingKeyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodAsync(118);
    }
    ~WithAsyncMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiversifier(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DiversifierMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodAsync(119);
    }
    ~WithAsyncMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewShieldedAddress(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ShieldedAddressInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodAsync(120);
    }
    ~WithAsyncMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetZenPaymentAddress(::grpc::ServerContext* context, ::protocol::IncomingViewingKeyDiversifierMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::PaymentAddressMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRcm() {
      ::grpc::Service::MarkMethodAsync(121);
    }
    ~WithAsyncMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRcm(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsSpend() {
      ::grpc::Service::MarkMethodAsync(122);
    }
    ~WithAsyncMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSpend(::grpc::ServerContext* context, ::protocol::NoteParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::SpendResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodAsync(123);
    }
    ~WithAsyncMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* context, ::protocol::PrivateParametersWithoutAsk* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodAsync(124);
    }
    ~WithAsyncMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShieldTransactionHash(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodAsync(125);
    }
    ~WithAsyncMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpendAuthSig(::grpc::ServerContext* context, ::protocol::SpendAuthSigParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodAsync(126);
    }
    ~WithAsyncMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldNullifier(::grpc::ServerContext* context, ::protocol::NfParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodAsync(127);
    }
    ~WithAsyncMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedContractParameters(::grpc::ServerContext* context, ::protocol::PrivateShieldedTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ShieldedTRC20Parameters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodAsync(128);
    }
    ~WithAsyncMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* context, ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ShieldedTRC20Parameters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodAsync(129);
    }
    ~WithAsyncMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesTRC20>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodAsync(130);
    }
    ~WithAsyncMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::protocol::OvkDecryptTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesTRC20>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodAsync(131);
    }
    ~WithAsyncMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::protocol::NfTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NullifierResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodAsync(132);
    }
    ~WithAsyncMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* context, ::protocol::ShieldedTRC20TriggerContractParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BytesMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(132, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodAsync(133);
    }
    ~WithAsyncMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommonTransaction(::grpc::ServerContext* context, ::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(133, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodAsync(134);
    }
    ~WithAsyncMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionInfoList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(134, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodAsync(135);
    }
    ~WithAsyncMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurnTrx(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(135, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodAsync(136);
    }
    ~WithAsyncMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionFromPending(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(136, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodAsync(137);
    }
    ~WithAsyncMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionListFromPending(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionIdList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(137, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodAsync(138);
    }
    ~WithAsyncMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPendingSize(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(138, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccount<WithAsyncMethod_GetAccountById<WithAsyncMethod_GetAccountBalance<WithAsyncMethod_GetBlockBalanceTrace<WithAsyncMethod_CreateTransaction<WithAsyncMethod_CreateTransaction2<WithAsyncMethod_BroadcastTransaction<WithAsyncMethod_UpdateAccount<WithAsyncMethod_SetAccountId<WithAsyncMethod_UpdateAccount2<WithAsyncMethod_VoteWitnessAccount<WithAsyncMethod_UpdateSetting<WithAsyncMethod_UpdateEnergyLimit<WithAsyncMethod_VoteWitnessAccount2<WithAsyncMethod_CreateAssetIssue<WithAsyncMethod_CreateAssetIssue2<WithAsyncMethod_UpdateWitness<WithAsyncMethod_UpdateWitness2<WithAsyncMethod_CreateAccount<WithAsyncMethod_CreateAccount2<WithAsyncMethod_CreateWitness<WithAsyncMethod_CreateWitness2<WithAsyncMethod_TransferAsset<WithAsyncMethod_TransferAsset2<WithAsyncMethod_ParticipateAssetIssue<WithAsyncMethod_ParticipateAssetIssue2<WithAsyncMethod_FreezeBalance<WithAsyncMethod_FreezeBalance2<WithAsyncMethod_UnfreezeBalance<WithAsyncMethod_UnfreezeBalance2<WithAsyncMethod_UnfreezeAsset<WithAsyncMethod_UnfreezeAsset2<WithAsyncMethod_WithdrawBalance<WithAsyncMethod_WithdrawBalance2<WithAsyncMethod_UpdateAsset<WithAsyncMethod_UpdateAsset2<WithAsyncMethod_ProposalCreate<WithAsyncMethod_ProposalApprove<WithAsyncMethod_ProposalDelete<WithAsyncMethod_BuyStorage<WithAsyncMethod_BuyStorageBytes<WithAsyncMethod_SellStorage<WithAsyncMethod_ExchangeCreate<WithAsyncMethod_ExchangeInject<WithAsyncMethod_ExchangeWithdraw<WithAsyncMethod_ExchangeTransaction<WithAsyncMethod_MarketSellAsset<WithAsyncMethod_MarketCancelOrder<WithAsyncMethod_GetMarketOrderById<WithAsyncMethod_GetMarketOrderByAccount<WithAsyncMethod_GetMarketPriceByPair<WithAsyncMethod_GetMarketOrderListByPair<WithAsyncMethod_GetMarketPairList<WithAsyncMethod_ListNodes<WithAsyncMethod_GetAssetIssueByAccount<WithAsyncMethod_GetAccountNet<WithAsyncMethod_GetAccountResource<WithAsyncMethod_GetAssetIssueByName<WithAsyncMethod_GetAssetIssueListByName<WithAsyncMethod_GetAssetIssueById<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetNowBlock2<WithAsyncMethod_GetBlockByNum<WithAsyncMethod_GetBlockByNum2<WithAsyncMethod_GetTransactionCountByBlockNum<WithAsyncMethod_GetBlockById<WithAsyncMethod_GetBlockByLimitNext<WithAsyncMethod_GetBlockByLimitNext2<WithAsyncMethod_GetBlockByLatestNum<WithAsyncMethod_GetBlockByLatestNum2<WithAsyncMethod_GetTransactionById<WithAsyncMethod_DeployContract<WithAsyncMethod_GetContract<WithAsyncMethod_GetContractInfo<WithAsyncMethod_TriggerContract<WithAsyncMethod_TriggerConstantContract<WithAsyncMethod_ClearContractABI<WithAsyncMethod_ListWitnesses<WithAsyncMethod_GetDelegatedResource<WithAsyncMethod_GetDelegatedResourceAccountIndex<WithAsyncMethod_ListProposals<WithAsyncMethod_GetPaginatedProposalList<WithAsyncMethod_GetProposalById<WithAsyncMethod_ListExchanges<WithAsyncMethod_GetPaginatedExchangeList<WithAsyncMethod_GetExchangeById<WithAsyncMethod_GetChainParameters<WithAsyncMethod_GetAssetIssueList<WithAsyncMethod_GetPaginatedAssetIssueList<WithAsyncMethod_TotalTransaction<WithAsyncMethod_GetNextMaintenanceTime<WithAsyncMethod_GetTransactionSign<WithAsyncMethod_GetTransactionSign2<WithAsyncMethod_CreateAddress<WithAsyncMethod_EasyTransferAsset<WithAsyncMethod_EasyTransferAssetByPrivate<WithAsyncMethod_EasyTransfer<WithAsyncMethod_EasyTransferByPrivate<WithAsyncMethod_GenerateAddress<WithAsyncMethod_GetTransactionInfoById<WithAsyncMethod_AccountPermissionUpdate<WithAsyncMethod_AddSign<WithAsyncMethod_GetTransactionSignWeight<WithAsyncMethod_GetTransactionApprovedList<WithAsyncMethod_GetNodeInfo<WithAsyncMethod_GetRewardInfo<WithAsyncMethod_GetBrokerageInfo<WithAsyncMethod_UpdateBrokerage<WithAsyncMethod_CreateShieldedTransaction<WithAsyncMethod_GetMerkleTreeVoucherInfo<WithAsyncMethod_ScanNoteByIvk<WithAsyncMethod_ScanAndMarkNoteByIvk<WithAsyncMethod_ScanNoteByOvk<WithAsyncMethod_GetSpendingKey<WithAsyncMethod_GetExpandedSpendingKey<WithAsyncMethod_GetAkFromAsk<WithAsyncMethod_GetNkFromNsk<WithAsyncMethod_GetIncomingViewingKey<WithAsyncMethod_GetDiversifier<WithAsyncMethod_GetNewShieldedAddress<WithAsyncMethod_GetZenPaymentAddress<WithAsyncMethod_GetRcm<WithAsyncMethod_IsSpend<WithAsyncMethod_CreateShieldedTransactionWithoutSpendAuthSig<WithAsyncMethod_GetShieldTransactionHash<WithAsyncMethod_CreateSpendAuthSig<WithAsyncMethod_CreateShieldNullifier<WithAsyncMethod_CreateShieldedContractParameters<WithAsyncMethod_CreateShieldedContractParametersWithoutAsk<WithAsyncMethod_ScanShieldedTRC20NotesByIvk<WithAsyncMethod_ScanShieldedTRC20NotesByOvk<WithAsyncMethod_IsShieldedTRC20ContractNoteSpent<WithAsyncMethod_GetTriggerInputForShieldedTRC20Contract<WithAsyncMethod_CreateCommonTransaction<WithAsyncMethod_GetTransactionInfoByBlockNum<WithAsyncMethod_GetBurnTrx<WithAsyncMethod_GetTransactionFromPending<WithAsyncMethod_GetTransactionListFromPending<WithAsyncMethod_GetPendingSize<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) { return this->GetAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccount(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::Account>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountById() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) { return this->GetAccountById(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountById(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::Account>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response) { return this->GetAccountBalance(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountBalance(
        ::grpc::MessageAllocator< ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response) { return this->GetBlockBalanceTrace(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockBalanceTrace(
        ::grpc::MessageAllocator< ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockBalanceTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransferContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) { return this->CreateTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTransaction(
        ::grpc::MessageAllocator< ::protocol::TransferContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransferContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransferContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response) { return this->CreateTransaction2(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTransaction2(
        ::grpc::MessageAllocator< ::protocol::TransferContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransferContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTransaction2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::Return>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) { return this->BroadcastTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_BroadcastTransaction(
        ::grpc::MessageAllocator< ::protocol::Transaction, ::protocol::Return>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::Return>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountUpdateContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) { return this->UpdateAccount(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAccount(
        ::grpc::MessageAllocator< ::protocol::AccountUpdateContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountUpdateContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAccountId() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::SetAccountIdContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response) { return this->SetAccountId(context, request, response); }));}
    void SetMessageAllocatorFor_SetAccountId(
        ::grpc::MessageAllocator< ::protocol::SetAccountIdContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::SetAccountIdContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAccountId(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountUpdateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response) { return this->UpdateAccount2(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAccount2(
        ::grpc::MessageAllocator< ::protocol::AccountUpdateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountUpdateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::VoteWitnessContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) { return this->VoteWitnessAccount(context, request, response); }));}
    void SetMessageAllocatorFor_VoteWitnessAccount(
        ::grpc::MessageAllocator< ::protocol::VoteWitnessContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::VoteWitnessContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWitnessAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateSettingContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response) { return this->UpdateSetting(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSetting(
        ::grpc::MessageAllocator< ::protocol::UpdateSettingContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateSettingContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response) { return this->UpdateEnergyLimit(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateEnergyLimit(
        ::grpc::MessageAllocator< ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEnergyLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::VoteWitnessContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response) { return this->VoteWitnessAccount2(context, request, response); }));}
    void SetMessageAllocatorFor_VoteWitnessAccount2(
        ::grpc::MessageAllocator< ::protocol::VoteWitnessContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::VoteWitnessContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWitnessAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AssetIssueContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) { return this->CreateAssetIssue(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAssetIssue(
        ::grpc::MessageAllocator< ::protocol::AssetIssueContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AssetIssueContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAssetIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AssetIssueContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response) { return this->CreateAssetIssue2(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAssetIssue2(
        ::grpc::MessageAllocator< ::protocol::AssetIssueContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AssetIssueContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAssetIssue2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessUpdateContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) { return this->UpdateWitness(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWitness(
        ::grpc::MessageAllocator< ::protocol::WitnessUpdateContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessUpdateContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWitness(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response) { return this->UpdateWitness2(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWitness2(
        ::grpc::MessageAllocator< ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWitness2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountCreateContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response) { return this->CreateAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccount(
        ::grpc::MessageAllocator< ::protocol::AccountCreateContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountCreateContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountCreateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response) { return this->CreateAccount2(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccount2(
        ::grpc::MessageAllocator< ::protocol::AccountCreateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountCreateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateWitness() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessCreateContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) { return this->CreateWitness(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWitness(
        ::grpc::MessageAllocator< ::protocol::WitnessCreateContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessCreateContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWitness(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessCreateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response) { return this->CreateWitness2(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWitness2(
        ::grpc::MessageAllocator< ::protocol::WitnessCreateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WitnessCreateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWitness2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferAsset() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransferAssetContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) { return this->TransferAsset(context, request, response); }));}
    void SetMessageAllocatorFor_TransferAsset(
        ::grpc::MessageAllocator< ::protocol::TransferAssetContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransferAssetContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransferAssetContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response) { return this->TransferAsset2(context, request, response); }));}
    void SetMessageAllocatorFor_TransferAsset2(
        ::grpc::MessageAllocator< ::protocol::TransferAssetContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransferAssetContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) { return this->ParticipateAssetIssue(context, request, response); }));}
    void SetMessageAllocatorFor_ParticipateAssetIssue(
        ::grpc::MessageAllocator< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ParticipateAssetIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response) { return this->ParticipateAssetIssue2(context, request, response); }));}
    void SetMessageAllocatorFor_ParticipateAssetIssue2(
        ::grpc::MessageAllocator< ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ParticipateAssetIssue2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::FreezeBalanceContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) { return this->FreezeBalance(context, request, response); }));}
    void SetMessageAllocatorFor_FreezeBalance(
        ::grpc::MessageAllocator< ::protocol::FreezeBalanceContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::FreezeBalanceContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreezeBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response) { return this->FreezeBalance2(context, request, response); }));}
    void SetMessageAllocatorFor_FreezeBalance2(
        ::grpc::MessageAllocator< ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreezeBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) { return this->UnfreezeBalance(context, request, response); }));}
    void SetMessageAllocatorFor_UnfreezeBalance(
        ::grpc::MessageAllocator< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response) { return this->UnfreezeBalance2(context, request, response); }));}
    void SetMessageAllocatorFor_UnfreezeBalance2(
        ::grpc::MessageAllocator< ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeAssetContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) { return this->UnfreezeAsset(context, request, response); }));}
    void SetMessageAllocatorFor_UnfreezeAsset(
        ::grpc::MessageAllocator< ::protocol::UnfreezeAssetContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeAssetContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response) { return this->UnfreezeAsset2(context, request, response); }));}
    void SetMessageAllocatorFor_UnfreezeAsset2(
        ::grpc::MessageAllocator< ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WithdrawBalanceContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) { return this->WithdrawBalance(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawBalance(
        ::grpc::MessageAllocator< ::protocol::WithdrawBalanceContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WithdrawBalanceContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response) { return this->WithdrawBalance2(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawBalance2(
        ::grpc::MessageAllocator< ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateAssetContract, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) { return this->UpdateAsset(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAsset(
        ::grpc::MessageAllocator< ::protocol::UpdateAssetContract, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateAssetContract, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateAssetContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response) { return this->UpdateAsset2(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAsset2(
        ::grpc::MessageAllocator< ::protocol::UpdateAssetContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateAssetContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalCreateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response) { return this->ProposalCreate(context, request, response); }));}
    void SetMessageAllocatorFor_ProposalCreate(
        ::grpc::MessageAllocator< ::protocol::ProposalCreateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalCreateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalApproveContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response) { return this->ProposalApprove(context, request, response); }));}
    void SetMessageAllocatorFor_ProposalApprove(
        ::grpc::MessageAllocator< ::protocol::ProposalApproveContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalApproveContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalApprove(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response) { return this->ProposalDelete(context, request, response); }));}
    void SetMessageAllocatorFor_ProposalDelete(
        ::grpc::MessageAllocator< ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BuyStorage() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BuyStorageContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response) { return this->BuyStorage(context, request, response); }));}
    void SetMessageAllocatorFor_BuyStorage(
        ::grpc::MessageAllocator< ::protocol::BuyStorageContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BuyStorageContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BuyStorage(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response) { return this->BuyStorageBytes(context, request, response); }));}
    void SetMessageAllocatorFor_BuyStorageBytes(
        ::grpc::MessageAllocator< ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BuyStorageBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SellStorage() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::SellStorageContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response) { return this->SellStorage(context, request, response); }));}
    void SetMessageAllocatorFor_SellStorage(
        ::grpc::MessageAllocator< ::protocol::SellStorageContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::SellStorageContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SellStorage(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response) { return this->ExchangeCreate(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeCreate(
        ::grpc::MessageAllocator< ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response) { return this->ExchangeInject(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeInject(
        ::grpc::MessageAllocator< ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeInject(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response) { return this->ExchangeWithdraw(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeWithdraw(
        ::grpc::MessageAllocator< ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeWithdraw(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response) { return this->ExchangeTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeTransaction(
        ::grpc::MessageAllocator< ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response) { return this->MarketSellAsset(context, request, response); }));}
    void SetMessageAllocatorFor_MarketSellAsset(
        ::grpc::MessageAllocator< ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarketSellAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response) { return this->MarketCancelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_MarketCancelOrder(
        ::grpc::MessageAllocator< ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarketCancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrder>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response) { return this->GetMarketOrderById(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::MarketOrder>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrder>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response) { return this->GetMarketOrderByAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderByAccount(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::MarketOrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response) { return this->GetMarketPriceByPair(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketPriceByPair(
        ::grpc::MessageAllocator< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPriceByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response) { return this->GetMarketOrderListByPair(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderListByPair(
        ::grpc::MessageAllocator< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderListByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response) { return this->GetMarketPairList(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketPairList(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPairList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNodes() {
      ::grpc::Service::MarkMethodCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NodeList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) { return this->ListNodes(context, request, response); }));}
    void SetMessageAllocatorFor_ListNodes(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NodeList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(53);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NodeList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) { return this->GetAssetIssueByAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueByAccount(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(54);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AccountNetMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) { return this->GetAccountNet(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountNet(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::AccountNetMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(55);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AccountNetMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountNet(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AccountResourceMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response) { return this->GetAccountResource(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountResource(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::AccountResourceMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(56);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::AccountResourceMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountResource(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) { return this->GetAssetIssueByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueByName(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueContract>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(57);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByName(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response) { return this->GetAssetIssueListByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueListByName(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(58);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueListByName(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) { return this->GetAssetIssueById(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueContract>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(59);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) { return this->GetNowBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetNowBlock(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(60);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response) { return this->GetNowBlock2(context, request, response); }));}
    void SetMessageAllocatorFor_GetNowBlock2(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::BlockExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(61);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) { return this->GetBlockByNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(62);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response) { return this->GetBlockByNum2(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByNum2(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::BlockExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(63);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response) { return this->GetTransactionCountByBlockNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionCountByBlockNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(64);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionCountByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockById() {
      ::grpc::Service::MarkMethodCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) { return this->GetBlockById(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(65);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BlockLimit, ::protocol::BlockList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) { return this->GetBlockByLimitNext(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByLimitNext(
        ::grpc::MessageAllocator< ::protocol::BlockLimit, ::protocol::BlockList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(66);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BlockLimit, ::protocol::BlockList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLimitNext(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BlockLimit, ::protocol::BlockListExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response) { return this->GetBlockByLimitNext2(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByLimitNext2(
        ::grpc::MessageAllocator< ::protocol::BlockLimit, ::protocol::BlockListExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(67);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BlockLimit, ::protocol::BlockListExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLimitNext2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) { return this->GetBlockByLatestNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByLatestNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::BlockList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(68);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLatestNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockListExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response) { return this->GetBlockByLatestNum2(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByLatestNum2(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::BlockListExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(69);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockListExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLatestNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) { return this->GetTransactionById(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(70);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeployContract() {
      ::grpc::Service::MarkMethodCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::CreateSmartContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response) { return this->DeployContract(context, request, response); }));}
    void SetMessageAllocatorFor_DeployContract(
        ::grpc::MessageAllocator< ::protocol::CreateSmartContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(71);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::CreateSmartContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeployContract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContract() {
      ::grpc::Service::MarkMethodCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::SmartContract>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response) { return this->GetContract(context, request, response); }));}
    void SetMessageAllocatorFor_GetContract(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::SmartContract>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(72);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::SmartContract>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response) { return this->GetContractInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetContractInfo(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(73);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContractInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerContract() {
      ::grpc::Service::MarkMethodCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) { return this->TriggerContract(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerContract(
        ::grpc::MessageAllocator< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(74);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerContract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) { return this->TriggerConstantContract(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerConstantContract(
        ::grpc::MessageAllocator< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(75);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerConstantContract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ClearABIContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response) { return this->ClearContractABI(context, request, response); }));}
    void SetMessageAllocatorFor_ClearContractABI(
        ::grpc::MessageAllocator< ::protocol::ClearABIContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(76);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ClearABIContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearContractABI(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) { return this->ListWitnesses(context, request, response); }));}
    void SetMessageAllocatorFor_ListWitnesses(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::WitnessList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(77);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWitnesses(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response) { return this->GetDelegatedResource(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegatedResource(
        ::grpc::MessageAllocator< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(78);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response) { return this->GetDelegatedResourceAccountIndex(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegatedResourceAccountIndex(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(79);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResourceAccountIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListProposals() {
      ::grpc::Service::MarkMethodCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ProposalList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response) { return this->ListProposals(context, request, response); }));}
    void SetMessageAllocatorFor_ListProposals(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::ProposalList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(80);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ProposalList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListProposals(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::ProposalList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response) { return this->GetPaginatedProposalList(context, request, response); }));}
    void SetMessageAllocatorFor_GetPaginatedProposalList(
        ::grpc::MessageAllocator< ::protocol::PaginatedMessage, ::protocol::ProposalList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(81);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::ProposalList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedProposalList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProposalById() {
      ::grpc::Service::MarkMethodCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Proposal>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response) { return this->GetProposalById(context, request, response); }));}
    void SetMessageAllocatorFor_GetProposalById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Proposal>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(82);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Proposal>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProposalById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListExchanges() {
      ::grpc::Service::MarkMethodCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ExchangeList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response) { return this->ListExchanges(context, request, response); }));}
    void SetMessageAllocatorFor_ListExchanges(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::ExchangeList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(83);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ExchangeList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::ExchangeList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response) { return this->GetPaginatedExchangeList(context, request, response); }));}
    void SetMessageAllocatorFor_GetPaginatedExchangeList(
        ::grpc::MessageAllocator< ::protocol::PaginatedMessage, ::protocol::ExchangeList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(84);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::ExchangeList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedExchangeList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Exchange>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response) { return this->GetExchangeById(context, request, response); }));}
    void SetMessageAllocatorFor_GetExchangeById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Exchange>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(85);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Exchange>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExchangeById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ChainParameters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response) { return this->GetChainParameters(context, request, response); }));}
    void SetMessageAllocatorFor_GetChainParameters(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::ChainParameters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(86);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ChainParameters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChainParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) { return this->GetAssetIssueList(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueList(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(87);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response) { return this->GetPaginatedAssetIssueList(context, request, response); }));}
    void SetMessageAllocatorFor_GetPaginatedAssetIssueList(
        ::grpc::MessageAllocator< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(88);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) { return this->TotalTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_TotalTransaction(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(89);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) { return this->GetNextMaintenanceTime(context, request, response); }));}
    void SetMessageAllocatorFor_GetNextMaintenanceTime(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(90);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNextMaintenanceTime(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response) { return this->GetTransactionSign(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionSign(
        ::grpc::MessageAllocator< ::protocol::TransactionSign, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(91);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSign(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response) { return this->GetTransactionSign2(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionSign2(
        ::grpc::MessageAllocator< ::protocol::TransactionSign, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(92);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSign2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAddress() {
      ::grpc::Service::MarkMethodCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) { return this->CreateAddress(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAddress(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(93);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response) { return this->EasyTransferAsset(context, request, response); }));}
    void SetMessageAllocatorFor_EasyTransferAsset(
        ::grpc::MessageAllocator< ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(94);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response) { return this->EasyTransferAssetByPrivate(context, request, response); }));}
    void SetMessageAllocatorFor_EasyTransferAssetByPrivate(
        ::grpc::MessageAllocator< ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(95);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferAssetByPrivate(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response) { return this->EasyTransfer(context, request, response); }));}
    void SetMessageAllocatorFor_EasyTransfer(
        ::grpc::MessageAllocator< ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(96);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response) { return this->EasyTransferByPrivate(context, request, response); }));}
    void SetMessageAllocatorFor_EasyTransferByPrivate(
        ::grpc::MessageAllocator< ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(97);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferByPrivate(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response) { return this->GenerateAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateAddress(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(98);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::TransactionInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response) { return this->GetTransactionInfoById(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionInfoById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::TransactionInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(99);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::TransactionInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response) { return this->AccountPermissionUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_AccountPermissionUpdate(
        ::grpc::MessageAllocator< ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(100);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountPermissionUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddSign() {
      ::grpc::Service::MarkMethodCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response) { return this->AddSign(context, request, response); }));}
    void SetMessageAllocatorFor_AddSign(
        ::grpc::MessageAllocator< ::protocol::TransactionSign, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(101);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TransactionSign, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSign(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionSignWeight>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response) { return this->GetTransactionSignWeight(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionSignWeight(
        ::grpc::MessageAllocator< ::protocol::Transaction, ::protocol::TransactionSignWeight>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(102);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionSignWeight>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSignWeight(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionApprovedList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response) { return this->GetTransactionApprovedList(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionApprovedList(
        ::grpc::MessageAllocator< ::protocol::Transaction, ::protocol::TransactionApprovedList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(103);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionApprovedList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionApprovedList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NodeInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response) { return this->GetNodeInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodeInfo(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NodeInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(104);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NodeInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) { return this->GetRewardInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRewardInfo(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(105);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRewardInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) { return this->GetBrokerageInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetBrokerageInfo(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(106);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBrokerageInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response) { return this->UpdateBrokerage(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateBrokerage(
        ::grpc::MessageAllocator< ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(107);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateBrokerage(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateParameters, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response) { return this->CreateShieldedTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_CreateShieldedTransaction(
        ::grpc::MessageAllocator< ::protocol::PrivateParameters, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(108);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateParameters, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response) { return this->GetMerkleTreeVoucherInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetMerkleTreeVoucherInfo(
        ::grpc::MessageAllocator< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(109);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMerkleTreeVoucherInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response) { return this->ScanNoteByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanNoteByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(110);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response) { return this->ScanAndMarkNoteByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanAndMarkNoteByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(111);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanAndMarkNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response) { return this->ScanNoteByOvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanNoteByOvk(
        ::grpc::MessageAllocator< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(112);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response) { return this->GetSpendingKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpendingKey(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(113);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpendingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response) { return this->GetExpandedSpendingKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetExpandedSpendingKey(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(114);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExpandedSpendingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) { return this->GetAkFromAsk(context, request, response); }));}
    void SetMessageAllocatorFor_GetAkFromAsk(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(115);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAkFromAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) { return this->GetNkFromNsk(context, request, response); }));}
    void SetMessageAllocatorFor_GetNkFromNsk(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(116);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNkFromNsk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response) { return this->GetIncomingViewingKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetIncomingViewingKey(
        ::grpc::MessageAllocator< ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(117);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIncomingViewingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::DiversifierMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response) { return this->GetDiversifier(context, request, response); }));}
    void SetMessageAllocatorFor_GetDiversifier(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::DiversifierMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(118);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::DiversifierMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDiversifier(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response) { return this->GetNewShieldedAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetNewShieldedAddress(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(119);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNewShieldedAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response) { return this->GetZenPaymentAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetZenPaymentAddress(
        ::grpc::MessageAllocator< ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(120);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetZenPaymentAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRcm() {
      ::grpc::Service::MarkMethodCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response) { return this->GetRcm(context, request, response); }));}
    void SetMessageAllocatorFor_GetRcm(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(121);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRcm(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsSpend() {
      ::grpc::Service::MarkMethodCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NoteParameters, ::protocol::SpendResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response) { return this->IsSpend(context, request, response); }));}
    void SetMessageAllocatorFor_IsSpend(
        ::grpc::MessageAllocator< ::protocol::NoteParameters, ::protocol::SpendResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(122);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NoteParameters, ::protocol::SpendResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response) { return this->CreateShieldedTransactionWithoutSpendAuthSig(context, request, response); }));}
    void SetMessageAllocatorFor_CreateShieldedTransactionWithoutSpendAuthSig(
        ::grpc::MessageAllocator< ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(123);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedTransactionWithoutSpendAuthSig(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response) { return this->GetShieldTransactionHash(context, request, response); }));}
    void SetMessageAllocatorFor_GetShieldTransactionHash(
        ::grpc::MessageAllocator< ::protocol::Transaction, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(124);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShieldTransactionHash(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response) { return this->CreateSpendAuthSig(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSpendAuthSig(
        ::grpc::MessageAllocator< ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(125);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSpendAuthSig(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NfParameters, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response) { return this->CreateShieldNullifier(context, request, response); }));}
    void SetMessageAllocatorFor_CreateShieldNullifier(
        ::grpc::MessageAllocator< ::protocol::NfParameters, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(126);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NfParameters, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldNullifier(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response) { return this->CreateShieldedContractParameters(context, request, response); }));}
    void SetMessageAllocatorFor_CreateShieldedContractParameters(
        ::grpc::MessageAllocator< ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(127);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedContractParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response) { return this->CreateShieldedContractParametersWithoutAsk(context, request, response); }));}
    void SetMessageAllocatorFor_CreateShieldedContractParametersWithoutAsk(
        ::grpc::MessageAllocator< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(128);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedContractParametersWithoutAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) { return this->ScanShieldedTRC20NotesByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanShieldedTRC20NotesByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(129);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) { return this->ScanShieldedTRC20NotesByOvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanShieldedTRC20NotesByOvk(
        ::grpc::MessageAllocator< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(130);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response) { return this->IsShieldedTRC20ContractNoteSpent(context, request, response); }));}
    void SetMessageAllocatorFor_IsShieldedTRC20ContractNoteSpent(
        ::grpc::MessageAllocator< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(131);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsShieldedTRC20ContractNoteSpent(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodCallback(132,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response) { return this->GetTriggerInputForShieldedTRC20Contract(context, request, response); }));}
    void SetMessageAllocatorFor_GetTriggerInputForShieldedTRC20Contract(
        ::grpc::MessageAllocator< ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(132);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTriggerInputForShieldedTRC20Contract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodCallback(133,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response) { return this->CreateCommonTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCommonTransaction(
        ::grpc::MessageAllocator< ::protocol::Transaction, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(133);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Transaction, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommonTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodCallback(134,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::TransactionInfoList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response) { return this->GetTransactionInfoByBlockNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionInfoByBlockNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::TransactionInfoList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(134);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::TransactionInfoList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodCallback(135,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) { return this->GetBurnTrx(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurnTrx(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(135);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBurnTrx(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodCallback(136,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) { return this->GetTransactionFromPending(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionFromPending(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(136);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionFromPending(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodCallback(137,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::TransactionIdList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::TransactionIdList* response) { return this->GetTransactionListFromPending(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionListFromPending(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::TransactionIdList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(137);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::TransactionIdList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionListFromPending(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodCallback(138,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) { return this->GetPendingSize(context, request, response); }));}
    void SetMessageAllocatorFor_GetPendingSize(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(138);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPendingSize(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAccount<WithCallbackMethod_GetAccountById<WithCallbackMethod_GetAccountBalance<WithCallbackMethod_GetBlockBalanceTrace<WithCallbackMethod_CreateTransaction<WithCallbackMethod_CreateTransaction2<WithCallbackMethod_BroadcastTransaction<WithCallbackMethod_UpdateAccount<WithCallbackMethod_SetAccountId<WithCallbackMethod_UpdateAccount2<WithCallbackMethod_VoteWitnessAccount<WithCallbackMethod_UpdateSetting<WithCallbackMethod_UpdateEnergyLimit<WithCallbackMethod_VoteWitnessAccount2<WithCallbackMethod_CreateAssetIssue<WithCallbackMethod_CreateAssetIssue2<WithCallbackMethod_UpdateWitness<WithCallbackMethod_UpdateWitness2<WithCallbackMethod_CreateAccount<WithCallbackMethod_CreateAccount2<WithCallbackMethod_CreateWitness<WithCallbackMethod_CreateWitness2<WithCallbackMethod_TransferAsset<WithCallbackMethod_TransferAsset2<WithCallbackMethod_ParticipateAssetIssue<WithCallbackMethod_ParticipateAssetIssue2<WithCallbackMethod_FreezeBalance<WithCallbackMethod_FreezeBalance2<WithCallbackMethod_UnfreezeBalance<WithCallbackMethod_UnfreezeBalance2<WithCallbackMethod_UnfreezeAsset<WithCallbackMethod_UnfreezeAsset2<WithCallbackMethod_WithdrawBalance<WithCallbackMethod_WithdrawBalance2<WithCallbackMethod_UpdateAsset<WithCallbackMethod_UpdateAsset2<WithCallbackMethod_ProposalCreate<WithCallbackMethod_ProposalApprove<WithCallbackMethod_ProposalDelete<WithCallbackMethod_BuyStorage<WithCallbackMethod_BuyStorageBytes<WithCallbackMethod_SellStorage<WithCallbackMethod_ExchangeCreate<WithCallbackMethod_ExchangeInject<WithCallbackMethod_ExchangeWithdraw<WithCallbackMethod_ExchangeTransaction<WithCallbackMethod_MarketSellAsset<WithCallbackMethod_MarketCancelOrder<WithCallbackMethod_GetMarketOrderById<WithCallbackMethod_GetMarketOrderByAccount<WithCallbackMethod_GetMarketPriceByPair<WithCallbackMethod_GetMarketOrderListByPair<WithCallbackMethod_GetMarketPairList<WithCallbackMethod_ListNodes<WithCallbackMethod_GetAssetIssueByAccount<WithCallbackMethod_GetAccountNet<WithCallbackMethod_GetAccountResource<WithCallbackMethod_GetAssetIssueByName<WithCallbackMethod_GetAssetIssueListByName<WithCallbackMethod_GetAssetIssueById<WithCallbackMethod_GetNowBlock<WithCallbackMethod_GetNowBlock2<WithCallbackMethod_GetBlockByNum<WithCallbackMethod_GetBlockByNum2<WithCallbackMethod_GetTransactionCountByBlockNum<WithCallbackMethod_GetBlockById<WithCallbackMethod_GetBlockByLimitNext<WithCallbackMethod_GetBlockByLimitNext2<WithCallbackMethod_GetBlockByLatestNum<WithCallbackMethod_GetBlockByLatestNum2<WithCallbackMethod_GetTransactionById<WithCallbackMethod_DeployContract<WithCallbackMethod_GetContract<WithCallbackMethod_GetContractInfo<WithCallbackMethod_TriggerContract<WithCallbackMethod_TriggerConstantContract<WithCallbackMethod_ClearContractABI<WithCallbackMethod_ListWitnesses<WithCallbackMethod_GetDelegatedResource<WithCallbackMethod_GetDelegatedResourceAccountIndex<WithCallbackMethod_ListProposals<WithCallbackMethod_GetPaginatedProposalList<WithCallbackMethod_GetProposalById<WithCallbackMethod_ListExchanges<WithCallbackMethod_GetPaginatedExchangeList<WithCallbackMethod_GetExchangeById<WithCallbackMethod_GetChainParameters<WithCallbackMethod_GetAssetIssueList<WithCallbackMethod_GetPaginatedAssetIssueList<WithCallbackMethod_TotalTransaction<WithCallbackMethod_GetNextMaintenanceTime<WithCallbackMethod_GetTransactionSign<WithCallbackMethod_GetTransactionSign2<WithCallbackMethod_CreateAddress<WithCallbackMethod_EasyTransferAsset<WithCallbackMethod_EasyTransferAssetByPrivate<WithCallbackMethod_EasyTransfer<WithCallbackMethod_EasyTransferByPrivate<WithCallbackMethod_GenerateAddress<WithCallbackMethod_GetTransactionInfoById<WithCallbackMethod_AccountPermissionUpdate<WithCallbackMethod_AddSign<WithCallbackMethod_GetTransactionSignWeight<WithCallbackMethod_GetTransactionApprovedList<WithCallbackMethod_GetNodeInfo<WithCallbackMethod_GetRewardInfo<WithCallbackMethod_GetBrokerageInfo<WithCallbackMethod_UpdateBrokerage<WithCallbackMethod_CreateShieldedTransaction<WithCallbackMethod_GetMerkleTreeVoucherInfo<WithCallbackMethod_ScanNoteByIvk<WithCallbackMethod_ScanAndMarkNoteByIvk<WithCallbackMethod_ScanNoteByOvk<WithCallbackMethod_GetSpendingKey<WithCallbackMethod_GetExpandedSpendingKey<WithCallbackMethod_GetAkFromAsk<WithCallbackMethod_GetNkFromNsk<WithCallbackMethod_GetIncomingViewingKey<WithCallbackMethod_GetDiversifier<WithCallbackMethod_GetNewShieldedAddress<WithCallbackMethod_GetZenPaymentAddress<WithCallbackMethod_GetRcm<WithCallbackMethod_IsSpend<WithCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig<WithCallbackMethod_GetShieldTransactionHash<WithCallbackMethod_CreateSpendAuthSig<WithCallbackMethod_CreateShieldNullifier<WithCallbackMethod_CreateShieldedContractParameters<WithCallbackMethod_CreateShieldedContractParametersWithoutAsk<WithCallbackMethod_ScanShieldedTRC20NotesByIvk<WithCallbackMethod_ScanShieldedTRC20NotesByOvk<WithCallbackMethod_IsShieldedTRC20ContractNoteSpent<WithCallbackMethod_GetTriggerInputForShieldedTRC20Contract<WithCallbackMethod_CreateCommonTransaction<WithCallbackMethod_GetTransactionInfoByBlockNum<WithCallbackMethod_GetBurnTrx<WithCallbackMethod_GetTransactionFromPending<WithCallbackMethod_GetTransactionListFromPending<WithCallbackMethod_GetPendingSize<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountById() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAccountId() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccount() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWitness() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferAsset() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BuyStorage() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SellStorage() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNodes() {
      ::grpc::Service::MarkMethodGeneric(53);
    }
    ~WithGenericMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodGeneric(54);
    }
    ~WithGenericMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodGeneric(55);
    }
    ~WithGenericMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodGeneric(56);
    }
    ~WithGenericMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodGeneric(57);
    }
    ~WithGenericMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodGeneric(58);
    }
    ~WithGenericMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodGeneric(59);
    }
    ~WithGenericMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(60);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodGeneric(61);
    }
    ~WithGenericMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(62);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodGeneric(63);
    }
    ~WithGenericMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodGeneric(64);
    }
    ~WithGenericMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockById() {
      ::grpc::Service::MarkMethodGeneric(65);
    }
    ~WithGenericMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodGeneric(66);
    }
    ~WithGenericMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodGeneric(67);
    }
    ~WithGenericMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodGeneric(68);
    }
    ~WithGenericMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodGeneric(69);
    }
    ~WithGenericMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodGeneric(70);
    }
    ~WithGenericMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeployContract() {
      ::grpc::Service::MarkMethodGeneric(71);
    }
    ~WithGenericMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContract() {
      ::grpc::Service::MarkMethodGeneric(72);
    }
    ~WithGenericMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodGeneric(73);
    }
    ~WithGenericMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerContract() {
      ::grpc::Service::MarkMethodGeneric(74);
    }
    ~WithGenericMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodGeneric(75);
    }
    ~WithGenericMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodGeneric(76);
    }
    ~WithGenericMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodGeneric(77);
    }
    ~WithGenericMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodGeneric(78);
    }
    ~WithGenericMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodGeneric(79);
    }
    ~WithGenericMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListProposals() {
      ::grpc::Service::MarkMethodGeneric(80);
    }
    ~WithGenericMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodGeneric(81);
    }
    ~WithGenericMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProposalById() {
      ::grpc::Service::MarkMethodGeneric(82);
    }
    ~WithGenericMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListExchanges() {
      ::grpc::Service::MarkMethodGeneric(83);
    }
    ~WithGenericMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodGeneric(84);
    }
    ~WithGenericMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodGeneric(85);
    }
    ~WithGenericMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodGeneric(86);
    }
    ~WithGenericMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(87);
    }
    ~WithGenericMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(88);
    }
    ~WithGenericMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodGeneric(89);
    }
    ~WithGenericMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodGeneric(90);
    }
    ~WithGenericMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodGeneric(91);
    }
    ~WithGenericMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodGeneric(92);
    }
    ~WithGenericMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAddress() {
      ::grpc::Service::MarkMethodGeneric(93);
    }
    ~WithGenericMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodGeneric(94);
    }
    ~WithGenericMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodGeneric(95);
    }
    ~WithGenericMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodGeneric(96);
    }
    ~WithGenericMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodGeneric(97);
    }
    ~WithGenericMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodGeneric(98);
    }
    ~WithGenericMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodGeneric(99);
    }
    ~WithGenericMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodGeneric(100);
    }
    ~WithGenericMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSign() {
      ::grpc::Service::MarkMethodGeneric(101);
    }
    ~WithGenericMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodGeneric(102);
    }
    ~WithGenericMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodGeneric(103);
    }
    ~WithGenericMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodGeneric(104);
    }
    ~WithGenericMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodGeneric(105);
    }
    ~WithGenericMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodGeneric(106);
    }
    ~WithGenericMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodGeneric(107);
    }
    ~WithGenericMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodGeneric(108);
    }
    ~WithGenericMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodGeneric(109);
    }
    ~WithGenericMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodGeneric(110);
    }
    ~WithGenericMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodGeneric(111);
    }
    ~WithGenericMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodGeneric(112);
    }
    ~WithGenericMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodGeneric(113);
    }
    ~WithGenericMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodGeneric(114);
    }
    ~WithGenericMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodGeneric(115);
    }
    ~WithGenericMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodGeneric(116);
    }
    ~WithGenericMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodGeneric(117);
    }
    ~WithGenericMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodGeneric(118);
    }
    ~WithGenericMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodGeneric(119);
    }
    ~WithGenericMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodGeneric(120);
    }
    ~WithGenericMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRcm() {
      ::grpc::Service::MarkMethodGeneric(121);
    }
    ~WithGenericMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsSpend() {
      ::grpc::Service::MarkMethodGeneric(122);
    }
    ~WithGenericMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodGeneric(123);
    }
    ~WithGenericMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodGeneric(124);
    }
    ~WithGenericMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodGeneric(125);
    }
    ~WithGenericMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodGeneric(126);
    }
    ~WithGenericMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodGeneric(127);
    }
    ~WithGenericMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodGeneric(128);
    }
    ~WithGenericMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodGeneric(129);
    }
    ~WithGenericMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodGeneric(130);
    }
    ~WithGenericMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodGeneric(131);
    }
    ~WithGenericMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodGeneric(132);
    }
    ~WithGenericMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodGeneric(133);
    }
    ~WithGenericMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodGeneric(134);
    }
    ~WithGenericMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodGeneric(135);
    }
    ~WithGenericMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodGeneric(136);
    }
    ~WithGenericMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodGeneric(137);
    }
    ~WithGenericMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodGeneric(138);
    }
    ~WithGenericMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountById() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockBalanceTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTransaction2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAccountId() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAccountId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWitnessAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEnergyLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWitnessAccount2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAssetIssue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAssetIssue2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWitness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWitness2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWitness() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWitness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWitness2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferAsset() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferAsset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferAsset2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParticipateAssetIssue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParticipateAssetIssue2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreezeBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreezeBalance2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeBalance2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeAsset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfreezeAsset2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawBalance2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAsset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAsset2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalApprove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposalDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BuyStorage() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyStorage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuyStorageBytes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SellStorage() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSellStorage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeInject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeWithdraw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketSellAsset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketCancelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderByAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPriceByPair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderListByPair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPairList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNodes() {
      ::grpc::Service::MarkMethodRaw(53);
    }
    ~WithRawMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodRaw(54);
    }
    ~WithRawMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodRaw(55);
    }
    ~WithRawMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountNet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodRaw(56);
    }
    ~WithRawMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodRaw(57);
    }
    ~WithRawMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodRaw(58);
    }
    ~WithRawMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueListByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodRaw(59);
    }
    ~WithRawMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRaw(60);
    }
    ~WithRawMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodRaw(61);
    }
    ~WithRawMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRaw(62);
    }
    ~WithRawMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodRaw(63);
    }
    ~WithRawMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodRaw(64);
    }
    ~WithRawMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockById() {
      ::grpc::Service::MarkMethodRaw(65);
    }
    ~WithRawMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodRaw(66);
    }
    ~WithRawMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLimitNext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodRaw(67);
    }
    ~WithRawMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLimitNext2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodRaw(68);
    }
    ~WithRawMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLatestNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodRaw(69);
    }
    ~WithRawMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByLatestNum2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodRaw(70);
    }
    ~WithRawMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeployContract() {
      ::grpc::Service::MarkMethodRaw(71);
    }
    ~WithRawMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContract() {
      ::grpc::Service::MarkMethodRaw(72);
    }
    ~WithRawMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodRaw(73);
    }
    ~WithRawMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContractInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerContract() {
      ::grpc::Service::MarkMethodRaw(74);
    }
    ~WithRawMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodRaw(75);
    }
    ~WithRawMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerConstantContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodRaw(76);
    }
    ~WithRawMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearContractABI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodRaw(77);
    }
    ~WithRawMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodRaw(78);
    }
    ~WithRawMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodRaw(79);
    }
    ~WithRawMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListProposals() {
      ::grpc::Service::MarkMethodRaw(80);
    }
    ~WithRawMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProposals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodRaw(81);
    }
    ~WithRawMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedProposalList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProposalById() {
      ::grpc::Service::MarkMethodRaw(82);
    }
    ~WithRawMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProposalById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListExchanges() {
      ::grpc::Service::MarkMethodRaw(83);
    }
    ~WithRawMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExchanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodRaw(84);
    }
    ~WithRawMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedExchangeList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodRaw(85);
    }
    ~WithRawMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExchangeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodRaw(86);
    }
    ~WithRawMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChainParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodRaw(87);
    }
    ~WithRawMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodRaw(88);
    }
    ~WithRawMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodRaw(89);
    }
    ~WithRawMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodRaw(90);
    }
    ~WithRawMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextMaintenanceTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodRaw(91);
    }
    ~WithRawMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodRaw(92);
    }
    ~WithRawMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSign2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAddress() {
      ::grpc::Service::MarkMethodRaw(93);
    }
    ~WithRawMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodRaw(94);
    }
    ~WithRawMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferAsset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodRaw(95);
    }
    ~WithRawMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferAssetByPrivate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodRaw(96);
    }
    ~WithRawMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodRaw(97);
    }
    ~WithRawMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEasyTransferByPrivate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodRaw(98);
    }
    ~WithRawMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodRaw(99);
    }
    ~WithRawMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodRaw(100);
    }
    ~WithRawMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountPermissionUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSign() {
      ::grpc::Service::MarkMethodRaw(101);
    }
    ~WithRawMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodRaw(102);
    }
    ~WithRawMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionSignWeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodRaw(103);
    }
    ~WithRawMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionApprovedList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRaw(104);
    }
    ~WithRawMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodRaw(105);
    }
    ~WithRawMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRewardInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodRaw(106);
    }
    ~WithRawMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBrokerageInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodRaw(107);
    }
    ~WithRawMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBrokerage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodRaw(108);
    }
    ~WithRawMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodRaw(109);
    }
    ~WithRawMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodRaw(110);
    }
    ~WithRawMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodRaw(111);
    }
    ~WithRawMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodRaw(112);
    }
    ~WithRawMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByOvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodRaw(113);
    }
    ~WithRawMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpendingKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodRaw(114);
    }
    ~WithRawMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExpandedSpendingKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodRaw(115);
    }
    ~WithRawMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAkFromAsk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodRaw(116);
    }
    ~WithRawMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNkFromNsk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodRaw(117);
    }
    ~WithRawMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIncomingViewingKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodRaw(118);
    }
    ~WithRawMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiversifier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodRaw(119);
    }
    ~WithRawMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewShieldedAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodRaw(120);
    }
    ~WithRawMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetZenPaymentAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRcm() {
      ::grpc::Service::MarkMethodRaw(121);
    }
    ~WithRawMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRcm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsSpend() {
      ::grpc::Service::MarkMethodRaw(122);
    }
    ~WithRawMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSpend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodRaw(123);
    }
    ~WithRawMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodRaw(124);
    }
    ~WithRawMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShieldTransactionHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodRaw(125);
    }
    ~WithRawMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSpendAuthSig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodRaw(126);
    }
    ~WithRawMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldNullifier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodRaw(127);
    }
    ~WithRawMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedContractParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodRaw(128);
    }
    ~WithRawMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodRaw(129);
    }
    ~WithRawMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodRaw(130);
    }
    ~WithRawMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodRaw(131);
    }
    ~WithRawMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodRaw(132);
    }
    ~WithRawMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(132, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodRaw(133);
    }
    ~WithRawMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommonTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(133, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodRaw(134);
    }
    ~WithRawMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(134, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodRaw(135);
    }
    ~WithRawMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurnTrx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(135, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodRaw(136);
    }
    ~WithRawMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionFromPending(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(136, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodRaw(137);
    }
    ~WithRawMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionListFromPending(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(137, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodRaw(138);
    }
    ~WithRawMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPendingSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(138, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountById() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountBalance(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockBalanceTrace(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockBalanceTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTransaction2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTransaction2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BroadcastTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAccountId() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAccountId(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAccountId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAccount2(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VoteWitnessAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWitnessAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateEnergyLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateEnergyLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VoteWitnessAccount2(context, request, response); }));
    }
    ~WithRawCallbackMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWitnessAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAssetIssue(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAssetIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAssetIssue2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAssetIssue2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWitness(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWitness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWitness2(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWitness2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccount2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateWitness() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWitness(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWitness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWitness2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateWitness2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferAsset() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferAsset(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferAsset2(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ParticipateAssetIssue(context, request, response); }));
    }
    ~WithRawCallbackMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ParticipateAssetIssue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ParticipateAssetIssue2(context, request, response); }));
    }
    ~WithRawCallbackMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ParticipateAssetIssue2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FreezeBalance(context, request, response); }));
    }
    ~WithRawCallbackMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreezeBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FreezeBalance2(context, request, response); }));
    }
    ~WithRawCallbackMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreezeBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnfreezeBalance(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnfreezeBalance2(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnfreezeAsset(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnfreezeAsset2(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnfreezeAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawBalance(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawBalance2(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawBalance2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAsset(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAsset2(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAsset2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProposalCreate(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProposalApprove(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalApprove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProposalDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposalDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BuyStorage() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BuyStorage(context, request, response); }));
    }
    ~WithRawCallbackMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BuyStorage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BuyStorageBytes(context, request, response); }));
    }
    ~WithRawCallbackMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BuyStorageBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SellStorage() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SellStorage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SellStorage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeCreate(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeInject(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeInject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeWithdraw(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeWithdraw(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarketSellAsset(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarketSellAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarketCancelOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarketCancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderByAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketPriceByPair(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPriceByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderListByPair(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderListByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodRawCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketPairList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPairList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNodes() {
      ::grpc::Service::MarkMethodRawCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodRawCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueByAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodRawCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountNet(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountNet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodRawCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodRawCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueByName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodRawCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueListByName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueListByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodRawCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRawCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNowBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodRawCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNowBlock2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRawCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodRawCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByNum2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodRawCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionCountByBlockNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionCountByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockById() {
      ::grpc::Service::MarkMethodRawCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodRawCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByLimitNext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLimitNext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodRawCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByLimitNext2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLimitNext2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodRawCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByLatestNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLatestNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodRawCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByLatestNum2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByLatestNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodRawCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeployContract() {
      ::grpc::Service::MarkMethodRawCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeployContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeployContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContract() {
      ::grpc::Service::MarkMethodRawCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodRawCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContractInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContractInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerContract() {
      ::grpc::Service::MarkMethodRawCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodRawCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerConstantContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerConstantContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodRawCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearContractABI(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearContractABI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodRawCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListWitnesses(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWitnesses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodRawCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegatedResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodRawCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegatedResourceAccountIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResourceAccountIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListProposals() {
      ::grpc::Service::MarkMethodRawCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListProposals(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListProposals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodRawCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPaginatedProposalList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedProposalList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProposalById() {
      ::grpc::Service::MarkMethodRawCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProposalById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProposalById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListExchanges() {
      ::grpc::Service::MarkMethodRawCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListExchanges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodRawCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPaginatedExchangeList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedExchangeList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodRawCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExchangeById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExchangeById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodRawCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChainParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChainParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodRawCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodRawCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPaginatedAssetIssueList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodRawCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodRawCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNextMaintenanceTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNextMaintenanceTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodRawCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionSign(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodRawCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionSign2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSign2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAddress() {
      ::grpc::Service::MarkMethodRawCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodRawCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EasyTransferAsset(context, request, response); }));
    }
    ~WithRawCallbackMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferAsset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodRawCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EasyTransferAssetByPrivate(context, request, response); }));
    }
    ~WithRawCallbackMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferAssetByPrivate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodRawCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EasyTransfer(context, request, response); }));
    }
    ~WithRawCallbackMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodRawCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EasyTransferByPrivate(context, request, response); }));
    }
    ~WithRawCallbackMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EasyTransferByPrivate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodRawCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodRawCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionInfoById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodRawCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AccountPermissionUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountPermissionUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddSign() {
      ::grpc::Service::MarkMethodRawCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddSign(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodRawCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionSignWeight(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionSignWeight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodRawCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionApprovedList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionApprovedList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRawCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodeInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodRawCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRewardInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRewardInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodRawCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBrokerageInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBrokerageInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodRawCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateBrokerage(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateBrokerage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodRawCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateShieldedTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodRawCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMerkleTreeVoucherInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMerkleTreeVoucherInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodRawCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanNoteByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodRawCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanAndMarkNoteByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanAndMarkNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodRawCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanNoteByOvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodRawCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpendingKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpendingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodRawCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExpandedSpendingKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExpandedSpendingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodRawCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAkFromAsk(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAkFromAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodRawCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNkFromNsk(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNkFromNsk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodRawCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIncomingViewingKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIncomingViewingKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodRawCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDiversifier(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDiversifier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodRawCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNewShieldedAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNewShieldedAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodRawCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetZenPaymentAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetZenPaymentAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRcm() {
      ::grpc::Service::MarkMethodRawCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRcm(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRcm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsSpend() {
      ::grpc::Service::MarkMethodRawCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsSpend(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodRawCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateShieldedTransactionWithoutSpendAuthSig(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedTransactionWithoutSpendAuthSig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodRawCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetShieldTransactionHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShieldTransactionHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodRawCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSpendAuthSig(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSpendAuthSig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodRawCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateShieldNullifier(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldNullifier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodRawCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateShieldedContractParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedContractParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodRawCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateShieldedContractParametersWithoutAsk(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateShieldedContractParametersWithoutAsk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodRawCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanShieldedTRC20NotesByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodRawCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanShieldedTRC20NotesByOvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodRawCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsShieldedTRC20ContractNoteSpent(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsShieldedTRC20ContractNoteSpent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodRawCallback(132,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTriggerInputForShieldedTRC20Contract(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTriggerInputForShieldedTRC20Contract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodRawCallback(133,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCommonTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommonTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodRawCallback(134,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionInfoByBlockNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodRawCallback(135,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurnTrx(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBurnTrx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodRawCallback(136,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionFromPending(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionFromPending(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodRawCallback(137,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionListFromPending(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionListFromPending(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodRawCallback(138,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPendingSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPendingSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::Account>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::Account>* streamer) {
                       return this->StreamedGetAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountById() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::Account>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::Account>* streamer) {
                       return this->StreamedGetAccountById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountBalance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse>* streamer) {
                       return this->StreamedGetAccountBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountBalance(::grpc::ServerContext* /*context*/, const ::protocol::AccountBalanceRequest* /*request*/, ::protocol::AccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountBalanceRequest,::protocol::AccountBalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockBalanceTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockBalanceTrace() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace>* streamer) {
                       return this->StreamedGetBlockBalanceTrace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockBalanceTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockBalanceTrace(::grpc::ServerContext* /*context*/, const ::protocol::BlockBalanceTrace_BlockIdentifier* /*request*/, ::protocol::BlockBalanceTrace* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockBalanceTrace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BlockBalanceTrace_BlockIdentifier,::protocol::BlockBalanceTrace>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransferContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransferContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedCreateTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTransaction(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTransaction2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTransaction2() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransferContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransferContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateTransaction2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTransaction2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTransaction2(::grpc::ServerContext* /*context*/, const ::protocol::TransferContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTransaction2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BroadcastTransaction() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Transaction, ::protocol::Return>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Transaction, ::protocol::Return>* streamer) {
                       return this->StreamedBroadcastTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BroadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::Return* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::Return>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountUpdateContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountUpdateContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedUpdateAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountUpdateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAccountId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAccountId() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::SetAccountIdContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::SetAccountIdContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedSetAccountId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAccountId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAccountId(::grpc::ServerContext* /*context*/, const ::protocol::SetAccountIdContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAccountId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::SetAccountIdContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAccount2() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountUpdateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountUpdateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateAccount2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAccount2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountUpdateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoteWitnessAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VoteWitnessAccount() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::VoteWitnessContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::VoteWitnessContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedVoteWitnessAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VoteWitnessAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoteWitnessAccount(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoteWitnessAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::VoteWitnessContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSetting() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UpdateSettingContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UpdateSettingContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSetting(::grpc::ServerContext* /*context*/, const ::protocol::UpdateSettingContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateSettingContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEnergyLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateEnergyLimit() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateEnergyLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateEnergyLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEnergyLimit(::grpc::ServerContext* /*context*/, const ::protocol::UpdateEnergyLimitContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEnergyLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateEnergyLimitContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoteWitnessAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VoteWitnessAccount2() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::VoteWitnessContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::VoteWitnessContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedVoteWitnessAccount2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VoteWitnessAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoteWitnessAccount2(::grpc::ServerContext* /*context*/, const ::protocol::VoteWitnessContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoteWitnessAccount2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::VoteWitnessContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAssetIssue() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AssetIssueContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AssetIssueContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedCreateAssetIssue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAssetIssue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AssetIssueContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAssetIssue2() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AssetIssueContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AssetIssueContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateAssetIssue2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::AssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAssetIssue2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AssetIssueContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWitness() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WitnessUpdateContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WitnessUpdateContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedUpdateWitness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWitness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessUpdateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWitness2() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateWitness2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWitness2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessUpdateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccount() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountCreateContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountCreateContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedCreateAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountCreateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccount2() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountCreateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountCreateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateAccount2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccount2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount2(::grpc::ServerContext* /*context*/, const ::protocol::AccountCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountCreateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWitness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWitness() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WitnessCreateContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WitnessCreateContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedCreateWitness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWitness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWitness(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWitness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessCreateContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWitness2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWitness2() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WitnessCreateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WitnessCreateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateWitness2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWitness2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWitness2(::grpc::ServerContext* /*context*/, const ::protocol::WitnessCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWitness2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WitnessCreateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferAsset() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransferAssetContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransferAssetContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedTransferAsset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferAsset2() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransferAssetContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransferAssetContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedTransferAsset2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferAsset2(::grpc::ServerContext* /*context*/, const ::protocol::TransferAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferAsset2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransferAssetContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParticipateAssetIssue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ParticipateAssetIssue() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedParticipateAssetIssue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ParticipateAssetIssue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParticipateAssetIssue(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParticipateAssetIssue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ParticipateAssetIssueContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ParticipateAssetIssue2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ParticipateAssetIssue2() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedParticipateAssetIssue2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ParticipateAssetIssue2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ParticipateAssetIssue2(::grpc::ServerContext* /*context*/, const ::protocol::ParticipateAssetIssueContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParticipateAssetIssue2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ParticipateAssetIssueContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FreezeBalance() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::FreezeBalanceContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::FreezeBalanceContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedFreezeBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFreezeBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::FreezeBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FreezeBalance2() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedFreezeBalance2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::FreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFreezeBalance2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::FreezeBalanceContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnfreezeBalance() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UnfreezeBalanceContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedUnfreezeBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnfreezeBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeBalance(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnfreezeBalance2() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUnfreezeBalance2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnfreezeBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeBalance2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeBalance2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeBalanceContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnfreezeAsset() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UnfreezeAssetContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UnfreezeAssetContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedUnfreezeAsset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnfreezeAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeAsset(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnfreezeAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnfreezeAsset2() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUnfreezeAsset2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnfreezeAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnfreezeAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UnfreezeAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfreezeAsset2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UnfreezeAssetContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawBalance() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WithdrawBalanceContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WithdrawBalanceContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedWithdrawBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawBalance(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WithdrawBalanceContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawBalance2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawBalance2() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedWithdrawBalance2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawBalance2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawBalance2(::grpc::ServerContext* /*context*/, const ::protocol::WithdrawBalanceContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawBalance2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::WithdrawBalanceContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAsset() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UpdateAssetContract, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UpdateAssetContract, ::protocol::Transaction>* streamer) {
                       return this->StreamedUpdateAsset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAsset(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateAssetContract,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAsset2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAsset2() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UpdateAssetContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UpdateAssetContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateAsset2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAsset2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAsset2(::grpc::ServerContext* /*context*/, const ::protocol::UpdateAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAsset2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateAssetContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProposalCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProposalCreate() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ProposalCreateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ProposalCreateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedProposalCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProposalCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProposalCreate(::grpc::ServerContext* /*context*/, const ::protocol::ProposalCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposalCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ProposalCreateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProposalApprove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProposalApprove() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ProposalApproveContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ProposalApproveContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedProposalApprove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProposalApprove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProposalApprove(::grpc::ServerContext* /*context*/, const ::protocol::ProposalApproveContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposalApprove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ProposalApproveContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProposalDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProposalDelete() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedProposalDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProposalDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProposalDelete(::grpc::ServerContext* /*context*/, const ::protocol::ProposalDeleteContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposalDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ProposalDeleteContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuyStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BuyStorage() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BuyStorageContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BuyStorageContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedBuyStorage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BuyStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuyStorage(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuyStorage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BuyStorageContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuyStorageBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BuyStorageBytes() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedBuyStorageBytes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BuyStorageBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuyStorageBytes(::grpc::ServerContext* /*context*/, const ::protocol::BuyStorageBytesContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuyStorageBytes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BuyStorageBytesContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SellStorage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SellStorage() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::SellStorageContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::SellStorageContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedSellStorage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SellStorage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SellStorage(::grpc::ServerContext* /*context*/, const ::protocol::SellStorageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSellStorage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::SellStorageContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeCreate() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedExchangeCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeCreate(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeCreateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ExchangeCreateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeInject() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedExchangeInject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeInject(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeInjectContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeInject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ExchangeInjectContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeWithdraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeWithdraw() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedExchangeWithdraw(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeWithdraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeWithdraw(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeWithdrawContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeWithdraw(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ExchangeWithdrawContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeTransaction() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedExchangeTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeTransaction(::grpc::ServerContext* /*context*/, const ::protocol::ExchangeTransactionContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ExchangeTransactionContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarketSellAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarketSellAsset() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedMarketSellAsset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarketSellAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarketSellAsset(::grpc::ServerContext* /*context*/, const ::protocol::MarketSellAssetContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarketSellAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketSellAssetContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarketCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarketCancelOrder() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedMarketCancelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarketCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarketCancelOrder(::grpc::ServerContext* /*context*/, const ::protocol::MarketCancelOrderContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarketCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketCancelOrderContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::MarketOrder>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::MarketOrder>* streamer) {
                       return this->StreamedGetMarketOrderById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::MarketOrder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::MarketOrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::MarketOrderList>* streamer) {
                       return this->StreamedGetMarketOrderByAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderByAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::MarketOrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketOrderPair, ::protocol::MarketPriceList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketOrderPair, ::protocol::MarketPriceList>* streamer) {
                       return this->StreamedGetMarketPriceByPair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketPriceByPair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketOrderPair,::protocol::MarketPriceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketOrderPair, ::protocol::MarketOrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketOrderPair, ::protocol::MarketOrderList>* streamer) {
                       return this->StreamedGetMarketOrderListByPair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderListByPair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketOrderPair,::protocol::MarketOrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>* streamer) {
                       return this->StreamedGetMarketPairList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketPairList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::MarketOrderPairList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNodes() {
      ::grpc::Service::MarkMethodStreamed(53,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NodeList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NodeList>* streamer) {
                       return this->StreamedListNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NodeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByAccount() {
      ::grpc::Service::MarkMethodStreamed(54,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetAssetIssueByAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountNet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountNet() {
      ::grpc::Service::MarkMethodStreamed(55,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::AccountNetMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::AccountNetMessage>* streamer) {
                       return this->StreamedGetAccountNet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountNet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountNet(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountNetMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountNet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AccountNetMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountResource() {
      ::grpc::Service::MarkMethodStreamed(56,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::AccountResourceMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::AccountResourceMessage>* streamer) {
                       return this->StreamedGetAccountResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountResource(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::AccountResourceMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::AccountResourceMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodStreamed(57,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueContract>* streamer) {
                       return this->StreamedGetAssetIssueByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodStreamed(58,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetAssetIssueListByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueListByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodStreamed(59,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueContract>* streamer) {
                       return this->StreamedGetAssetIssueById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(60,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetNowBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodStreamed(61,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::BlockExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::BlockExtention>* streamer) {
                       return this->StreamedGetNowBlock2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BlockExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(62,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetBlockByNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodStreamed(63,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::BlockExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::BlockExtention>* streamer) {
                       return this->StreamedGetBlockByNum2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::BlockExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodStreamed(64,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetTransactionCountByBlockNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockById() {
      ::grpc::Service::MarkMethodStreamed(65,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetBlockById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLimitNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLimitNext() {
      ::grpc::Service::MarkMethodStreamed(66,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BlockLimit, ::protocol::BlockList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BlockLimit, ::protocol::BlockList>* streamer) {
                       return this->StreamedGetBlockByLimitNext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByLimitNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLimitNext(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLimitNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BlockLimit,::protocol::BlockList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLimitNext2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLimitNext2() {
      ::grpc::Service::MarkMethodStreamed(67,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BlockLimit, ::protocol::BlockListExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BlockLimit, ::protocol::BlockListExtention>* streamer) {
                       return this->StreamedGetBlockByLimitNext2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByLimitNext2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLimitNext2(::grpc::ServerContext* /*context*/, const ::protocol::BlockLimit* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLimitNext2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BlockLimit,::protocol::BlockListExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLatestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLatestNum() {
      ::grpc::Service::MarkMethodStreamed(68,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::BlockList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::BlockList>* streamer) {
                       return this->StreamedGetBlockByLatestNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByLatestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLatestNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLatestNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::BlockList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByLatestNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByLatestNum2() {
      ::grpc::Service::MarkMethodStreamed(69,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::BlockListExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::BlockListExtention>* streamer) {
                       return this->StreamedGetBlockByLatestNum2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByLatestNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByLatestNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByLatestNum2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::BlockListExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodStreamed(70,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Transaction>* streamer) {
                       return this->StreamedGetTransactionById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeployContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeployContract() {
      ::grpc::Service::MarkMethodStreamed(71,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::CreateSmartContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::CreateSmartContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedDeployContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeployContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeployContract(::grpc::ServerContext* /*context*/, const ::protocol::CreateSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeployContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::CreateSmartContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContract() {
      ::grpc::Service::MarkMethodStreamed(72,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::SmartContract>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::SmartContract>* streamer) {
                       return this->StreamedGetContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContract(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::SmartContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContractInfo() {
      ::grpc::Service::MarkMethodStreamed(73,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper>* streamer) {
                       return this->StreamedGetContractInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContractInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::SmartContractDataWrapper* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContractInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::SmartContractDataWrapper>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerContract() {
      ::grpc::Service::MarkMethodStreamed(74,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedTriggerContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TriggerSmartContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodStreamed(75,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedTriggerConstantContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerConstantContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TriggerSmartContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearContractABI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearContractABI() {
      ::grpc::Service::MarkMethodStreamed(76,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ClearABIContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ClearABIContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedClearContractABI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearContractABI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearContractABI(::grpc::ServerContext* /*context*/, const ::protocol::ClearABIContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearContractABI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ClearABIContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodStreamed(77,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::WitnessList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::WitnessList>* streamer) {
                       return this->StreamedListWitnesses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWitnesses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::WitnessList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodStreamed(78,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>* streamer) {
                       return this->StreamedGetDelegatedResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegatedResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::DelegatedResourceMessage,::protocol::DelegatedResourceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodStreamed(79,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>* streamer) {
                       return this->StreamedGetDelegatedResourceAccountIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::DelegatedResourceAccountIndex>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListProposals() {
      ::grpc::Service::MarkMethodStreamed(80,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::ProposalList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::ProposalList>* streamer) {
                       return this->StreamedListProposals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListProposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProposals(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProposals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::ProposalList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPaginatedProposalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPaginatedProposalList() {
      ::grpc::Service::MarkMethodStreamed(81,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PaginatedMessage, ::protocol::ProposalList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PaginatedMessage, ::protocol::ProposalList>* streamer) {
                       return this->StreamedGetPaginatedProposalList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPaginatedProposalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPaginatedProposalList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ProposalList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPaginatedProposalList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PaginatedMessage,::protocol::ProposalList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProposalById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProposalById() {
      ::grpc::Service::MarkMethodStreamed(82,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Proposal>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Proposal>* streamer) {
                       return this->StreamedGetProposalById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProposalById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProposalById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Proposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProposalById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Proposal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListExchanges() {
      ::grpc::Service::MarkMethodStreamed(83,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::ExchangeList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::ExchangeList>* streamer) {
                       return this->StreamedListExchanges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListExchanges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::ExchangeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPaginatedExchangeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPaginatedExchangeList() {
      ::grpc::Service::MarkMethodStreamed(84,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PaginatedMessage, ::protocol::ExchangeList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PaginatedMessage, ::protocol::ExchangeList>* streamer) {
                       return this->StreamedGetPaginatedExchangeList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPaginatedExchangeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPaginatedExchangeList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPaginatedExchangeList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PaginatedMessage,::protocol::ExchangeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodStreamed(85,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Exchange>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Exchange>* streamer) {
                       return this->StreamedGetExchangeById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExchangeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Exchange>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChainParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChainParameters() {
      ::grpc::Service::MarkMethodStreamed(86,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::ChainParameters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::ChainParameters>* streamer) {
                       return this->StreamedGetChainParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChainParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChainParameters(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ChainParameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChainParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::ChainParameters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(87,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetAssetIssueList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(88,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PaginatedMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PaginatedMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetPaginatedAssetIssueList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PaginatedMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalTransaction() {
      ::grpc::Service::MarkMethodStreamed(89,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedTotalTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalTransaction(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNextMaintenanceTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNextMaintenanceTime() {
      ::grpc::Service::MarkMethodStreamed(90,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetNextMaintenanceTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNextMaintenanceTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextMaintenanceTime(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNextMaintenanceTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionSign() {
      ::grpc::Service::MarkMethodStreamed(91,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransactionSign, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransactionSign, ::protocol::Transaction>* streamer) {
                       return this->StreamedGetTransactionSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransactionSign,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionSign2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionSign2() {
      ::grpc::Service::MarkMethodStreamed(92,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransactionSign, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransactionSign, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedGetTransactionSign2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionSign2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionSign2(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionSign2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransactionSign,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAddress() {
      ::grpc::Service::MarkMethodStreamed(93,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedCreateAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAddress(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EasyTransferAsset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EasyTransferAsset() {
      ::grpc::Service::MarkMethodStreamed(94,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse>* streamer) {
                       return this->StreamedEasyTransferAsset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EasyTransferAsset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EasyTransferAsset(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEasyTransferAsset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EasyTransferAssetMessage,::protocol::EasyTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EasyTransferAssetByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EasyTransferAssetByPrivate() {
      ::grpc::Service::MarkMethodStreamed(95,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse>* streamer) {
                       return this->StreamedEasyTransferAssetByPrivate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EasyTransferAssetByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EasyTransferAssetByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferAssetByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEasyTransferAssetByPrivate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EasyTransferAssetByPrivateMessage,::protocol::EasyTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EasyTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EasyTransfer() {
      ::grpc::Service::MarkMethodStreamed(96,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse>* streamer) {
                       return this->StreamedEasyTransfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EasyTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EasyTransfer(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEasyTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EasyTransferMessage,::protocol::EasyTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EasyTransferByPrivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EasyTransferByPrivate() {
      ::grpc::Service::MarkMethodStreamed(97,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse>* streamer) {
                       return this->StreamedEasyTransferByPrivate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EasyTransferByPrivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EasyTransferByPrivate(::grpc::ServerContext* /*context*/, const ::protocol::EasyTransferByPrivateMessage* /*request*/, ::protocol::EasyTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEasyTransferByPrivate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EasyTransferByPrivateMessage,::protocol::EasyTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodStreamed(98,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>* streamer) {
                       return this->StreamedGenerateAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AddressPrKeyPairMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodStreamed(99,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::TransactionInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::TransactionInfo>* streamer) {
                       return this->StreamedGetTransactionInfoById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionInfoById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::TransactionInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AccountPermissionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AccountPermissionUpdate() {
      ::grpc::Service::MarkMethodStreamed(100,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedAccountPermissionUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AccountPermissionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AccountPermissionUpdate(::grpc::ServerContext* /*context*/, const ::protocol::AccountPermissionUpdateContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccountPermissionUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPermissionUpdateContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddSign() {
      ::grpc::Service::MarkMethodStreamed(101,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TransactionSign, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TransactionSign, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedAddSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddSign(::grpc::ServerContext* /*context*/, const ::protocol::TransactionSign* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TransactionSign,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionSignWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionSignWeight() {
      ::grpc::Service::MarkMethodStreamed(102,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Transaction, ::protocol::TransactionSignWeight>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Transaction, ::protocol::TransactionSignWeight>* streamer) {
                       return this->StreamedGetTransactionSignWeight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionSignWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionSignWeight(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionSignWeight* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionSignWeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::TransactionSignWeight>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionApprovedList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionApprovedList() {
      ::grpc::Service::MarkMethodStreamed(103,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Transaction, ::protocol::TransactionApprovedList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Transaction, ::protocol::TransactionApprovedList>* streamer) {
                       return this->StreamedGetTransactionApprovedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionApprovedList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionApprovedList(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionApprovedList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionApprovedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::TransactionApprovedList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodStreamed(104,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NodeInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NodeInfo>* streamer) {
                       return this->StreamedGetNodeInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NodeInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodStreamed(105,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetRewardInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRewardInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodStreamed(106,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetBrokerageInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBrokerageInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBrokerage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateBrokerage() {
      ::grpc::Service::MarkMethodStreamed(107,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedUpdateBrokerage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateBrokerage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBrokerage(::grpc::ServerContext* /*context*/, const ::protocol::UpdateBrokerageContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBrokerage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::UpdateBrokerageContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateShieldedTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateShieldedTransaction() {
      ::grpc::Service::MarkMethodStreamed(108,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PrivateParameters, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PrivateParameters, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateShieldedTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateShieldedTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateShieldedTransaction(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParameters* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateShieldedTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PrivateParameters,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodStreamed(109,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>* streamer) {
                       return this->StreamedGetMerkleTreeVoucherInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OutputPointInfo,::protocol::IncrementalMerkleVoucherInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodStreamed(110,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>* streamer) {
                       return this->StreamedScanNoteByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanNoteByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptParameters,::protocol::DecryptNotes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodStreamed(111,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>* streamer) {
                       return this->StreamedScanAndMarkNoteByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptAndMarkParameters,::protocol::DecryptNotesMarked>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodStreamed(112,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>* streamer) {
                       return this->StreamedScanNoteByOvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanNoteByOvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OvkDecryptParameters,::protocol::DecryptNotes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpendingKey() {
      ::grpc::Service::MarkMethodStreamed(113,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetSpendingKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpendingKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExpandedSpendingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExpandedSpendingKey() {
      ::grpc::Service::MarkMethodStreamed(114,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage>* streamer) {
                       return this->StreamedGetExpandedSpendingKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExpandedSpendingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExpandedSpendingKey(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::ExpandedSpendingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExpandedSpendingKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::ExpandedSpendingKeyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAkFromAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAkFromAsk() {
      ::grpc::Service::MarkMethodStreamed(115,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetAkFromAsk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAkFromAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAkFromAsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAkFromAsk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNkFromNsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNkFromNsk() {
      ::grpc::Service::MarkMethodStreamed(116,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetNkFromNsk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNkFromNsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNkFromNsk(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNkFromNsk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIncomingViewingKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIncomingViewingKey() {
      ::grpc::Service::MarkMethodStreamed(117,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage>* streamer) {
                       return this->StreamedGetIncomingViewingKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIncomingViewingKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIncomingViewingKey(::grpc::ServerContext* /*context*/, const ::protocol::ViewingKeyMessage* /*request*/, ::protocol::IncomingViewingKeyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIncomingViewingKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ViewingKeyMessage,::protocol::IncomingViewingKeyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDiversifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDiversifier() {
      ::grpc::Service::MarkMethodStreamed(118,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::DiversifierMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::DiversifierMessage>* streamer) {
                       return this->StreamedGetDiversifier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDiversifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDiversifier(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DiversifierMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDiversifier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::DiversifierMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNewShieldedAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNewShieldedAddress() {
      ::grpc::Service::MarkMethodStreamed(119,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo>* streamer) {
                       return this->StreamedGetNewShieldedAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNewShieldedAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNewShieldedAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ShieldedAddressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNewShieldedAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::ShieldedAddressInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetZenPaymentAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetZenPaymentAddress() {
      ::grpc::Service::MarkMethodStreamed(120,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage>* streamer) {
                       return this->StreamedGetZenPaymentAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetZenPaymentAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetZenPaymentAddress(::grpc::ServerContext* /*context*/, const ::protocol::IncomingViewingKeyDiversifierMessage* /*request*/, ::protocol::PaymentAddressMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetZenPaymentAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IncomingViewingKeyDiversifierMessage,::protocol::PaymentAddressMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRcm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRcm() {
      ::grpc::Service::MarkMethodStreamed(121,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetRcm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRcm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRcm(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRcm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsSpend() {
      ::grpc::Service::MarkMethodStreamed(122,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NoteParameters, ::protocol::SpendResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NoteParameters, ::protocol::SpendResult>* streamer) {
                       return this->StreamedIsSpend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsSpend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NoteParameters,::protocol::SpendResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateShieldedTransactionWithoutSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateShieldedTransactionWithoutSpendAuthSig() {
      ::grpc::Service::MarkMethodStreamed(123,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateShieldedTransactionWithoutSpendAuthSig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateShieldedTransactionWithoutSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::PrivateParametersWithoutAsk* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PrivateParametersWithoutAsk,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetShieldTransactionHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetShieldTransactionHash() {
      ::grpc::Service::MarkMethodStreamed(124,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Transaction, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Transaction, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetShieldTransactionHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetShieldTransactionHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetShieldTransactionHash(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetShieldTransactionHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSpendAuthSig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSpendAuthSig() {
      ::grpc::Service::MarkMethodStreamed(125,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedCreateSpendAuthSig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSpendAuthSig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSpendAuthSig(::grpc::ServerContext* /*context*/, const ::protocol::SpendAuthSigParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSpendAuthSig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::SpendAuthSigParameters,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateShieldNullifier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateShieldNullifier() {
      ::grpc::Service::MarkMethodStreamed(126,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NfParameters, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NfParameters, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedCreateShieldNullifier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateShieldNullifier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateShieldNullifier(::grpc::ServerContext* /*context*/, const ::protocol::NfParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateShieldNullifier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NfParameters,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateShieldedContractParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateShieldedContractParameters() {
      ::grpc::Service::MarkMethodStreamed(127,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters>* streamer) {
                       return this->StreamedCreateShieldedContractParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateShieldedContractParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateShieldedContractParameters(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20Parameters* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateShieldedContractParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PrivateShieldedTRC20Parameters,::protocol::ShieldedTRC20Parameters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateShieldedContractParametersWithoutAsk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateShieldedContractParametersWithoutAsk() {
      ::grpc::Service::MarkMethodStreamed(128,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters>* streamer) {
                       return this->StreamedCreateShieldedContractParametersWithoutAsk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateShieldedContractParametersWithoutAsk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* /*context*/, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* /*request*/, ::protocol::ShieldedTRC20Parameters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk,::protocol::ShieldedTRC20Parameters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodStreamed(129,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* streamer) {
                       return this->StreamedScanShieldedTRC20NotesByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptTRC20Parameters,::protocol::DecryptNotesTRC20>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodStreamed(130,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* streamer) {
                       return this->StreamedScanShieldedTRC20NotesByOvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OvkDecryptTRC20Parameters,::protocol::DecryptNotesTRC20>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodStreamed(131,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>* streamer) {
                       return this->StreamedIsShieldedTRC20ContractNoteSpent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NfTRC20Parameters,::protocol::NullifierResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTriggerInputForShieldedTRC20Contract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTriggerInputForShieldedTRC20Contract() {
      ::grpc::Service::MarkMethodStreamed(132,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage>* streamer) {
                       return this->StreamedGetTriggerInputForShieldedTRC20Contract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTriggerInputForShieldedTRC20Contract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* /*context*/, const ::protocol::ShieldedTRC20TriggerContractParameters* /*request*/, ::protocol::BytesMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::ShieldedTRC20TriggerContractParameters,::protocol::BytesMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCommonTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCommonTransaction() {
      ::grpc::Service::MarkMethodStreamed(133,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Transaction, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Transaction, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedCreateCommonTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCommonTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCommonTransaction(::grpc::ServerContext* /*context*/, const ::protocol::Transaction* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCommonTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Transaction,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodStreamed(134,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::TransactionInfoList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::TransactionInfoList>* streamer) {
                       return this->StreamedGetTransactionInfoByBlockNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::TransactionInfoList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodStreamed(135,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetBurnTrx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurnTrx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionFromPending() {
      ::grpc::Service::MarkMethodStreamed(136,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Transaction>* streamer) {
                       return this->StreamedGetTransactionFromPending(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionFromPending(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionFromPending(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionListFromPending : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionListFromPending() {
      ::grpc::Service::MarkMethodStreamed(137,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::TransactionIdList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::TransactionIdList>* streamer) {
                       return this->StreamedGetTransactionListFromPending(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionListFromPending() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionListFromPending(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::TransactionIdList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionListFromPending(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::TransactionIdList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPendingSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPendingSize() {
      ::grpc::Service::MarkMethodStreamed(138,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetPendingSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPendingSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPendingSize(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPendingSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_GetAccountById<WithStreamedUnaryMethod_GetAccountBalance<WithStreamedUnaryMethod_GetBlockBalanceTrace<WithStreamedUnaryMethod_CreateTransaction<WithStreamedUnaryMethod_CreateTransaction2<WithStreamedUnaryMethod_BroadcastTransaction<WithStreamedUnaryMethod_UpdateAccount<WithStreamedUnaryMethod_SetAccountId<WithStreamedUnaryMethod_UpdateAccount2<WithStreamedUnaryMethod_VoteWitnessAccount<WithStreamedUnaryMethod_UpdateSetting<WithStreamedUnaryMethod_UpdateEnergyLimit<WithStreamedUnaryMethod_VoteWitnessAccount2<WithStreamedUnaryMethod_CreateAssetIssue<WithStreamedUnaryMethod_CreateAssetIssue2<WithStreamedUnaryMethod_UpdateWitness<WithStreamedUnaryMethod_UpdateWitness2<WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_CreateAccount2<WithStreamedUnaryMethod_CreateWitness<WithStreamedUnaryMethod_CreateWitness2<WithStreamedUnaryMethod_TransferAsset<WithStreamedUnaryMethod_TransferAsset2<WithStreamedUnaryMethod_ParticipateAssetIssue<WithStreamedUnaryMethod_ParticipateAssetIssue2<WithStreamedUnaryMethod_FreezeBalance<WithStreamedUnaryMethod_FreezeBalance2<WithStreamedUnaryMethod_UnfreezeBalance<WithStreamedUnaryMethod_UnfreezeBalance2<WithStreamedUnaryMethod_UnfreezeAsset<WithStreamedUnaryMethod_UnfreezeAsset2<WithStreamedUnaryMethod_WithdrawBalance<WithStreamedUnaryMethod_WithdrawBalance2<WithStreamedUnaryMethod_UpdateAsset<WithStreamedUnaryMethod_UpdateAsset2<WithStreamedUnaryMethod_ProposalCreate<WithStreamedUnaryMethod_ProposalApprove<WithStreamedUnaryMethod_ProposalDelete<WithStreamedUnaryMethod_BuyStorage<WithStreamedUnaryMethod_BuyStorageBytes<WithStreamedUnaryMethod_SellStorage<WithStreamedUnaryMethod_ExchangeCreate<WithStreamedUnaryMethod_ExchangeInject<WithStreamedUnaryMethod_ExchangeWithdraw<WithStreamedUnaryMethod_ExchangeTransaction<WithStreamedUnaryMethod_MarketSellAsset<WithStreamedUnaryMethod_MarketCancelOrder<WithStreamedUnaryMethod_GetMarketOrderById<WithStreamedUnaryMethod_GetMarketOrderByAccount<WithStreamedUnaryMethod_GetMarketPriceByPair<WithStreamedUnaryMethod_GetMarketOrderListByPair<WithStreamedUnaryMethod_GetMarketPairList<WithStreamedUnaryMethod_ListNodes<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAccountNet<WithStreamedUnaryMethod_GetAccountResource<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetAssetIssueListByName<WithStreamedUnaryMethod_GetAssetIssueById<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetNowBlock2<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockByNum2<WithStreamedUnaryMethod_GetTransactionCountByBlockNum<WithStreamedUnaryMethod_GetBlockById<WithStreamedUnaryMethod_GetBlockByLimitNext<WithStreamedUnaryMethod_GetBlockByLimitNext2<WithStreamedUnaryMethod_GetBlockByLatestNum<WithStreamedUnaryMethod_GetBlockByLatestNum2<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_DeployContract<WithStreamedUnaryMethod_GetContract<WithStreamedUnaryMethod_GetContractInfo<WithStreamedUnaryMethod_TriggerContract<WithStreamedUnaryMethod_TriggerConstantContract<WithStreamedUnaryMethod_ClearContractABI<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetDelegatedResource<WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex<WithStreamedUnaryMethod_ListProposals<WithStreamedUnaryMethod_GetPaginatedProposalList<WithStreamedUnaryMethod_GetProposalById<WithStreamedUnaryMethod_ListExchanges<WithStreamedUnaryMethod_GetPaginatedExchangeList<WithStreamedUnaryMethod_GetExchangeById<WithStreamedUnaryMethod_GetChainParameters<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetPaginatedAssetIssueList<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetNextMaintenanceTime<WithStreamedUnaryMethod_GetTransactionSign<WithStreamedUnaryMethod_GetTransactionSign2<WithStreamedUnaryMethod_CreateAddress<WithStreamedUnaryMethod_EasyTransferAsset<WithStreamedUnaryMethod_EasyTransferAssetByPrivate<WithStreamedUnaryMethod_EasyTransfer<WithStreamedUnaryMethod_EasyTransferByPrivate<WithStreamedUnaryMethod_GenerateAddress<WithStreamedUnaryMethod_GetTransactionInfoById<WithStreamedUnaryMethod_AccountPermissionUpdate<WithStreamedUnaryMethod_AddSign<WithStreamedUnaryMethod_GetTransactionSignWeight<WithStreamedUnaryMethod_GetTransactionApprovedList<WithStreamedUnaryMethod_GetNodeInfo<WithStreamedUnaryMethod_GetRewardInfo<WithStreamedUnaryMethod_GetBrokerageInfo<WithStreamedUnaryMethod_UpdateBrokerage<WithStreamedUnaryMethod_CreateShieldedTransaction<WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo<WithStreamedUnaryMethod_ScanNoteByIvk<WithStreamedUnaryMethod_ScanAndMarkNoteByIvk<WithStreamedUnaryMethod_ScanNoteByOvk<WithStreamedUnaryMethod_GetSpendingKey<WithStreamedUnaryMethod_GetExpandedSpendingKey<WithStreamedUnaryMethod_GetAkFromAsk<WithStreamedUnaryMethod_GetNkFromNsk<WithStreamedUnaryMethod_GetIncomingViewingKey<WithStreamedUnaryMethod_GetDiversifier<WithStreamedUnaryMethod_GetNewShieldedAddress<WithStreamedUnaryMethod_GetZenPaymentAddress<WithStreamedUnaryMethod_GetRcm<WithStreamedUnaryMethod_IsSpend<WithStreamedUnaryMethod_CreateShieldedTransactionWithoutSpendAuthSig<WithStreamedUnaryMethod_GetShieldTransactionHash<WithStreamedUnaryMethod_CreateSpendAuthSig<WithStreamedUnaryMethod_CreateShieldNullifier<WithStreamedUnaryMethod_CreateShieldedContractParameters<WithStreamedUnaryMethod_CreateShieldedContractParametersWithoutAsk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk<WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent<WithStreamedUnaryMethod_GetTriggerInputForShieldedTRC20Contract<WithStreamedUnaryMethod_CreateCommonTransaction<WithStreamedUnaryMethod_GetTransactionInfoByBlockNum<WithStreamedUnaryMethod_GetBurnTrx<WithStreamedUnaryMethod_GetTransactionFromPending<WithStreamedUnaryMethod_GetTransactionListFromPending<WithStreamedUnaryMethod_GetPendingSize<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_GetAccountById<WithStreamedUnaryMethod_GetAccountBalance<WithStreamedUnaryMethod_GetBlockBalanceTrace<WithStreamedUnaryMethod_CreateTransaction<WithStreamedUnaryMethod_CreateTransaction2<WithStreamedUnaryMethod_BroadcastTransaction<WithStreamedUnaryMethod_UpdateAccount<WithStreamedUnaryMethod_SetAccountId<WithStreamedUnaryMethod_UpdateAccount2<WithStreamedUnaryMethod_VoteWitnessAccount<WithStreamedUnaryMethod_UpdateSetting<WithStreamedUnaryMethod_UpdateEnergyLimit<WithStreamedUnaryMethod_VoteWitnessAccount2<WithStreamedUnaryMethod_CreateAssetIssue<WithStreamedUnaryMethod_CreateAssetIssue2<WithStreamedUnaryMethod_UpdateWitness<WithStreamedUnaryMethod_UpdateWitness2<WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_CreateAccount2<WithStreamedUnaryMethod_CreateWitness<WithStreamedUnaryMethod_CreateWitness2<WithStreamedUnaryMethod_TransferAsset<WithStreamedUnaryMethod_TransferAsset2<WithStreamedUnaryMethod_ParticipateAssetIssue<WithStreamedUnaryMethod_ParticipateAssetIssue2<WithStreamedUnaryMethod_FreezeBalance<WithStreamedUnaryMethod_FreezeBalance2<WithStreamedUnaryMethod_UnfreezeBalance<WithStreamedUnaryMethod_UnfreezeBalance2<WithStreamedUnaryMethod_UnfreezeAsset<WithStreamedUnaryMethod_UnfreezeAsset2<WithStreamedUnaryMethod_WithdrawBalance<WithStreamedUnaryMethod_WithdrawBalance2<WithStreamedUnaryMethod_UpdateAsset<WithStreamedUnaryMethod_UpdateAsset2<WithStreamedUnaryMethod_ProposalCreate<WithStreamedUnaryMethod_ProposalApprove<WithStreamedUnaryMethod_ProposalDelete<WithStreamedUnaryMethod_BuyStorage<WithStreamedUnaryMethod_BuyStorageBytes<WithStreamedUnaryMethod_SellStorage<WithStreamedUnaryMethod_ExchangeCreate<WithStreamedUnaryMethod_ExchangeInject<WithStreamedUnaryMethod_ExchangeWithdraw<WithStreamedUnaryMethod_ExchangeTransaction<WithStreamedUnaryMethod_MarketSellAsset<WithStreamedUnaryMethod_MarketCancelOrder<WithStreamedUnaryMethod_GetMarketOrderById<WithStreamedUnaryMethod_GetMarketOrderByAccount<WithStreamedUnaryMethod_GetMarketPriceByPair<WithStreamedUnaryMethod_GetMarketOrderListByPair<WithStreamedUnaryMethod_GetMarketPairList<WithStreamedUnaryMethod_ListNodes<WithStreamedUnaryMethod_GetAssetIssueByAccount<WithStreamedUnaryMethod_GetAccountNet<WithStreamedUnaryMethod_GetAccountResource<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetAssetIssueListByName<WithStreamedUnaryMethod_GetAssetIssueById<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetNowBlock2<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockByNum2<WithStreamedUnaryMethod_GetTransactionCountByBlockNum<WithStreamedUnaryMethod_GetBlockById<WithStreamedUnaryMethod_GetBlockByLimitNext<WithStreamedUnaryMethod_GetBlockByLimitNext2<WithStreamedUnaryMethod_GetBlockByLatestNum<WithStreamedUnaryMethod_GetBlockByLatestNum2<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_DeployContract<WithStreamedUnaryMethod_GetContract<WithStreamedUnaryMethod_GetContractInfo<WithStreamedUnaryMethod_TriggerContract<WithStreamedUnaryMethod_TriggerConstantContract<WithStreamedUnaryMethod_ClearContractABI<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetDelegatedResource<WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex<WithStreamedUnaryMethod_ListProposals<WithStreamedUnaryMethod_GetPaginatedProposalList<WithStreamedUnaryMethod_GetProposalById<WithStreamedUnaryMethod_ListExchanges<WithStreamedUnaryMethod_GetPaginatedExchangeList<WithStreamedUnaryMethod_GetExchangeById<WithStreamedUnaryMethod_GetChainParameters<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetPaginatedAssetIssueList<WithStreamedUnaryMethod_TotalTransaction<WithStreamedUnaryMethod_GetNextMaintenanceTime<WithStreamedUnaryMethod_GetTransactionSign<WithStreamedUnaryMethod_GetTransactionSign2<WithStreamedUnaryMethod_CreateAddress<WithStreamedUnaryMethod_EasyTransferAsset<WithStreamedUnaryMethod_EasyTransferAssetByPrivate<WithStreamedUnaryMethod_EasyTransfer<WithStreamedUnaryMethod_EasyTransferByPrivate<WithStreamedUnaryMethod_GenerateAddress<WithStreamedUnaryMethod_GetTransactionInfoById<WithStreamedUnaryMethod_AccountPermissionUpdate<WithStreamedUnaryMethod_AddSign<WithStreamedUnaryMethod_GetTransactionSignWeight<WithStreamedUnaryMethod_GetTransactionApprovedList<WithStreamedUnaryMethod_GetNodeInfo<WithStreamedUnaryMethod_GetRewardInfo<WithStreamedUnaryMethod_GetBrokerageInfo<WithStreamedUnaryMethod_UpdateBrokerage<WithStreamedUnaryMethod_CreateShieldedTransaction<WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo<WithStreamedUnaryMethod_ScanNoteByIvk<WithStreamedUnaryMethod_ScanAndMarkNoteByIvk<WithStreamedUnaryMethod_ScanNoteByOvk<WithStreamedUnaryMethod_GetSpendingKey<WithStreamedUnaryMethod_GetExpandedSpendingKey<WithStreamedUnaryMethod_GetAkFromAsk<WithStreamedUnaryMethod_GetNkFromNsk<WithStreamedUnaryMethod_GetIncomingViewingKey<WithStreamedUnaryMethod_GetDiversifier<WithStreamedUnaryMethod_GetNewShieldedAddress<WithStreamedUnaryMethod_GetZenPaymentAddress<WithStreamedUnaryMethod_GetRcm<WithStreamedUnaryMethod_IsSpend<WithStreamedUnaryMethod_CreateShieldedTransactionWithoutSpendAuthSig<WithStreamedUnaryMethod_GetShieldTransactionHash<WithStreamedUnaryMethod_CreateSpendAuthSig<WithStreamedUnaryMethod_CreateShieldNullifier<WithStreamedUnaryMethod_CreateShieldedContractParameters<WithStreamedUnaryMethod_CreateShieldedContractParametersWithoutAsk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk<WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent<WithStreamedUnaryMethod_GetTriggerInputForShieldedTRC20Contract<WithStreamedUnaryMethod_CreateCommonTransaction<WithStreamedUnaryMethod_GetTransactionInfoByBlockNum<WithStreamedUnaryMethod_GetBurnTrx<WithStreamedUnaryMethod_GetTransactionFromPending<WithStreamedUnaryMethod_GetTransactionListFromPending<WithStreamedUnaryMethod_GetPendingSize<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class WalletSolidity final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.WalletSolidity";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> PrepareAsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(PrepareAsyncGetAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> AsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(AsyncGetAccountByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>> PrepareAsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>>(PrepareAsyncGetAccountByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>> PrepareAsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>>(PrepareAsyncListWitnessesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> AsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    // Please use GetNowBlock2 instead of this function.
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    // Use this function instead of GetNowBlock.
    virtual ::grpc::Status GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> AsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(AsyncGetNowBlock2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> PrepareAsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(PrepareAsyncGetNowBlock2Raw(context, request, cq));
    }
    // Please use GetBlockByNum2 instead of this function.
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    // Use this function instead of GetBlockByNum.
    virtual ::grpc::Status GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> AsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(AsyncGetBlockByNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>> PrepareAsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>>(PrepareAsyncGetBlockByNum2Raw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>> AsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>>(AsyncGetDelegatedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>> PrepareAsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>>(PrepareAsyncGetDelegatedResourceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::DelegatedResourceAccountIndex* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>> AsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>>(AsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>> PrepareAsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>>(PrepareAsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>> AsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>>(AsyncGetExchangeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>> PrepareAsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>>(PrepareAsyncGetExchangeByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> AsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(AsyncListExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>> PrepareAsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>>(PrepareAsyncListExchangesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>> PrepareAsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>>(PrepareAsyncGetTransactionByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>> AsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>>(AsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>> PrepareAsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>>(PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>> AsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>>(AsyncGenerateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>> PrepareAsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>>(PrepareAsyncGenerateAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>> AsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>>(AsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>> PrepareAsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>>(PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> AsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(AsyncScanNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>> AsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>>(AsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>> PrepareAsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>>(PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> AsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(AsyncScanNoteByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByOvkRaw(context, request, cq));
    }
    virtual ::grpc::Status IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>> AsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>>(AsyncIsSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>> PrepareAsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>>(PrepareAsyncIsSpendRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    virtual ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    virtual ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>> AsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>>(AsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>> PrepareAsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>>(PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetRewardInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetRewardInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetBrokerageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetBrokerageInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> AsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(AsyncTriggerConstantContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>> PrepareAsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>>(PrepareAsyncTriggerConstantContractRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>> AsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>>(AsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>> PrepareAsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>>(PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>> AsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>>(AsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>> PrepareAsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>>(PrepareAsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> AsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(AsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>> AsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>>(AsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>> PrepareAsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>>(PrepareAsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> AsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(AsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>> AsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>>(AsyncGetMarketPairListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>> PrepareAsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>>(PrepareAsyncGetMarketPairListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> AsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(AsyncGetBurnTrxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>> PrepareAsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>>(PrepareAsyncGetBurnTrxRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetNowBlock2 instead of this function.
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetNowBlock.
      virtual void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetBlockByNum2 instead of this function.
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetBlockByNum.
      virtual void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Warning: do not invoke this interface provided by others.
      virtual void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Account>* PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::WitnessList>* PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockExtention>* PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>* AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceList>* PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>* AsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DelegatedResourceAccountIndex>* PrepareAsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>* AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Exchange>* PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::ExchangeList>* PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Transaction>* PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>* AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfo>* PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>* AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::AddressPrKeyPairMessage>* PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>* AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::IncrementalMerkleVoucherInfo>* PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>* AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesMarked>* PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>* AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::SpendResult>* PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>* AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NullifierResult>* PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionExtention>* PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>* AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionInfoList>* PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>* AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrder>* PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>* AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketPriceList>* PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>* AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MarketOrderPairList>* PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* AsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::NumberMessage>* PrepareAsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> PrepareAsyncGetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(PrepareAsyncGetAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> AsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(AsyncGetAccountByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>> PrepareAsyncGetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Account>>(PrepareAsyncGetAccountByIdRaw(context, request, cq));
    }
    ::grpc::Status ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> AsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(AsyncListWitnessesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>> PrepareAsyncListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>>(PrepareAsyncListWitnessesRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByNameRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> AsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(AsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>> PrepareAsyncGetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>>(PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq));
    }
    ::grpc::Status GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> AsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(AsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>> PrepareAsyncGetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>>(PrepareAsyncGetAssetIssueByIdRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> AsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(AsyncGetNowBlock2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> PrepareAsyncGetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(PrepareAsyncGetNowBlock2Raw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> AsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(AsyncGetBlockByNum2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>> PrepareAsyncGetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>>(PrepareAsyncGetBlockByNum2Raw(context, request, cq));
    }
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq));
    }
    ::grpc::Status GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>> AsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>>(AsyncGetDelegatedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>> PrepareAsyncGetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>>(PrepareAsyncGetDelegatedResourceRaw(context, request, cq));
    }
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::DelegatedResourceAccountIndex* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>> AsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>>(AsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>> PrepareAsyncGetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>>(PrepareAsyncGetDelegatedResourceAccountIndexRaw(context, request, cq));
    }
    ::grpc::Status GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>> AsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>>(AsyncGetExchangeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>> PrepareAsyncGetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>>(PrepareAsyncGetExchangeByIdRaw(context, request, cq));
    }
    ::grpc::Status ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> AsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(AsyncListExchangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>> PrepareAsyncListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>>(PrepareAsyncListExchangesRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> AsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(AsyncGetTransactionByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>> PrepareAsyncGetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>>(PrepareAsyncGetTransactionByIdRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>> AsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>>(AsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>> PrepareAsyncGetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>>(PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq));
    }
    ::grpc::Status GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>> AsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>>(AsyncGenerateAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>> PrepareAsyncGenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>>(PrepareAsyncGenerateAddressRaw(context, request, cq));
    }
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>> AsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>>(AsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>> PrepareAsyncGetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>>(PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq));
    }
    ::grpc::Status ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> AsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(AsyncScanNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>> AsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>>(AsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>> PrepareAsyncScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>>(PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> AsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(AsyncScanNoteByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>> PrepareAsyncScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>>(PrepareAsyncScanNoteByOvkRaw(context, request, cq));
    }
    ::grpc::Status IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>> AsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>>(AsyncIsSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>> PrepareAsyncIsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>>(PrepareAsyncIsSpendRaw(context, request, cq));
    }
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq));
    }
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> AsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(AsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>> PrepareAsyncScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>>(PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq));
    }
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>> AsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>>(AsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>> PrepareAsyncIsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>>(PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq));
    }
    ::grpc::Status GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetRewardInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetRewardInfoRaw(context, request, cq));
    }
    ::grpc::Status GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetBrokerageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetBrokerageInfoRaw(context, request, cq));
    }
    ::grpc::Status TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> AsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(AsyncTriggerConstantContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>> PrepareAsyncTriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>>(PrepareAsyncTriggerConstantContractRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>> AsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>>(AsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>> PrepareAsyncGetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>>(PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>> AsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>>(AsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>> PrepareAsyncGetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>>(PrepareAsyncGetMarketOrderByIdRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> AsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(AsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq));
    }
    ::grpc::Status GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>> AsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>>(AsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>> PrepareAsyncGetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>>(PrepareAsyncGetMarketPriceByPairRaw(context, request, cq));
    }
    ::grpc::Status GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> AsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(AsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>> PrepareAsyncGetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>>(PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq));
    }
    ::grpc::Status GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>> AsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>>(AsyncGetMarketPairListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>> PrepareAsyncGetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>>(PrepareAsyncGetMarketPairListRaw(context, request, cq));
    }
    ::grpc::Status GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> AsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(AsyncGetBurnTrxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>> PrepareAsyncGetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>>(PrepareAsyncGetBurnTrxRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) override;
      void GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)>) override;
      void GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)>) override;
      void ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)>) override;
      void GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) override;
      void GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)>) override;
      void GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, std::function<void(::grpc::Status)>) override;
      void GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)>) override;
      void GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)>) override;
      void ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)>) override;
      void GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)>) override;
      void GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) override;
      void ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)>) override;
      void ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)>) override;
      void ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)>) override;
      void IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) override;
      void ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)>) override;
      void ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)>) override;
      void IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)>) override;
      void TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)>) override;
      void GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)>) override;
      void GetBurnTrx(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Account>* PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* AsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* PrepareAsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* AsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* PrepareAsyncGetBurnTrxRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountById_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWitnesses_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPaginatedAssetIssueList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueListByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssetIssueById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionCountByBlockNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegatedResource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegatedResourceAccountIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExchangeById_;
    const ::grpc::internal::RpcMethod rpcmethod_ListExchanges_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionInfoById_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMerkleTreeVoucherInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanNoteByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanAndMarkNoteByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanNoteByOvk_;
    const ::grpc::internal::RpcMethod rpcmethod_IsSpend_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanShieldedTRC20NotesByIvk_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanShieldedTRC20NotesByOvk_;
    const ::grpc::internal::RpcMethod rpcmethod_IsShieldedTRC20ContractNoteSpent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRewardInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBrokerageInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerConstantContract_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionInfoByBlockNum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderByAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketPriceByPair_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketOrderListByPair_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMarketPairList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurnTrx_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status GetAccountById(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response);
    virtual ::grpc::Status ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response);
    virtual ::grpc::Status GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    virtual ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response);
    virtual ::grpc::Status GetAssetIssueById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response);
    // Please use GetNowBlock2 instead of this function.
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    // Use this function instead of GetNowBlock.
    virtual ::grpc::Status GetNowBlock2(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response);
    // Please use GetBlockByNum2 instead of this function.
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
    // Use this function instead of GetBlockByNum.
    virtual ::grpc::Status GetBlockByNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response);
    virtual ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetDelegatedResource(::grpc::ServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response);
    virtual ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response);
    virtual ::grpc::Status GetExchangeById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response);
    virtual ::grpc::Status ListExchanges(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response);
    virtual ::grpc::Status GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response);
    virtual ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response);
    // Warning: do not invoke this interface provided by others.
    virtual ::grpc::Status GenerateAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response);
    virtual ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response);
    virtual ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response);
    virtual ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response);
    virtual ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response);
    virtual ::grpc::Status IsSpend(::grpc::ServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response);
    virtual ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response);
    virtual ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response);
    virtual ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response);
    virtual ::grpc::Status GetRewardInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response);
    virtual ::grpc::Status TriggerConstantContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response);
    virtual ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response);
    virtual ::grpc::Status GetMarketOrderById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response);
    virtual ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response);
    virtual ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response);
    virtual ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response);
    virtual ::grpc::Status GetMarketPairList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response);
    virtual ::grpc::Status GetBurnTrx(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountById() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountById(::grpc::ServerContext* context, ::protocol::Account* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::WitnessList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::protocol::PaginatedMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueListByName(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AssetIssueContract>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock2(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum2(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResource(::grpc::ServerContext* context, ::protocol::DelegatedResourceMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DelegatedResourceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DelegatedResourceAccountIndex>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExchangeById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Exchange>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListExchanges() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExchanges(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::ExchangeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAddress(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::AddressPrKeyPairMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::protocol::OutputPointInfo* request, ::grpc::ServerAsyncResponseWriter< ::protocol::IncrementalMerkleVoucherInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptAndMarkParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesMarked>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByOvk(::grpc::ServerContext* context, ::protocol::OvkDecryptParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsSpend() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSpend(::grpc::ServerContext* context, ::protocol::NoteParameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::SpendResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::protocol::IvkDecryptTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesTRC20>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::protocol::OvkDecryptTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DecryptNotesTRC20>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::protocol::NfTRC20Parameters* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NullifierResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRewardInfo(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBrokerageInfo(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerConstantContract(::grpc::ServerContext* context, ::protocol::TriggerSmartContract* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionInfoList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderById(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderByAccount(::grpc::ServerContext* context, ::protocol::BytesMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPriceByPair(::grpc::ServerContext* context, ::protocol::MarketOrderPair* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketPriceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderListByPair(::grpc::ServerContext* context, ::protocol::MarketOrderPair* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPairList(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MarketOrderPairList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurnTrx(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::NumberMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccount<WithAsyncMethod_GetAccountById<WithAsyncMethod_ListWitnesses<WithAsyncMethod_GetAssetIssueList<WithAsyncMethod_GetPaginatedAssetIssueList<WithAsyncMethod_GetAssetIssueByName<WithAsyncMethod_GetAssetIssueListByName<WithAsyncMethod_GetAssetIssueById<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetNowBlock2<WithAsyncMethod_GetBlockByNum<WithAsyncMethod_GetBlockByNum2<WithAsyncMethod_GetTransactionCountByBlockNum<WithAsyncMethod_GetDelegatedResource<WithAsyncMethod_GetDelegatedResourceAccountIndex<WithAsyncMethod_GetExchangeById<WithAsyncMethod_ListExchanges<WithAsyncMethod_GetTransactionById<WithAsyncMethod_GetTransactionInfoById<WithAsyncMethod_GenerateAddress<WithAsyncMethod_GetMerkleTreeVoucherInfo<WithAsyncMethod_ScanNoteByIvk<WithAsyncMethod_ScanAndMarkNoteByIvk<WithAsyncMethod_ScanNoteByOvk<WithAsyncMethod_IsSpend<WithAsyncMethod_ScanShieldedTRC20NotesByIvk<WithAsyncMethod_ScanShieldedTRC20NotesByOvk<WithAsyncMethod_IsShieldedTRC20ContractNoteSpent<WithAsyncMethod_GetRewardInfo<WithAsyncMethod_GetBrokerageInfo<WithAsyncMethod_TriggerConstantContract<WithAsyncMethod_GetTransactionInfoByBlockNum<WithAsyncMethod_GetMarketOrderById<WithAsyncMethod_GetMarketOrderByAccount<WithAsyncMethod_GetMarketPriceByPair<WithAsyncMethod_GetMarketOrderListByPair<WithAsyncMethod_GetMarketPairList<WithAsyncMethod_GetBurnTrx<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) { return this->GetAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccount(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::Account>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountById() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) { return this->GetAccountById(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountById(
        ::grpc::MessageAllocator< ::protocol::Account, ::protocol::Account>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::Account, ::protocol::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) { return this->ListWitnesses(context, request, response); }));}
    void SetMessageAllocatorFor_ListWitnesses(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::WitnessList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::WitnessList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWitnesses(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) { return this->GetAssetIssueList(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueList(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response) { return this->GetPaginatedAssetIssueList(context, request, response); }));}
    void SetMessageAllocatorFor_GetPaginatedAssetIssueList(
        ::grpc::MessageAllocator< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::PaginatedMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) { return this->GetAssetIssueByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueByName(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueContract>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByName(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response) { return this->GetAssetIssueListByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueListByName(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueListByName(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) { return this->GetAssetIssueById(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssetIssueById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::AssetIssueContract>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::AssetIssueContract>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) { return this->GetNowBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetNowBlock(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response) { return this->GetNowBlock2(context, request, response); }));}
    void SetMessageAllocatorFor_GetNowBlock2(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::BlockExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) { return this->GetBlockByNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response) { return this->GetBlockByNum2(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByNum2(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::BlockExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::BlockExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response) { return this->GetTransactionCountByBlockNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionCountByBlockNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionCountByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response) { return this->GetDelegatedResource(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegatedResource(
        ::grpc::MessageAllocator< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response) { return this->GetDelegatedResourceAccountIndex(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegatedResourceAccountIndex(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResourceAccountIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Exchange>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response) { return this->GetExchangeById(context, request, response); }));}
    void SetMessageAllocatorFor_GetExchangeById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Exchange>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Exchange>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExchangeById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListExchanges() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ExchangeList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response) { return this->ListExchanges(context, request, response); }));}
    void SetMessageAllocatorFor_ListExchanges(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::ExchangeList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::ExchangeList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) { return this->GetTransactionById(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::Transaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::Transaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::TransactionInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response) { return this->GetTransactionInfoById(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionInfoById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::TransactionInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::TransactionInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response) { return this->GenerateAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateAddress(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response) { return this->GetMerkleTreeVoucherInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetMerkleTreeVoucherInfo(
        ::grpc::MessageAllocator< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMerkleTreeVoucherInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response) { return this->ScanNoteByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanNoteByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response) { return this->ScanAndMarkNoteByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanAndMarkNoteByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanAndMarkNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response) { return this->ScanNoteByOvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanNoteByOvk(
        ::grpc::MessageAllocator< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsSpend() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NoteParameters, ::protocol::SpendResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response) { return this->IsSpend(context, request, response); }));}
    void SetMessageAllocatorFor_IsSpend(
        ::grpc::MessageAllocator< ::protocol::NoteParameters, ::protocol::SpendResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NoteParameters, ::protocol::SpendResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) { return this->ScanShieldedTRC20NotesByIvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanShieldedTRC20NotesByIvk(
        ::grpc::MessageAllocator< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) { return this->ScanShieldedTRC20NotesByOvk(context, request, response); }));}
    void SetMessageAllocatorFor_ScanShieldedTRC20NotesByOvk(
        ::grpc::MessageAllocator< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response) { return this->IsShieldedTRC20ContractNoteSpent(context, request, response); }));}
    void SetMessageAllocatorFor_IsShieldedTRC20ContractNoteSpent(
        ::grpc::MessageAllocator< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsShieldedTRC20ContractNoteSpent(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) { return this->GetRewardInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRewardInfo(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRewardInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) { return this->GetBrokerageInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetBrokerageInfo(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBrokerageInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) { return this->TriggerConstantContract(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerConstantContract(
        ::grpc::MessageAllocator< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerConstantContract(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::TransactionInfoList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response) { return this->GetTransactionInfoByBlockNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionInfoByBlockNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::TransactionInfoList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::TransactionInfoList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrder>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response) { return this->GetMarketOrderById(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderById(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::MarketOrder>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrder>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response) { return this->GetMarketOrderByAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderByAccount(
        ::grpc::MessageAllocator< ::protocol::BytesMessage, ::protocol::MarketOrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::BytesMessage, ::protocol::MarketOrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response) { return this->GetMarketPriceByPair(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketPriceByPair(
        ::grpc::MessageAllocator< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketPriceList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPriceByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response) { return this->GetMarketOrderListByPair(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketOrderListByPair(
        ::grpc::MessageAllocator< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::MarketOrderPair, ::protocol::MarketOrderList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderListByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response) { return this->GetMarketPairList(context, request, response); }));}
    void SetMessageAllocatorFor_GetMarketPairList(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPairList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) { return this->GetBurnTrx(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurnTrx(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::NumberMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::NumberMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBurnTrx(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAccount<WithCallbackMethod_GetAccountById<WithCallbackMethod_ListWitnesses<WithCallbackMethod_GetAssetIssueList<WithCallbackMethod_GetPaginatedAssetIssueList<WithCallbackMethod_GetAssetIssueByName<WithCallbackMethod_GetAssetIssueListByName<WithCallbackMethod_GetAssetIssueById<WithCallbackMethod_GetNowBlock<WithCallbackMethod_GetNowBlock2<WithCallbackMethod_GetBlockByNum<WithCallbackMethod_GetBlockByNum2<WithCallbackMethod_GetTransactionCountByBlockNum<WithCallbackMethod_GetDelegatedResource<WithCallbackMethod_GetDelegatedResourceAccountIndex<WithCallbackMethod_GetExchangeById<WithCallbackMethod_ListExchanges<WithCallbackMethod_GetTransactionById<WithCallbackMethod_GetTransactionInfoById<WithCallbackMethod_GenerateAddress<WithCallbackMethod_GetMerkleTreeVoucherInfo<WithCallbackMethod_ScanNoteByIvk<WithCallbackMethod_ScanAndMarkNoteByIvk<WithCallbackMethod_ScanNoteByOvk<WithCallbackMethod_IsSpend<WithCallbackMethod_ScanShieldedTRC20NotesByIvk<WithCallbackMethod_ScanShieldedTRC20NotesByOvk<WithCallbackMethod_IsShieldedTRC20ContractNoteSpent<WithCallbackMethod_GetRewardInfo<WithCallbackMethod_GetBrokerageInfo<WithCallbackMethod_TriggerConstantContract<WithCallbackMethod_GetTransactionInfoByBlockNum<WithCallbackMethod_GetMarketOrderById<WithCallbackMethod_GetMarketOrderByAccount<WithCallbackMethod_GetMarketPriceByPair<WithCallbackMethod_GetMarketOrderListByPair<WithCallbackMethod_GetMarketPairList<WithCallbackMethod_GetBurnTrx<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountById() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListExchanges() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsSpend() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountById() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWitnesses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueListByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssetIssueById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExchangeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListExchanges() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListExchanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanNoteByOvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsSpend() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSpend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRewardInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBrokerageInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerConstantContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderByAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPriceByPair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketOrderListByPair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMarketPairList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurnTrx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountById() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListWitnesses(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWitnesses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPaginatedAssetIssueList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPaginatedAssetIssueList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueByName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueListByName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueListByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssetIssueById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssetIssueById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNowBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNowBlock2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByNum2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionCountByBlockNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionCountByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegatedResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegatedResourceAccountIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegatedResourceAccountIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExchangeById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExchangeById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListExchanges() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListExchanges(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListExchanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionInfoById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GenerateAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMerkleTreeVoucherInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMerkleTreeVoucherInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanNoteByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanAndMarkNoteByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanAndMarkNoteByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanNoteByOvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanNoteByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsSpend() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsSpend(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanShieldedTRC20NotesByIvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByIvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanShieldedTRC20NotesByOvk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanShieldedTRC20NotesByOvk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsShieldedTRC20ContractNoteSpent(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsShieldedTRC20ContractNoteSpent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRewardInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRewardInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBrokerageInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBrokerageInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerConstantContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerConstantContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionInfoByBlockNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionInfoByBlockNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderByAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderByAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketPriceByPair(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPriceByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketOrderListByPair(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketOrderListByPair(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMarketPairList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMarketPairList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurnTrx(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBurnTrx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::Account>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::Account>* streamer) {
                       return this->StreamedGetAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountById() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::Account, ::protocol::Account>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::Account, ::protocol::Account>* streamer) {
                       return this->StreamedGetAccountById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountById(::grpc::ServerContext* /*context*/, const ::protocol::Account* /*request*/, ::protocol::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::Account,::protocol::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWitnesses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListWitnesses() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::WitnessList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::WitnessList>* streamer) {
                       return this->StreamedListWitnesses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListWitnesses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWitnesses(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::WitnessList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWitnesses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::WitnessList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetAssetIssueList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPaginatedAssetIssueList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPaginatedAssetIssueList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::PaginatedMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::PaginatedMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetPaginatedAssetIssueList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPaginatedAssetIssueList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPaginatedAssetIssueList(::grpc::ServerContext* /*context*/, const ::protocol::PaginatedMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPaginatedAssetIssueList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::PaginatedMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueByName() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueContract>* streamer) {
                       return this->StreamedGetAssetIssueByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueListByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueListByName() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueList>* streamer) {
                       return this->StreamedGetAssetIssueListByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueListByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueListByName(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueListByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssetIssueById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssetIssueById() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::AssetIssueContract>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::AssetIssueContract>* streamer) {
                       return this->StreamedGetAssetIssueById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssetIssueById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssetIssueById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::AssetIssueContract* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssetIssueById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::AssetIssueContract>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetNowBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock2() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::BlockExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::BlockExtention>* streamer) {
                       return this->StreamedGetNowBlock2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNowBlock2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock2(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BlockExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetBlockByNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum2() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::BlockExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::BlockExtention>* streamer) {
                       return this->StreamedGetBlockByNum2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum2(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::BlockExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::BlockExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionCountByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionCountByBlockNum() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetTransactionCountByBlockNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionCountByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionCountByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionCountByBlockNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegatedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegatedResource() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList>* streamer) {
                       return this->StreamedGetDelegatedResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegatedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegatedResource(::grpc::ServerContext* /*context*/, const ::protocol::DelegatedResourceMessage* /*request*/, ::protocol::DelegatedResourceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegatedResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::DelegatedResourceMessage,::protocol::DelegatedResourceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex>* streamer) {
                       return this->StreamedGetDelegatedResourceAccountIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegatedResourceAccountIndex(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::DelegatedResourceAccountIndex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegatedResourceAccountIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::DelegatedResourceAccountIndex>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExchangeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExchangeById() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Exchange>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Exchange>* streamer) {
                       return this->StreamedGetExchangeById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExchangeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExchangeById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Exchange* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExchangeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Exchange>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListExchanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListExchanges() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::ExchangeList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::ExchangeList>* streamer) {
                       return this->StreamedListExchanges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListExchanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListExchanges(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::ExchangeList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListExchanges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::ExchangeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionById() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::Transaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::Transaction>* streamer) {
                       return this->StreamedGetTransactionById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::Transaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionInfoById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionInfoById() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::TransactionInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::TransactionInfo>* streamer) {
                       return this->StreamedGetTransactionInfoById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionInfoById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionInfoById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::TransactionInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionInfoById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::TransactionInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateAddress() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage>* streamer) {
                       return this->StreamedGenerateAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateAddress(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::AddressPrKeyPairMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::AddressPrKeyPairMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo>* streamer) {
                       return this->StreamedGetMerkleTreeVoucherInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMerkleTreeVoucherInfo(::grpc::ServerContext* /*context*/, const ::protocol::OutputPointInfo* /*request*/, ::protocol::IncrementalMerkleVoucherInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMerkleTreeVoucherInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OutputPointInfo,::protocol::IncrementalMerkleVoucherInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanNoteByIvk() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes>* streamer) {
                       return this->StreamedScanNoteByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanNoteByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptParameters,::protocol::DecryptNotes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanAndMarkNoteByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanAndMarkNoteByIvk() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked>* streamer) {
                       return this->StreamedScanAndMarkNoteByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanAndMarkNoteByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanAndMarkNoteByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptAndMarkParameters* /*request*/, ::protocol::DecryptNotesMarked* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanAndMarkNoteByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptAndMarkParameters,::protocol::DecryptNotesMarked>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanNoteByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanNoteByOvk() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes>* streamer) {
                       return this->StreamedScanNoteByOvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanNoteByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanNoteByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptParameters* /*request*/, ::protocol::DecryptNotes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanNoteByOvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OvkDecryptParameters,::protocol::DecryptNotes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsSpend() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NoteParameters, ::protocol::SpendResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NoteParameters, ::protocol::SpendResult>* streamer) {
                       return this->StreamedIsSpend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsSpend(::grpc::ServerContext* /*context*/, const ::protocol::NoteParameters* /*request*/, ::protocol::SpendResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsSpend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NoteParameters,::protocol::SpendResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* streamer) {
                       return this->StreamedScanShieldedTRC20NotesByIvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* /*context*/, const ::protocol::IvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::IvkDecryptTRC20Parameters,::protocol::DecryptNotesTRC20>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20>* streamer) {
                       return this->StreamedScanShieldedTRC20NotesByOvk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* /*context*/, const ::protocol::OvkDecryptTRC20Parameters* /*request*/, ::protocol::DecryptNotesTRC20* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::OvkDecryptTRC20Parameters,::protocol::DecryptNotesTRC20>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NfTRC20Parameters, ::protocol::NullifierResult>* streamer) {
                       return this->StreamedIsShieldedTRC20ContractNoteSpent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* /*context*/, const ::protocol::NfTRC20Parameters* /*request*/, ::protocol::NullifierResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NfTRC20Parameters,::protocol::NullifierResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRewardInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRewardInfo() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetRewardInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRewardInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRewardInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRewardInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBrokerageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBrokerageInfo() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetBrokerageInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBrokerageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBrokerageInfo(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBrokerageInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerConstantContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerConstantContract() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::TriggerSmartContract, ::protocol::TransactionExtention>* streamer) {
                       return this->StreamedTriggerConstantContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerConstantContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerConstantContract(::grpc::ServerContext* /*context*/, const ::protocol::TriggerSmartContract* /*request*/, ::protocol::TransactionExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerConstantContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::TriggerSmartContract,::protocol::TransactionExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionInfoByBlockNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionInfoByBlockNum() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::TransactionInfoList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::TransactionInfoList>* streamer) {
                       return this->StreamedGetTransactionInfoByBlockNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionInfoByBlockNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionInfoByBlockNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::TransactionInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionInfoByBlockNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::TransactionInfoList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderById() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::MarketOrder>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::MarketOrder>* streamer) {
                       return this->StreamedGetMarketOrderById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderById(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrder* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::MarketOrder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderByAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderByAccount() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::BytesMessage, ::protocol::MarketOrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::BytesMessage, ::protocol::MarketOrderList>* streamer) {
                       return this->StreamedGetMarketOrderByAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderByAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderByAccount(::grpc::ServerContext* /*context*/, const ::protocol::BytesMessage* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderByAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::BytesMessage,::protocol::MarketOrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketPriceByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketPriceByPair() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketOrderPair, ::protocol::MarketPriceList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketOrderPair, ::protocol::MarketPriceList>* streamer) {
                       return this->StreamedGetMarketPriceByPair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketPriceByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketPriceByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketPriceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketPriceByPair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketOrderPair,::protocol::MarketPriceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketOrderListByPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketOrderListByPair() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::MarketOrderPair, ::protocol::MarketOrderList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::MarketOrderPair, ::protocol::MarketOrderList>* streamer) {
                       return this->StreamedGetMarketOrderListByPair(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketOrderListByPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketOrderListByPair(::grpc::ServerContext* /*context*/, const ::protocol::MarketOrderPair* /*request*/, ::protocol::MarketOrderList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketOrderListByPair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::MarketOrderPair,::protocol::MarketOrderList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMarketPairList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMarketPairList() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::MarketOrderPairList>* streamer) {
                       return this->StreamedGetMarketPairList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMarketPairList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMarketPairList(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MarketOrderPairList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMarketPairList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::MarketOrderPairList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurnTrx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurnTrx() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::NumberMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::NumberMessage>* streamer) {
                       return this->StreamedGetBurnTrx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurnTrx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurnTrx(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::NumberMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurnTrx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::NumberMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_GetAccountById<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetPaginatedAssetIssueList<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetAssetIssueListByName<WithStreamedUnaryMethod_GetAssetIssueById<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetNowBlock2<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockByNum2<WithStreamedUnaryMethod_GetTransactionCountByBlockNum<WithStreamedUnaryMethod_GetDelegatedResource<WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex<WithStreamedUnaryMethod_GetExchangeById<WithStreamedUnaryMethod_ListExchanges<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_GetTransactionInfoById<WithStreamedUnaryMethod_GenerateAddress<WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo<WithStreamedUnaryMethod_ScanNoteByIvk<WithStreamedUnaryMethod_ScanAndMarkNoteByIvk<WithStreamedUnaryMethod_ScanNoteByOvk<WithStreamedUnaryMethod_IsSpend<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk<WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent<WithStreamedUnaryMethod_GetRewardInfo<WithStreamedUnaryMethod_GetBrokerageInfo<WithStreamedUnaryMethod_TriggerConstantContract<WithStreamedUnaryMethod_GetTransactionInfoByBlockNum<WithStreamedUnaryMethod_GetMarketOrderById<WithStreamedUnaryMethod_GetMarketOrderByAccount<WithStreamedUnaryMethod_GetMarketPriceByPair<WithStreamedUnaryMethod_GetMarketOrderListByPair<WithStreamedUnaryMethod_GetMarketPairList<WithStreamedUnaryMethod_GetBurnTrx<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_GetAccountById<WithStreamedUnaryMethod_ListWitnesses<WithStreamedUnaryMethod_GetAssetIssueList<WithStreamedUnaryMethod_GetPaginatedAssetIssueList<WithStreamedUnaryMethod_GetAssetIssueByName<WithStreamedUnaryMethod_GetAssetIssueListByName<WithStreamedUnaryMethod_GetAssetIssueById<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetNowBlock2<WithStreamedUnaryMethod_GetBlockByNum<WithStreamedUnaryMethod_GetBlockByNum2<WithStreamedUnaryMethod_GetTransactionCountByBlockNum<WithStreamedUnaryMethod_GetDelegatedResource<WithStreamedUnaryMethod_GetDelegatedResourceAccountIndex<WithStreamedUnaryMethod_GetExchangeById<WithStreamedUnaryMethod_ListExchanges<WithStreamedUnaryMethod_GetTransactionById<WithStreamedUnaryMethod_GetTransactionInfoById<WithStreamedUnaryMethod_GenerateAddress<WithStreamedUnaryMethod_GetMerkleTreeVoucherInfo<WithStreamedUnaryMethod_ScanNoteByIvk<WithStreamedUnaryMethod_ScanAndMarkNoteByIvk<WithStreamedUnaryMethod_ScanNoteByOvk<WithStreamedUnaryMethod_IsSpend<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByIvk<WithStreamedUnaryMethod_ScanShieldedTRC20NotesByOvk<WithStreamedUnaryMethod_IsShieldedTRC20ContractNoteSpent<WithStreamedUnaryMethod_GetRewardInfo<WithStreamedUnaryMethod_GetBrokerageInfo<WithStreamedUnaryMethod_TriggerConstantContract<WithStreamedUnaryMethod_GetTransactionInfoByBlockNum<WithStreamedUnaryMethod_GetMarketOrderById<WithStreamedUnaryMethod_GetMarketOrderByAccount<WithStreamedUnaryMethod_GetMarketPriceByPair<WithStreamedUnaryMethod_GetMarketOrderListByPair<WithStreamedUnaryMethod_GetMarketPairList<WithStreamedUnaryMethod_GetBurnTrx<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class WalletExtension final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.WalletExtension";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Please use GetTransactionsFromThis2 instead of this function.
    virtual ::grpc::Status GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> AsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(AsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> PrepareAsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(PrepareAsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    // Use this function instead of GetTransactionsFromThis.
    virtual ::grpc::Status GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>> AsyncGetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>>(AsyncGetTransactionsFromThis2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>> PrepareAsyncGetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>>(PrepareAsyncGetTransactionsFromThis2Raw(context, request, cq));
    }
    // Please use GetTransactionsToThis2 instead of this function.
    virtual ::grpc::Status GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> AsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(AsyncGetTransactionsToThisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>> PrepareAsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>>(PrepareAsyncGetTransactionsToThisRaw(context, request, cq));
    }
    // Use this function instead of GetTransactionsToThis.
    virtual ::grpc::Status GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>> AsyncGetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>>(AsyncGetTransactionsToThis2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>> PrepareAsyncGetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>>(PrepareAsyncGetTransactionsToThis2Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Please use GetTransactionsFromThis2 instead of this function.
      virtual void GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetTransactionsFromThis.
      virtual void GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Please use GetTransactionsToThis2 instead of this function.
      virtual void GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Use this function instead of GetTransactionsToThis.
      virtual void GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* PrepareAsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>* AsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>* PrepareAsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionList>* PrepareAsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>* AsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::TransactionListExtention>* PrepareAsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> AsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(AsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> PrepareAsyncGetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(PrepareAsyncGetTransactionsFromThisRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>> AsyncGetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>>(AsyncGetTransactionsFromThis2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>> PrepareAsyncGetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>>(PrepareAsyncGetTransactionsFromThis2Raw(context, request, cq));
    }
    ::grpc::Status GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> AsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(AsyncGetTransactionsToThisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>> PrepareAsyncGetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>>(PrepareAsyncGetTransactionsToThisRaw(context, request, cq));
    }
    ::grpc::Status GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>> AsyncGetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>>(AsyncGetTransactionsToThis2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>> PrepareAsyncGetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>>(PrepareAsyncGetTransactionsToThis2Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)>) override;
      void GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* PrepareAsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* AsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* PrepareAsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* PrepareAsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* AsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* PrepareAsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsFromThis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsFromThis2_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsToThis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTransactionsToThis2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Please use GetTransactionsFromThis2 instead of this function.
    virtual ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response);
    // Use this function instead of GetTransactionsFromThis.
    virtual ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response);
    // Please use GetTransactionsToThis2 instead of this function.
    virtual ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response);
    // Use this function instead of GetTransactionsToThis.
    virtual ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThis(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThis2(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionListExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThis(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThis2(::grpc::ServerContext* context, ::protocol::AccountPaginated* request, ::grpc::ServerAsyncResponseWriter< ::protocol::TransactionListExtention>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTransactionsFromThis<WithAsyncMethod_GetTransactionsFromThis2<WithAsyncMethod_GetTransactionsToThis<WithAsyncMethod_GetTransactionsToThis2<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) { return this->GetTransactionsFromThis(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionsFromThis(
        ::grpc::MessageAllocator< ::protocol::AccountPaginated, ::protocol::TransactionList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsFromThis(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response) { return this->GetTransactionsFromThis2(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionsFromThis2(
        ::grpc::MessageAllocator< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsFromThis2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) { return this->GetTransactionsToThis(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionsToThis(
        ::grpc::MessageAllocator< ::protocol::AccountPaginated, ::protocol::TransactionList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsToThis(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response) { return this->GetTransactionsToThis2(context, request, response); }));}
    void SetMessageAllocatorFor_GetTransactionsToThis2(
        ::grpc::MessageAllocator< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::AccountPaginated, ::protocol::TransactionListExtention>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsToThis2(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTransactionsFromThis<WithCallbackMethod_GetTransactionsFromThis2<WithCallbackMethod_GetTransactionsToThis<WithCallbackMethod_GetTransactionsToThis2<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsFromThis2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTransactionsToThis2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionsFromThis(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsFromThis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionsFromThis2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsFromThis2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionsToThis(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsToThis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTransactionsToThis2(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTransactionsToThis2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsFromThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsFromThis() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountPaginated, ::protocol::TransactionList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountPaginated, ::protocol::TransactionList>* streamer) {
                       return this->StreamedGetTransactionsFromThis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionsFromThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsFromThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsFromThis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsFromThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsFromThis2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountPaginated, ::protocol::TransactionListExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountPaginated, ::protocol::TransactionListExtention>* streamer) {
                       return this->StreamedGetTransactionsFromThis2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionsFromThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsFromThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsFromThis2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionListExtention>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsToThis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsToThis() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountPaginated, ::protocol::TransactionList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountPaginated, ::protocol::TransactionList>* streamer) {
                       return this->StreamedGetTransactionsToThis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionsToThis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsToThis(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsToThis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTransactionsToThis2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTransactionsToThis2() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::AccountPaginated, ::protocol::TransactionListExtention>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::AccountPaginated, ::protocol::TransactionListExtention>* streamer) {
                       return this->StreamedGetTransactionsToThis2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTransactionsToThis2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTransactionsToThis2(::grpc::ServerContext* /*context*/, const ::protocol::AccountPaginated* /*request*/, ::protocol::TransactionListExtention* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTransactionsToThis2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::AccountPaginated,::protocol::TransactionListExtention>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTransactionsFromThis<WithStreamedUnaryMethod_GetTransactionsFromThis2<WithStreamedUnaryMethod_GetTransactionsToThis<WithStreamedUnaryMethod_GetTransactionsToThis2<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTransactionsFromThis<WithStreamedUnaryMethod_GetTransactionsFromThis2<WithStreamedUnaryMethod_GetTransactionsToThis<WithStreamedUnaryMethod_GetTransactionsToThis2<Service > > > > StreamedService;
};

// the api of tron's db
class Database final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Database";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // for tapos
    virtual ::grpc::Status getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>> AsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>>(AsyncgetBlockReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>> PrepareAsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>>(PrepareAsyncgetBlockReferenceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>> AsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>>(AsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>> PrepareAsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>>(PrepareAsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // for tapos
      virtual void getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>* AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::BlockReference>* PrepareAsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>* AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::DynamicProperties>* PrepareAsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>> AsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>>(AsyncgetBlockReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>> PrepareAsyncgetBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>>(PrepareAsyncgetBlockReferenceRaw(context, request, cq));
    }
    ::grpc::Status GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>> AsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>>(AsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>> PrepareAsyncGetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>>(PrepareAsyncGetDynamicPropertiesRaw(context, request, cq));
    }
    ::grpc::Status GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetNowBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetNowBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> AsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(AsyncGetBlockByNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>> PrepareAsyncGetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::Block>>(PrepareAsyncGetBlockByNumRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, std::function<void(::grpc::Status)>) override;
      void getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, std::function<void(::grpc::Status)>) override;
      void GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)>) override;
      void GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* PrepareAsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* PrepareAsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::Block>* PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getBlockReference_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDynamicProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNowBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockByNum_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // for tapos
    virtual ::grpc::Status getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response);
    virtual ::grpc::Status GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response);
    virtual ::grpc::Status GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response);
    virtual ::grpc::Status GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getBlockReference() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlockReference(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::BlockReference>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDynamicProperties(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::DynamicProperties>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::protocol::NumberMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getBlockReference<WithAsyncMethod_GetDynamicProperties<WithAsyncMethod_GetNowBlock<WithAsyncMethod_GetBlockByNum<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getBlockReference() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockReference>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) { return this->getBlockReference(context, request, response); }));}
    void SetMessageAllocatorFor_getBlockReference(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::BlockReference>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::BlockReference>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBlockReference(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::DynamicProperties>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) { return this->GetDynamicProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetDynamicProperties(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::DynamicProperties>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::DynamicProperties>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDynamicProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) { return this->GetNowBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetNowBlock(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) { return this->GetBlockByNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockByNum(
        ::grpc::MessageAllocator< ::protocol::NumberMessage, ::protocol::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::NumberMessage, ::protocol::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getBlockReference<WithCallbackMethod_GetDynamicProperties<WithCallbackMethod_GetNowBlock<WithCallbackMethod_GetBlockByNum<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getBlockReference() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getBlockReference() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlockReference(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDynamicProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNowBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockByNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getBlockReference() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getBlockReference(context, request, response); }));
    }
    ~WithRawCallbackMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBlockReference(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDynamicProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDynamicProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNowBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNowBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockByNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockByNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBlockReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getBlockReference() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::BlockReference>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::BlockReference>* streamer) {
                       return this->StreamedgetBlockReference(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getBlockReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBlockReference(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::BlockReference* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBlockReference(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::BlockReference>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDynamicProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDynamicProperties() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::DynamicProperties>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::DynamicProperties>* streamer) {
                       return this->StreamedGetDynamicProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDynamicProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDynamicProperties(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::DynamicProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDynamicProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::DynamicProperties>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNowBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNowBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetNowBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNowBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNowBlock(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNowBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockByNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockByNum() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::NumberMessage, ::protocol::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::NumberMessage, ::protocol::Block>* streamer) {
                       return this->StreamedGetBlockByNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockByNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockByNum(::grpc::ServerContext* /*context*/, const ::protocol::NumberMessage* /*request*/, ::protocol::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockByNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::NumberMessage,::protocol::Block>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getBlockReference<WithStreamedUnaryMethod_GetDynamicProperties<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getBlockReference<WithStreamedUnaryMethod_GetDynamicProperties<WithStreamedUnaryMethod_GetNowBlock<WithStreamedUnaryMethod_GetBlockByNum<Service > > > > StreamedService;
};

class Monitor final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Monitor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MetricsInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>> AsyncGetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>>(AsyncGetStatsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>> PrepareAsyncGetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>>(PrepareAsyncGetStatsInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>* AsyncGetStatsInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::MetricsInfo>* PrepareAsyncGetStatsInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MetricsInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>> AsyncGetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>>(AsyncGetStatsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>> PrepareAsyncGetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>>(PrepareAsyncGetStatsInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response, std::function<void(::grpc::Status)>) override;
      void GetStatsInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>* AsyncGetStatsInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::MetricsInfo>* PrepareAsyncGetStatsInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatsInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStatsInfo(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatsInfo(::grpc::ServerContext* context, ::protocol::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::protocol::MetricsInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatsInfo<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MetricsInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MetricsInfo* response) { return this->GetStatsInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatsInfo(
        ::grpc::MessageAllocator< ::protocol::EmptyMessage, ::protocol::MetricsInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protocol::EmptyMessage, ::protocol::MetricsInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetStatsInfo<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatsInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatsInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatsInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::EmptyMessage, ::protocol::MetricsInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protocol::EmptyMessage, ::protocol::MetricsInfo>* streamer) {
                       return this->StreamedGetStatsInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatsInfo(::grpc::ServerContext* /*context*/, const ::protocol::EmptyMessage* /*request*/, ::protocol::MetricsInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatsInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::EmptyMessage,::protocol::MetricsInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatsInfo<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatsInfo<Service > StreamedService;
};

// the api of tron's network such as node list.
class Network final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.Network";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    class async_interface {
     public:
      virtual ~async_interface() {}
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    class async final :
      public StubInterface::async_interface {
     public:
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
  };
  typedef Service AsyncService;
  typedef Service CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace protocol


#endif  // GRPC_api_2fapi_2eproto__INCLUDED
