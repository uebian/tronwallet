// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/api.proto

#include "api/api.pb.h"
#include "api/api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protocol {

static const char* Wallet_method_names[] = {
  "/protocol.Wallet/GetAccount",
  "/protocol.Wallet/GetAccountById",
  "/protocol.Wallet/GetAccountBalance",
  "/protocol.Wallet/GetBlockBalanceTrace",
  "/protocol.Wallet/CreateTransaction",
  "/protocol.Wallet/CreateTransaction2",
  "/protocol.Wallet/BroadcastTransaction",
  "/protocol.Wallet/UpdateAccount",
  "/protocol.Wallet/SetAccountId",
  "/protocol.Wallet/UpdateAccount2",
  "/protocol.Wallet/VoteWitnessAccount",
  "/protocol.Wallet/UpdateSetting",
  "/protocol.Wallet/UpdateEnergyLimit",
  "/protocol.Wallet/VoteWitnessAccount2",
  "/protocol.Wallet/CreateAssetIssue",
  "/protocol.Wallet/CreateAssetIssue2",
  "/protocol.Wallet/UpdateWitness",
  "/protocol.Wallet/UpdateWitness2",
  "/protocol.Wallet/CreateAccount",
  "/protocol.Wallet/CreateAccount2",
  "/protocol.Wallet/CreateWitness",
  "/protocol.Wallet/CreateWitness2",
  "/protocol.Wallet/TransferAsset",
  "/protocol.Wallet/TransferAsset2",
  "/protocol.Wallet/ParticipateAssetIssue",
  "/protocol.Wallet/ParticipateAssetIssue2",
  "/protocol.Wallet/FreezeBalance",
  "/protocol.Wallet/FreezeBalance2",
  "/protocol.Wallet/UnfreezeBalance",
  "/protocol.Wallet/UnfreezeBalance2",
  "/protocol.Wallet/UnfreezeAsset",
  "/protocol.Wallet/UnfreezeAsset2",
  "/protocol.Wallet/WithdrawBalance",
  "/protocol.Wallet/WithdrawBalance2",
  "/protocol.Wallet/UpdateAsset",
  "/protocol.Wallet/UpdateAsset2",
  "/protocol.Wallet/ProposalCreate",
  "/protocol.Wallet/ProposalApprove",
  "/protocol.Wallet/ProposalDelete",
  "/protocol.Wallet/BuyStorage",
  "/protocol.Wallet/BuyStorageBytes",
  "/protocol.Wallet/SellStorage",
  "/protocol.Wallet/ExchangeCreate",
  "/protocol.Wallet/ExchangeInject",
  "/protocol.Wallet/ExchangeWithdraw",
  "/protocol.Wallet/ExchangeTransaction",
  "/protocol.Wallet/ListNodes",
  "/protocol.Wallet/GetAssetIssueByAccount",
  "/protocol.Wallet/GetAccountNet",
  "/protocol.Wallet/GetAccountResource",
  "/protocol.Wallet/GetAssetIssueByName",
  "/protocol.Wallet/GetAssetIssueListByName",
  "/protocol.Wallet/GetAssetIssueById",
  "/protocol.Wallet/GetNowBlock",
  "/protocol.Wallet/GetNowBlock2",
  "/protocol.Wallet/GetBlockByNum",
  "/protocol.Wallet/GetBlockByNum2",
  "/protocol.Wallet/GetTransactionCountByBlockNum",
  "/protocol.Wallet/GetBlockById",
  "/protocol.Wallet/GetBlockByLimitNext",
  "/protocol.Wallet/GetBlockByLimitNext2",
  "/protocol.Wallet/GetBlockByLatestNum",
  "/protocol.Wallet/GetBlockByLatestNum2",
  "/protocol.Wallet/GetTransactionById",
  "/protocol.Wallet/DeployContract",
  "/protocol.Wallet/GetContract",
  "/protocol.Wallet/GetContractInfo",
  "/protocol.Wallet/TriggerContract",
  "/protocol.Wallet/TriggerConstantContract",
  "/protocol.Wallet/ClearContractABI",
  "/protocol.Wallet/ListWitnesses",
  "/protocol.Wallet/GetDelegatedResource",
  "/protocol.Wallet/ListProposals",
  "/protocol.Wallet/GetPaginatedProposalList",
  "/protocol.Wallet/GetProposalById",
  "/protocol.Wallet/ListExchanges",
  "/protocol.Wallet/GetPaginatedExchangeList",
  "/protocol.Wallet/GetExchangeById",
  "/protocol.Wallet/GetChainParameters",
  "/protocol.Wallet/GetAssetIssueList",
  "/protocol.Wallet/GetPaginatedAssetIssueList",
  "/protocol.Wallet/TotalTransaction",
  "/protocol.Wallet/GetNextMaintenanceTime",
  "/protocol.Wallet/GetTransactionSign",
  "/protocol.Wallet/GetTransactionSign2",
  "/protocol.Wallet/CreateAddress",
  "/protocol.Wallet/EasyTransferAsset",
  "/protocol.Wallet/EasyTransferAssetByPrivate",
  "/protocol.Wallet/EasyTransfer",
  "/protocol.Wallet/EasyTransferByPrivate",
  "/protocol.Wallet/GenerateAddress",
  "/protocol.Wallet/GetTransactionInfoById",
  "/protocol.Wallet/AccountPermissionUpdate",
  "/protocol.Wallet/AddSign",
  "/protocol.Wallet/GetTransactionSignWeight",
  "/protocol.Wallet/GetTransactionApprovedList",
  "/protocol.Wallet/GetNodeInfo",
  "/protocol.Wallet/GetRewardInfo",
  "/protocol.Wallet/GetBrokerageInfo",
  "/protocol.Wallet/UpdateBrokerage",
  "/protocol.Wallet/CreateShieldedTransaction",
  "/protocol.Wallet/GetMerkleTreeVoucherInfo",
  "/protocol.Wallet/ScanNoteByIvk",
  "/protocol.Wallet/ScanAndMarkNoteByIvk",
  "/protocol.Wallet/ScanNoteByOvk",
  "/protocol.Wallet/GetSpendingKey",
  "/protocol.Wallet/GetExpandedSpendingKey",
  "/protocol.Wallet/GetAkFromAsk",
  "/protocol.Wallet/GetNkFromNsk",
  "/protocol.Wallet/GetIncomingViewingKey",
  "/protocol.Wallet/GetDiversifier",
  "/protocol.Wallet/GetNewShieldedAddress",
  "/protocol.Wallet/GetZenPaymentAddress",
  "/protocol.Wallet/GetRcm",
  "/protocol.Wallet/IsSpend",
  "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig",
  "/protocol.Wallet/GetShieldTransactionHash",
  "/protocol.Wallet/CreateSpendAuthSig",
  "/protocol.Wallet/CreateShieldNullifier",
  "/protocol.Wallet/CreateShieldedContractParameters",
  "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk",
  "/protocol.Wallet/ScanShieldedTRC20NotesByIvk",
  "/protocol.Wallet/ScanShieldedTRC20NotesByOvk",
  "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent",
  "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract",
  "/protocol.Wallet/CreateCommonTransaction",
  "/protocol.Wallet/GetTransactionInfoByBlockNum",
  "/protocol.Wallet/MarketSellAsset",
  "/protocol.Wallet/MarketCancelOrder",
  "/protocol.Wallet/GetMarketOrderByAccount",
  "/protocol.Wallet/GetMarketOrderById",
  "/protocol.Wallet/GetMarketPriceByPair",
  "/protocol.Wallet/GetMarketOrderListByPair",
  "/protocol.Wallet/GetMarketPairList",
};

std::unique_ptr< Wallet::Stub> Wallet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Wallet::Stub> stub(new Wallet::Stub(channel, options));
  return stub;
}

Wallet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAccount_(Wallet_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountById_(Wallet_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountBalance_(Wallet_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockBalanceTrace_(Wallet_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTransaction_(Wallet_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTransaction2_(Wallet_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastTransaction_(Wallet_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAccount_(Wallet_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAccountId_(Wallet_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAccount2_(Wallet_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VoteWitnessAccount_(Wallet_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSetting_(Wallet_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEnergyLimit_(Wallet_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VoteWitnessAccount2_(Wallet_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAssetIssue_(Wallet_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAssetIssue2_(Wallet_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWitness_(Wallet_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWitness2_(Wallet_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAccount_(Wallet_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAccount2_(Wallet_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWitness_(Wallet_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWitness2_(Wallet_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferAsset_(Wallet_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferAsset2_(Wallet_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParticipateAssetIssue_(Wallet_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParticipateAssetIssue2_(Wallet_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreezeBalance_(Wallet_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreezeBalance2_(Wallet_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeBalance_(Wallet_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeBalance2_(Wallet_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeAsset_(Wallet_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfreezeAsset2_(Wallet_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawBalance_(Wallet_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawBalance2_(Wallet_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAsset_(Wallet_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAsset2_(Wallet_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposalCreate_(Wallet_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposalApprove_(Wallet_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposalDelete_(Wallet_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuyStorage_(Wallet_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuyStorageBytes_(Wallet_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SellStorage_(Wallet_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeCreate_(Wallet_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeInject_(Wallet_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeWithdraw_(Wallet_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeTransaction_(Wallet_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodes_(Wallet_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByAccount_(Wallet_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountNet_(Wallet_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountResource_(Wallet_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByName_(Wallet_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueListByName_(Wallet_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueById_(Wallet_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(Wallet_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock2_(Wallet_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(Wallet_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum2_(Wallet_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionCountByBlockNum_(Wallet_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockById_(Wallet_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLimitNext_(Wallet_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLimitNext2_(Wallet_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLatestNum_(Wallet_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByLatestNum2_(Wallet_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionById_(Wallet_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeployContract_(Wallet_method_names[64], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContract_(Wallet_method_names[65], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContractInfo_(Wallet_method_names[66], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerContract_(Wallet_method_names[67], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerConstantContract_(Wallet_method_names[68], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearContractABI_(Wallet_method_names[69], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWitnesses_(Wallet_method_names[70], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegatedResource_(Wallet_method_names[71], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProposals_(Wallet_method_names[72], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaginatedProposalList_(Wallet_method_names[73], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalById_(Wallet_method_names[74], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExchanges_(Wallet_method_names[75], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaginatedExchangeList_(Wallet_method_names[76], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExchangeById_(Wallet_method_names[77], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChainParameters_(Wallet_method_names[78], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueList_(Wallet_method_names[79], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaginatedAssetIssueList_(Wallet_method_names[80], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalTransaction_(Wallet_method_names[81], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextMaintenanceTime_(Wallet_method_names[82], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionSign_(Wallet_method_names[83], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionSign2_(Wallet_method_names[84], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAddress_(Wallet_method_names[85], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EasyTransferAsset_(Wallet_method_names[86], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EasyTransferAssetByPrivate_(Wallet_method_names[87], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EasyTransfer_(Wallet_method_names[88], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EasyTransferByPrivate_(Wallet_method_names[89], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateAddress_(Wallet_method_names[90], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionInfoById_(Wallet_method_names[91], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountPermissionUpdate_(Wallet_method_names[92], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSign_(Wallet_method_names[93], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionSignWeight_(Wallet_method_names[94], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionApprovedList_(Wallet_method_names[95], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeInfo_(Wallet_method_names[96], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRewardInfo_(Wallet_method_names[97], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrokerageInfo_(Wallet_method_names[98], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBrokerage_(Wallet_method_names[99], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateShieldedTransaction_(Wallet_method_names[100], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMerkleTreeVoucherInfo_(Wallet_method_names[101], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanNoteByIvk_(Wallet_method_names[102], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanAndMarkNoteByIvk_(Wallet_method_names[103], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanNoteByOvk_(Wallet_method_names[104], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpendingKey_(Wallet_method_names[105], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExpandedSpendingKey_(Wallet_method_names[106], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAkFromAsk_(Wallet_method_names[107], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNkFromNsk_(Wallet_method_names[108], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIncomingViewingKey_(Wallet_method_names[109], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDiversifier_(Wallet_method_names[110], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewShieldedAddress_(Wallet_method_names[111], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetZenPaymentAddress_(Wallet_method_names[112], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRcm_(Wallet_method_names[113], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSpend_(Wallet_method_names[114], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_(Wallet_method_names[115], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShieldTransactionHash_(Wallet_method_names[116], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSpendAuthSig_(Wallet_method_names[117], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateShieldNullifier_(Wallet_method_names[118], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateShieldedContractParameters_(Wallet_method_names[119], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateShieldedContractParametersWithoutAsk_(Wallet_method_names[120], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanShieldedTRC20NotesByIvk_(Wallet_method_names[121], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanShieldedTRC20NotesByOvk_(Wallet_method_names[122], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsShieldedTRC20ContractNoteSpent_(Wallet_method_names[123], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTriggerInputForShieldedTRC20Contract_(Wallet_method_names[124], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCommonTransaction_(Wallet_method_names[125], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionInfoByBlockNum_(Wallet_method_names[126], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketSellAsset_(Wallet_method_names[127], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketCancelOrder_(Wallet_method_names[128], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderByAccount_(Wallet_method_names[129], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderById_(Wallet_method_names[130], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketPriceByPair_(Wallet_method_names[131], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderListByPair_(Wallet_method_names[132], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketPairList_(Wallet_method_names[133], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Wallet::Stub::GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

void Wallet::Stub::async::GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* Wallet::Stub::PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* Wallet::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountById_, context, request, response);
}

void Wallet::Stub::async::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* Wallet::Stub::PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* Wallet::Stub::AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::protocol::AccountBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountBalance_, context, request, response);
}

void Wallet::Stub::async::GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountBalance_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAccountBalance(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>* Wallet::Stub::PrepareAsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AccountBalanceResponse, ::protocol::AccountBalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountBalanceResponse>* Wallet::Stub::AsyncGetAccountBalanceRaw(::grpc::ClientContext* context, const ::protocol::AccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::protocol::BlockBalanceTrace* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockBalanceTrace_, context, request, response);
}

void Wallet::Stub::async::GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockBalanceTrace_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockBalanceTrace(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockBalanceTrace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>* Wallet::Stub::PrepareAsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockBalanceTrace, ::protocol::BlockBalanceTrace_BlockIdentifier, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockBalanceTrace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockBalanceTrace>* Wallet::Stub::AsyncGetBlockBalanceTraceRaw(::grpc::ClientContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockBalanceTraceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransferContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTransaction_, context, request, response);
}

void Wallet::Stub::async::CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransferContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateTransaction(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::TransferContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateTransactionRaw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransferContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTransaction2_, context, request, response);
}

void Wallet::Stub::async::CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransferContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateTransaction2(::grpc::ClientContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTransaction2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TransferContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTransaction2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateTransaction2Raw(::grpc::ClientContext* context, const ::protocol::TransferContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTransaction2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::Return* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Transaction, ::protocol::Return, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BroadcastTransaction_, context, request, response);
}

void Wallet::Stub::async::BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Transaction, ::protocol::Return, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::BroadcastTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::Return* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Return>* Wallet::Stub::PrepareAsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Return, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BroadcastTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Return>* Wallet::Stub::AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAccount_, context, request, response);
}

void Wallet::Stub::async::UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateAccount(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::AccountUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::SetAccountIdContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAccountId_, context, request, response);
}

void Wallet::Stub::async::SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::SetAccountIdContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAccountId_, context, request, response, std::move(f));
}

void Wallet::Stub::async::SetAccountId(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAccountId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::SetAccountIdContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAccountId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncSetAccountIdRaw(::grpc::ClientContext* context, const ::protocol::SetAccountIdContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAccountIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAccount2_, context, request, response);
}

void Wallet::Stub::async::UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAccount2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateAccount2(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAccount2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::AccountUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAccount2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAccount2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::VoteWitnessContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VoteWitnessAccount_, context, request, response);
}

void Wallet::Stub::async::VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::VoteWitnessContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteWitnessAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::VoteWitnessAccount(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteWitnessAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::VoteWitnessContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VoteWitnessAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncVoteWitnessAccountRaw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVoteWitnessAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UpdateSettingContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSetting_, context, request, response);
}

void Wallet::Stub::async::UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UpdateSettingContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSetting_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateSetting(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UpdateSettingContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateSettingRaw(::grpc::ClientContext* context, const ::protocol::UpdateSettingContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateEnergyLimit_, context, request, response);
}

void Wallet::Stub::async::UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEnergyLimit_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateEnergyLimit(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEnergyLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UpdateEnergyLimitContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateEnergyLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateEnergyLimitRaw(::grpc::ClientContext* context, const ::protocol::UpdateEnergyLimitContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateEnergyLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::VoteWitnessContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VoteWitnessAccount2_, context, request, response);
}

void Wallet::Stub::async::VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::VoteWitnessContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteWitnessAccount2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::VoteWitnessAccount2(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteWitnessAccount2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::VoteWitnessContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VoteWitnessAccount2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncVoteWitnessAccount2Raw(::grpc::ClientContext* context, const ::protocol::VoteWitnessContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVoteWitnessAccount2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAssetIssue_, context, request, response);
}

void Wallet::Stub::async::CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAssetIssue_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateAssetIssue(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAssetIssue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAssetIssue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAssetIssueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAssetIssue2_, context, request, response);
}

void Wallet::Stub::async::CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAssetIssue2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateAssetIssue2(::grpc::ClientContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAssetIssue2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAssetIssue2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::AssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAssetIssue2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WitnessUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWitness_, context, request, response);
}

void Wallet::Stub::async::UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WitnessUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWitness_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateWitness(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWitness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::WitnessUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWitness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWitnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWitness2_, context, request, response);
}

void Wallet::Stub::async::UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWitness2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWitness2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::WitnessUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWitness2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWitness2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void Wallet::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::AccountCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount2_, context, request, response);
}

void Wallet::Stub::async::CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateAccount2(::grpc::ClientContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::AccountCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateAccount2Raw(::grpc::ClientContext* context, const ::protocol::AccountCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccount2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WitnessCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateWitness_, context, request, response);
}

void Wallet::Stub::async::CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WitnessCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWitness_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateWitness(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWitness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::WitnessCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateWitness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncCreateWitnessRaw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateWitnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WitnessCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateWitness2_, context, request, response);
}

void Wallet::Stub::async::CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WitnessCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWitness2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateWitness2(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateWitness2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::WitnessCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateWitness2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateWitness2Raw(::grpc::ClientContext* context, const ::protocol::WitnessCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateWitness2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransferAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferAsset_, context, request, response);
}

void Wallet::Stub::async::TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransferAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferAsset_, context, request, response, std::move(f));
}

void Wallet::Stub::async::TransferAsset(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferAsset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::TransferAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferAsset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferAssetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransferAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferAsset2_, context, request, response);
}

void Wallet::Stub::async::TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransferAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferAsset2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::TransferAsset2(::grpc::ClientContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferAsset2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TransferAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferAsset2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncTransferAsset2Raw(::grpc::ClientContext* context, const ::protocol::TransferAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferAsset2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ParticipateAssetIssue_, context, request, response);
}

void Wallet::Stub::async::ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParticipateAssetIssue_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ParticipateAssetIssue(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParticipateAssetIssue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::ParticipateAssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ParticipateAssetIssue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncParticipateAssetIssueRaw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParticipateAssetIssueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ParticipateAssetIssue2_, context, request, response);
}

void Wallet::Stub::async::ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParticipateAssetIssue2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ParticipateAssetIssue2(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParticipateAssetIssue2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ParticipateAssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ParticipateAssetIssue2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncParticipateAssetIssue2Raw(::grpc::ClientContext* context, const ::protocol::ParticipateAssetIssueContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParticipateAssetIssue2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::FreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FreezeBalance_, context, request, response);
}

void Wallet::Stub::async::FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::FreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreezeBalance_, context, request, response, std::move(f));
}

void Wallet::Stub::async::FreezeBalance(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreezeBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::FreezeBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FreezeBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncFreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFreezeBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FreezeBalance2_, context, request, response);
}

void Wallet::Stub::async::FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreezeBalance2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::FreezeBalance2(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreezeBalance2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::FreezeBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FreezeBalance2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncFreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::FreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFreezeBalance2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnfreezeBalance_, context, request, response);
}

void Wallet::Stub::async::UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UnfreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeBalance_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UnfreezeBalance(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::UnfreezeBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnfreezeBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUnfreezeBalanceRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnfreezeBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnfreezeBalance2_, context, request, response);
}

void Wallet::Stub::async::UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeBalance2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UnfreezeBalance2(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeBalance2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UnfreezeBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnfreezeBalance2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUnfreezeBalance2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnfreezeBalance2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UnfreezeAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnfreezeAsset_, context, request, response);
}

void Wallet::Stub::async::UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UnfreezeAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeAsset_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UnfreezeAsset(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeAsset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::UnfreezeAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnfreezeAsset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUnfreezeAssetRaw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnfreezeAssetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnfreezeAsset2_, context, request, response);
}

void Wallet::Stub::async::UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeAsset2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UnfreezeAsset2(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfreezeAsset2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UnfreezeAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnfreezeAsset2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUnfreezeAsset2Raw(::grpc::ClientContext* context, const ::protocol::UnfreezeAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnfreezeAsset2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WithdrawBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WithdrawBalance_, context, request, response);
}

void Wallet::Stub::async::WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WithdrawBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawBalance_, context, request, response, std::move(f));
}

void Wallet::Stub::async::WithdrawBalance(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::WithdrawBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WithdrawBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncWithdrawBalanceRaw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WithdrawBalance2_, context, request, response);
}

void Wallet::Stub::async::WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawBalance2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::WithdrawBalance2(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawBalance2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::WithdrawBalanceContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WithdrawBalance2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncWithdrawBalance2Raw(::grpc::ClientContext* context, const ::protocol::WithdrawBalanceContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawBalance2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UpdateAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAsset_, context, request, response);
}

void Wallet::Stub::async::UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UpdateAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAsset_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateAsset(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAsset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::UpdateAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAsset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncUpdateAssetRaw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAssetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UpdateAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAsset2_, context, request, response);
}

void Wallet::Stub::async::UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UpdateAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAsset2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateAsset2(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAsset2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UpdateAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAsset2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateAsset2Raw(::grpc::ClientContext* context, const ::protocol::UpdateAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAsset2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ProposalCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposalCreate_, context, request, response);
}

void Wallet::Stub::async::ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ProposalCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalCreate_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ProposalCreate(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ProposalCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposalCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncProposalCreateRaw(::grpc::ClientContext* context, const ::protocol::ProposalCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ProposalApproveContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposalApprove_, context, request, response);
}

void Wallet::Stub::async::ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ProposalApproveContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalApprove_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ProposalApprove(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalApprove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ProposalApproveContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposalApprove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncProposalApproveRaw(::grpc::ClientContext* context, const ::protocol::ProposalApproveContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalApproveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposalDelete_, context, request, response);
}

void Wallet::Stub::async::ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalDelete_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ProposalDelete(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ProposalDeleteContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposalDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncProposalDeleteRaw(::grpc::ClientContext* context, const ::protocol::ProposalDeleteContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BuyStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuyStorage_, context, request, response);
}

void Wallet::Stub::async::BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BuyStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuyStorage_, context, request, response, std::move(f));
}

void Wallet::Stub::async::BuyStorage(::grpc::ClientContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuyStorage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::BuyStorageContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuyStorage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncBuyStorageRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuyStorageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuyStorageBytes_, context, request, response);
}

void Wallet::Stub::async::BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuyStorageBytes_, context, request, response, std::move(f));
}

void Wallet::Stub::async::BuyStorageBytes(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuyStorageBytes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::BuyStorageBytesContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuyStorageBytes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncBuyStorageBytesRaw(::grpc::ClientContext* context, const ::protocol::BuyStorageBytesContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuyStorageBytesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::SellStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SellStorage_, context, request, response);
}

void Wallet::Stub::async::SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::SellStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SellStorage_, context, request, response, std::move(f));
}

void Wallet::Stub::async::SellStorage(::grpc::ClientContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SellStorage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::SellStorageContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SellStorage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncSellStorageRaw(::grpc::ClientContext* context, const ::protocol::SellStorageContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSellStorageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeCreate_, context, request, response);
}

void Wallet::Stub::async::ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeCreate_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ExchangeCreate(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ExchangeCreateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeCreate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncExchangeCreateRaw(::grpc::ClientContext* context, const ::protocol::ExchangeCreateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeInject_, context, request, response);
}

void Wallet::Stub::async::ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeInject_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ExchangeInject(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeInject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ExchangeInjectContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeInject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncExchangeInjectRaw(::grpc::ClientContext* context, const ::protocol::ExchangeInjectContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeInjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeWithdraw_, context, request, response);
}

void Wallet::Stub::async::ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeWithdraw_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ExchangeWithdraw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeWithdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ExchangeWithdrawContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeWithdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncExchangeWithdrawRaw(::grpc::ClientContext* context, const ::protocol::ExchangeWithdrawContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeTransaction_, context, request, response);
}

void Wallet::Stub::async::ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ExchangeTransaction(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ExchangeTransactionContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncExchangeTransactionRaw(::grpc::ClientContext* context, const ::protocol::ExchangeTransactionContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::NodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNodes_, context, request, response);
}

void Wallet::Stub::async::ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::NodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ListNodes(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* Wallet::Stub::PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NodeList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NodeList>* Wallet::Stub::AsyncListNodesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueByAccount_, context, request, response);
}

void Wallet::Stub::async::GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAssetIssueByAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::PrepareAsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueByAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetAssetIssueByAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueByAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountNetMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::AccountNetMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountNet_, context, request, response);
}

void Wallet::Stub::async::GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::AccountNetMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountNet_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAccountNet(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountNet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* Wallet::Stub::PrepareAsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AccountNetMessage, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountNet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountNetMessage>* Wallet::Stub::AsyncGetAccountNetRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountNetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::AccountResourceMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::AccountResourceMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountResource_, context, request, response);
}

void Wallet::Stub::async::GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::AccountResourceMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountResource_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAccountResource(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>* Wallet::Stub::PrepareAsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AccountResourceMessage, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AccountResourceMessage>* Wallet::Stub::AsyncGetAccountResourceRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueByName_, context, request, response);
}

void Wallet::Stub::async::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByName_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* Wallet::Stub::PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueContract, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* Wallet::Stub::AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueListByName_, context, request, response);
}

void Wallet::Stub::async::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueListByName_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueListByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueListByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueById_, context, request, response);
}

void Wallet::Stub::async::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* Wallet::Stub::PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueContract, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* Wallet::Stub::AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

void Wallet::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNowBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNowBlock2_, context, request, response);
}

void Wallet::Stub::async::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* Wallet::Stub::PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockExtention, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNowBlock2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* Wallet::Stub::AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNowBlock2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

void Wallet::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByNum2_, context, request, response);
}

void Wallet::Stub::async::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* Wallet::Stub::PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockExtention, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByNum2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* Wallet::Stub::AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByNum2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionCountByBlockNum_, context, request, response);
}

void Wallet::Stub::async::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionCountByBlockNum_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionCountByBlockNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionCountByBlockNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockById_, context, request, response);
}

void Wallet::Stub::async::GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::PrepareAsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Wallet::Stub::AsyncGetBlockByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BlockLimit, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByLimitNext_, context, request, response);
}

void Wallet::Stub::async::GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BlockLimit, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLimitNext_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByLimitNext(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLimitNext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::PrepareAsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockList, ::protocol::BlockLimit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByLimitNext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::AsyncGetBlockByLimitNextRaw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByLimitNextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::protocol::BlockListExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BlockLimit, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByLimitNext2_, context, request, response);
}

void Wallet::Stub::async::GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BlockLimit, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLimitNext2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByLimitNext2(::grpc::ClientContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLimitNext2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* Wallet::Stub::PrepareAsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockListExtention, ::protocol::BlockLimit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByLimitNext2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* Wallet::Stub::AsyncGetBlockByLimitNext2Raw(::grpc::ClientContext* context, const ::protocol::BlockLimit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByLimitNext2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByLatestNum_, context, request, response);
}

void Wallet::Stub::async::GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLatestNum_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByLatestNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLatestNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::PrepareAsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockList, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByLatestNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockList>* Wallet::Stub::AsyncGetBlockByLatestNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByLatestNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockListExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByLatestNum2_, context, request, response);
}

void Wallet::Stub::async::GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLatestNum2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBlockByLatestNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByLatestNum2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* Wallet::Stub::PrepareAsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockListExtention, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByLatestNum2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockListExtention>* Wallet::Stub::AsyncGetBlockByLatestNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByLatestNum2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionById_, context, request, response);
}

void Wallet::Stub::async::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::CreateSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeployContract_, context, request, response);
}

void Wallet::Stub::async::DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::CreateSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployContract_, context, request, response, std::move(f));
}

void Wallet::Stub::async::DeployContract(::grpc::ClientContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeployContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::CreateSmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeployContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncDeployContractRaw(::grpc::ClientContext* context, const ::protocol::CreateSmartContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeployContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContract* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::SmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContract_, context, request, response);
}

void Wallet::Stub::async::GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::SmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContract_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetContract(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>* Wallet::Stub::PrepareAsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::SmartContract, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::SmartContract>* Wallet::Stub::AsyncGetContractRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::SmartContractDataWrapper* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContractInfo_, context, request, response);
}

void Wallet::Stub::async::GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContractInfo_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetContractInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContractInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>* Wallet::Stub::PrepareAsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::SmartContractDataWrapper, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContractInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::SmartContractDataWrapper>* Wallet::Stub::AsyncGetContractInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContractInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerContract_, context, request, response);
}

void Wallet::Stub::async::TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerContract_, context, request, response, std::move(f));
}

void Wallet::Stub::async::TriggerContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TriggerSmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncTriggerContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerConstantContract_, context, request, response);
}

void Wallet::Stub::async::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerConstantContract_, context, request, response, std::move(f));
}

void Wallet::Stub::async::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerConstantContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TriggerSmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerConstantContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerConstantContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ClearABIContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearContractABI_, context, request, response);
}

void Wallet::Stub::async::ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ClearABIContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearContractABI_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ClearContractABI(::grpc::ClientContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearContractABI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::ClearABIContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearContractABI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncClearContractABIRaw(::grpc::ClientContext* context, const ::protocol::ClearABIContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearContractABIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListWitnesses_, context, request, response);
}

void Wallet::Stub::async::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWitnesses_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWitnesses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* Wallet::Stub::PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::WitnessList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListWitnesses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* Wallet::Stub::AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListWitnessesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegatedResource_, context, request, response);
}

void Wallet::Stub::async::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResource_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* Wallet::Stub::PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DelegatedResourceList, ::protocol::DelegatedResourceMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegatedResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* Wallet::Stub::AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegatedResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ProposalList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProposals_, context, request, response);
}

void Wallet::Stub::async::ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProposals_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ListProposals(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* Wallet::Stub::PrepareAsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ProposalList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* Wallet::Stub::AsyncListProposalsRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ProposalList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PaginatedMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPaginatedProposalList_, context, request, response);
}

void Wallet::Stub::async::GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PaginatedMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedProposalList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetPaginatedProposalList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedProposalList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* Wallet::Stub::PrepareAsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ProposalList, ::protocol::PaginatedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPaginatedProposalList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ProposalList>* Wallet::Stub::AsyncGetPaginatedProposalListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPaginatedProposalListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Proposal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Proposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalById_, context, request, response);
}

void Wallet::Stub::async::GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Proposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetProposalById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Proposal>* Wallet::Stub::PrepareAsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Proposal, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Proposal>* Wallet::Stub::AsyncGetProposalByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListExchanges_, context, request, response);
}

void Wallet::Stub::async::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExchanges_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExchanges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* Wallet::Stub::PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ExchangeList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListExchanges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* Wallet::Stub::AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListExchangesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::ExchangeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PaginatedMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPaginatedExchangeList_, context, request, response);
}

void Wallet::Stub::async::GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PaginatedMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedExchangeList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetPaginatedExchangeList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedExchangeList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* Wallet::Stub::PrepareAsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ExchangeList, ::protocol::PaginatedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPaginatedExchangeList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* Wallet::Stub::AsyncGetPaginatedExchangeListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPaginatedExchangeListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExchangeById_, context, request, response);
}

void Wallet::Stub::async::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExchangeById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExchangeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* Wallet::Stub::PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Exchange, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExchangeById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* Wallet::Stub::AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExchangeByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ChainParameters* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::ChainParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChainParameters_, context, request, response);
}

void Wallet::Stub::async::GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::ChainParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChainParameters_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetChainParameters(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChainParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>* Wallet::Stub::PrepareAsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ChainParameters, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChainParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ChainParameters>* Wallet::Stub::AsyncGetChainParametersRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChainParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueList_, context, request, response);
}

void Wallet::Stub::async::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPaginatedAssetIssueList_, context, request, response);
}

void Wallet::Stub::async::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedAssetIssueList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedAssetIssueList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::PaginatedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPaginatedAssetIssueList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* Wallet::Stub::AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalTransaction_, context, request, response);
}

void Wallet::Stub::async::TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::TotalTransaction(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::PrepareAsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncTotalTransactionRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNextMaintenanceTime_, context, request, response);
}

void Wallet::Stub::async::GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNextMaintenanceTime_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNextMaintenanceTime(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNextMaintenanceTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::PrepareAsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNextMaintenanceTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncGetNextMaintenanceTimeRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNextMaintenanceTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransactionSign, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionSign_, context, request, response);
}

void Wallet::Stub::async::GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransactionSign, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSign_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::PrepareAsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::TransactionSign, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionSign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* Wallet::Stub::AsyncGetTransactionSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionSign2_, context, request, response);
}

void Wallet::Stub::async::GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSign2_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionSign2(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSign2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TransactionSign, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionSign2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncGetTransactionSign2Raw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionSign2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAddress_, context, request, response);
}

void Wallet::Stub::async::CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAddress_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateAddress(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncCreateAddressRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::protocol::EasyTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EasyTransferAsset_, context, request, response);
}

void Wallet::Stub::async::EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferAsset_, context, request, response, std::move(f));
}

void Wallet::Stub::async::EasyTransferAsset(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferAsset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::PrepareAsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::EasyTransferResponse, ::protocol::EasyTransferAssetMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EasyTransferAsset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::AsyncEasyTransferAssetRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEasyTransferAssetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::protocol::EasyTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EasyTransferAssetByPrivate_, context, request, response);
}

void Wallet::Stub::async::EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferAssetByPrivate_, context, request, response, std::move(f));
}

void Wallet::Stub::async::EasyTransferAssetByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferAssetByPrivate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::PrepareAsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::EasyTransferResponse, ::protocol::EasyTransferAssetByPrivateMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EasyTransferAssetByPrivate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::AsyncEasyTransferAssetByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferAssetByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEasyTransferAssetByPrivateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::protocol::EasyTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EasyTransfer_, context, request, response);
}

void Wallet::Stub::async::EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransfer_, context, request, response, std::move(f));
}

void Wallet::Stub::async::EasyTransfer(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::PrepareAsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::EasyTransferResponse, ::protocol::EasyTransferMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EasyTransfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::AsyncEasyTransferRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEasyTransferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::protocol::EasyTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EasyTransferByPrivate_, context, request, response);
}

void Wallet::Stub::async::EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferByPrivate_, context, request, response, std::move(f));
}

void Wallet::Stub::async::EasyTransferByPrivate(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyTransferByPrivate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::PrepareAsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::EasyTransferResponse, ::protocol::EasyTransferByPrivateMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EasyTransferByPrivate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::EasyTransferResponse>* Wallet::Stub::AsyncEasyTransferByPrivateRaw(::grpc::ClientContext* context, const ::protocol::EasyTransferByPrivateMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEasyTransferByPrivateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateAddress_, context, request, response);
}

void Wallet::Stub::async::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateAddress_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* Wallet::Stub::PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AddressPrKeyPairMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* Wallet::Stub::AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionInfoById_, context, request, response);
}

void Wallet::Stub::async::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* Wallet::Stub::PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionInfo, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionInfoById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* Wallet::Stub::AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AccountPermissionUpdate_, context, request, response);
}

void Wallet::Stub::async::AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountPermissionUpdate_, context, request, response, std::move(f));
}

void Wallet::Stub::async::AccountPermissionUpdate(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountPermissionUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::AccountPermissionUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AccountPermissionUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncAccountPermissionUpdateRaw(::grpc::ClientContext* context, const ::protocol::AccountPermissionUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountPermissionUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSign_, context, request, response);
}

void Wallet::Stub::async::AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSign_, context, request, response, std::move(f));
}

void Wallet::Stub::async::AddSign(::grpc::ClientContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TransactionSign, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncAddSignRaw(::grpc::ClientContext* context, const ::protocol::TransactionSign& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionSignWeight* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Transaction, ::protocol::TransactionSignWeight, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionSignWeight_, context, request, response);
}

void Wallet::Stub::async::GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Transaction, ::protocol::TransactionSignWeight, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSignWeight_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionSignWeight(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionSignWeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>* Wallet::Stub::PrepareAsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionSignWeight, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionSignWeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionSignWeight>* Wallet::Stub::AsyncGetTransactionSignWeightRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionSignWeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionApprovedList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Transaction, ::protocol::TransactionApprovedList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionApprovedList_, context, request, response);
}

void Wallet::Stub::async::GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Transaction, ::protocol::TransactionApprovedList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionApprovedList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionApprovedList(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionApprovedList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>* Wallet::Stub::PrepareAsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionApprovedList, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionApprovedList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionApprovedList>* Wallet::Stub::AsyncGetTransactionApprovedListRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionApprovedListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::NodeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeInfo_, context, request, response);
}

void Wallet::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>* Wallet::Stub::PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NodeInfo, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NodeInfo>* Wallet::Stub::AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRewardInfo_, context, request, response);
}

void Wallet::Stub::async::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRewardInfo_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRewardInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRewardInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRewardInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrokerageInfo_, context, request, response);
}

void Wallet::Stub::async::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerageInfo_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerageInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrokerageInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* Wallet::Stub::AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrokerageInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBrokerage_, context, request, response);
}

void Wallet::Stub::async::UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBrokerage_, context, request, response, std::move(f));
}

void Wallet::Stub::async::UpdateBrokerage(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBrokerage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::UpdateBrokerageContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBrokerage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncUpdateBrokerageRaw(::grpc::ClientContext* context, const ::protocol::UpdateBrokerageContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBrokerageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PrivateParameters, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateShieldedTransaction_, context, request, response);
}

void Wallet::Stub::async::CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PrivateParameters, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateShieldedTransaction(::grpc::ClientContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::PrivateParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateShieldedTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateShieldedTransactionRaw(::grpc::ClientContext* context, const ::protocol::PrivateParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateShieldedTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response);
}

void Wallet::Stub::async::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* Wallet::Stub::PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::IncrementalMerkleVoucherInfo, ::protocol::OutputPointInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMerkleTreeVoucherInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* Wallet::Stub::AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanNoteByIvk_, context, request, response);
}

void Wallet::Stub::async::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByIvk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* Wallet::Stub::PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotes, ::protocol::IvkDecryptParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanNoteByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* Wallet::Stub::AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanNoteByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanAndMarkNoteByIvk_, context, request, response);
}

void Wallet::Stub::async::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanAndMarkNoteByIvk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanAndMarkNoteByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* Wallet::Stub::PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesMarked, ::protocol::IvkDecryptAndMarkParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanAndMarkNoteByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* Wallet::Stub::AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanNoteByOvk_, context, request, response);
}

void Wallet::Stub::async::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByOvk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByOvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* Wallet::Stub::PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotes, ::protocol::OvkDecryptParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanNoteByOvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* Wallet::Stub::AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanNoteByOvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpendingKey_, context, request, response);
}

void Wallet::Stub::async::GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpendingKey_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetSpendingKey(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpendingKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpendingKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpendingKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::ExpandedSpendingKeyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExpandedSpendingKey_, context, request, response);
}

void Wallet::Stub::async::GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExpandedSpendingKey_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetExpandedSpendingKey(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExpandedSpendingKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>* Wallet::Stub::PrepareAsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ExpandedSpendingKeyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExpandedSpendingKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExpandedSpendingKeyMessage>* Wallet::Stub::AsyncGetExpandedSpendingKeyRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExpandedSpendingKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAkFromAsk_, context, request, response);
}

void Wallet::Stub::async::GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAkFromAsk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetAkFromAsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAkFromAsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAkFromAsk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetAkFromAskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAkFromAskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNkFromNsk_, context, request, response);
}

void Wallet::Stub::async::GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNkFromNsk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNkFromNsk(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNkFromNsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNkFromNsk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetNkFromNskRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNkFromNskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::protocol::IncomingViewingKeyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIncomingViewingKey_, context, request, response);
}

void Wallet::Stub::async::GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIncomingViewingKey_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetIncomingViewingKey(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIncomingViewingKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>* Wallet::Stub::PrepareAsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::IncomingViewingKeyMessage, ::protocol::ViewingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIncomingViewingKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncomingViewingKeyMessage>* Wallet::Stub::AsyncGetIncomingViewingKeyRaw(::grpc::ClientContext* context, const ::protocol::ViewingKeyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIncomingViewingKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DiversifierMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::DiversifierMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDiversifier_, context, request, response);
}

void Wallet::Stub::async::GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::DiversifierMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiversifier_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetDiversifier(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiversifier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>* Wallet::Stub::PrepareAsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DiversifierMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDiversifier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DiversifierMessage>* Wallet::Stub::AsyncGetDiversifierRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDiversifierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ShieldedAddressInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewShieldedAddress_, context, request, response);
}

void Wallet::Stub::async::GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewShieldedAddress_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetNewShieldedAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewShieldedAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>* Wallet::Stub::PrepareAsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ShieldedAddressInfo, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewShieldedAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedAddressInfo>* Wallet::Stub::AsyncGetNewShieldedAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewShieldedAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::protocol::PaymentAddressMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetZenPaymentAddress_, context, request, response);
}

void Wallet::Stub::async::GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZenPaymentAddress_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetZenPaymentAddress(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZenPaymentAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>* Wallet::Stub::PrepareAsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::PaymentAddressMessage, ::protocol::IncomingViewingKeyDiversifierMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetZenPaymentAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::PaymentAddressMessage>* Wallet::Stub::AsyncGetZenPaymentAddressRaw(::grpc::ClientContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetZenPaymentAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRcm_, context, request, response);
}

void Wallet::Stub::async::GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRcm_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetRcm(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRcm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRcm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetRcmRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRcmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsSpend_, context, request, response);
}

void Wallet::Stub::async::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSpend_, context, request, response, std::move(f));
}

void Wallet::Stub::async::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSpend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* Wallet::Stub::PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::SpendResult, ::protocol::NoteParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsSpend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* Wallet::Stub::AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsSpendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_, context, request, response);
}

void Wallet::Stub::async::CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::PrivateParametersWithoutAsk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateShieldedTransactionWithoutSpendAuthSig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::PrivateParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateShieldedTransactionWithoutSpendAuthSigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Transaction, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShieldTransactionHash_, context, request, response);
}

void Wallet::Stub::async::GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Transaction, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShieldTransactionHash_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetShieldTransactionHash(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShieldTransactionHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShieldTransactionHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetShieldTransactionHashRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShieldTransactionHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpendAuthSig_, context, request, response);
}

void Wallet::Stub::async::CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpendAuthSig_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateSpendAuthSig(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpendAuthSig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::SpendAuthSigParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpendAuthSig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncCreateSpendAuthSigRaw(::grpc::ClientContext* context, const ::protocol::SpendAuthSigParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpendAuthSigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NfParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateShieldNullifier_, context, request, response);
}

void Wallet::Stub::async::CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NfParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldNullifier_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateShieldNullifier(::grpc::ClientContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldNullifier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::NfParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateShieldNullifier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncCreateShieldNullifierRaw(::grpc::ClientContext* context, const ::protocol::NfParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateShieldNullifierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::protocol::ShieldedTRC20Parameters* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateShieldedContractParameters_, context, request, response);
}

void Wallet::Stub::async::CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedContractParameters_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateShieldedContractParameters(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedContractParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* Wallet::Stub::PrepareAsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ShieldedTRC20Parameters, ::protocol::PrivateShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateShieldedContractParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* Wallet::Stub::AsyncCreateShieldedContractParametersRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateShieldedContractParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::protocol::ShieldedTRC20Parameters* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateShieldedContractParametersWithoutAsk_, context, request, response);
}

void Wallet::Stub::async::CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedContractParametersWithoutAsk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateShieldedContractParametersWithoutAsk(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateShieldedContractParametersWithoutAsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* Wallet::Stub::PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ShieldedTRC20Parameters, ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateShieldedContractParametersWithoutAsk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ShieldedTRC20Parameters>* Wallet::Stub::AsyncCreateShieldedContractParametersWithoutAskRaw(::grpc::ClientContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateShieldedContractParametersWithoutAskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response);
}

void Wallet::Stub::async::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* Wallet::Stub::PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesTRC20, ::protocol::IvkDecryptTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* Wallet::Stub::AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response);
}

void Wallet::Stub::async::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response, std::move(f));
}

void Wallet::Stub::async::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* Wallet::Stub::PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesTRC20, ::protocol::OvkDecryptTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* Wallet::Stub::AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response);
}

void Wallet::Stub::async::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response, std::move(f));
}

void Wallet::Stub::async::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* Wallet::Stub::PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NullifierResult, ::protocol::NfTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* Wallet::Stub::AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::protocol::BytesMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTriggerInputForShieldedTRC20Contract_, context, request, response);
}

void Wallet::Stub::async::GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTriggerInputForShieldedTRC20Contract_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTriggerInputForShieldedTRC20Contract(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTriggerInputForShieldedTRC20Contract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BytesMessage, ::protocol::ShieldedTRC20TriggerContractParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTriggerInputForShieldedTRC20Contract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BytesMessage>* Wallet::Stub::AsyncGetTriggerInputForShieldedTRC20ContractRaw(::grpc::ClientContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTriggerInputForShieldedTRC20ContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Transaction, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCommonTransaction_, context, request, response);
}

void Wallet::Stub::async::CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Transaction, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommonTransaction_, context, request, response, std::move(f));
}

void Wallet::Stub::async::CreateCommonTransaction(::grpc::ClientContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommonTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCommonTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncCreateCommonTransactionRaw(::grpc::ClientContext* context, const ::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCommonTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionInfoByBlockNum_, context, request, response);
}

void Wallet::Stub::async::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoByBlockNum_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoByBlockNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* Wallet::Stub::PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionInfoList, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionInfoByBlockNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* Wallet::Stub::AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketSellAsset_, context, request, response);
}

void Wallet::Stub::async::MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketSellAsset_, context, request, response, std::move(f));
}

void Wallet::Stub::async::MarketSellAsset(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketSellAsset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::MarketSellAssetContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketSellAsset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncMarketSellAssetRaw(::grpc::ClientContext* context, const ::protocol::MarketSellAssetContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketSellAssetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketCancelOrder_, context, request, response);
}

void Wallet::Stub::async::MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketCancelOrder_, context, request, response, std::move(f));
}

void Wallet::Stub::async::MarketCancelOrder(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketCancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::PrepareAsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::MarketCancelOrderContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketCancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* Wallet::Stub::AsyncMarketCancelOrderRaw(::grpc::ClientContext* context, const ::protocol::MarketCancelOrderContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderByAccount_, context, request, response);
}

void Wallet::Stub::async::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderByAccount_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderByAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* Wallet::Stub::PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderList, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderByAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* Wallet::Stub::AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderById_, context, request, response);
}

void Wallet::Stub::async::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderById_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* Wallet::Stub::PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrder, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* Wallet::Stub::AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketPriceByPair_, context, request, response);
}

void Wallet::Stub::async::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPriceByPair_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPriceByPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* Wallet::Stub::PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketPriceList, ::protocol::MarketOrderPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketPriceByPair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* Wallet::Stub::AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketPriceByPairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderListByPair_, context, request, response);
}

void Wallet::Stub::async::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderListByPair_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderListByPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* Wallet::Stub::PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderList, ::protocol::MarketOrderPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderListByPair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* Wallet::Stub::AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wallet::Stub::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketPairList_, context, request, response);
}

void Wallet::Stub::async::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPairList_, context, request, response, std::move(f));
}

void Wallet::Stub::async::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPairList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* Wallet::Stub::PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderPairList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketPairList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* Wallet::Stub::AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketPairListRaw(context, request, cq);
  result->StartCall();
  return result;
}

Wallet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::Account* resp) {
               return service->GetAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::Account* resp) {
               return service->GetAccountById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountBalanceRequest, ::protocol::AccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountBalanceRequest* req,
             ::protocol::AccountBalanceResponse* resp) {
               return service->GetAccountBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BlockBalanceTrace_BlockIdentifier, ::protocol::BlockBalanceTrace, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BlockBalanceTrace_BlockIdentifier* req,
             ::protocol::BlockBalanceTrace* resp) {
               return service->GetBlockBalanceTrace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransferContract* req,
             ::protocol::Transaction* resp) {
               return service->CreateTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransferContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateTransaction2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::Return, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Transaction* req,
             ::protocol::Return* resp) {
               return service->BroadcastTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountUpdateContract* req,
             ::protocol::Transaction* resp) {
               return service->UpdateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::SetAccountIdContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::SetAccountIdContract* req,
             ::protocol::Transaction* resp) {
               return service->SetAccountId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountUpdateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateAccount2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::VoteWitnessContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::VoteWitnessContract* req,
             ::protocol::Transaction* resp) {
               return service->VoteWitnessAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateSettingContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UpdateSettingContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateEnergyLimitContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UpdateEnergyLimitContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateEnergyLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::VoteWitnessContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::VoteWitnessContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->VoteWitnessAccount2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AssetIssueContract* req,
             ::protocol::Transaction* resp) {
               return service->CreateAssetIssue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AssetIssueContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateAssetIssue2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessUpdateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WitnessUpdateContract* req,
             ::protocol::Transaction* resp) {
               return service->UpdateWitness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WitnessUpdateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateWitness2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountCreateContract* req,
             ::protocol::Transaction* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountCreateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateAccount2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessCreateContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WitnessCreateContract* req,
             ::protocol::Transaction* resp) {
               return service->CreateWitness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WitnessCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WitnessCreateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateWitness2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransferAssetContract* req,
             ::protocol::Transaction* resp) {
               return service->TransferAsset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransferAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransferAssetContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->TransferAsset2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ParticipateAssetIssueContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ParticipateAssetIssueContract* req,
             ::protocol::Transaction* resp) {
               return service->ParticipateAssetIssue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ParticipateAssetIssueContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ParticipateAssetIssueContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ParticipateAssetIssue2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::FreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::FreezeBalanceContract* req,
             ::protocol::Transaction* resp) {
               return service->FreezeBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::FreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::FreezeBalanceContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->FreezeBalance2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UnfreezeBalanceContract* req,
             ::protocol::Transaction* resp) {
               return service->UnfreezeBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UnfreezeBalanceContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UnfreezeBalance2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UnfreezeAssetContract* req,
             ::protocol::Transaction* resp) {
               return service->UnfreezeAsset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UnfreezeAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UnfreezeAssetContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UnfreezeAsset2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WithdrawBalanceContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WithdrawBalanceContract* req,
             ::protocol::Transaction* resp) {
               return service->WithdrawBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::WithdrawBalanceContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::WithdrawBalanceContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->WithdrawBalance2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateAssetContract, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UpdateAssetContract* req,
             ::protocol::Transaction* resp) {
               return service->UpdateAsset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UpdateAssetContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateAsset2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ProposalCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ProposalCreateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ProposalCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ProposalApproveContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ProposalApproveContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ProposalApprove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ProposalDeleteContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ProposalDeleteContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ProposalDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BuyStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BuyStorageContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->BuyStorage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BuyStorageBytesContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BuyStorageBytesContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->BuyStorageBytes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::SellStorageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::SellStorageContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->SellStorage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ExchangeCreateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ExchangeCreateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ExchangeCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ExchangeInjectContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ExchangeInjectContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ExchangeInject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ExchangeWithdrawContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ExchangeWithdrawContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ExchangeWithdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ExchangeTransactionContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ExchangeTransactionContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ExchangeTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::NodeList* resp) {
               return service->ListNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetAssetIssueByAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::AccountNetMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::AccountNetMessage* resp) {
               return service->GetAccountNet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Account, ::protocol::AccountResourceMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::AccountResourceMessage* resp) {
               return service->GetAccountResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueContract* resp) {
               return service->GetAssetIssueByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetAssetIssueListByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueContract* resp) {
               return service->GetAssetIssueById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::Block* resp) {
               return service->GetNowBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::BlockExtention* resp) {
               return service->GetNowBlock2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::Block* resp) {
               return service->GetBlockByNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::BlockExtention* resp) {
               return service->GetBlockByNum2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetTransactionCountByBlockNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Block* resp) {
               return service->GetBlockById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BlockLimit, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BlockLimit* req,
             ::protocol::BlockList* resp) {
               return service->GetBlockByLimitNext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BlockLimit, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BlockLimit* req,
             ::protocol::BlockListExtention* resp) {
               return service->GetBlockByLimitNext2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::BlockList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::BlockList* resp) {
               return service->GetBlockByLatestNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::BlockListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::BlockListExtention* resp) {
               return service->GetBlockByLatestNum2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Transaction* resp) {
               return service->GetTransactionById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::CreateSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::CreateSmartContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->DeployContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::SmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::SmartContract* resp) {
               return service->GetContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::SmartContractDataWrapper, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::SmartContractDataWrapper* resp) {
               return service->GetContractInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TriggerSmartContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->TriggerContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TriggerSmartContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->TriggerConstantContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ClearABIContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ClearABIContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->ClearContractABI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::WitnessList* resp) {
               return service->ListWitnesses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::DelegatedResourceMessage* req,
             ::protocol::DelegatedResourceList* resp) {
               return service->GetDelegatedResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::ProposalList* resp) {
               return service->ListProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PaginatedMessage, ::protocol::ProposalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PaginatedMessage* req,
             ::protocol::ProposalList* resp) {
               return service->GetPaginatedProposalList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Proposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Proposal* resp) {
               return service->GetProposalById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::ExchangeList* resp) {
               return service->ListExchanges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PaginatedMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PaginatedMessage* req,
             ::protocol::ExchangeList* resp) {
               return service->GetPaginatedExchangeList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Exchange* resp) {
               return service->GetExchangeById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::ChainParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::ChainParameters* resp) {
               return service->GetChainParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetAssetIssueList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PaginatedMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetPaginatedAssetIssueList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->TotalTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetNextMaintenanceTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransactionSign, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransactionSign* req,
             ::protocol::Transaction* resp) {
               return service->GetTransactionSign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransactionSign* req,
             ::protocol::TransactionExtention* resp) {
               return service->GetTransactionSign2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::BytesMessage* resp) {
               return service->CreateAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EasyTransferAssetMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EasyTransferAssetMessage* req,
             ::protocol::EasyTransferResponse* resp) {
               return service->EasyTransferAsset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[87],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EasyTransferAssetByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EasyTransferAssetByPrivateMessage* req,
             ::protocol::EasyTransferResponse* resp) {
               return service->EasyTransferAssetByPrivate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[88],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EasyTransferMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EasyTransferMessage* req,
             ::protocol::EasyTransferResponse* resp) {
               return service->EasyTransfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[89],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EasyTransferByPrivateMessage, ::protocol::EasyTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EasyTransferByPrivateMessage* req,
             ::protocol::EasyTransferResponse* resp) {
               return service->EasyTransferByPrivate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[90],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::AddressPrKeyPairMessage* resp) {
               return service->GenerateAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[91],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::TransactionInfo* resp) {
               return service->GetTransactionInfoById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[92],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::AccountPermissionUpdateContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountPermissionUpdateContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->AccountPermissionUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[93],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::TransactionSign, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TransactionSign* req,
             ::protocol::TransactionExtention* resp) {
               return service->AddSign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[94],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::TransactionSignWeight, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Transaction* req,
             ::protocol::TransactionSignWeight* resp) {
               return service->GetTransactionSignWeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[95],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::TransactionApprovedList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Transaction* req,
             ::protocol::TransactionApprovedList* resp) {
               return service->GetTransactionApprovedList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[96],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::NodeInfo* resp) {
               return service->GetNodeInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[97],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetRewardInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[98],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetBrokerageInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[99],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::UpdateBrokerageContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::UpdateBrokerageContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->UpdateBrokerage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[100],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PrivateParameters, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PrivateParameters* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateShieldedTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[101],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OutputPointInfo* req,
             ::protocol::IncrementalMerkleVoucherInfo* resp) {
               return service->GetMerkleTreeVoucherInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[102],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptParameters* req,
             ::protocol::DecryptNotes* resp) {
               return service->ScanNoteByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[103],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptAndMarkParameters* req,
             ::protocol::DecryptNotesMarked* resp) {
               return service->ScanAndMarkNoteByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[104],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OvkDecryptParameters* req,
             ::protocol::DecryptNotes* resp) {
               return service->ScanNoteByOvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[105],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::BytesMessage* resp) {
               return service->GetSpendingKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[106],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::ExpandedSpendingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::ExpandedSpendingKeyMessage* resp) {
               return service->GetExpandedSpendingKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[107],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::BytesMessage* resp) {
               return service->GetAkFromAsk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[108],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::BytesMessage* resp) {
               return service->GetNkFromNsk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[109],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ViewingKeyMessage, ::protocol::IncomingViewingKeyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ViewingKeyMessage* req,
             ::protocol::IncomingViewingKeyMessage* resp) {
               return service->GetIncomingViewingKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[110],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::DiversifierMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::DiversifierMessage* resp) {
               return service->GetDiversifier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[111],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::ShieldedAddressInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::ShieldedAddressInfo* resp) {
               return service->GetNewShieldedAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[112],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::IncomingViewingKeyDiversifierMessage, ::protocol::PaymentAddressMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IncomingViewingKeyDiversifierMessage* req,
             ::protocol::PaymentAddressMessage* resp) {
               return service->GetZenPaymentAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[113],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::BytesMessage* resp) {
               return service->GetRcm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[114],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NoteParameters* req,
             ::protocol::SpendResult* resp) {
               return service->IsSpend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[115],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PrivateParametersWithoutAsk, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PrivateParametersWithoutAsk* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateShieldedTransactionWithoutSpendAuthSig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[116],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Transaction* req,
             ::protocol::BytesMessage* resp) {
               return service->GetShieldTransactionHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[117],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::SpendAuthSigParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::SpendAuthSigParameters* req,
             ::protocol::BytesMessage* resp) {
               return service->CreateSpendAuthSig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[118],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NfParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NfParameters* req,
             ::protocol::BytesMessage* resp) {
               return service->CreateShieldNullifier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[119],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PrivateShieldedTRC20Parameters, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PrivateShieldedTRC20Parameters* req,
             ::protocol::ShieldedTRC20Parameters* resp) {
               return service->CreateShieldedContractParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[120],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ::protocol::ShieldedTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* req,
             ::protocol::ShieldedTRC20Parameters* resp) {
               return service->CreateShieldedContractParametersWithoutAsk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[121],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptTRC20Parameters* req,
             ::protocol::DecryptNotesTRC20* resp) {
               return service->ScanShieldedTRC20NotesByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[122],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OvkDecryptTRC20Parameters* req,
             ::protocol::DecryptNotesTRC20* resp) {
               return service->ScanShieldedTRC20NotesByOvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[123],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NfTRC20Parameters* req,
             ::protocol::NullifierResult* resp) {
               return service->IsShieldedTRC20ContractNoteSpent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[124],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::ShieldedTRC20TriggerContractParameters, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::ShieldedTRC20TriggerContractParameters* req,
             ::protocol::BytesMessage* resp) {
               return service->GetTriggerInputForShieldedTRC20Contract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[125],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::Transaction, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Transaction* req,
             ::protocol::TransactionExtention* resp) {
               return service->CreateCommonTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[126],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::TransactionInfoList* resp) {
               return service->GetTransactionInfoByBlockNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[127],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::MarketSellAssetContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketSellAssetContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->MarketSellAsset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[128],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::MarketCancelOrderContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketCancelOrderContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->MarketCancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[129],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::MarketOrderList* resp) {
               return service->GetMarketOrderByAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[130],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::MarketOrder* resp) {
               return service->GetMarketOrderById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[131],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketOrderPair* req,
             ::protocol::MarketPriceList* resp) {
               return service->GetMarketPriceByPair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[132],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketOrderPair* req,
             ::protocol::MarketOrderList* resp) {
               return service->GetMarketOrderListByPair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wallet_method_names[133],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wallet::Service, ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wallet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::MarketOrderPairList* resp) {
               return service->GetMarketPairList(ctx, req, resp);
             }, this)));
}

Wallet::Service::~Service() {
}

::grpc::Status Wallet::Service::GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAccountById(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAccountBalance(::grpc::ServerContext* context, const ::protocol::AccountBalanceRequest* request, ::protocol::AccountBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockBalanceTrace(::grpc::ServerContext* context, const ::protocol::BlockBalanceTrace_BlockIdentifier* request, ::protocol::BlockBalanceTrace* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateTransaction(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateTransaction2(::grpc::ServerContext* context, const ::protocol::TransferContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::BroadcastTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::Return* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAccount(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::SetAccountId(::grpc::ServerContext* context, const ::protocol::SetAccountIdContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAccount2(::grpc::ServerContext* context, const ::protocol::AccountUpdateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::VoteWitnessAccount(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateSetting(::grpc::ServerContext* context, const ::protocol::UpdateSettingContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateEnergyLimit(::grpc::ServerContext* context, const ::protocol::UpdateEnergyLimitContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::VoteWitnessAccount2(::grpc::ServerContext* context, const ::protocol::VoteWitnessContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAssetIssue(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAssetIssue2(::grpc::ServerContext* context, const ::protocol::AssetIssueContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateWitness(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateWitness2(::grpc::ServerContext* context, const ::protocol::WitnessUpdateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAccount(::grpc::ServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAccount2(::grpc::ServerContext* context, const ::protocol::AccountCreateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateWitness(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateWitness2(::grpc::ServerContext* context, const ::protocol::WitnessCreateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TransferAsset(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TransferAsset2(::grpc::ServerContext* context, const ::protocol::TransferAssetContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ParticipateAssetIssue(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ParticipateAssetIssue2(::grpc::ServerContext* context, const ::protocol::ParticipateAssetIssueContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::FreezeBalance(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::FreezeBalance2(::grpc::ServerContext* context, const ::protocol::FreezeBalanceContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeBalance(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeBalance2(::grpc::ServerContext* context, const ::protocol::UnfreezeBalanceContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeAsset(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UnfreezeAsset2(::grpc::ServerContext* context, const ::protocol::UnfreezeAssetContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::WithdrawBalance(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::WithdrawBalance2(::grpc::ServerContext* context, const ::protocol::WithdrawBalanceContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAsset(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateAsset2(::grpc::ServerContext* context, const ::protocol::UpdateAssetContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ProposalCreate(::grpc::ServerContext* context, const ::protocol::ProposalCreateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ProposalApprove(::grpc::ServerContext* context, const ::protocol::ProposalApproveContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ProposalDelete(::grpc::ServerContext* context, const ::protocol::ProposalDeleteContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::BuyStorage(::grpc::ServerContext* context, const ::protocol::BuyStorageContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::BuyStorageBytes(::grpc::ServerContext* context, const ::protocol::BuyStorageBytesContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::SellStorage(::grpc::ServerContext* context, const ::protocol::SellStorageContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ExchangeCreate(::grpc::ServerContext* context, const ::protocol::ExchangeCreateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ExchangeInject(::grpc::ServerContext* context, const ::protocol::ExchangeInjectContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ExchangeWithdraw(::grpc::ServerContext* context, const ::protocol::ExchangeWithdrawContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ExchangeTransaction(::grpc::ServerContext* context, const ::protocol::ExchangeTransactionContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListNodes(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueByAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAccountNet(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountNetMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAccountResource(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::AccountResourceMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueListByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNowBlock2(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionCountByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLimitNext(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLimitNext2(::grpc::ServerContext* context, const ::protocol::BlockLimit* request, ::protocol::BlockListExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLatestNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBlockByLatestNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockListExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::DeployContract(::grpc::ServerContext* context, const ::protocol::CreateSmartContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetContract(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetContractInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::SmartContractDataWrapper* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TriggerContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TriggerConstantContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ClearContractABI(::grpc::ServerContext* context, const ::protocol::ClearABIContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetDelegatedResource(::grpc::ServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListProposals(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ProposalList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetPaginatedProposalList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ProposalList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetProposalById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Proposal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ListExchanges(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetPaginatedExchangeList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::ExchangeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetExchangeById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetChainParameters(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ChainParameters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetPaginatedAssetIssueList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::TotalTransaction(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNextMaintenanceTime(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionSign(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionSign2(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateAddress(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::EasyTransferAsset(::grpc::ServerContext* context, const ::protocol::EasyTransferAssetMessage* request, ::protocol::EasyTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::EasyTransferAssetByPrivate(::grpc::ServerContext* context, const ::protocol::EasyTransferAssetByPrivateMessage* request, ::protocol::EasyTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::EasyTransfer(::grpc::ServerContext* context, const ::protocol::EasyTransferMessage* request, ::protocol::EasyTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::EasyTransferByPrivate(::grpc::ServerContext* context, const ::protocol::EasyTransferByPrivateMessage* request, ::protocol::EasyTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GenerateAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionInfoById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::AccountPermissionUpdate(::grpc::ServerContext* context, const ::protocol::AccountPermissionUpdateContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::AddSign(::grpc::ServerContext* context, const ::protocol::TransactionSign* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionSignWeight(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionSignWeight* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionApprovedList(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionApprovedList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNodeInfo(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::NodeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetRewardInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetBrokerageInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::UpdateBrokerage(::grpc::ServerContext* context, const ::protocol::UpdateBrokerageContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateShieldedTransaction(::grpc::ServerContext* context, const ::protocol::PrivateParameters* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMerkleTreeVoucherInfo(::grpc::ServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ScanNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ScanAndMarkNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ScanNoteByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetSpendingKey(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetExpandedSpendingKey(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::ExpandedSpendingKeyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetAkFromAsk(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNkFromNsk(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetIncomingViewingKey(::grpc::ServerContext* context, const ::protocol::ViewingKeyMessage* request, ::protocol::IncomingViewingKeyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetDiversifier(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DiversifierMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetNewShieldedAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ShieldedAddressInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetZenPaymentAddress(::grpc::ServerContext* context, const ::protocol::IncomingViewingKeyDiversifierMessage* request, ::protocol::PaymentAddressMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetRcm(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::IsSpend(::grpc::ServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateShieldedTransactionWithoutSpendAuthSig(::grpc::ServerContext* context, const ::protocol::PrivateParametersWithoutAsk* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetShieldTransactionHash(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateSpendAuthSig(::grpc::ServerContext* context, const ::protocol::SpendAuthSigParameters* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateShieldNullifier(::grpc::ServerContext* context, const ::protocol::NfParameters* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateShieldedContractParameters(::grpc::ServerContext* context, const ::protocol::PrivateShieldedTRC20Parameters* request, ::protocol::ShieldedTRC20Parameters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateShieldedContractParametersWithoutAsk(::grpc::ServerContext* context, const ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* request, ::protocol::ShieldedTRC20Parameters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTriggerInputForShieldedTRC20Contract(::grpc::ServerContext* context, const ::protocol::ShieldedTRC20TriggerContractParameters* request, ::protocol::BytesMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::CreateCommonTransaction(::grpc::ServerContext* context, const ::protocol::Transaction* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetTransactionInfoByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::MarketSellAsset(::grpc::ServerContext* context, const ::protocol::MarketSellAssetContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::MarketCancelOrder(::grpc::ServerContext* context, const ::protocol::MarketCancelOrderContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMarketOrderByAccount(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMarketOrderById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMarketPriceByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMarketOrderListByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wallet::Service::GetMarketPairList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WalletSolidity_method_names[] = {
  "/protocol.WalletSolidity/GetAccount",
  "/protocol.WalletSolidity/GetAccountById",
  "/protocol.WalletSolidity/ListWitnesses",
  "/protocol.WalletSolidity/GetAssetIssueList",
  "/protocol.WalletSolidity/GetPaginatedAssetIssueList",
  "/protocol.WalletSolidity/GetAssetIssueByName",
  "/protocol.WalletSolidity/GetAssetIssueListByName",
  "/protocol.WalletSolidity/GetAssetIssueById",
  "/protocol.WalletSolidity/GetNowBlock",
  "/protocol.WalletSolidity/GetNowBlock2",
  "/protocol.WalletSolidity/GetBlockByNum",
  "/protocol.WalletSolidity/GetBlockByNum2",
  "/protocol.WalletSolidity/GetTransactionCountByBlockNum",
  "/protocol.WalletSolidity/GetDelegatedResource",
  "/protocol.WalletSolidity/GetDelegatedResourceAccountIndex",
  "/protocol.WalletSolidity/GetExchangeById",
  "/protocol.WalletSolidity/ListExchanges",
  "/protocol.WalletSolidity/GetTransactionById",
  "/protocol.WalletSolidity/GetTransactionInfoById",
  "/protocol.WalletSolidity/GenerateAddress",
  "/protocol.WalletSolidity/GetMerkleTreeVoucherInfo",
  "/protocol.WalletSolidity/ScanNoteByIvk",
  "/protocol.WalletSolidity/ScanAndMarkNoteByIvk",
  "/protocol.WalletSolidity/ScanNoteByOvk",
  "/protocol.WalletSolidity/IsSpend",
  "/protocol.WalletSolidity/ScanShieldedTRC20NotesByIvk",
  "/protocol.WalletSolidity/ScanShieldedTRC20NotesByOvk",
  "/protocol.WalletSolidity/IsShieldedTRC20ContractNoteSpent",
  "/protocol.WalletSolidity/GetRewardInfo",
  "/protocol.WalletSolidity/GetBrokerageInfo",
  "/protocol.WalletSolidity/TriggerConstantContract",
  "/protocol.WalletSolidity/GetTransactionInfoByBlockNum",
  "/protocol.WalletSolidity/GetMarketOrderByAccount",
  "/protocol.WalletSolidity/GetMarketOrderById",
  "/protocol.WalletSolidity/GetMarketPriceByPair",
  "/protocol.WalletSolidity/GetMarketOrderListByPair",
  "/protocol.WalletSolidity/GetMarketPairList",
};

std::unique_ptr< WalletSolidity::Stub> WalletSolidity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WalletSolidity::Stub> stub(new WalletSolidity::Stub(channel, options));
  return stub;
}

WalletSolidity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAccount_(WalletSolidity_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccountById_(WalletSolidity_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWitnesses_(WalletSolidity_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueList_(WalletSolidity_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaginatedAssetIssueList_(WalletSolidity_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueByName_(WalletSolidity_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueListByName_(WalletSolidity_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAssetIssueById_(WalletSolidity_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(WalletSolidity_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock2_(WalletSolidity_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(WalletSolidity_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum2_(WalletSolidity_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionCountByBlockNum_(WalletSolidity_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegatedResource_(WalletSolidity_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegatedResourceAccountIndex_(WalletSolidity_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExchangeById_(WalletSolidity_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExchanges_(WalletSolidity_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionById_(WalletSolidity_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionInfoById_(WalletSolidity_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateAddress_(WalletSolidity_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMerkleTreeVoucherInfo_(WalletSolidity_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanNoteByIvk_(WalletSolidity_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanAndMarkNoteByIvk_(WalletSolidity_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanNoteByOvk_(WalletSolidity_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSpend_(WalletSolidity_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanShieldedTRC20NotesByIvk_(WalletSolidity_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScanShieldedTRC20NotesByOvk_(WalletSolidity_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsShieldedTRC20ContractNoteSpent_(WalletSolidity_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRewardInfo_(WalletSolidity_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrokerageInfo_(WalletSolidity_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerConstantContract_(WalletSolidity_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionInfoByBlockNum_(WalletSolidity_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderByAccount_(WalletSolidity_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderById_(WalletSolidity_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketPriceByPair_(WalletSolidity_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketOrderListByPair_(WalletSolidity_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMarketPairList_(WalletSolidity_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WalletSolidity::Stub::GetAccount(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

void WalletSolidity::Stub::async::GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAccount(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* WalletSolidity::Stub::PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* WalletSolidity::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account& request, ::protocol::Account* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountById_, context, request, response);
}

void WalletSolidity::Stub::async::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAccountById(::grpc::ClientContext* context, const ::protocol::Account* request, ::protocol::Account* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* WalletSolidity::Stub::PrepareAsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Account>* WalletSolidity::Stub::AsyncGetAccountByIdRaw(::grpc::ClientContext* context, const ::protocol::Account& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::WitnessList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListWitnesses_, context, request, response);
}

void WalletSolidity::Stub::async::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWitnesses_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ListWitnesses(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListWitnesses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* WalletSolidity::Stub::PrepareAsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::WitnessList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListWitnesses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::WitnessList>* WalletSolidity::Stub::AsyncListWitnessesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListWitnessesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueList_, context, request, response);
}

void WalletSolidity::Stub::async::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueList_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAssetIssueList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::PrepareAsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPaginatedAssetIssueList_, context, request, response);
}

void WalletSolidity::Stub::async::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedAssetIssueList_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetPaginatedAssetIssueList(::grpc::ClientContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPaginatedAssetIssueList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::PrepareAsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::PaginatedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPaginatedAssetIssueList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetPaginatedAssetIssueListRaw(::grpc::ClientContext* context, const ::protocol::PaginatedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPaginatedAssetIssueListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueByName_, context, request, response);
}

void WalletSolidity::Stub::async::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByName_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAssetIssueByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* WalletSolidity::Stub::PrepareAsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueContract, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* WalletSolidity::Stub::AsyncGetAssetIssueByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueListByName_, context, request, response);
}

void WalletSolidity::Stub::async::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueListByName_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAssetIssueListByName(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueListByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::PrepareAsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueList, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueListByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueList>* WalletSolidity::Stub::AsyncGetAssetIssueListByNameRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueListByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::AssetIssueContract* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAssetIssueById_, context, request, response);
}

void WalletSolidity::Stub::async::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetAssetIssueById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAssetIssueById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* WalletSolidity::Stub::PrepareAsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AssetIssueContract, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAssetIssueById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AssetIssueContract>* WalletSolidity::Stub::AsyncGetAssetIssueByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAssetIssueByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

void WalletSolidity::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNowBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNowBlock2_, context, request, response);
}

void WalletSolidity::Stub::async::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock2_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetNowBlock2(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* WalletSolidity::Stub::PrepareAsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockExtention, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNowBlock2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* WalletSolidity::Stub::AsyncGetNowBlock2Raw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNowBlock2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

void WalletSolidity::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* WalletSolidity::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::BlockExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByNum2_, context, request, response);
}

void WalletSolidity::Stub::async::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum2_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetBlockByNum2(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* WalletSolidity::Stub::PrepareAsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockExtention, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByNum2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockExtention>* WalletSolidity::Stub::AsyncGetBlockByNum2Raw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByNum2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionCountByBlockNum_, context, request, response);
}

void WalletSolidity::Stub::async::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionCountByBlockNum_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetTransactionCountByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionCountByBlockNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::PrepareAsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionCountByBlockNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::AsyncGetTransactionCountByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionCountByBlockNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::protocol::DelegatedResourceList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegatedResource_, context, request, response);
}

void WalletSolidity::Stub::async::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResource_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetDelegatedResource(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* WalletSolidity::Stub::PrepareAsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DelegatedResourceList, ::protocol::DelegatedResourceMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegatedResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceList>* WalletSolidity::Stub::AsyncGetDelegatedResourceRaw(::grpc::ClientContext* context, const ::protocol::DelegatedResourceMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegatedResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::DelegatedResourceAccountIndex* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegatedResourceAccountIndex_, context, request, response);
}

void WalletSolidity::Stub::async::GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResourceAccountIndex_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetDelegatedResourceAccountIndex(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegatedResourceAccountIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* WalletSolidity::Stub::PrepareAsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DelegatedResourceAccountIndex, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegatedResourceAccountIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DelegatedResourceAccountIndex>* WalletSolidity::Stub::AsyncGetDelegatedResourceAccountIndexRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegatedResourceAccountIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Exchange* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExchangeById_, context, request, response);
}

void WalletSolidity::Stub::async::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExchangeById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetExchangeById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExchangeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* WalletSolidity::Stub::PrepareAsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Exchange, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExchangeById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Exchange>* WalletSolidity::Stub::AsyncGetExchangeByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExchangeByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::ExchangeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListExchanges_, context, request, response);
}

void WalletSolidity::Stub::async::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExchanges_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ListExchanges(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExchanges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* WalletSolidity::Stub::PrepareAsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::ExchangeList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListExchanges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::ExchangeList>* WalletSolidity::Stub::AsyncListExchangesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListExchangesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionById_, context, request, response);
}

void WalletSolidity::Stub::async::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetTransactionById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* WalletSolidity::Stub::PrepareAsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Transaction, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Transaction>* WalletSolidity::Stub::AsyncGetTransactionByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::TransactionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionInfoById_, context, request, response);
}

void WalletSolidity::Stub::async::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetTransactionInfoById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* WalletSolidity::Stub::PrepareAsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionInfo, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionInfoById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfo>* WalletSolidity::Stub::AsyncGetTransactionInfoByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionInfoByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::AddressPrKeyPairMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateAddress_, context, request, response);
}

void WalletSolidity::Stub::async::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateAddress_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GenerateAddress(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* WalletSolidity::Stub::PrepareAsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::AddressPrKeyPairMessage, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::AddressPrKeyPairMessage>* WalletSolidity::Stub::AsyncGenerateAddressRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::protocol::IncrementalMerkleVoucherInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response);
}

void WalletSolidity::Stub::async::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMerkleTreeVoucherInfo(::grpc::ClientContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMerkleTreeVoucherInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* WalletSolidity::Stub::PrepareAsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::IncrementalMerkleVoucherInfo, ::protocol::OutputPointInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMerkleTreeVoucherInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::IncrementalMerkleVoucherInfo>* WalletSolidity::Stub::AsyncGetMerkleTreeVoucherInfoRaw(::grpc::ClientContext* context, const ::protocol::OutputPointInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMerkleTreeVoucherInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::protocol::DecryptNotes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanNoteByIvk_, context, request, response);
}

void WalletSolidity::Stub::async::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByIvk_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ScanNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* WalletSolidity::Stub::PrepareAsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotes, ::protocol::IvkDecryptParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanNoteByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* WalletSolidity::Stub::AsyncScanNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanNoteByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::protocol::DecryptNotesMarked* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanAndMarkNoteByIvk_, context, request, response);
}

void WalletSolidity::Stub::async::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanAndMarkNoteByIvk_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ScanAndMarkNoteByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanAndMarkNoteByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* WalletSolidity::Stub::PrepareAsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesMarked, ::protocol::IvkDecryptAndMarkParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanAndMarkNoteByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesMarked>* WalletSolidity::Stub::AsyncScanAndMarkNoteByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptAndMarkParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanAndMarkNoteByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::protocol::DecryptNotes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanNoteByOvk_, context, request, response);
}

void WalletSolidity::Stub::async::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByOvk_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ScanNoteByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanNoteByOvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* WalletSolidity::Stub::PrepareAsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotes, ::protocol::OvkDecryptParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanNoteByOvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotes>* WalletSolidity::Stub::AsyncScanNoteByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanNoteByOvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::protocol::SpendResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsSpend_, context, request, response);
}

void WalletSolidity::Stub::async::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSpend_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::IsSpend(::grpc::ClientContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSpend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* WalletSolidity::Stub::PrepareAsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::SpendResult, ::protocol::NoteParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsSpend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::SpendResult>* WalletSolidity::Stub::AsyncIsSpendRaw(::grpc::ClientContext* context, const ::protocol::NoteParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsSpendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response);
}

void WalletSolidity::Stub::async::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ScanShieldedTRC20NotesByIvk(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* WalletSolidity::Stub::PrepareAsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesTRC20, ::protocol::IvkDecryptTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanShieldedTRC20NotesByIvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* WalletSolidity::Stub::AsyncScanShieldedTRC20NotesByIvkRaw(::grpc::ClientContext* context, const ::protocol::IvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanShieldedTRC20NotesByIvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::protocol::DecryptNotesTRC20* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response);
}

void WalletSolidity::Stub::async::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::ScanShieldedTRC20NotesByOvk(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* WalletSolidity::Stub::PrepareAsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DecryptNotesTRC20, ::protocol::OvkDecryptTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanShieldedTRC20NotesByOvk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DecryptNotesTRC20>* WalletSolidity::Stub::AsyncScanShieldedTRC20NotesByOvkRaw(::grpc::ClientContext* context, const ::protocol::OvkDecryptTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanShieldedTRC20NotesByOvkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::protocol::NullifierResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response);
}

void WalletSolidity::Stub::async::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::IsShieldedTRC20ContractNoteSpent(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* WalletSolidity::Stub::PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NullifierResult, ::protocol::NfTRC20Parameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsShieldedTRC20ContractNoteSpent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NullifierResult>* WalletSolidity::Stub::AsyncIsShieldedTRC20ContractNoteSpentRaw(::grpc::ClientContext* context, const ::protocol::NfTRC20Parameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsShieldedTRC20ContractNoteSpentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRewardInfo_, context, request, response);
}

void WalletSolidity::Stub::async::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRewardInfo_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetRewardInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRewardInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::PrepareAsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRewardInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::AsyncGetRewardInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRewardInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::NumberMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrokerageInfo_, context, request, response);
}

void WalletSolidity::Stub::async::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerageInfo_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetBrokerageInfo(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerageInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::PrepareAsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::NumberMessage, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrokerageInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::NumberMessage>* WalletSolidity::Stub::AsyncGetBrokerageInfoRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrokerageInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::protocol::TransactionExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerConstantContract_, context, request, response);
}

void WalletSolidity::Stub::async::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerConstantContract_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::TriggerConstantContract(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerConstantContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* WalletSolidity::Stub::PrepareAsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionExtention, ::protocol::TriggerSmartContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerConstantContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionExtention>* WalletSolidity::Stub::AsyncTriggerConstantContractRaw(::grpc::ClientContext* context, const ::protocol::TriggerSmartContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerConstantContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::TransactionInfoList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionInfoByBlockNum_, context, request, response);
}

void WalletSolidity::Stub::async::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoByBlockNum_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetTransactionInfoByBlockNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionInfoByBlockNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* WalletSolidity::Stub::PrepareAsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionInfoList, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionInfoByBlockNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionInfoList>* WalletSolidity::Stub::AsyncGetTransactionInfoByBlockNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionInfoByBlockNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderByAccount_, context, request, response);
}

void WalletSolidity::Stub::async::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderByAccount_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMarketOrderByAccount(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderByAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* WalletSolidity::Stub::PrepareAsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderList, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderByAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* WalletSolidity::Stub::AsyncGetMarketOrderByAccountRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderByAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::protocol::MarketOrder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderById_, context, request, response);
}

void WalletSolidity::Stub::async::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderById_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMarketOrderById(::grpc::ClientContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* WalletSolidity::Stub::PrepareAsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrder, ::protocol::BytesMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrder>* WalletSolidity::Stub::AsyncGetMarketOrderByIdRaw(::grpc::ClientContext* context, const ::protocol::BytesMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketPriceList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketPriceByPair_, context, request, response);
}

void WalletSolidity::Stub::async::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPriceByPair_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMarketPriceByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPriceByPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* WalletSolidity::Stub::PrepareAsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketPriceList, ::protocol::MarketOrderPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketPriceByPair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketPriceList>* WalletSolidity::Stub::AsyncGetMarketPriceByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketPriceByPairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::protocol::MarketOrderList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketOrderListByPair_, context, request, response);
}

void WalletSolidity::Stub::async::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderListByPair_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMarketOrderListByPair(::grpc::ClientContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketOrderListByPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* WalletSolidity::Stub::PrepareAsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderList, ::protocol::MarketOrderPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketOrderListByPair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderList>* WalletSolidity::Stub::AsyncGetMarketOrderListByPairRaw(::grpc::ClientContext* context, const ::protocol::MarketOrderPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketOrderListByPairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletSolidity::Stub::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::MarketOrderPairList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMarketPairList_, context, request, response);
}

void WalletSolidity::Stub::async::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPairList_, context, request, response, std::move(f));
}

void WalletSolidity::Stub::async::GetMarketPairList(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMarketPairList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* WalletSolidity::Stub::PrepareAsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::MarketOrderPairList, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMarketPairList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::MarketOrderPairList>* WalletSolidity::Stub::AsyncGetMarketPairListRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMarketPairListRaw(context, request, cq);
  result->StartCall();
  return result;
}

WalletSolidity::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::Account* resp) {
               return service->GetAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::Account, ::protocol::Account, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::Account* req,
             ::protocol::Account* resp) {
               return service->GetAccountById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::WitnessList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::WitnessList* resp) {
               return service->ListWitnesses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetAssetIssueList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::PaginatedMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::PaginatedMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetPaginatedAssetIssueList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueContract* resp) {
               return service->GetAssetIssueByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::AssetIssueList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueList* resp) {
               return service->GetAssetIssueListByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::AssetIssueContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::AssetIssueContract* resp) {
               return service->GetAssetIssueById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::Block* resp) {
               return service->GetNowBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::BlockExtention* resp) {
               return service->GetNowBlock2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::Block* resp) {
               return service->GetBlockByNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::BlockExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::BlockExtention* resp) {
               return service->GetBlockByNum2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetTransactionCountByBlockNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::DelegatedResourceMessage, ::protocol::DelegatedResourceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::DelegatedResourceMessage* req,
             ::protocol::DelegatedResourceList* resp) {
               return service->GetDelegatedResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::DelegatedResourceAccountIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::DelegatedResourceAccountIndex* resp) {
               return service->GetDelegatedResourceAccountIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::Exchange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Exchange* resp) {
               return service->GetExchangeById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::ExchangeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::ExchangeList* resp) {
               return service->ListExchanges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::Transaction* resp) {
               return service->GetTransactionById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::TransactionInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::TransactionInfo* resp) {
               return service->GetTransactionInfoById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::AddressPrKeyPairMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::AddressPrKeyPairMessage* resp) {
               return service->GenerateAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::OutputPointInfo, ::protocol::IncrementalMerkleVoucherInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OutputPointInfo* req,
             ::protocol::IncrementalMerkleVoucherInfo* resp) {
               return service->GetMerkleTreeVoucherInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::IvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptParameters* req,
             ::protocol::DecryptNotes* resp) {
               return service->ScanNoteByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::IvkDecryptAndMarkParameters, ::protocol::DecryptNotesMarked, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptAndMarkParameters* req,
             ::protocol::DecryptNotesMarked* resp) {
               return service->ScanAndMarkNoteByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::OvkDecryptParameters, ::protocol::DecryptNotes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OvkDecryptParameters* req,
             ::protocol::DecryptNotes* resp) {
               return service->ScanNoteByOvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NoteParameters, ::protocol::SpendResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NoteParameters* req,
             ::protocol::SpendResult* resp) {
               return service->IsSpend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::IvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::IvkDecryptTRC20Parameters* req,
             ::protocol::DecryptNotesTRC20* resp) {
               return service->ScanShieldedTRC20NotesByIvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::OvkDecryptTRC20Parameters, ::protocol::DecryptNotesTRC20, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::OvkDecryptTRC20Parameters* req,
             ::protocol::DecryptNotesTRC20* resp) {
               return service->ScanShieldedTRC20NotesByOvk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NfTRC20Parameters, ::protocol::NullifierResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NfTRC20Parameters* req,
             ::protocol::NullifierResult* resp) {
               return service->IsShieldedTRC20ContractNoteSpent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetRewardInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::NumberMessage* resp) {
               return service->GetBrokerageInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::TriggerSmartContract, ::protocol::TransactionExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::TriggerSmartContract* req,
             ::protocol::TransactionExtention* resp) {
               return service->TriggerConstantContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::NumberMessage, ::protocol::TransactionInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::TransactionInfoList* resp) {
               return service->GetTransactionInfoByBlockNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::MarketOrderList* resp) {
               return service->GetMarketOrderByAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::BytesMessage, ::protocol::MarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::BytesMessage* req,
             ::protocol::MarketOrder* resp) {
               return service->GetMarketOrderById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::MarketOrderPair, ::protocol::MarketPriceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketOrderPair* req,
             ::protocol::MarketPriceList* resp) {
               return service->GetMarketPriceByPair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::MarketOrderPair, ::protocol::MarketOrderList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::MarketOrderPair* req,
             ::protocol::MarketOrderList* resp) {
               return service->GetMarketOrderListByPair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletSolidity_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletSolidity::Service, ::protocol::EmptyMessage, ::protocol::MarketOrderPairList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletSolidity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::MarketOrderPairList* resp) {
               return service->GetMarketPairList(ctx, req, resp);
             }, this)));
}

WalletSolidity::Service::~Service() {
}

::grpc::Status WalletSolidity::Service::GetAccount(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAccountById(::grpc::ServerContext* context, const ::protocol::Account* request, ::protocol::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ListWitnesses(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::WitnessList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetPaginatedAssetIssueList(::grpc::ServerContext* context, const ::protocol::PaginatedMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueListByName(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetAssetIssueById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::AssetIssueContract* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetNowBlock2(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetBlockByNum2(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::BlockExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetTransactionCountByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetDelegatedResource(::grpc::ServerContext* context, const ::protocol::DelegatedResourceMessage* request, ::protocol::DelegatedResourceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetDelegatedResourceAccountIndex(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::DelegatedResourceAccountIndex* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetExchangeById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Exchange* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ListExchanges(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::ExchangeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetTransactionById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetTransactionInfoById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::TransactionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GenerateAddress(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::AddressPrKeyPairMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMerkleTreeVoucherInfo(::grpc::ServerContext* context, const ::protocol::OutputPointInfo* request, ::protocol::IncrementalMerkleVoucherInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ScanNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptParameters* request, ::protocol::DecryptNotes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ScanAndMarkNoteByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptAndMarkParameters* request, ::protocol::DecryptNotesMarked* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ScanNoteByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptParameters* request, ::protocol::DecryptNotes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::IsSpend(::grpc::ServerContext* context, const ::protocol::NoteParameters* request, ::protocol::SpendResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ScanShieldedTRC20NotesByIvk(::grpc::ServerContext* context, const ::protocol::IvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::ScanShieldedTRC20NotesByOvk(::grpc::ServerContext* context, const ::protocol::OvkDecryptTRC20Parameters* request, ::protocol::DecryptNotesTRC20* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::IsShieldedTRC20ContractNoteSpent(::grpc::ServerContext* context, const ::protocol::NfTRC20Parameters* request, ::protocol::NullifierResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetRewardInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetBrokerageInfo(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::NumberMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::TriggerConstantContract(::grpc::ServerContext* context, const ::protocol::TriggerSmartContract* request, ::protocol::TransactionExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetTransactionInfoByBlockNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::TransactionInfoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMarketOrderByAccount(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMarketOrderById(::grpc::ServerContext* context, const ::protocol::BytesMessage* request, ::protocol::MarketOrder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMarketPriceByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketPriceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMarketOrderListByPair(::grpc::ServerContext* context, const ::protocol::MarketOrderPair* request, ::protocol::MarketOrderList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletSolidity::Service::GetMarketPairList(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::MarketOrderPairList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WalletExtension_method_names[] = {
  "/protocol.WalletExtension/GetTransactionsFromThis",
  "/protocol.WalletExtension/GetTransactionsFromThis2",
  "/protocol.WalletExtension/GetTransactionsToThis",
  "/protocol.WalletExtension/GetTransactionsToThis2",
};

std::unique_ptr< WalletExtension::Stub> WalletExtension::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WalletExtension::Stub> stub(new WalletExtension::Stub(channel, options));
  return stub;
}

WalletExtension::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTransactionsFromThis_(WalletExtension_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsFromThis2_(WalletExtension_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsToThis_(WalletExtension_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactionsToThis2_(WalletExtension_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WalletExtension::Stub::GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionsFromThis_, context, request, response);
}

void WalletExtension::Stub::async::GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsFromThis_, context, request, response, std::move(f));
}

void WalletExtension::Stub::async::GetTransactionsFromThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsFromThis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::PrepareAsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionList, ::protocol::AccountPaginated, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionsFromThis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::AsyncGetTransactionsFromThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionsFromThisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletExtension::Stub::GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionsFromThis2_, context, request, response);
}

void WalletExtension::Stub::async::GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsFromThis2_, context, request, response, std::move(f));
}

void WalletExtension::Stub::async::GetTransactionsFromThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsFromThis2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* WalletExtension::Stub::PrepareAsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionListExtention, ::protocol::AccountPaginated, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionsFromThis2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* WalletExtension::Stub::AsyncGetTransactionsFromThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionsFromThis2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletExtension::Stub::GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionsToThis_, context, request, response);
}

void WalletExtension::Stub::async::GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsToThis_, context, request, response, std::move(f));
}

void WalletExtension::Stub::async::GetTransactionsToThis(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsToThis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::PrepareAsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionList, ::protocol::AccountPaginated, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionsToThis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionList>* WalletExtension::Stub::AsyncGetTransactionsToThisRaw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionsToThisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WalletExtension::Stub::GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::protocol::TransactionListExtention* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransactionsToThis2_, context, request, response);
}

void WalletExtension::Stub::async::GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsToThis2_, context, request, response, std::move(f));
}

void WalletExtension::Stub::async::GetTransactionsToThis2(::grpc::ClientContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransactionsToThis2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* WalletExtension::Stub::PrepareAsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::TransactionListExtention, ::protocol::AccountPaginated, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransactionsToThis2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::TransactionListExtention>* WalletExtension::Stub::AsyncGetTransactionsToThis2Raw(::grpc::ClientContext* context, const ::protocol::AccountPaginated& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionsToThis2Raw(context, request, cq);
  result->StartCall();
  return result;
}

WalletExtension::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletExtension::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountPaginated* req,
             ::protocol::TransactionList* resp) {
               return service->GetTransactionsFromThis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletExtension::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountPaginated* req,
             ::protocol::TransactionListExtention* resp) {
               return service->GetTransactionsFromThis2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletExtension::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountPaginated* req,
             ::protocol::TransactionList* resp) {
               return service->GetTransactionsToThis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WalletExtension_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WalletExtension::Service, ::protocol::AccountPaginated, ::protocol::TransactionListExtention, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WalletExtension::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::AccountPaginated* req,
             ::protocol::TransactionListExtention* resp) {
               return service->GetTransactionsToThis2(ctx, req, resp);
             }, this)));
}

WalletExtension::Service::~Service() {
}

::grpc::Status WalletExtension::Service::GetTransactionsFromThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsFromThis2(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsToThis(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WalletExtension::Service::GetTransactionsToThis2(::grpc::ServerContext* context, const ::protocol::AccountPaginated* request, ::protocol::TransactionListExtention* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Database_method_names[] = {
  "/protocol.Database/getBlockReference",
  "/protocol.Database/GetDynamicProperties",
  "/protocol.Database/GetNowBlock",
  "/protocol.Database/GetBlockByNum",
};

std::unique_ptr< Database::Stub> Database::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Database::Stub> stub(new Database::Stub(channel, options));
  return stub;
}

Database::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getBlockReference_(Database_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDynamicProperties_(Database_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNowBlock_(Database_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByNum_(Database_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Database::Stub::getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::BlockReference* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockReference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getBlockReference_, context, request, response);
}

void Database::Stub::async::getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::BlockReference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBlockReference_, context, request, response, std::move(f));
}

void Database::Stub::async::getBlockReference(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBlockReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* Database::Stub::PrepareAsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::BlockReference, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getBlockReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::BlockReference>* Database::Stub::AsyncgetBlockReferenceRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetBlockReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::DynamicProperties* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::DynamicProperties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDynamicProperties_, context, request, response);
}

void Database::Stub::async::GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::DynamicProperties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDynamicProperties_, context, request, response, std::move(f));
}

void Database::Stub::async::GetDynamicProperties(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDynamicProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* Database::Stub::PrepareAsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::DynamicProperties, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDynamicProperties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::DynamicProperties>* Database::Stub::AsyncGetDynamicPropertiesRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDynamicPropertiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNowBlock_, context, request, response);
}

void Database::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, std::move(f));
}

void Database::Stub::async::GetNowBlock(::grpc::ClientContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNowBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::PrepareAsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNowBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::AsyncGetNowBlockRaw(::grpc::ClientContext* context, const ::protocol::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNowBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByNum_, context, request, response);
}

void Database::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, std::move(f));
}

void Database::Stub::async::GetBlockByNum(::grpc::ClientContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::PrepareAsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protocol::Block, ::protocol::NumberMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protocol::Block>* Database::Stub::AsyncGetBlockByNumRaw(::grpc::ClientContext* context, const ::protocol::NumberMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

Database::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::BlockReference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::BlockReference* resp) {
               return service->getBlockReference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::DynamicProperties, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::DynamicProperties* resp) {
               return service->GetDynamicProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::EmptyMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::EmptyMessage* req,
             ::protocol::Block* resp) {
               return service->GetNowBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::protocol::NumberMessage, ::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protocol::NumberMessage* req,
             ::protocol::Block* resp) {
               return service->GetBlockByNum(ctx, req, resp);
             }, this)));
}

Database::Service::~Service() {
}

::grpc::Status Database::Service::getBlockReference(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::BlockReference* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetDynamicProperties(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::DynamicProperties* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetNowBlock(::grpc::ServerContext* context, const ::protocol::EmptyMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetBlockByNum(::grpc::ServerContext* context, const ::protocol::NumberMessage* request, ::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


std::unique_ptr< Network::Stub> Network::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Network::Stub> stub(new Network::Stub(channel, options));
  return stub;
}

Network::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Network::Service::Service() {
}

Network::Service::~Service() {
}


}  // namespace protocol

