// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/api.proto

#include "api/api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr Return::Return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(false)
  , code_(0)
{}
struct ReturnDefaultTypeInternal {
  constexpr ReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReturnDefaultTypeInternal() {}
  union {
    Return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReturnDefaultTypeInternal _Return_default_instance_;
constexpr BlockReference::BlockReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_num_(int64_t{0}){}
struct BlockReferenceDefaultTypeInternal {
  constexpr BlockReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockReferenceDefaultTypeInternal() {}
  union {
    BlockReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockReferenceDefaultTypeInternal _BlockReference_default_instance_;
constexpr WitnessList::WitnessList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witnesses_(){}
struct WitnessListDefaultTypeInternal {
  constexpr WitnessListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WitnessListDefaultTypeInternal() {}
  union {
    WitnessList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WitnessListDefaultTypeInternal _WitnessList_default_instance_;
constexpr ProposalList::ProposalList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposals_(){}
struct ProposalListDefaultTypeInternal {
  constexpr ProposalListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalListDefaultTypeInternal() {}
  union {
    ProposalList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalListDefaultTypeInternal _ProposalList_default_instance_;
constexpr ExchangeList::ExchangeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exchanges_(){}
struct ExchangeListDefaultTypeInternal {
  constexpr ExchangeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeListDefaultTypeInternal() {}
  union {
    ExchangeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeListDefaultTypeInternal _ExchangeList_default_instance_;
constexpr AssetIssueList::AssetIssueList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assetissue_(){}
struct AssetIssueListDefaultTypeInternal {
  constexpr AssetIssueListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetIssueListDefaultTypeInternal() {}
  union {
    AssetIssueList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetIssueListDefaultTypeInternal _AssetIssueList_default_instance_;
constexpr BlockList::BlockList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(){}
struct BlockListDefaultTypeInternal {
  constexpr BlockListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockListDefaultTypeInternal() {}
  union {
    BlockList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockListDefaultTypeInternal _BlockList_default_instance_;
constexpr TransactionList::TransactionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(){}
struct TransactionListDefaultTypeInternal {
  constexpr TransactionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionListDefaultTypeInternal() {}
  union {
    TransactionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionListDefaultTypeInternal _TransactionList_default_instance_;
constexpr DelegatedResourceMessage::DelegatedResourceMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fromaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DelegatedResourceMessageDefaultTypeInternal {
  constexpr DelegatedResourceMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegatedResourceMessageDefaultTypeInternal() {}
  union {
    DelegatedResourceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegatedResourceMessageDefaultTypeInternal _DelegatedResourceMessage_default_instance_;
constexpr DelegatedResourceList::DelegatedResourceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delegatedresource_(){}
struct DelegatedResourceListDefaultTypeInternal {
  constexpr DelegatedResourceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegatedResourceListDefaultTypeInternal() {}
  union {
    DelegatedResourceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegatedResourceListDefaultTypeInternal _DelegatedResourceList_default_instance_;
constexpr NodeList::NodeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(){}
struct NodeListDefaultTypeInternal {
  constexpr NodeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeListDefaultTypeInternal() {}
  union {
    NodeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeListDefaultTypeInternal _NodeList_default_instance_;
constexpr Node::Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(nullptr){}
struct NodeDefaultTypeInternal {
  constexpr NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_;
constexpr Address::Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct AddressDefaultTypeInternal {
  constexpr AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressDefaultTypeInternal _Address_default_instance_;
constexpr EmptyMessage::EmptyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyMessageDefaultTypeInternal {
  constexpr EmptyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyMessageDefaultTypeInternal() {}
  union {
    EmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
constexpr NumberMessage::NumberMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_(int64_t{0}){}
struct NumberMessageDefaultTypeInternal {
  constexpr NumberMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberMessageDefaultTypeInternal() {}
  union {
    NumberMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberMessageDefaultTypeInternal _NumberMessage_default_instance_;
constexpr BytesMessage::BytesMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BytesMessageDefaultTypeInternal {
  constexpr BytesMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BytesMessageDefaultTypeInternal() {}
  union {
    BytesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BytesMessageDefaultTypeInternal _BytesMessage_default_instance_;
constexpr TimeMessage::TimeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begininmilliseconds_(int64_t{0})
  , endinmilliseconds_(int64_t{0}){}
struct TimeMessageDefaultTypeInternal {
  constexpr TimeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeMessageDefaultTypeInternal() {}
  union {
    TimeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeMessageDefaultTypeInternal _TimeMessage_default_instance_;
constexpr BlockLimit::BlockLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startnum_(int64_t{0})
  , endnum_(int64_t{0}){}
struct BlockLimitDefaultTypeInternal {
  constexpr BlockLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockLimitDefaultTypeInternal() {}
  union {
    BlockLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockLimitDefaultTypeInternal _BlockLimit_default_instance_;
constexpr TransactionLimit::TransactionLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limitnum_(int64_t{0}){}
struct TransactionLimitDefaultTypeInternal {
  constexpr TransactionLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionLimitDefaultTypeInternal() {}
  union {
    TransactionLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionLimitDefaultTypeInternal _TransactionLimit_default_instance_;
constexpr AccountPaginated::AccountPaginated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(nullptr)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct AccountPaginatedDefaultTypeInternal {
  constexpr AccountPaginatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountPaginatedDefaultTypeInternal() {}
  union {
    AccountPaginated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountPaginatedDefaultTypeInternal _AccountPaginated_default_instance_;
constexpr TimePaginatedMessage::TimePaginatedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timemessage_(nullptr)
  , offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct TimePaginatedMessageDefaultTypeInternal {
  constexpr TimePaginatedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimePaginatedMessageDefaultTypeInternal() {}
  union {
    TimePaginatedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimePaginatedMessageDefaultTypeInternal _TimePaginatedMessage_default_instance_;
constexpr AccountNetMessage_AssetNetUsedEntry_DoNotUse::AccountNetMessage_AssetNetUsedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountNetMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountNetMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountNetMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountNetMessage_AssetNetUsedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountNetMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal _AccountNetMessage_AssetNetUsedEntry_DoNotUse_default_instance_;
constexpr AccountNetMessage_AssetNetLimitEntry_DoNotUse::AccountNetMessage_AssetNetLimitEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountNetMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountNetMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountNetMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountNetMessage_AssetNetLimitEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountNetMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal _AccountNetMessage_AssetNetLimitEntry_DoNotUse_default_instance_;
constexpr AccountNetMessage::AccountNetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assetnetused_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , assetnetlimit_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , freenetused_(int64_t{0})
  , freenetlimit_(int64_t{0})
  , netused_(int64_t{0})
  , netlimit_(int64_t{0})
  , totalnetlimit_(int64_t{0})
  , totalnetweight_(int64_t{0}){}
struct AccountNetMessageDefaultTypeInternal {
  constexpr AccountNetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountNetMessageDefaultTypeInternal() {}
  union {
    AccountNetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountNetMessageDefaultTypeInternal _AccountNetMessage_default_instance_;
constexpr AccountResourceMessage_AssetNetUsedEntry_DoNotUse::AccountResourceMessage_AssetNetUsedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountResourceMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountResourceMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResourceMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountResourceMessage_AssetNetUsedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResourceMessage_AssetNetUsedEntry_DoNotUseDefaultTypeInternal _AccountResourceMessage_AssetNetUsedEntry_DoNotUse_default_instance_;
constexpr AccountResourceMessage_AssetNetLimitEntry_DoNotUse::AccountResourceMessage_AssetNetLimitEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountResourceMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountResourceMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResourceMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountResourceMessage_AssetNetLimitEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResourceMessage_AssetNetLimitEntry_DoNotUseDefaultTypeInternal _AccountResourceMessage_AssetNetLimitEntry_DoNotUse_default_instance_;
constexpr AccountResourceMessage::AccountResourceMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assetnetused_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , assetnetlimit_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , freenetused_(int64_t{0})
  , freenetlimit_(int64_t{0})
  , netused_(int64_t{0})
  , netlimit_(int64_t{0})
  , totalnetlimit_(int64_t{0})
  , totalnetweight_(int64_t{0})
  , totaltronpowerweight_(int64_t{0})
  , tronpowerused_(int64_t{0})
  , tronpowerlimit_(int64_t{0})
  , energyused_(int64_t{0})
  , energylimit_(int64_t{0})
  , totalenergylimit_(int64_t{0})
  , totalenergyweight_(int64_t{0})
  , storageused_(int64_t{0})
  , storagelimit_(int64_t{0}){}
struct AccountResourceMessageDefaultTypeInternal {
  constexpr AccountResourceMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResourceMessageDefaultTypeInternal() {}
  union {
    AccountResourceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResourceMessageDefaultTypeInternal _AccountResourceMessage_default_instance_;
constexpr PaginatedMessage::PaginatedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(int64_t{0})
  , limit_(int64_t{0}){}
struct PaginatedMessageDefaultTypeInternal {
  constexpr PaginatedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginatedMessageDefaultTypeInternal() {}
  union {
    PaginatedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginatedMessageDefaultTypeInternal _PaginatedMessage_default_instance_;
constexpr EasyTransferMessage::EasyTransferMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : passphrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct EasyTransferMessageDefaultTypeInternal {
  constexpr EasyTransferMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EasyTransferMessageDefaultTypeInternal() {}
  union {
    EasyTransferMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EasyTransferMessageDefaultTypeInternal _EasyTransferMessage_default_instance_;
constexpr EasyTransferAssetMessage::EasyTransferAssetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : passphrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , assetid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct EasyTransferAssetMessageDefaultTypeInternal {
  constexpr EasyTransferAssetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EasyTransferAssetMessageDefaultTypeInternal() {}
  union {
    EasyTransferAssetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EasyTransferAssetMessageDefaultTypeInternal _EasyTransferAssetMessage_default_instance_;
constexpr EasyTransferByPrivateMessage::EasyTransferByPrivateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privatekey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct EasyTransferByPrivateMessageDefaultTypeInternal {
  constexpr EasyTransferByPrivateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EasyTransferByPrivateMessageDefaultTypeInternal() {}
  union {
    EasyTransferByPrivateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EasyTransferByPrivateMessageDefaultTypeInternal _EasyTransferByPrivateMessage_default_instance_;
constexpr EasyTransferAssetByPrivateMessage::EasyTransferAssetByPrivateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privatekey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , assetid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct EasyTransferAssetByPrivateMessageDefaultTypeInternal {
  constexpr EasyTransferAssetByPrivateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EasyTransferAssetByPrivateMessageDefaultTypeInternal() {}
  union {
    EasyTransferAssetByPrivateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EasyTransferAssetByPrivateMessageDefaultTypeInternal _EasyTransferAssetByPrivateMessage_default_instance_;
constexpr EasyTransferResponse::EasyTransferResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(nullptr)
  , result_(nullptr){}
struct EasyTransferResponseDefaultTypeInternal {
  constexpr EasyTransferResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EasyTransferResponseDefaultTypeInternal() {}
  union {
    EasyTransferResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EasyTransferResponseDefaultTypeInternal _EasyTransferResponse_default_instance_;
constexpr AddressPrKeyPairMessage::AddressPrKeyPairMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , privatekey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddressPrKeyPairMessageDefaultTypeInternal {
  constexpr AddressPrKeyPairMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressPrKeyPairMessageDefaultTypeInternal() {}
  union {
    AddressPrKeyPairMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressPrKeyPairMessageDefaultTypeInternal _AddressPrKeyPairMessage_default_instance_;
constexpr TransactionExtention::TransactionExtention(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constant_result_()
  , txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(nullptr)
  , result_(nullptr)
  , energy_used_(int64_t{0}){}
struct TransactionExtentionDefaultTypeInternal {
  constexpr TransactionExtentionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionExtentionDefaultTypeInternal() {}
  union {
    TransactionExtention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionExtentionDefaultTypeInternal _TransactionExtention_default_instance_;
constexpr BlockExtention::BlockExtention(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , blockid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_header_(nullptr){}
struct BlockExtentionDefaultTypeInternal {
  constexpr BlockExtentionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockExtentionDefaultTypeInternal() {}
  union {
    BlockExtention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockExtentionDefaultTypeInternal _BlockExtention_default_instance_;
constexpr BlockListExtention::BlockListExtention(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(){}
struct BlockListExtentionDefaultTypeInternal {
  constexpr BlockListExtentionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockListExtentionDefaultTypeInternal() {}
  union {
    BlockListExtention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockListExtentionDefaultTypeInternal _BlockListExtention_default_instance_;
constexpr TransactionListExtention::TransactionListExtention(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(){}
struct TransactionListExtentionDefaultTypeInternal {
  constexpr TransactionListExtentionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionListExtentionDefaultTypeInternal() {}
  union {
    TransactionListExtention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionListExtentionDefaultTypeInternal _TransactionListExtention_default_instance_;
constexpr BlockIncrementalMerkleTree::BlockIncrementalMerkleTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : merkletree_(nullptr)
  , number_(int64_t{0}){}
struct BlockIncrementalMerkleTreeDefaultTypeInternal {
  constexpr BlockIncrementalMerkleTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockIncrementalMerkleTreeDefaultTypeInternal() {}
  union {
    BlockIncrementalMerkleTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockIncrementalMerkleTreeDefaultTypeInternal _BlockIncrementalMerkleTree_default_instance_;
constexpr TransactionSignWeight_Result::TransactionSignWeight_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
{}
struct TransactionSignWeight_ResultDefaultTypeInternal {
  constexpr TransactionSignWeight_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionSignWeight_ResultDefaultTypeInternal() {}
  union {
    TransactionSignWeight_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionSignWeight_ResultDefaultTypeInternal _TransactionSignWeight_Result_default_instance_;
constexpr TransactionSignWeight::TransactionSignWeight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approved_list_()
  , permission_(nullptr)
  , result_(nullptr)
  , transaction_(nullptr)
  , current_weight_(int64_t{0}){}
struct TransactionSignWeightDefaultTypeInternal {
  constexpr TransactionSignWeightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionSignWeightDefaultTypeInternal() {}
  union {
    TransactionSignWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionSignWeightDefaultTypeInternal _TransactionSignWeight_default_instance_;
constexpr TransactionApprovedList_Result::TransactionApprovedList_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
{}
struct TransactionApprovedList_ResultDefaultTypeInternal {
  constexpr TransactionApprovedList_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionApprovedList_ResultDefaultTypeInternal() {}
  union {
    TransactionApprovedList_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionApprovedList_ResultDefaultTypeInternal _TransactionApprovedList_Result_default_instance_;
constexpr TransactionApprovedList::TransactionApprovedList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approved_list_()
  , result_(nullptr)
  , transaction_(nullptr){}
struct TransactionApprovedListDefaultTypeInternal {
  constexpr TransactionApprovedListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionApprovedListDefaultTypeInternal() {}
  union {
    TransactionApprovedList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionApprovedListDefaultTypeInternal _TransactionApprovedList_default_instance_;
constexpr IvkDecryptParameters::IvkDecryptParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ivk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_block_index_(int64_t{0})
  , end_block_index_(int64_t{0}){}
struct IvkDecryptParametersDefaultTypeInternal {
  constexpr IvkDecryptParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IvkDecryptParametersDefaultTypeInternal() {}
  union {
    IvkDecryptParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IvkDecryptParametersDefaultTypeInternal _IvkDecryptParameters_default_instance_;
constexpr IvkDecryptAndMarkParameters::IvkDecryptAndMarkParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ivk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_block_index_(int64_t{0})
  , end_block_index_(int64_t{0}){}
struct IvkDecryptAndMarkParametersDefaultTypeInternal {
  constexpr IvkDecryptAndMarkParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IvkDecryptAndMarkParametersDefaultTypeInternal() {}
  union {
    IvkDecryptAndMarkParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IvkDecryptAndMarkParametersDefaultTypeInternal _IvkDecryptAndMarkParameters_default_instance_;
constexpr OvkDecryptParameters::OvkDecryptParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_block_index_(int64_t{0})
  , end_block_index_(int64_t{0}){}
struct OvkDecryptParametersDefaultTypeInternal {
  constexpr OvkDecryptParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OvkDecryptParametersDefaultTypeInternal() {}
  union {
    OvkDecryptParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OvkDecryptParametersDefaultTypeInternal _OvkDecryptParameters_default_instance_;
constexpr DecryptNotes_NoteTx::DecryptNotes_NoteTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , index_(0){}
struct DecryptNotes_NoteTxDefaultTypeInternal {
  constexpr DecryptNotes_NoteTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotes_NoteTxDefaultTypeInternal() {}
  union {
    DecryptNotes_NoteTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotes_NoteTxDefaultTypeInternal _DecryptNotes_NoteTx_default_instance_;
constexpr DecryptNotes::DecryptNotes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notetxs_(){}
struct DecryptNotesDefaultTypeInternal {
  constexpr DecryptNotesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotesDefaultTypeInternal() {}
  union {
    DecryptNotes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotesDefaultTypeInternal _DecryptNotes_default_instance_;
constexpr DecryptNotesMarked_NoteTx::DecryptNotesMarked_NoteTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , index_(0)
  , is_spend_(false){}
struct DecryptNotesMarked_NoteTxDefaultTypeInternal {
  constexpr DecryptNotesMarked_NoteTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotesMarked_NoteTxDefaultTypeInternal() {}
  union {
    DecryptNotesMarked_NoteTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotesMarked_NoteTxDefaultTypeInternal _DecryptNotesMarked_NoteTx_default_instance_;
constexpr DecryptNotesMarked::DecryptNotesMarked(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notetxs_(){}
struct DecryptNotesMarkedDefaultTypeInternal {
  constexpr DecryptNotesMarkedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotesMarkedDefaultTypeInternal() {}
  union {
    DecryptNotesMarked _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotesMarkedDefaultTypeInternal _DecryptNotesMarked_default_instance_;
constexpr Note::Note(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payment_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rcm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(int64_t{0}){}
struct NoteDefaultTypeInternal {
  constexpr NoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoteDefaultTypeInternal() {}
  union {
    Note _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoteDefaultTypeInternal _Note_default_instance_;
constexpr SpendNote::SpendNote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alpha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , voucher_(nullptr){}
struct SpendNoteDefaultTypeInternal {
  constexpr SpendNoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpendNoteDefaultTypeInternal() {}
  union {
    SpendNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpendNoteDefaultTypeInternal _SpendNote_default_instance_;
constexpr ReceiveNote::ReceiveNote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : note_(nullptr){}
struct ReceiveNoteDefaultTypeInternal {
  constexpr ReceiveNoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReceiveNoteDefaultTypeInternal() {}
  union {
    ReceiveNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReceiveNoteDefaultTypeInternal _ReceiveNote_default_instance_;
constexpr PrivateParameters::PrivateParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shielded_spends_()
  , shielded_receives_()
  , transparent_from_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(int64_t{0})
  , to_amount_(int64_t{0})
  , timeout_(int64_t{0}){}
struct PrivateParametersDefaultTypeInternal {
  constexpr PrivateParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrivateParametersDefaultTypeInternal() {}
  union {
    PrivateParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrivateParametersDefaultTypeInternal _PrivateParameters_default_instance_;
constexpr PrivateParametersWithoutAsk::PrivateParametersWithoutAsk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shielded_spends_()
  , shielded_receives_()
  , transparent_from_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(int64_t{0})
  , to_amount_(int64_t{0})
  , timeout_(int64_t{0}){}
struct PrivateParametersWithoutAskDefaultTypeInternal {
  constexpr PrivateParametersWithoutAskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrivateParametersWithoutAskDefaultTypeInternal() {}
  union {
    PrivateParametersWithoutAsk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrivateParametersWithoutAskDefaultTypeInternal _PrivateParametersWithoutAsk_default_instance_;
constexpr SpendAuthSigParameters::SpendAuthSigParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tx_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alpha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SpendAuthSigParametersDefaultTypeInternal {
  constexpr SpendAuthSigParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpendAuthSigParametersDefaultTypeInternal() {}
  union {
    SpendAuthSigParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpendAuthSigParametersDefaultTypeInternal _SpendAuthSigParameters_default_instance_;
constexpr NfParameters::NfParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , voucher_(nullptr){}
struct NfParametersDefaultTypeInternal {
  constexpr NfParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NfParametersDefaultTypeInternal() {}
  union {
    NfParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NfParametersDefaultTypeInternal _NfParameters_default_instance_;
constexpr ExpandedSpendingKeyMessage::ExpandedSpendingKeyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExpandedSpendingKeyMessageDefaultTypeInternal {
  constexpr ExpandedSpendingKeyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedSpendingKeyMessageDefaultTypeInternal() {}
  union {
    ExpandedSpendingKeyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedSpendingKeyMessageDefaultTypeInternal _ExpandedSpendingKeyMessage_default_instance_;
constexpr ViewingKeyMessage::ViewingKeyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ViewingKeyMessageDefaultTypeInternal {
  constexpr ViewingKeyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewingKeyMessageDefaultTypeInternal() {}
  union {
    ViewingKeyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewingKeyMessageDefaultTypeInternal _ViewingKeyMessage_default_instance_;
constexpr IncomingViewingKeyMessage::IncomingViewingKeyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ivk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IncomingViewingKeyMessageDefaultTypeInternal {
  constexpr IncomingViewingKeyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncomingViewingKeyMessageDefaultTypeInternal() {}
  union {
    IncomingViewingKeyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncomingViewingKeyMessageDefaultTypeInternal _IncomingViewingKeyMessage_default_instance_;
constexpr DiversifierMessage::DiversifierMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DiversifierMessageDefaultTypeInternal {
  constexpr DiversifierMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiversifierMessageDefaultTypeInternal() {}
  union {
    DiversifierMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiversifierMessageDefaultTypeInternal _DiversifierMessage_default_instance_;
constexpr IncomingViewingKeyDiversifierMessage::IncomingViewingKeyDiversifierMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ivk_(nullptr)
  , d_(nullptr){}
struct IncomingViewingKeyDiversifierMessageDefaultTypeInternal {
  constexpr IncomingViewingKeyDiversifierMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncomingViewingKeyDiversifierMessageDefaultTypeInternal() {}
  union {
    IncomingViewingKeyDiversifierMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncomingViewingKeyDiversifierMessageDefaultTypeInternal _IncomingViewingKeyDiversifierMessage_default_instance_;
constexpr PaymentAddressMessage::PaymentAddressMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pkd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payment_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , d_(nullptr){}
struct PaymentAddressMessageDefaultTypeInternal {
  constexpr PaymentAddressMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaymentAddressMessageDefaultTypeInternal() {}
  union {
    PaymentAddressMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaymentAddressMessageDefaultTypeInternal _PaymentAddressMessage_default_instance_;
constexpr ShieldedAddressInfo::ShieldedAddressInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ivk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , d_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pkd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payment_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ShieldedAddressInfoDefaultTypeInternal {
  constexpr ShieldedAddressInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShieldedAddressInfoDefaultTypeInternal() {}
  union {
    ShieldedAddressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShieldedAddressInfoDefaultTypeInternal _ShieldedAddressInfo_default_instance_;
constexpr NoteParameters::NoteParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , index_(0){}
struct NoteParametersDefaultTypeInternal {
  constexpr NoteParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoteParametersDefaultTypeInternal() {}
  union {
    NoteParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoteParametersDefaultTypeInternal _NoteParameters_default_instance_;
constexpr SpendResult::SpendResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(false){}
struct SpendResultDefaultTypeInternal {
  constexpr SpendResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpendResultDefaultTypeInternal() {}
  union {
    SpendResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpendResultDefaultTypeInternal _SpendResult_default_instance_;
constexpr TransactionInfoList::TransactionInfoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactioninfo_(){}
struct TransactionInfoListDefaultTypeInternal {
  constexpr TransactionInfoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInfoListDefaultTypeInternal() {}
  union {
    TransactionInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInfoListDefaultTypeInternal _TransactionInfoList_default_instance_;
constexpr SpendNoteTRC20::SpendNoteTRC20(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alpha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , pos_(int64_t{0}){}
struct SpendNoteTRC20DefaultTypeInternal {
  constexpr SpendNoteTRC20DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpendNoteTRC20DefaultTypeInternal() {}
  union {
    SpendNoteTRC20 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpendNoteTRC20DefaultTypeInternal _SpendNoteTRC20_default_instance_;
constexpr PrivateShieldedTRC20Parameters::PrivateShieldedTRC20Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shielded_spends_()
  , shielded_receives_()
  , ask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shielded_trc20_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PrivateShieldedTRC20ParametersDefaultTypeInternal {
  constexpr PrivateShieldedTRC20ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrivateShieldedTRC20ParametersDefaultTypeInternal() {}
  union {
    PrivateShieldedTRC20Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrivateShieldedTRC20ParametersDefaultTypeInternal _PrivateShieldedTRC20Parameters_default_instance_;
constexpr PrivateShieldedTRC20ParametersWithoutAsk::PrivateShieldedTRC20ParametersWithoutAsk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shielded_spends_()
  , shielded_receives_()
  , ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nsk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shielded_trc20_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PrivateShieldedTRC20ParametersWithoutAskDefaultTypeInternal {
  constexpr PrivateShieldedTRC20ParametersWithoutAskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrivateShieldedTRC20ParametersWithoutAskDefaultTypeInternal() {}
  union {
    PrivateShieldedTRC20ParametersWithoutAsk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrivateShieldedTRC20ParametersWithoutAskDefaultTypeInternal _PrivateShieldedTRC20ParametersWithoutAsk_default_instance_;
constexpr ShieldedTRC20Parameters::ShieldedTRC20Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spend_description_()
  , receive_description_()
  , binding_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trigger_contract_input_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameter_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ShieldedTRC20ParametersDefaultTypeInternal {
  constexpr ShieldedTRC20ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShieldedTRC20ParametersDefaultTypeInternal() {}
  union {
    ShieldedTRC20Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShieldedTRC20ParametersDefaultTypeInternal _ShieldedTRC20Parameters_default_instance_;
constexpr IvkDecryptTRC20Parameters::IvkDecryptTRC20Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , shielded_trc20_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ivk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_block_index_(int64_t{0})
  , end_block_index_(int64_t{0}){}
struct IvkDecryptTRC20ParametersDefaultTypeInternal {
  constexpr IvkDecryptTRC20ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IvkDecryptTRC20ParametersDefaultTypeInternal() {}
  union {
    IvkDecryptTRC20Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IvkDecryptTRC20ParametersDefaultTypeInternal _IvkDecryptTRC20Parameters_default_instance_;
constexpr OvkDecryptTRC20Parameters::OvkDecryptTRC20Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , ovk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shielded_trc20_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_block_index_(int64_t{0})
  , end_block_index_(int64_t{0}){}
struct OvkDecryptTRC20ParametersDefaultTypeInternal {
  constexpr OvkDecryptTRC20ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OvkDecryptTRC20ParametersDefaultTypeInternal() {}
  union {
    OvkDecryptTRC20Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OvkDecryptTRC20ParametersDefaultTypeInternal _OvkDecryptTRC20Parameters_default_instance_;
constexpr DecryptNotesTRC20_NoteTx::DecryptNotesTRC20_NoteTx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , position_(int64_t{0})
  , is_spent_(false)
  , index_(0){}
struct DecryptNotesTRC20_NoteTxDefaultTypeInternal {
  constexpr DecryptNotesTRC20_NoteTxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotesTRC20_NoteTxDefaultTypeInternal() {}
  union {
    DecryptNotesTRC20_NoteTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotesTRC20_NoteTxDefaultTypeInternal _DecryptNotesTRC20_NoteTx_default_instance_;
constexpr DecryptNotesTRC20::DecryptNotesTRC20(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notetxs_(){}
struct DecryptNotesTRC20DefaultTypeInternal {
  constexpr DecryptNotesTRC20DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptNotesTRC20DefaultTypeInternal() {}
  union {
    DecryptNotesTRC20 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptNotesTRC20DefaultTypeInternal _DecryptNotesTRC20_default_instance_;
constexpr NfTRC20Parameters::NfTRC20Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ak_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shielded_trc20_contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(nullptr)
  , position_(int64_t{0}){}
struct NfTRC20ParametersDefaultTypeInternal {
  constexpr NfTRC20ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NfTRC20ParametersDefaultTypeInternal() {}
  union {
    NfTRC20Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NfTRC20ParametersDefaultTypeInternal _NfTRC20Parameters_default_instance_;
constexpr NullifierResult::NullifierResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_spent_(false){}
struct NullifierResultDefaultTypeInternal {
  constexpr NullifierResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NullifierResultDefaultTypeInternal() {}
  union {
    NullifierResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NullifierResultDefaultTypeInternal _NullifierResult_default_instance_;
constexpr ShieldedTRC20TriggerContractParameters::ShieldedTRC20TriggerContractParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spend_authority_signature_()
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shielded_trc20_parameters_(nullptr){}
struct ShieldedTRC20TriggerContractParametersDefaultTypeInternal {
  constexpr ShieldedTRC20TriggerContractParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShieldedTRC20TriggerContractParametersDefaultTypeInternal() {}
  union {
    ShieldedTRC20TriggerContractParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShieldedTRC20TriggerContractParametersDefaultTypeInternal _ShieldedTRC20TriggerContractParameters_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2fapi_2eproto[78];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2fapi_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Return, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::Return, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Return, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockReference, block_num_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockReference, block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessList, witnesses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ProposalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ProposalList, proposals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeList, exchanges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AssetIssueList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AssetIssueList, assetissue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockList, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionList, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceMessage, fromaddress_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceMessage, toaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceList, delegatedresource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeList, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Node, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Address, host_),
  PROTOBUF_FIELD_OFFSET(::protocol::Address, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NumberMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NumberMessage, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BytesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BytesMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TimeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TimeMessage, begininmilliseconds_),
  PROTOBUF_FIELD_OFFSET(::protocol::TimeMessage, endinmilliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockLimit, startnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockLimit, endnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionLimit, transactionid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionLimit, limitnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPaginated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPaginated, account_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPaginated, offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPaginated, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TimePaginatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TimePaginatedMessage, timemessage_),
  PROTOBUF_FIELD_OFFSET(::protocol::TimePaginatedMessage, offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::TimePaginatedMessage, limit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, freenetused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, freenetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, netused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, netlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, assetnetused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, assetnetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, totalnetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountNetMessage, totalnetweight_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, freenetused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, freenetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, netused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, netlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, assetnetused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, assetnetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, totalnetlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, totalnetweight_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, totaltronpowerweight_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, tronpowerused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, tronpowerlimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, energyused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, energylimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, totalenergylimit_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, totalenergyweight_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, storageused_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountResourceMessage, storagelimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PaginatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PaginatedMessage, offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::PaginatedMessage, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferMessage, passphrase_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferMessage, toaddress_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetMessage, passphrase_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetMessage, toaddress_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetMessage, assetid_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferByPrivateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferByPrivateMessage, privatekey_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferByPrivateMessage, toaddress_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferByPrivateMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetByPrivateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetByPrivateMessage, privatekey_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetByPrivateMessage, toaddress_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetByPrivateMessage, assetid_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferAssetByPrivateMessage, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferResponse, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::EasyTransferResponse, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AddressPrKeyPairMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AddressPrKeyPairMessage, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AddressPrKeyPairMessage, privatekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, transaction_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, constant_result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionExtention, energy_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockExtention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockExtention, transactions_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockExtention, block_header_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockExtention, blockid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockListExtention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockListExtention, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionListExtention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionListExtention, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockIncrementalMerkleTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockIncrementalMerkleTree, number_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockIncrementalMerkleTree, merkletree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight_Result, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight_Result, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, permission_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, approved_list_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, current_weight_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSignWeight, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList_Result, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList_Result, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList, approved_list_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionApprovedList, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptParameters, start_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptParameters, end_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptParameters, ivk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, start_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, end_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, ivk_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptAndMarkParameters, nk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptParameters, start_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptParameters, end_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptParameters, ovk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes_NoteTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes_NoteTx, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes_NoteTx, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes_NoteTx, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotes, notetxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked_NoteTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked_NoteTx, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked_NoteTx, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked_NoteTx, index_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked_NoteTx, is_spend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesMarked, notetxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Note, value_),
  PROTOBUF_FIELD_OFFSET(::protocol::Note, payment_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Note, rcm_),
  PROTOBUF_FIELD_OFFSET(::protocol::Note, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNote, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNote, alpha_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNote, voucher_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNote, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveNote, note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, transparent_from_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, ask_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, shielded_spends_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, shielded_receives_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, to_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParameters, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, transparent_from_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, shielded_spends_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, shielded_receives_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, to_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateParametersWithoutAsk, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendAuthSigParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendAuthSigParameters, ask_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendAuthSigParameters, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendAuthSigParameters, alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NfParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NfParameters, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfParameters, voucher_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfParameters, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfParameters, nk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExpandedSpendingKeyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ExpandedSpendingKeyMessage, ask_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExpandedSpendingKeyMessage, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExpandedSpendingKeyMessage, ovk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ViewingKeyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ViewingKeyMessage, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::ViewingKeyMessage, nk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncomingViewingKeyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncomingViewingKeyMessage, ivk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DiversifierMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DiversifierMessage, d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncomingViewingKeyDiversifierMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncomingViewingKeyDiversifierMessage, ivk_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncomingViewingKeyDiversifierMessage, d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PaymentAddressMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PaymentAddressMessage, d_),
  PROTOBUF_FIELD_OFFSET(::protocol::PaymentAddressMessage, pkd_),
  PROTOBUF_FIELD_OFFSET(::protocol::PaymentAddressMessage, payment_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, sk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, ask_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, nk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, ivk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, d_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, pkd_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedAddressInfo, payment_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, nk_),
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::NoteParameters, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendResult, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendResult, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfoList, transactioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, alpha_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, root_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, path_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendNoteTRC20, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, ask_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, shielded_spends_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, shielded_receives_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, to_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20Parameters, shielded_trc20_contract_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, nsk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, shielded_spends_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, shielded_receives_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, to_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::PrivateShieldedTRC20ParametersWithoutAsk, shielded_trc20_contract_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, spend_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, receive_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, binding_signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, message_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, trigger_contract_input_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20Parameters, parameter_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, start_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, end_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, shielded_trc20_contract_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, ivk_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, nk_),
  PROTOBUF_FIELD_OFFSET(::protocol::IvkDecryptTRC20Parameters, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, start_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, end_block_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, ovk_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, shielded_trc20_contract_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::OvkDecryptTRC20Parameters, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, position_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, is_spent_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, index_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, to_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20_NoteTx, transparent_to_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DecryptNotesTRC20, notetxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, ak_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, nk_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, position_),
  PROTOBUF_FIELD_OFFSET(::protocol::NfTRC20Parameters, shielded_trc20_contract_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NullifierResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NullifierResult, is_spent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20TriggerContractParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20TriggerContractParameters, shielded_trc20_parameters_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20TriggerContractParameters, spend_authority_signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20TriggerContractParameters, amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTRC20TriggerContractParameters, transparent_to_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::Return)},
  { 8, -1, sizeof(::protocol::BlockReference)},
  { 15, -1, sizeof(::protocol::WitnessList)},
  { 21, -1, sizeof(::protocol::ProposalList)},
  { 27, -1, sizeof(::protocol::ExchangeList)},
  { 33, -1, sizeof(::protocol::AssetIssueList)},
  { 39, -1, sizeof(::protocol::BlockList)},
  { 45, -1, sizeof(::protocol::TransactionList)},
  { 51, -1, sizeof(::protocol::DelegatedResourceMessage)},
  { 58, -1, sizeof(::protocol::DelegatedResourceList)},
  { 64, -1, sizeof(::protocol::NodeList)},
  { 70, -1, sizeof(::protocol::Node)},
  { 76, -1, sizeof(::protocol::Address)},
  { 83, -1, sizeof(::protocol::EmptyMessage)},
  { 88, -1, sizeof(::protocol::NumberMessage)},
  { 94, -1, sizeof(::protocol::BytesMessage)},
  { 100, -1, sizeof(::protocol::TimeMessage)},
  { 107, -1, sizeof(::protocol::BlockLimit)},
  { 114, -1, sizeof(::protocol::TransactionLimit)},
  { 121, -1, sizeof(::protocol::AccountPaginated)},
  { 129, -1, sizeof(::protocol::TimePaginatedMessage)},
  { 137, 144, sizeof(::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse)},
  { 146, 153, sizeof(::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse)},
  { 155, -1, sizeof(::protocol::AccountNetMessage)},
  { 168, 175, sizeof(::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse)},
  { 177, 184, sizeof(::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse)},
  { 186, -1, sizeof(::protocol::AccountResourceMessage)},
  { 208, -1, sizeof(::protocol::PaginatedMessage)},
  { 215, -1, sizeof(::protocol::EasyTransferMessage)},
  { 223, -1, sizeof(::protocol::EasyTransferAssetMessage)},
  { 232, -1, sizeof(::protocol::EasyTransferByPrivateMessage)},
  { 240, -1, sizeof(::protocol::EasyTransferAssetByPrivateMessage)},
  { 249, -1, sizeof(::protocol::EasyTransferResponse)},
  { 257, -1, sizeof(::protocol::AddressPrKeyPairMessage)},
  { 264, -1, sizeof(::protocol::TransactionExtention)},
  { 274, -1, sizeof(::protocol::BlockExtention)},
  { 282, -1, sizeof(::protocol::BlockListExtention)},
  { 288, -1, sizeof(::protocol::TransactionListExtention)},
  { 294, -1, sizeof(::protocol::BlockIncrementalMerkleTree)},
  { 301, -1, sizeof(::protocol::TransactionSignWeight_Result)},
  { 308, -1, sizeof(::protocol::TransactionSignWeight)},
  { 318, -1, sizeof(::protocol::TransactionApprovedList_Result)},
  { 325, -1, sizeof(::protocol::TransactionApprovedList)},
  { 333, -1, sizeof(::protocol::IvkDecryptParameters)},
  { 341, -1, sizeof(::protocol::IvkDecryptAndMarkParameters)},
  { 351, -1, sizeof(::protocol::OvkDecryptParameters)},
  { 359, -1, sizeof(::protocol::DecryptNotes_NoteTx)},
  { 367, -1, sizeof(::protocol::DecryptNotes)},
  { 373, -1, sizeof(::protocol::DecryptNotesMarked_NoteTx)},
  { 382, -1, sizeof(::protocol::DecryptNotesMarked)},
  { 388, -1, sizeof(::protocol::Note)},
  { 397, -1, sizeof(::protocol::SpendNote)},
  { 406, -1, sizeof(::protocol::ReceiveNote)},
  { 412, -1, sizeof(::protocol::PrivateParameters)},
  { 427, -1, sizeof(::protocol::PrivateParametersWithoutAsk)},
  { 442, -1, sizeof(::protocol::SpendAuthSigParameters)},
  { 450, -1, sizeof(::protocol::NfParameters)},
  { 459, -1, sizeof(::protocol::ExpandedSpendingKeyMessage)},
  { 467, -1, sizeof(::protocol::ViewingKeyMessage)},
  { 474, -1, sizeof(::protocol::IncomingViewingKeyMessage)},
  { 480, -1, sizeof(::protocol::DiversifierMessage)},
  { 486, -1, sizeof(::protocol::IncomingViewingKeyDiversifierMessage)},
  { 493, -1, sizeof(::protocol::PaymentAddressMessage)},
  { 501, -1, sizeof(::protocol::ShieldedAddressInfo)},
  { 516, -1, sizeof(::protocol::NoteParameters)},
  { 526, -1, sizeof(::protocol::SpendResult)},
  { 533, -1, sizeof(::protocol::TransactionInfoList)},
  { 539, -1, sizeof(::protocol::SpendNoteTRC20)},
  { 549, -1, sizeof(::protocol::PrivateShieldedTRC20Parameters)},
  { 563, -1, sizeof(::protocol::PrivateShieldedTRC20ParametersWithoutAsk)},
  { 577, -1, sizeof(::protocol::ShieldedTRC20Parameters)},
  { 588, -1, sizeof(::protocol::IvkDecryptTRC20Parameters)},
  { 600, -1, sizeof(::protocol::OvkDecryptTRC20Parameters)},
  { 610, -1, sizeof(::protocol::DecryptNotesTRC20_NoteTx)},
  { 622, -1, sizeof(::protocol::DecryptNotesTRC20)},
  { 628, -1, sizeof(::protocol::NfTRC20Parameters)},
  { 638, -1, sizeof(::protocol::NullifierResult)},
  { 644, -1, sizeof(::protocol::ShieldedTRC20TriggerContractParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WitnessList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ProposalList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExchangeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AssetIssueList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResourceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NumberMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BytesMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TimeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountPaginated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TimePaginatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountNetMessage_AssetNetUsedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountNetMessage_AssetNetLimitEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountNetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountResourceMessage_AssetNetUsedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountResourceMessage_AssetNetLimitEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountResourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PaginatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EasyTransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EasyTransferAssetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EasyTransferByPrivateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EasyTransferAssetByPrivateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_EasyTransferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AddressPrKeyPairMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionExtention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockExtention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockListExtention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionListExtention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockIncrementalMerkleTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionSignWeight_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionSignWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionApprovedList_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionApprovedList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IvkDecryptParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IvkDecryptAndMarkParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OvkDecryptParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotes_NoteTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotesMarked_NoteTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotesMarked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Note_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ReceiveNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PrivateParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PrivateParametersWithoutAsk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendAuthSigParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NfParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExpandedSpendingKeyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ViewingKeyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncomingViewingKeyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DiversifierMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncomingViewingKeyDiversifierMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PaymentAddressMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ShieldedAddressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NoteParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendNoteTRC20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PrivateShieldedTRC20Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PrivateShieldedTRC20ParametersWithoutAsk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ShieldedTRC20Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IvkDecryptTRC20Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OvkDecryptTRC20Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotesTRC20_NoteTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DecryptNotesTRC20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NfTRC20Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NullifierResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ShieldedTRC20TriggerContractParameters_default_instance_),
};

const char descriptor_table_protodef_api_2fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rapi/api.proto\022\010protocol\032\017core/Tron.pro"
  "to\032\034google/api/annotations.proto\032(core/c"
  "ontract/asset_issue_contract.proto\032$core"
  "/contract/account_contract.proto\032$core/c"
  "ontract/witness_contract.proto\032$core/con"
  "tract/balance_contract.proto\032%core/contr"
  "act/proposal_contract.proto\032$core/contra"
  "ct/storage_contract.proto\032%core/contract"
  "/exchange_contract.proto\032\"core/contract/"
  "smart_contract.proto\032#core/contract/shie"
  "ld_contract.proto\032#core/contract/market_"
  "contract.proto\"\224\003\n\006Return\022\016\n\006result\030\001 \001("
  "\010\022,\n\004code\030\002 \001(\0162\036.protocol.Return.respon"
  "se_code\022\017\n\007message\030\003 \001(\014\"\272\002\n\rresponse_co"
  "de\022\013\n\007SUCCESS\020\000\022\014\n\010SIGERROR\020\001\022\033\n\027CONTRAC"
  "T_VALIDATE_ERROR\020\002\022\026\n\022CONTRACT_EXE_ERROR"
  "\020\003\022\022\n\016BANDWITH_ERROR\020\004\022\031\n\025DUP_TRANSACTIO"
  "N_ERROR\020\005\022\017\n\013TAPOS_ERROR\020\006\022\035\n\031TOO_BIG_TR"
  "ANSACTION_ERROR\020\007\022 \n\034TRANSACTION_EXPIRAT"
  "ION_ERROR\020\010\022\017\n\013SERVER_BUSY\020\t\022\021\n\rNO_CONNE"
  "CTION\020\n\022#\n\037NOT_ENOUGH_EFFECTIVE_CONNECTI"
  "ON\020\013\022\017\n\013OTHER_ERROR\020\024\"7\n\016BlockReference\022"
  "\021\n\tblock_num\030\001 \001(\003\022\022\n\nblock_hash\030\002 \001(\014\"3"
  "\n\013WitnessList\022$\n\twitnesses\030\001 \003(\0132\021.proto"
  "col.Witness\"5\n\014ProposalList\022%\n\tproposals"
  "\030\001 \003(\0132\022.protocol.Proposal\"5\n\014ExchangeLi"
  "st\022%\n\texchanges\030\001 \003(\0132\022.protocol.Exchang"
  "e\"B\n\016AssetIssueList\0220\n\nassetIssue\030\001 \003(\0132"
  "\034.protocol.AssetIssueContract\"+\n\tBlockLi"
  "st\022\036\n\005block\030\001 \003(\0132\017.protocol.Block\"=\n\017Tr"
  "ansactionList\022*\n\013transaction\030\001 \003(\0132\025.pro"
  "tocol.Transaction\"B\n\030DelegatedResourceMe"
  "ssage\022\023\n\013fromAddress\030\001 \001(\014\022\021\n\ttoAddress\030"
  "\002 \001(\014\"O\n\025DelegatedResourceList\0226\n\021delega"
  "tedResource\030\001 \003(\0132\033.protocol.DelegatedRe"
  "source\")\n\010NodeList\022\035\n\005nodes\030\001 \003(\0132\016.prot"
  "ocol.Node\"*\n\004Node\022\"\n\007address\030\001 \001(\0132\021.pro"
  "tocol.Address\"%\n\007Address\022\014\n\004host\030\001 \001(\014\022\014"
  "\n\004port\030\002 \001(\005\"\016\n\014EmptyMessage\"\034\n\rNumberMe"
  "ssage\022\013\n\003num\030\001 \001(\003\"\035\n\014BytesMessage\022\r\n\005va"
  "lue\030\001 \001(\014\"E\n\013TimeMessage\022\033\n\023beginInMilli"
  "seconds\030\001 \001(\003\022\031\n\021endInMilliseconds\030\002 \001(\003"
  "\".\n\nBlockLimit\022\020\n\010startNum\030\001 \001(\003\022\016\n\006endN"
  "um\030\002 \001(\003\";\n\020TransactionLimit\022\025\n\rtransact"
  "ionId\030\001 \001(\014\022\020\n\010limitNum\030\002 \001(\003\"U\n\020Account"
  "Paginated\022\"\n\007account\030\001 \001(\0132\021.protocol.Ac"
  "count\022\016\n\006offset\030\002 \001(\003\022\r\n\005limit\030\003 \001(\003\"a\n\024"
  "TimePaginatedMessage\022*\n\013timeMessage\030\001 \001("
  "\0132\025.protocol.TimeMessage\022\016\n\006offset\030\002 \001(\003"
  "\022\r\n\005limit\030\003 \001(\003\"\207\003\n\021AccountNetMessage\022\023\n"
  "\013freeNetUsed\030\001 \001(\003\022\024\n\014freeNetLimit\030\002 \001(\003"
  "\022\017\n\007NetUsed\030\003 \001(\003\022\020\n\010NetLimit\030\004 \001(\003\022C\n\014a"
  "ssetNetUsed\030\005 \003(\0132-.protocol.AccountNetM"
  "essage.AssetNetUsedEntry\022E\n\rassetNetLimi"
  "t\030\006 \003(\0132..protocol.AccountNetMessage.Ass"
  "etNetLimitEntry\022\025\n\rTotalNetLimit\030\007 \001(\003\022\026"
  "\n\016TotalNetWeight\030\010 \001(\003\0323\n\021AssetNetUsedEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\0324\n\022A"
  "ssetNetLimitEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\003:\0028\001\"\354\004\n\026AccountResourceMessage\022\023\n\013"
  "freeNetUsed\030\001 \001(\003\022\024\n\014freeNetLimit\030\002 \001(\003\022"
  "\017\n\007NetUsed\030\003 \001(\003\022\020\n\010NetLimit\030\004 \001(\003\022H\n\014as"
  "setNetUsed\030\005 \003(\01322.protocol.AccountResou"
  "rceMessage.AssetNetUsedEntry\022J\n\rassetNet"
  "Limit\030\006 \003(\01323.protocol.AccountResourceMe"
  "ssage.AssetNetLimitEntry\022\025\n\rTotalNetLimi"
  "t\030\007 \001(\003\022\026\n\016TotalNetWeight\030\010 \001(\003\022\034\n\024Total"
  "TronPowerWeight\030\t \001(\003\022\025\n\rtronPowerUsed\030\n"
  " \001(\003\022\026\n\016tronPowerLimit\030\013 \001(\003\022\022\n\nEnergyUs"
  "ed\030\r \001(\003\022\023\n\013EnergyLimit\030\016 \001(\003\022\030\n\020TotalEn"
  "ergyLimit\030\017 \001(\003\022\031\n\021TotalEnergyWeight\030\020 \001"
  "(\003\022\023\n\013storageUsed\030\025 \001(\003\022\024\n\014storageLimit\030"
  "\026 \001(\003\0323\n\021AssetNetUsedEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\003:\0028\001\0324\n\022AssetNetLimitEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"1\n\020Pagi"
  "natedMessage\022\016\n\006offset\030\001 \001(\003\022\r\n\005limit\030\002 "
  "\001(\003\"L\n\023EasyTransferMessage\022\022\n\npassPhrase"
  "\030\001 \001(\014\022\021\n\ttoAddress\030\002 \001(\014\022\016\n\006amount\030\003 \001("
  "\003\"b\n\030EasyTransferAssetMessage\022\022\n\npassPhr"
  "ase\030\001 \001(\014\022\021\n\ttoAddress\030\002 \001(\014\022\017\n\007assetId\030"
  "\003 \001(\t\022\016\n\006amount\030\004 \001(\003\"U\n\034EasyTransferByP"
  "rivateMessage\022\022\n\nprivateKey\030\001 \001(\014\022\021\n\ttoA"
  "ddress\030\002 \001(\014\022\016\n\006amount\030\003 \001(\003\"k\n!EasyTran"
  "sferAssetByPrivateMessage\022\022\n\nprivateKey\030"
  "\001 \001(\014\022\021\n\ttoAddress\030\002 \001(\014\022\017\n\007assetId\030\003 \001("
  "\t\022\016\n\006amount\030\004 \001(\003\"r\n\024EasyTransferRespons"
  "e\022*\n\013transaction\030\001 \001(\0132\025.protocol.Transa"
  "ction\022 \n\006result\030\002 \001(\0132\020.protocol.Return\022"
  "\014\n\004txid\030\003 \001(\014\">\n\027AddressPrKeyPairMessage"
  "\022\017\n\007address\030\001 \001(\t\022\022\n\nprivateKey\030\002 \001(\t\"\240\001"
  "\n\024TransactionExtention\022*\n\013transaction\030\001 "
  "\001(\0132\025.protocol.Transaction\022\014\n\004txid\030\002 \001(\014"
  "\022\027\n\017constant_result\030\003 \003(\014\022 \n\006result\030\004 \001("
  "\0132\020.protocol.Return\022\023\n\013energy_used\030\005 \001(\003"
  "\"\204\001\n\016BlockExtention\0224\n\014transactions\030\001 \003("
  "\0132\036.protocol.TransactionExtention\022+\n\014blo"
  "ck_header\030\002 \001(\0132\025.protocol.BlockHeader\022\017"
  "\n\007blockid\030\003 \001(\014\"=\n\022BlockListExtention\022\'\n"
  "\005block\030\001 \003(\0132\030.protocol.BlockExtention\"O"
  "\n\030TransactionListExtention\0223\n\013transactio"
  "n\030\001 \003(\0132\036.protocol.TransactionExtention\""
  "a\n\032BlockIncrementalMerkleTree\022\016\n\006number\030"
  "\001 \001(\003\0223\n\nmerkleTree\030\002 \001(\0132\037.protocol.Inc"
  "rementalMerkleTree\"\337\003\n\025TransactionSignWe"
  "ight\022(\n\npermission\030\001 \001(\0132\024.protocol.Perm"
  "ission\022\025\n\rapproved_list\030\002 \003(\014\022\026\n\016current"
  "_weight\030\003 \001(\003\0226\n\006result\030\004 \001(\0132&.protocol"
  ".TransactionSignWeight.Result\0223\n\013transac"
  "tion\030\005 \001(\0132\036.protocol.TransactionExtenti"
  "on\032\377\001\n\006Result\022B\n\004code\030\001 \001(\01624.protocol.T"
  "ransactionSignWeight.Result.response_cod"
  "e\022\017\n\007message\030\002 \001(\t\"\237\001\n\rresponse_code\022\025\n\021"
  "ENOUGH_PERMISSION\020\000\022\031\n\025NOT_ENOUGH_PERMIS"
  "SION\020\001\022\032\n\026SIGNATURE_FORMAT_ERROR\020\002\022\031\n\025CO"
  "MPUTE_ADDRESS_ERROR\020\003\022\024\n\020PERMISSION_ERRO"
  "R\020\004\022\017\n\013OTHER_ERROR\020\024\"\347\002\n\027TransactionAppr"
  "ovedList\022\025\n\rapproved_list\030\002 \003(\014\0228\n\006resul"
  "t\030\004 \001(\0132(.protocol.TransactionApprovedLi"
  "st.Result\0223\n\013transaction\030\005 \001(\0132\036.protoco"
  "l.TransactionExtention\032\305\001\n\006Result\022D\n\004cod"
  "e\030\001 \001(\01626.protocol.TransactionApprovedLi"
  "st.Result.response_code\022\017\n\007message\030\002 \001(\t"
  "\"d\n\rresponse_code\022\013\n\007SUCCESS\020\000\022\032\n\026SIGNAT"
  "URE_FORMAT_ERROR\020\001\022\031\n\025COMPUTE_ADDRESS_ER"
  "ROR\020\002\022\017\n\013OTHER_ERROR\020\024\"W\n\024IvkDecryptPara"
  "meters\022\031\n\021start_block_index\030\001 \001(\003\022\027\n\017end"
  "_block_index\030\002 \001(\003\022\013\n\003ivk\030\003 \001(\014\"v\n\033IvkDe"
  "cryptAndMarkParameters\022\031\n\021start_block_in"
  "dex\030\001 \001(\003\022\027\n\017end_block_index\030\002 \001(\003\022\013\n\003iv"
  "k\030\005 \001(\014\022\n\n\002ak\030\003 \001(\014\022\n\n\002nk\030\004 \001(\014\"W\n\024OvkDe"
  "cryptParameters\022\031\n\021start_block_index\030\001 \001"
  "(\003\022\027\n\017end_block_index\030\002 \001(\003\022\013\n\003ovk\030\003 \001(\014"
  "\"\203\001\n\014DecryptNotes\022.\n\007noteTxs\030\001 \003(\0132\035.pro"
  "tocol.DecryptNotes.NoteTx\032C\n\006NoteTx\022\034\n\004n"
  "ote\030\001 \001(\0132\016.protocol.Note\022\014\n\004txid\030\002 \001(\014\022"
  "\r\n\005index\030\003 \001(\005\"\241\001\n\022DecryptNotesMarked\0224\n"
  "\007noteTxs\030\001 \003(\0132#.protocol.DecryptNotesMa"
  "rked.NoteTx\032U\n\006NoteTx\022\034\n\004note\030\001 \001(\0132\016.pr"
  "otocol.Note\022\014\n\004txid\030\002 \001(\014\022\r\n\005index\030\003 \001(\005"
  "\022\020\n\010is_spend\030\004 \001(\010\"I\n\004Note\022\r\n\005value\030\001 \001("
  "\003\022\027\n\017payment_address\030\002 \001(\t\022\013\n\003rcm\030\003 \001(\014\022"
  "\014\n\004memo\030\004 \001(\014\"{\n\tSpendNote\022\034\n\004note\030\003 \001(\013"
  "2\016.protocol.Note\022\r\n\005alpha\030\004 \001(\014\0223\n\007vouch"
  "er\030\005 \001(\0132\".protocol.IncrementalMerkleVou"
  "cher\022\014\n\004path\030\006 \001(\014\"+\n\013ReceiveNote\022\034\n\004not"
  "e\030\001 \001(\0132\016.protocol.Note\"\225\002\n\021PrivateParam"
  "eters\022 \n\030transparent_from_address\030\001 \001(\014\022"
  "\013\n\003ask\030\002 \001(\014\022\013\n\003nsk\030\003 \001(\014\022\013\n\003ovk\030\004 \001(\014\022\023"
  "\n\013from_amount\030\005 \001(\003\022,\n\017shielded_spends\030\006"
  " \003(\0132\023.protocol.SpendNote\0220\n\021shielded_re"
  "ceives\030\007 \003(\0132\025.protocol.ReceiveNote\022\036\n\026t"
  "ransparent_to_address\030\010 \001(\014\022\021\n\tto_amount"
  "\030\t \001(\003\022\017\n\007timeout\030\n \001(\003\"\236\002\n\033PrivateParam"
  "etersWithoutAsk\022 \n\030transparent_from_addr"
  "ess\030\001 \001(\014\022\n\n\002ak\030\002 \001(\014\022\013\n\003nsk\030\003 \001(\014\022\013\n\003ov"
  "k\030\004 \001(\014\022\023\n\013from_amount\030\005 \001(\003\022,\n\017shielded"
  "_spends\030\006 \003(\0132\023.protocol.SpendNote\0220\n\021sh"
  "ielded_receives\030\007 \003(\0132\025.protocol.Receive"
  "Note\022\036\n\026transparent_to_address\030\010 \001(\014\022\021\n\t"
  "to_amount\030\t \001(\003\022\017\n\007timeout\030\n \001(\003\"E\n\026Spen"
  "dAuthSigParameters\022\013\n\003ask\030\001 \001(\014\022\017\n\007tx_ha"
  "sh\030\002 \001(\014\022\r\n\005alpha\030\003 \001(\014\"y\n\014NfParameters\022"
  "\034\n\004note\030\001 \001(\0132\016.protocol.Note\0223\n\007voucher"
  "\030\002 \001(\0132\".protocol.IncrementalMerkleVouch"
  "er\022\n\n\002ak\030\003 \001(\014\022\n\n\002nk\030\004 \001(\014\"C\n\032ExpandedSp"
  "endingKeyMessage\022\013\n\003ask\030\001 \001(\014\022\013\n\003nsk\030\002 \001"
  "(\014\022\013\n\003ovk\030\003 \001(\014\"+\n\021ViewingKeyMessage\022\n\n\002"
  "ak\030\001 \001(\014\022\n\n\002nk\030\002 \001(\014\"(\n\031IncomingViewingK"
  "eyMessage\022\013\n\003ivk\030\001 \001(\014\"\037\n\022DiversifierMes"
  "sage\022\t\n\001d\030\001 \001(\014\"\201\001\n$IncomingViewingKeyDi"
  "versifierMessage\0220\n\003ivk\030\001 \001(\0132#.protocol"
  ".IncomingViewingKeyMessage\022\'\n\001d\030\002 \001(\0132\034."
  "protocol.DiversifierMessage\"f\n\025PaymentAd"
  "dressMessage\022\'\n\001d\030\001 \001(\0132\034.protocol.Diver"
  "sifierMessage\022\013\n\003pkD\030\002 \001(\014\022\027\n\017payment_ad"
  "dress\030\003 \001(\t\"\236\001\n\023ShieldedAddressInfo\022\n\n\002s"
  "k\030\001 \001(\014\022\013\n\003ask\030\002 \001(\014\022\013\n\003nsk\030\003 \001(\014\022\013\n\003ovk"
  "\030\004 \001(\014\022\n\n\002ak\030\005 \001(\014\022\n\n\002nk\030\006 \001(\014\022\013\n\003ivk\030\007 "
  "\001(\014\022\t\n\001d\030\010 \001(\014\022\013\n\003pkD\030\t \001(\014\022\027\n\017payment_a"
  "ddress\030\n \001(\t\"c\n\016NoteParameters\022\n\n\002ak\030\001 \001"
  "(\014\022\n\n\002nk\030\002 \001(\014\022\034\n\004note\030\003 \001(\0132\016.protocol."
  "Note\022\014\n\004txid\030\004 \001(\014\022\r\n\005index\030\005 \001(\005\".\n\013Spe"
  "ndResult\022\016\n\006result\030\001 \001(\010\022\017\n\007message\030\002 \001("
  "\t\"I\n\023TransactionInfoList\0222\n\017transactionI"
  "nfo\030\001 \003(\0132\031.protocol.TransactionInfo\"f\n\016"
  "SpendNoteTRC20\022\034\n\004note\030\001 \001(\0132\016.protocol."
  "Note\022\r\n\005alpha\030\002 \001(\014\022\014\n\004root\030\003 \001(\014\022\014\n\004pat"
  "h\030\004 \001(\014\022\013\n\003pos\030\005 \001(\003\"\235\002\n\036PrivateShielded"
  "TRC20Parameters\022\013\n\003ask\030\001 \001(\014\022\013\n\003nsk\030\002 \001("
  "\014\022\013\n\003ovk\030\003 \001(\014\022\023\n\013from_amount\030\004 \001(\t\0221\n\017s"
  "hielded_spends\030\005 \003(\0132\030.protocol.SpendNot"
  "eTRC20\0220\n\021shielded_receives\030\006 \003(\0132\025.prot"
  "ocol.ReceiveNote\022\036\n\026transparent_to_addre"
  "ss\030\007 \001(\014\022\021\n\tto_amount\030\010 \001(\t\022\'\n\037shielded_"
  "TRC20_contract_address\030\t \001(\014\"\246\002\n(Private"
  "ShieldedTRC20ParametersWithoutAsk\022\n\n\002ak\030"
  "\001 \001(\014\022\013\n\003nsk\030\002 \001(\014\022\013\n\003ovk\030\003 \001(\014\022\023\n\013from_"
  "amount\030\004 \001(\t\0221\n\017shielded_spends\030\005 \003(\0132\030."
  "protocol.SpendNoteTRC20\0220\n\021shielded_rece"
  "ives\030\006 \003(\0132\025.protocol.ReceiveNote\022\036\n\026tra"
  "nsparent_to_address\030\007 \001(\014\022\021\n\tto_amount\030\010"
  " \001(\t\022\'\n\037shielded_TRC20_contract_address\030"
  "\t \001(\014\"\364\001\n\027ShieldedTRC20Parameters\0225\n\021spe"
  "nd_description\030\001 \003(\0132\032.protocol.SpendDes"
  "cription\0229\n\023receive_description\030\002 \003(\0132\034."
  "protocol.ReceiveDescription\022\031\n\021binding_s"
  "ignature\030\003 \001(\014\022\024\n\014message_hash\030\004 \001(\014\022\036\n\026"
  "trigger_contract_input\030\005 \001(\t\022\026\n\016paramete"
  "r_type\030\006 \001(\t\"\255\001\n\031IvkDecryptTRC20Paramete"
  "rs\022\031\n\021start_block_index\030\001 \001(\003\022\027\n\017end_blo"
  "ck_index\030\002 \001(\003\022\'\n\037shielded_TRC20_contrac"
  "t_address\030\003 \001(\014\022\013\n\003ivk\030\004 \001(\014\022\n\n\002ak\030\005 \001(\014"
  "\022\n\n\002nk\030\006 \001(\014\022\016\n\006events\030\007 \003(\t\"\225\001\n\031OvkDecr"
  "yptTRC20Parameters\022\031\n\021start_block_index\030"
  "\001 \001(\003\022\027\n\017end_block_index\030\002 \001(\003\022\013\n\003ovk\030\003 "
  "\001(\014\022\'\n\037shielded_TRC20_contract_address\030\004"
  " \001(\014\022\016\n\006events\030\005 \003(\t\"\345\001\n\021DecryptNotesTRC"
  "20\0223\n\007noteTxs\030\001 \003(\0132\".protocol.DecryptNo"
  "tesTRC20.NoteTx\032\232\001\n\006NoteTx\022\034\n\004note\030\001 \001(\013"
  "2\016.protocol.Note\022\020\n\010position\030\002 \001(\003\022\020\n\010is"
  "_spent\030\003 \001(\010\022\014\n\004txid\030\004 \001(\014\022\r\n\005index\030\005 \001("
  "\005\022\021\n\tto_amount\030\006 \001(\t\022\036\n\026transparent_to_a"
  "ddress\030\007 \001(\014\"\204\001\n\021NfTRC20Parameters\022\034\n\004no"
  "te\030\001 \001(\0132\016.protocol.Note\022\n\n\002ak\030\002 \001(\014\022\n\n\002"
  "nk\030\003 \001(\014\022\020\n\010position\030\004 \001(\003\022\'\n\037shielded_T"
  "RC20_contract_address\030\005 \001(\014\"#\n\017Nullifier"
  "Result\022\020\n\010is_spent\030\001 \001(\010\"\331\001\n&ShieldedTRC"
  "20TriggerContractParameters\022D\n\031shielded_"
  "TRC20_Parameters\030\001 \001(\0132!.protocol.Shield"
  "edTRC20Parameters\0229\n\031spend_authority_sig"
  "nature\030\002 \003(\0132\026.protocol.BytesMessage\022\016\n\006"
  "amount\030\003 \001(\t\022\036\n\026transparent_to_address\030\004"
  " \001(\0142\310m\n\006Wallet\022g\n\nGetAccount\022\021.protocol"
  ".Account\032\021.protocol.Account\"3\202\323\344\223\002-\"\022/wa"
  "llet/getaccount:\001*Z\024\022\022/wallet/getaccount"
  "\022s\n\016GetAccountById\022\021.protocol.Account\032\021."
  "protocol.Account\";\202\323\344\223\0025\"\026/wallet/getacc"
  "ountbyid:\001*Z\030\022\026/wallet/getaccountbyid\022\231\001"
  "\n\021GetAccountBalance\022\037.protocol.AccountBa"
  "lanceRequest\032 .protocol.AccountBalanceRe"
  "sponse\"A\202\323\344\223\002;\"\031/wallet/getaccountbalanc"
  "e:\001*Z\033\022\031/wallet/getaccountbalance\022\251\001\n\024Ge"
  "tBlockBalanceTrace\022+.protocol.BlockBalan"
  "ceTrace.BlockIdentifier\032\033.protocol.Block"
  "BalanceTrace\"G\202\323\344\223\002A\"\034/wallet/getblockba"
  "lancetrace:\001*Z\036\022\034/wallet/getblockbalance"
  "trace\022\211\001\n\021CreateTransaction\022\032.protocol.T"
  "ransferContract\032\025.protocol.Transaction\"A"
  "\202\323\344\223\002;\"\031/wallet/createtransaction:\001*Z\033\022\031"
  "/wallet/createtransaction\022R\n\022CreateTrans"
  "action2\022\032.protocol.TransferContract\032\036.pr"
  "otocol.TransactionExtention\"\000\022\210\001\n\024Broadc"
  "astTransaction\022\025.protocol.Transaction\032\020."
  "protocol.Return\"G\202\323\344\223\002A\"\034/wallet/broadca"
  "sttransaction:\001*Z\036\022\034/wallet/broadcasttra"
  "nsaction\022\202\001\n\rUpdateAccount\022\037.protocol.Ac"
  "countUpdateContract\032\025.protocol.Transacti"
  "on\"9\202\323\344\223\0023\"\025/wallet/updateaccount:\001*Z\027\022\025"
  "/wallet/updateaccount\022~\n\014SetAccountId\022\036."
  "protocol.SetAccountIdContract\032\025.protocol"
  ".Transaction\"7\202\323\344\223\0021\"\024/wallet/setaccount"
  "id:\001*Z\026\022\024/wallet/setaccountid\022S\n\016UpdateA"
  "ccount2\022\037.protocol.AccountUpdateContract"
  "\032\036.protocol.TransactionExtention\"\000\022\217\001\n\022V"
  "oteWitnessAccount\022\035.protocol.VoteWitness"
  "Contract\032\025.protocol.Transaction\"C\202\323\344\223\002=\""
  "\032/wallet/votewitnessaccount:\001*Z\034\022\032/walle"
  "t/votewitnessaccount\022R\n\rUpdateSetting\022\037."
  "protocol.UpdateSettingContract\032\036.protoco"
  "l.TransactionExtention\"\000\022Z\n\021UpdateEnergy"
  "Limit\022#.protocol.UpdateEnergyLimitContra"
  "ct\032\036.protocol.TransactionExtention\"\000\022V\n\023"
  "VoteWitnessAccount2\022\035.protocol.VoteWitne"
  "ssContract\032\036.protocol.TransactionExtenti"
  "on\"\000\022\210\001\n\020CreateAssetIssue\022\034.protocol.Ass"
  "etIssueContract\032\025.protocol.Transaction\"\?"
  "\202\323\344\223\0029\"\030/wallet/createassetissue:\001*Z\032\022\030/"
  "wallet/createassetissue\022S\n\021CreateAssetIs"
  "sue2\022\034.protocol.AssetIssueContract\032\036.pro"
  "tocol.TransactionExtention\"\000\022\202\001\n\rUpdateW"
  "itness\022\037.protocol.WitnessUpdateContract\032"
  "\025.protocol.Transaction\"9\202\323\344\223\0023\"\025/wallet/"
  "updatewitness:\001*Z\027\022\025/wallet/updatewitnes"
  "s\022S\n\016UpdateWitness2\022\037.protocol.WitnessUp"
  "dateContract\032\036.protocol.TransactionExten"
  "tion\"\000\022\202\001\n\rCreateAccount\022\037.protocol.Acco"
  "untCreateContract\032\025.protocol.Transaction"
  "\"9\202\323\344\223\0023\"\025/wallet/createaccount:\001*Z\027\022\025/w"
  "allet/createaccount\022S\n\016CreateAccount2\022\037."
  "protocol.AccountCreateContract\032\036.protoco"
  "l.TransactionExtention\"\000\022\202\001\n\rCreateWitne"
  "ss\022\037.protocol.WitnessCreateContract\032\025.pr"
  "otocol.Transaction\"9\202\323\344\223\0023\"\025/wallet/crea"
  "tewitness:\001*Z\027\022\025/wallet/createwitness\022S\n"
  "\016CreateWitness2\022\037.protocol.WitnessCreate"
  "Contract\032\036.protocol.TransactionExtention"
  "\"\000\022\202\001\n\rTransferAsset\022\037.protocol.Transfer"
  "AssetContract\032\025.protocol.Transaction\"9\202\323"
  "\344\223\0023\"\025/wallet/transferasset:\001*Z\027\022\025/walle"
  "t/transferasset\022S\n\016TransferAsset2\022\037.prot"
  "ocol.TransferAssetContract\032\036.protocol.Tr"
  "ansactionExtention\"\000\022\242\001\n\025ParticipateAsse"
  "tIssue\022\'.protocol.ParticipateAssetIssueC"
  "ontract\032\025.protocol.Transaction\"I\202\323\344\223\002C\"\035"
  "/wallet/participateassetissue:\001*Z\037\022\035/wal"
  "let/participateassetissue\022c\n\026Participate"
  "AssetIssue2\022\'.protocol.ParticipateAssetI"
  "ssueContract\032\036.protocol.TransactionExten"
  "tion\"\000\022\202\001\n\rFreezeBalance\022\037.protocol.Free"
  "zeBalanceContract\032\025.protocol.Transaction"
  "\"9\202\323\344\223\0023\"\025/wallet/freezebalance:\001*Z\027\022\025/w"
  "allet/freezebalance\022S\n\016FreezeBalance2\022\037."
  "protocol.FreezeBalanceContract\032\036.protoco"
  "l.TransactionExtention\"\000\022\212\001\n\017UnfreezeBal"
  "ance\022!.protocol.UnfreezeBalanceContract\032"
  "\025.protocol.Transaction\"=\202\323\344\223\0027\"\027/wallet/"
  "unfreezebalance:\001*Z\031\022\027/wallet/unfreezeba"
  "lance\022W\n\020UnfreezeBalance2\022!.protocol.Unf"
  "reezeBalanceContract\032\036.protocol.Transact"
  "ionExtention\"\000\022\202\001\n\rUnfreezeAsset\022\037.proto"
  "col.UnfreezeAssetContract\032\025.protocol.Tra"
  "nsaction\"9\202\323\344\223\0023\"\025/wallet/unfreezeasset:"
  "\001*Z\027\022\025/wallet/unfreezeasset\022S\n\016UnfreezeA"
  "sset2\022\037.protocol.UnfreezeAssetContract\032\036"
  ".protocol.TransactionExtention\"\000\022\212\001\n\017Wit"
  "hdrawBalance\022!.protocol.WithdrawBalanceC"
  "ontract\032\025.protocol.Transaction\"=\202\323\344\223\0027\"\027"
  "/wallet/withdrawbalance:\001*Z\031\022\027/wallet/wi"
  "thdrawbalance\022W\n\020WithdrawBalance2\022!.prot"
  "ocol.WithdrawBalanceContract\032\036.protocol."
  "TransactionExtention\"\000\022z\n\013UpdateAsset\022\035."
  "protocol.UpdateAssetContract\032\025.protocol."
  "Transaction\"5\202\323\344\223\002/\"\023/wallet/updateasset"
  ":\001*Z\025\022\023/wallet/updateasset\022O\n\014UpdateAsse"
  "t2\022\035.protocol.UpdateAssetContract\032\036.prot"
  "ocol.TransactionExtention\"\000\022T\n\016ProposalC"
  "reate\022 .protocol.ProposalCreateContract\032"
  "\036.protocol.TransactionExtention\"\000\022V\n\017Pro"
  "posalApprove\022!.protocol.ProposalApproveC"
  "ontract\032\036.protocol.TransactionExtention\""
  "\000\022T\n\016ProposalDelete\022 .protocol.ProposalD"
  "eleteContract\032\036.protocol.TransactionExte"
  "ntion\"\000\022L\n\nBuyStorage\022\034.protocol.BuyStor"
  "ageContract\032\036.protocol.TransactionExtent"
  "ion\"\000\022V\n\017BuyStorageBytes\022!.protocol.BuyS"
  "torageBytesContract\032\036.protocol.Transacti"
  "onExtention\"\000\022N\n\013SellStorage\022\035.protocol."
  "SellStorageContract\032\036.protocol.Transacti"
  "onExtention\"\000\022T\n\016ExchangeCreate\022 .protoc"
  "ol.ExchangeCreateContract\032\036.protocol.Tra"
  "nsactionExtention\"\000\022T\n\016ExchangeInject\022 ."
  "protocol.ExchangeInjectContract\032\036.protoc"
  "ol.TransactionExtention\"\000\022X\n\020ExchangeWit"
  "hdraw\022\".protocol.ExchangeWithdrawContrac"
  "t\032\036.protocol.TransactionExtention\"\000\022^\n\023E"
  "xchangeTransaction\022%.protocol.ExchangeTr"
  "ansactionContract\032\036.protocol.Transaction"
  "Extention\"\000\022j\n\tListNodes\022\026.protocol.Empt"
  "yMessage\032\022.protocol.NodeList\"1\202\323\344\223\002+\"\021/w"
  "allet/listnodes:\001*Z\023\022\021/wallet/listnodes\022"
  "\222\001\n\026GetAssetIssueByAccount\022\021.protocol.Ac"
  "count\032\030.protocol.AssetIssueList\"K\202\323\344\223\002E\""
  "\036/wallet/getassetissuebyaccount:\001*Z \022\036/w"
  "allet/getassetissuebyaccount\022z\n\rGetAccou"
  "ntNet\022\021.protocol.Account\032\033.protocol.Acco"
  "untNetMessage\"9\202\323\344\223\0023\"\025/wallet/getaccoun"
  "tnet:\001*Z\027\022\025/wallet/getaccountnet\022K\n\022GetA"
  "ccountResource\022\021.protocol.Account\032 .prot"
  "ocol.AccountResourceMessage\"\000\022\222\001\n\023GetAss"
  "etIssueByName\022\026.protocol.BytesMessage\032\034."
  "protocol.AssetIssueContract\"E\202\323\344\223\002\?\"\033/wa"
  "llet/getassetissuebyname:\001*Z\035\022\033/wallet/g"
  "etassetissuebyname\022M\n\027GetAssetIssueListB"
  "yName\022\026.protocol.BytesMessage\032\030.protocol"
  ".AssetIssueList\"\000\022K\n\021GetAssetIssueById\022\026"
  ".protocol.BytesMessage\032\034.protocol.AssetI"
  "ssueContract\"\000\022m\n\013GetNowBlock\022\026.protocol"
  ".EmptyMessage\032\017.protocol.Block\"5\202\323\344\223\002/\"\023"
  "/wallet/getnowblock:\001*Z\025\022\023/wallet/getnow"
  "block\022B\n\014GetNowBlock2\022\026.protocol.EmptyMe"
  "ssage\032\030.protocol.BlockExtention\"\000\022t\n\rGet"
  "BlockByNum\022\027.protocol.NumberMessage\032\017.pr"
  "otocol.Block\"9\202\323\344\223\0023\"\025/wallet/getblockby"
  "num:\001*Z\027\022\025/wallet/getblockbynum\022E\n\016GetBl"
  "ockByNum2\022\027.protocol.NumberMessage\032\030.pro"
  "tocol.BlockExtention\"\000\022S\n\035GetTransaction"
  "CountByBlockNum\022\027.protocol.NumberMessage"
  "\032\027.protocol.NumberMessage\"\000\022p\n\014GetBlockB"
  "yId\022\026.protocol.BytesMessage\032\017.protocol.B"
  "lock\"7\202\323\344\223\0021\"\024/wallet/getblockbyid:\001*Z\026\022"
  "\024/wallet/getblockbyid\022\207\001\n\023GetBlockByLimi"
  "tNext\022\024.protocol.BlockLimit\032\023.protocol.B"
  "lockList\"E\202\323\344\223\002\?\"\033/wallet/getblockbylimi"
  "tnext:\001*Z\035\022\033/wallet/getblockbylimitnext\022"
  "L\n\024GetBlockByLimitNext2\022\024.protocol.Block"
  "Limit\032\034.protocol.BlockListExtention\"\000\022\212\001"
  "\n\023GetBlockByLatestNum\022\027.protocol.NumberM"
  "essage\032\023.protocol.BlockList\"E\202\323\344\223\002\?\"\033/wa"
  "llet/getblockbylatestnum:\001*Z\035\022\033/wallet/g"
  "etblockbylatestnum\022O\n\024GetBlockByLatestNu"
  "m2\022\027.protocol.NumberMessage\032\034.protocol.B"
  "lockListExtention\"\000\022\210\001\n\022GetTransactionBy"
  "Id\022\026.protocol.BytesMessage\032\025.protocol.Tr"
  "ansaction\"C\202\323\344\223\002=\"\032/wallet/gettransactio"
  "nbyid:\001*Z\034\022\032/wallet/gettransactionbyid\022Q"
  "\n\016DeployContract\022\035.protocol.CreateSmartC"
  "ontract\032\036.protocol.TransactionExtention\""
  "\000\022@\n\013GetContract\022\026.protocol.BytesMessage"
  "\032\027.protocol.SmartContract\"\000\022O\n\017GetContra"
  "ctInfo\022\026.protocol.BytesMessage\032\".protoco"
  "l.SmartContractDataWrapper\"\000\022S\n\017TriggerC"
  "ontract\022\036.protocol.TriggerSmartContract\032"
  "\036.protocol.TransactionExtention\"\000\022[\n\027Tri"
  "ggerConstantContract\022\036.protocol.TriggerS"
  "martContract\032\036.protocol.TransactionExten"
  "tion\"\000\022P\n\020ClearContractABI\022\032.protocol.Cl"
  "earABIContract\032\036.protocol.TransactionExt"
  "ention\"\000\022y\n\rListWitnesses\022\026.protocol.Emp"
  "tyMessage\032\025.protocol.WitnessList\"9\202\323\344\223\0023"
  "\"\025/wallet/listwitnesses:\001*Z\027\022\025/wallet/li"
  "stwitnesses\022]\n\024GetDelegatedResource\022\".pr"
  "otocol.DelegatedResourceMessage\032\037.protoc"
  "ol.DelegatedResourceList\"\000\022z\n\rListPropos"
  "als\022\026.protocol.EmptyMessage\032\026.protocol.P"
  "roposalList\"9\202\323\344\223\0023\"\025/wallet/listproposa"
  "ls:\001*Z\027\022\025/wallet/listproposals\022\237\001\n\030GetPa"
  "ginatedProposalList\022\032.protocol.Paginated"
  "Message\032\026.protocol.ProposalList\"O\202\323\344\223\002I\""
  " /wallet/getpaginatedproposallist:\001*Z\"\022 "
  "/wallet/getpaginatedproposallist\022|\n\017GetP"
  "roposalById\022\026.protocol.BytesMessage\032\022.pr"
  "otocol.Proposal\"=\202\323\344\223\0027\"\027/wallet/getprop"
  "osalbyid:\001*Z\031\022\027/wallet/getproposalbyid\022z"
  "\n\rListExchanges\022\026.protocol.EmptyMessage\032"
  "\026.protocol.ExchangeList\"9\202\323\344\223\0023\"\025/wallet"
  "/listexchanges:\001*Z\027\022\025/wallet/listexchang"
  "es\022\237\001\n\030GetPaginatedExchangeList\022\032.protoc"
  "ol.PaginatedMessage\032\026.protocol.ExchangeL"
  "ist\"O\202\323\344\223\002I\" /wallet/getpaginatedexchang"
  "elist:\001*Z\"\022 /wallet/getpaginatedexchange"
  "list\022|\n\017GetExchangeById\022\026.protocol.Bytes"
  "Message\032\022.protocol.Exchange\"=\202\323\344\223\0027\"\027/wa"
  "llet/getexchangebyid:\001*Z\031\022\027/wallet/getex"
  "changebyid\022\214\001\n\022GetChainParameters\022\026.prot"
  "ocol.EmptyMessage\032\031.protocol.ChainParame"
  "ters\"C\202\323\344\223\002=\"\032/wallet/getchainparameters"
  ":\001*Z\034\022\032/wallet/getchainparameters\022\210\001\n\021Ge"
  "tAssetIssueList\022\026.protocol.EmptyMessage\032"
  "\030.protocol.AssetIssueList\"A\202\323\344\223\002;\"\031/wall"
  "et/getassetissuelist:\001*Z\033\022\031/wallet/getas"
  "setissuelist\022\247\001\n\032GetPaginatedAssetIssueL"
  "ist\022\032.protocol.PaginatedMessage\032\030.protoc"
  "ol.AssetIssueList\"S\202\323\344\223\002M\"\"/wallet/getpa"
  "ginatedassetissuelist:\001*Z$\022\"/wallet/getp"
  "aginatedassetissuelist\022\204\001\n\020TotalTransact"
  "ion\022\026.protocol.EmptyMessage\032\027.protocol.N"
  "umberMessage\"\?\202\323\344\223\0029\"\030/wallet/totaltrans"
  "action:\001*Z\032\022\030/wallet/totaltransaction\022\226\001"
  "\n\026GetNextMaintenanceTime\022\026.protocol.Empt"
  "yMessage\032\027.protocol.NumberMessage\"K\202\323\344\223\002"
  "E\"\036/wallet/getnextmaintenancetime:\001*Z \022\036"
  "/wallet/getnextmaintenancetime\022\213\001\n\022GetTr"
  "ansactionSign\022\031.protocol.TransactionSign"
  "\032\025.protocol.Transaction\"C\202\323\344\223\002=\"\032/wallet"
  "/gettransactionsign:\001*Z\034\022\032/wallet/gettra"
  "nsactionsign\022R\n\023GetTransactionSign2\022\031.pr"
  "otocol.TransactionSign\032\036.protocol.Transa"
  "ctionExtention\"\000\022z\n\rCreateAddress\022\026.prot"
  "ocol.BytesMessage\032\026.protocol.BytesMessag"
  "e\"9\202\323\344\223\0023\"\025/wallet/createaddress:\001*Z\027\022\025/"
  "wallet/createaddress\022Y\n\021EasyTransferAsse"
  "t\022\".protocol.EasyTransferAssetMessage\032\036."
  "protocol.EasyTransferResponse\"\000\022k\n\032EasyT"
  "ransferAssetByPrivate\022+.protocol.EasyTra"
  "nsferAssetByPrivateMessage\032\036.protocol.Ea"
  "syTransferResponse\"\000\022\206\001\n\014EasyTransfer\022\035."
  "protocol.EasyTransferMessage\032\036.protocol."
  "EasyTransferResponse\"7\202\323\344\223\0021\"\024/wallet/ea"
  "sytransfer:\001*Z\026\022\024/wallet/easytransfer\022\252\001"
  "\n\025EasyTransferByPrivate\022&.protocol.EasyT"
  "ransferByPrivateMessage\032\036.protocol.EasyT"
  "ransferResponse\"I\202\323\344\223\002C\"\035/wallet/easytra"
  "nsferbyprivate:\001*Z\037\022\035/wallet/easytransfe"
  "rbyprivate\022\213\001\n\017GenerateAddress\022\026.protoco"
  "l.EmptyMessage\032!.protocol.AddressPrKeyPa"
  "irMessage\"=\202\323\344\223\0027\"\027/wallet/generateaddre"
  "ss:\001*Z\031\022\027/wallet/generateaddress\022\230\001\n\026Get"
  "TransactionInfoById\022\026.protocol.BytesMess"
  "age\032\031.protocol.TransactionInfo\"K\202\323\344\223\002E\"\036"
  "/wallet/gettransactioninfobyid:\001*Z \022\036/wa"
  "llet/gettransactioninfobyid\022\263\001\n\027AccountP"
  "ermissionUpdate\022).protocol.AccountPermis"
  "sionUpdateContract\032\036.protocol.Transactio"
  "nExtention\"M\202\323\344\223\002G\"\037/wallet/accountpermi"
  "ssionupdate:\001*Z!\022\037/wallet/accountpermiss"
  "ionupdate\022F\n\007AddSign\022\031.protocol.Transact"
  "ionSign\032\036.protocol.TransactionExtention\""
  "\000\022T\n\030GetTransactionSignWeight\022\025.protocol"
  ".Transaction\032\037.protocol.TransactionSignW"
  "eight\"\000\022X\n\032GetTransactionApprovedList\022\025."
  "protocol.Transaction\032!.protocol.Transact"
  "ionApprovedList\"\000\022;\n\013GetNodeInfo\022\026.proto"
  "col.EmptyMessage\032\022.protocol.NodeInfo\"\000\022B"
  "\n\rGetRewardInfo\022\026.protocol.BytesMessage\032"
  "\027.protocol.NumberMessage\"\000\022E\n\020GetBrokera"
  "geInfo\022\026.protocol.BytesMessage\032\027.protoco"
  "l.NumberMessage\"\000\022V\n\017UpdateBrokerage\022!.p"
  "rotocol.UpdateBrokerageContract\032\036.protoc"
  "ol.TransactionExtention\"\000\022Z\n\031CreateShiel"
  "dedTransaction\022\033.protocol.PrivateParamet"
  "ers\032\036.protocol.TransactionExtention\"\000\022_\n"
  "\030GetMerkleTreeVoucherInfo\022\031.protocol.Out"
  "putPointInfo\032&.protocol.IncrementalMerkl"
  "eVoucherInfo\"\000\022I\n\rScanNoteByIvk\022\036.protoc"
  "ol.IvkDecryptParameters\032\026.protocol.Decry"
  "ptNotes\"\000\022]\n\024ScanAndMarkNoteByIvk\022%.prot"
  "ocol.IvkDecryptAndMarkParameters\032\034.proto"
  "col.DecryptNotesMarked\"\000\022I\n\rScanNoteByOv"
  "k\022\036.protocol.OvkDecryptParameters\032\026.prot"
  "ocol.DecryptNotes\"\000\022B\n\016GetSpendingKey\022\026."
  "protocol.EmptyMessage\032\026.protocol.BytesMe"
  "ssage\"\000\022X\n\026GetExpandedSpendingKey\022\026.prot"
  "ocol.BytesMessage\032$.protocol.ExpandedSpe"
  "ndingKeyMessage\"\000\022@\n\014GetAkFromAsk\022\026.prot"
  "ocol.BytesMessage\032\026.protocol.BytesMessag"
  "e\"\000\022@\n\014GetNkFromNsk\022\026.protocol.BytesMess"
  "age\032\026.protocol.BytesMessage\"\000\022[\n\025GetInco"
  "mingViewingKey\022\033.protocol.ViewingKeyMess"
  "age\032#.protocol.IncomingViewingKeyMessage"
  "\"\000\022H\n\016GetDiversifier\022\026.protocol.EmptyMes"
  "sage\032\034.protocol.DiversifierMessage\"\000\022P\n\025"
  "GetNewShieldedAddress\022\026.protocol.EmptyMe"
  "ssage\032\035.protocol.ShieldedAddressInfo\"\000\022i"
  "\n\024GetZenPaymentAddress\022..protocol.Incomi"
  "ngViewingKeyDiversifierMessage\032\037.protoco"
  "l.PaymentAddressMessage\"\000\022:\n\006GetRcm\022\026.pr"
  "otocol.EmptyMessage\032\026.protocol.BytesMess"
  "age\"\000\022<\n\007IsSpend\022\030.protocol.NoteParamete"
  "rs\032\025.protocol.SpendResult\"\000\022w\n,CreateShi"
  "eldedTransactionWithoutSpendAuthSig\022%.pr"
  "otocol.PrivateParametersWithoutAsk\032\036.pro"
  "tocol.TransactionExtention\"\000\022K\n\030GetShiel"
  "dTransactionHash\022\025.protocol.Transaction\032"
  "\026.protocol.BytesMessage\"\000\022P\n\022CreateSpend"
  "AuthSig\022 .protocol.SpendAuthSigParameter"
  "s\032\026.protocol.BytesMessage\"\000\022I\n\025CreateShi"
  "eldNullifier\022\026.protocol.NfParameters\032\026.p"
  "rotocol.BytesMessage\"\000\022q\n CreateShielded"
  "ContractParameters\022(.protocol.PrivateShi"
  "eldedTRC20Parameters\032!.protocol.Shielded"
  "TRC20Parameters\"\000\022\205\001\n*CreateShieldedCont"
  "ractParametersWithoutAsk\0222.protocol.Priv"
  "ateShieldedTRC20ParametersWithoutAsk\032!.p"
  "rotocol.ShieldedTRC20Parameters\"\000\022a\n\033Sca"
  "nShieldedTRC20NotesByIvk\022#.protocol.IvkD"
  "ecryptTRC20Parameters\032\033.protocol.Decrypt"
  "NotesTRC20\"\000\022a\n\033ScanShieldedTRC20NotesBy"
  "Ovk\022#.protocol.OvkDecryptTRC20Parameters"
  "\032\033.protocol.DecryptNotesTRC20\"\000\022\\\n IsShi"
  "eldedTRC20ContractNoteSpent\022\033.protocol.N"
  "fTRC20Parameters\032\031.protocol.NullifierRes"
  "ult\"\000\022u\n\'GetTriggerInputForShieldedTRC20"
  "Contract\0220.protocol.ShieldedTRC20Trigger"
  "ContractParameters\032\026.protocol.BytesMessa"
  "ge\"\000\022R\n\027CreateCommonTransaction\022\025.protoc"
  "ol.Transaction\032\036.protocol.TransactionExt"
  "ention\"\000\022X\n\034GetTransactionInfoByBlockNum"
  "\022\027.protocol.NumberMessage\032\035.protocol.Tra"
  "nsactionInfoList\"\000\022V\n\017MarketSellAsset\022!."
  "protocol.MarketSellAssetContract\032\036.proto"
  "col.TransactionExtention\"\000\022Z\n\021MarketCanc"
  "elOrder\022#.protocol.MarketCancelOrderCont"
  "ract\032\036.protocol.TransactionExtention\"\000\022N"
  "\n\027GetMarketOrderByAccount\022\026.protocol.Byt"
  "esMessage\032\031.protocol.MarketOrderList\"\000\022E"
  "\n\022GetMarketOrderById\022\026.protocol.BytesMes"
  "sage\032\025.protocol.MarketOrder\"\000\022N\n\024GetMark"
  "etPriceByPair\022\031.protocol.MarketOrderPair"
  "\032\031.protocol.MarketPriceList\"\000\022R\n\030GetMark"
  "etOrderListByPair\022\031.protocol.MarketOrder"
  "Pair\032\031.protocol.MarketOrderList\"\000\022L\n\021Get"
  "MarketPairList\022\026.protocol.EmptyMessage\032\035"
  ".protocol.MarketOrderPairList\"\0002\362\034\n\016Wall"
  "etSolidity\022w\n\nGetAccount\022\021.protocol.Acco"
  "unt\032\021.protocol.Account\"C\202\323\344\223\002=\"\032/wallets"
  "olidity/getaccount:\001*Z\034\022\032/walletsolidity"
  "/getaccount\022\203\001\n\016GetAccountById\022\021.protoco"
  "l.Account\032\021.protocol.Account\"K\202\323\344\223\002E\"\036/w"
  "alletsolidity/getaccountbyid:\001*Z \022\036/wall"
  "etsolidity/getaccountbyid\022\211\001\n\rListWitnes"
  "ses\022\026.protocol.EmptyMessage\032\025.protocol.W"
  "itnessList\"I\202\323\344\223\002C\"\035/walletsolidity/list"
  "witnesses:\001*Z\037\022\035/walletsolidity/listwitn"
  "esses\022\230\001\n\021GetAssetIssueList\022\026.protocol.E"
  "mptyMessage\032\030.protocol.AssetIssueList\"Q\202"
  "\323\344\223\002K\"!/walletsolidity/getassetissuelist"
  ":\001*Z#\022!/walletsolidity/getassetissuelist"
  "\022\267\001\n\032GetPaginatedAssetIssueList\022\032.protoc"
  "ol.PaginatedMessage\032\030.protocol.AssetIssu"
  "eList\"c\202\323\344\223\002]\"*/walletsolidity/getpagina"
  "tedassetissuelist:\001*Z,\022*/walletsolidity/"
  "getpaginatedassetissuelist\022M\n\023GetAssetIs"
  "sueByName\022\026.protocol.BytesMessage\032\034.prot"
  "ocol.AssetIssueContract\"\000\022M\n\027GetAssetIss"
  "ueListByName\022\026.protocol.BytesMessage\032\030.p"
  "rotocol.AssetIssueList\"\000\022K\n\021GetAssetIssu"
  "eById\022\026.protocol.BytesMessage\032\034.protocol"
  ".AssetIssueContract\"\000\022}\n\013GetNowBlock\022\026.p"
  "rotocol.EmptyMessage\032\017.protocol.Block\"E\202"
  "\323\344\223\002\?\"\033/walletsolidity/getnowblock:\001*Z\035\022"
  "\033/walletsolidity/getnowblock\022B\n\014GetNowBl"
  "ock2\022\026.protocol.EmptyMessage\032\030.protocol."
  "BlockExtention\"\000\022\204\001\n\rGetBlockByNum\022\027.pro"
  "tocol.NumberMessage\032\017.protocol.Block\"I\202\323"
  "\344\223\002C\"\035/walletsolidity/getblockbynum:\001*Z\037"
  "\022\035/walletsolidity/getblockbynum\022E\n\016GetBl"
  "ockByNum2\022\027.protocol.NumberMessage\032\030.pro"
  "tocol.BlockExtention\"\000\022S\n\035GetTransaction"
  "CountByBlockNum\022\027.protocol.NumberMessage"
  "\032\027.protocol.NumberMessage\"\000\022]\n\024GetDelega"
  "tedResource\022\".protocol.DelegatedResource"
  "Message\032\037.protocol.DelegatedResourceList"
  "\"\000\022e\n GetDelegatedResourceAccountIndex\022\026"
  ".protocol.BytesMessage\032\'.protocol.Delega"
  "tedResourceAccountIndex\"\000\022\?\n\017GetExchange"
  "ById\022\026.protocol.BytesMessage\032\022.protocol."
  "Exchange\"\000\022A\n\rListExchanges\022\026.protocol.E"
  "mptyMessage\032\026.protocol.ExchangeList\"\000\022\230\001"
  "\n\022GetTransactionById\022\026.protocol.BytesMes"
  "sage\032\025.protocol.Transaction\"S\202\323\344\223\002M\"\"/wa"
  "lletsolidity/gettransactionbyid:\001*Z$\022\"/w"
  "alletsolidity/gettransactionbyid\022\250\001\n\026Get"
  "TransactionInfoById\022\026.protocol.BytesMess"
  "age\032\031.protocol.TransactionInfo\"[\202\323\344\223\002U\"&"
  "/walletsolidity/gettransactioninfobyid:\001"
  "*Z(\022&/walletsolidity/gettransactioninfob"
  "yid\022\233\001\n\017GenerateAddress\022\026.protocol.Empty"
  "Message\032!.protocol.AddressPrKeyPairMessa"
  "ge\"M\202\323\344\223\002G\"\037/walletsolidity/generateaddr"
  "ess:\001*Z!\022\037/walletsolidity/generateaddres"
  "s\022_\n\030GetMerkleTreeVoucherInfo\022\031.protocol"
  ".OutputPointInfo\032&.protocol.IncrementalM"
  "erkleVoucherInfo\"\000\022I\n\rScanNoteByIvk\022\036.pr"
  "otocol.IvkDecryptParameters\032\026.protocol.D"
  "ecryptNotes\"\000\022]\n\024ScanAndMarkNoteByIvk\022%."
  "protocol.IvkDecryptAndMarkParameters\032\034.p"
  "rotocol.DecryptNotesMarked\"\000\022I\n\rScanNote"
  "ByOvk\022\036.protocol.OvkDecryptParameters\032\026."
  "protocol.DecryptNotes\"\000\022<\n\007IsSpend\022\030.pro"
  "tocol.NoteParameters\032\025.protocol.SpendRes"
  "ult\"\000\022a\n\033ScanShieldedTRC20NotesByIvk\022#.p"
  "rotocol.IvkDecryptTRC20Parameters\032\033.prot"
  "ocol.DecryptNotesTRC20\"\000\022a\n\033ScanShielded"
  "TRC20NotesByOvk\022#.protocol.OvkDecryptTRC"
  "20Parameters\032\033.protocol.DecryptNotesTRC2"
  "0\"\000\022\\\n IsShieldedTRC20ContractNoteSpent\022"
  "\033.protocol.NfTRC20Parameters\032\031.protocol."
  "NullifierResult\"\000\022B\n\rGetRewardInfo\022\026.pro"
  "tocol.BytesMessage\032\027.protocol.NumberMess"
  "age\"\000\022E\n\020GetBrokerageInfo\022\026.protocol.Byt"
  "esMessage\032\027.protocol.NumberMessage\"\000\022[\n\027"
  "TriggerConstantContract\022\036.protocol.Trigg"
  "erSmartContract\032\036.protocol.TransactionEx"
  "tention\"\000\022X\n\034GetTransactionInfoByBlockNu"
  "m\022\027.protocol.NumberMessage\032\035.protocol.Tr"
  "ansactionInfoList\"\000\022N\n\027GetMarketOrderByA"
  "ccount\022\026.protocol.BytesMessage\032\031.protoco"
  "l.MarketOrderList\"\000\022E\n\022GetMarketOrderByI"
  "d\022\026.protocol.BytesMessage\032\025.protocol.Mar"
  "ketOrder\"\000\022N\n\024GetMarketPriceByPair\022\031.pro"
  "tocol.MarketOrderPair\032\031.protocol.MarketP"
  "riceList\"\000\022R\n\030GetMarketOrderListByPair\022\031"
  ".protocol.MarketOrderPair\032\031.protocol.Mar"
  "ketOrderList\"\000\022L\n\021GetMarketPairList\022\026.pr"
  "otocol.EmptyMessage\032\035.protocol.MarketOrd"
  "erPairList\"\0002\255\004\n\017WalletExtension\022\261\001\n\027Get"
  "TransactionsFromThis\022\032.protocol.AccountP"
  "aginated\032\031.protocol.TransactionList\"_\202\323\344"
  "\223\002Y\"(/walletextension/gettransactionsfro"
  "mthis:\001*Z*\022(/walletextension/gettransact"
  "ionsfromthis\022\\\n\030GetTransactionsFromThis2"
  "\022\032.protocol.AccountPaginated\032\".protocol."
  "TransactionListExtention\"\000\022\253\001\n\025GetTransa"
  "ctionsToThis\022\032.protocol.AccountPaginated"
  "\032\031.protocol.TransactionList\"[\202\323\344\223\002U\"&/wa"
  "lletextension/gettransactionstothis:\001*Z("
  "\022&/walletextension/gettransactionstothis"
  "\022Z\n\026GetTransactionsToThis2\022\032.protocol.Ac"
  "countPaginated\032\".protocol.TransactionLis"
  "tExtention\"\0002\231\002\n\010Database\022G\n\021getBlockRef"
  "erence\022\026.protocol.EmptyMessage\032\030.protoco"
  "l.BlockReference\"\000\022M\n\024GetDynamicProperti"
  "es\022\026.protocol.EmptyMessage\032\033.protocol.Dy"
  "namicProperties\"\000\0228\n\013GetNowBlock\022\026.proto"
  "col.EmptyMessage\032\017.protocol.Block\"\000\022;\n\rG"
  "etBlockByNum\022\027.protocol.NumberMessage\032\017."
  "protocol.Block\"\0002\t\n\007NetworkBA\n\014org.tron."
  "apiB\007GrpcAPIZ(github.com/tronprotocol/gr"
  "pc-gateway/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2fapi_2eproto_deps[12] = {
  &::descriptor_table_core_2fTron_2eproto,
  &::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fasset_5fissue_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fproposal_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto,
  &::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2fapi_2eproto = {
  false, false, 27942, descriptor_table_protodef_api_2fapi_2eproto, "api/api.proto", 
  &descriptor_table_api_2fapi_2eproto_once, descriptor_table_api_2fapi_2eproto_deps, 12, 78,
  schemas, file_default_instances, TableStruct_api_2fapi_2eproto::offsets,
  file_level_metadata_api_2fapi_2eproto, file_level_enum_descriptors_api_2fapi_2eproto, file_level_service_descriptors_api_2fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_api_2fapi_2eproto_getter() {
  return &descriptor_table_api_2fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_api_2fapi_2eproto(&descriptor_table_api_2fapi_2eproto);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Return_response_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fapi_2eproto);
  return file_level_enum_descriptors_api_2fapi_2eproto[0];
}
bool Return_response_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Return_response_code Return::SUCCESS;
constexpr Return_response_code Return::SIGERROR;
constexpr Return_response_code Return::CONTRACT_VALIDATE_ERROR;
constexpr Return_response_code Return::CONTRACT_EXE_ERROR;
constexpr Return_response_code Return::BANDWITH_ERROR;
constexpr Return_response_code Return::DUP_TRANSACTION_ERROR;
constexpr Return_response_code Return::TAPOS_ERROR;
constexpr Return_response_code Return::TOO_BIG_TRANSACTION_ERROR;
constexpr Return_response_code Return::TRANSACTION_EXPIRATION_ERROR;
constexpr Return_response_code Return::SERVER_BUSY;
constexpr Return_response_code Return::NO_CONNECTION;
constexpr Return_response_code Return::NOT_ENOUGH_EFFECTIVE_CONNECTION;
constexpr Return_response_code Return::OTHER_ERROR;
constexpr Return_response_code Return::response_code_MIN;
constexpr Return_response_code Return::response_code_MAX;
constexpr int Return::response_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionSignWeight_Result_response_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fapi_2eproto);
  return file_level_enum_descriptors_api_2fapi_2eproto[1];
}
bool TransactionSignWeight_Result_response_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::ENOUGH_PERMISSION;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::NOT_ENOUGH_PERMISSION;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::SIGNATURE_FORMAT_ERROR;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::COMPUTE_ADDRESS_ERROR;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::PERMISSION_ERROR;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::OTHER_ERROR;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::response_code_MIN;
constexpr TransactionSignWeight_Result_response_code TransactionSignWeight_Result::response_code_MAX;
constexpr int TransactionSignWeight_Result::response_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionApprovedList_Result_response_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2fapi_2eproto);
  return file_level_enum_descriptors_api_2fapi_2eproto[2];
}
bool TransactionApprovedList_Result_response_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::SUCCESS;
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::SIGNATURE_FORMAT_ERROR;
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::COMPUTE_ADDRESS_ERROR;
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::OTHER_ERROR;
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::response_code_MIN;
constexpr TransactionApprovedList_Result_response_code TransactionApprovedList_Result::response_code_MAX;
constexpr int TransactionApprovedList_Result::response_code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Return::_Internal {
 public:
};

Return::Return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Return)
}
Return::Return(const Return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&result_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:protocol.Return)
}

inline void Return::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&result_)) + sizeof(code_));
}

Return::~Return() {
  // @@protoc_insertion_point(destructor:protocol.Return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Return::ArenaDtor(void* object) {
  Return* _this = reinterpret_cast< Return* >(object);
  (void)_this;
}
void Return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Return::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&result_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Return.response_code code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::protocol::Return_response_code>(val));
        } else goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // .protocol.Return.response_code code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Return)
  return target;
}

size_t Return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // .protocol.Return.response_code code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Return::GetClassData() const { return &_class_data_; }

void Return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Return *>(to)->MergeFrom(
      static_cast<const Return &>(from));
}


void Return::MergeFrom(const Return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Return::CopyFrom(const Return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Return::IsInitialized() const {
  return true;
}

void Return::InternalSwap(Return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Return, code_)
      + sizeof(Return::code_)
      - PROTOBUF_FIELD_OFFSET(Return, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[0]);
}

// ===================================================================

class BlockReference::_Internal {
 public:
};

BlockReference::BlockReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockReference)
}
BlockReference::BlockReference(const BlockReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArenaForAllocation());
  }
  block_num_ = from.block_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockReference)
}

inline void BlockReference::SharedCtor() {
block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_num_ = int64_t{0};
}

BlockReference::~BlockReference() {
  // @@protoc_insertion_point(destructor:protocol.BlockReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockReference::ArenaDtor(void* object) {
  BlockReference* _this = reinterpret_cast< BlockReference* >(object);
  (void)_this;
}
void BlockReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockReference::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty();
  block_num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 block_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 block_num = 1;
  if (this->_internal_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_block_num(), target);
  }

  // bytes block_hash = 2;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockReference)
  return target;
}

size_t BlockReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 2;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // int64 block_num = 1;
  if (this->_internal_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_block_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockReference::GetClassData() const { return &_class_data_; }

void BlockReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockReference *>(to)->MergeFrom(
      static_cast<const BlockReference &>(from));
}


void BlockReference::MergeFrom(const BlockReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_hash().empty()) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from._internal_block_num() != 0) {
    _internal_set_block_num(from._internal_block_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockReference::CopyFrom(const BlockReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReference::IsInitialized() const {
  return true;
}

void BlockReference::InternalSwap(BlockReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_hash_, GetArenaForAllocation(),
      &other->block_hash_, other->GetArenaForAllocation()
  );
  swap(block_num_, other->block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[1]);
}

// ===================================================================

class WitnessList::_Internal {
 public:
};

void WitnessList::clear_witnesses() {
  witnesses_.Clear();
}
WitnessList::WitnessList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  witnesses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.WitnessList)
}
WitnessList::WitnessList(const WitnessList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witnesses_(from.witnesses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.WitnessList)
}

inline void WitnessList::SharedCtor() {
}

WitnessList::~WitnessList() {
  // @@protoc_insertion_point(destructor:protocol.WitnessList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WitnessList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WitnessList::ArenaDtor(void* object) {
  WitnessList* _this = reinterpret_cast< WitnessList* >(object);
  (void)_this;
}
void WitnessList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WitnessList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WitnessList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WitnessList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witnesses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WitnessList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Witness witnesses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_witnesses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WitnessList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WitnessList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Witness witnesses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_witnesses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_witnesses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WitnessList)
  return target;
}

size_t WitnessList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WitnessList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Witness witnesses = 1;
  total_size += 1UL * this->_internal_witnesses_size();
  for (const auto& msg : this->witnesses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WitnessList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WitnessList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WitnessList::GetClassData() const { return &_class_data_; }

void WitnessList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WitnessList *>(to)->MergeFrom(
      static_cast<const WitnessList &>(from));
}


void WitnessList::MergeFrom(const WitnessList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WitnessList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witnesses_.MergeFrom(from.witnesses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessList::CopyFrom(const WitnessList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WitnessList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessList::IsInitialized() const {
  return true;
}

void WitnessList::InternalSwap(WitnessList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witnesses_.InternalSwap(&other->witnesses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WitnessList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[2]);
}

// ===================================================================

class ProposalList::_Internal {
 public:
};

void ProposalList::clear_proposals() {
  proposals_.Clear();
}
ProposalList::ProposalList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  proposals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ProposalList)
}
ProposalList::ProposalList(const ProposalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.ProposalList)
}

inline void ProposalList::SharedCtor() {
}

ProposalList::~ProposalList() {
  // @@protoc_insertion_point(destructor:protocol.ProposalList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProposalList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProposalList::ArenaDtor(void* object) {
  ProposalList* _this = reinterpret_cast< ProposalList* >(object);
  (void)_this;
}
void ProposalList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProposalList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ProposalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Proposal proposals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ProposalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Proposal proposals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_proposals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ProposalList)
  return target;
}

size_t ProposalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ProposalList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Proposal proposals = 1;
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProposalList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalList::GetClassData() const { return &_class_data_; }

void ProposalList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProposalList *>(to)->MergeFrom(
      static_cast<const ProposalList &>(from));
}


void ProposalList::MergeFrom(const ProposalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ProposalList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalList::CopyFrom(const ProposalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ProposalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalList::IsInitialized() const {
  return true;
}

void ProposalList::InternalSwap(ProposalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  proposals_.InternalSwap(&other->proposals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[3]);
}

// ===================================================================

class ExchangeList::_Internal {
 public:
};

void ExchangeList::clear_exchanges() {
  exchanges_.Clear();
}
ExchangeList::ExchangeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exchanges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExchangeList)
}
ExchangeList::ExchangeList(const ExchangeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exchanges_(from.exchanges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.ExchangeList)
}

inline void ExchangeList::SharedCtor() {
}

ExchangeList::~ExchangeList() {
  // @@protoc_insertion_point(destructor:protocol.ExchangeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExchangeList::ArenaDtor(void* object) {
  ExchangeList* _this = reinterpret_cast< ExchangeList* >(object);
  (void)_this;
}
void ExchangeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExchangeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchanges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Exchange exchanges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExchangeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Exchange exchanges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exchanges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_exchanges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExchangeList)
  return target;
}

size_t ExchangeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExchangeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Exchange exchanges = 1;
  total_size += 1UL * this->_internal_exchanges_size();
  for (const auto& msg : this->exchanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeList::GetClassData() const { return &_class_data_; }

void ExchangeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExchangeList *>(to)->MergeFrom(
      static_cast<const ExchangeList &>(from));
}


void ExchangeList::MergeFrom(const ExchangeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExchangeList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exchanges_.MergeFrom(from.exchanges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeList::CopyFrom(const ExchangeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExchangeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeList::IsInitialized() const {
  return true;
}

void ExchangeList::InternalSwap(ExchangeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exchanges_.InternalSwap(&other->exchanges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[4]);
}

// ===================================================================

class AssetIssueList::_Internal {
 public:
};

void AssetIssueList::clear_assetissue() {
  assetissue_.Clear();
}
AssetIssueList::AssetIssueList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assetissue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AssetIssueList)
}
AssetIssueList::AssetIssueList(const AssetIssueList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assetissue_(from.assetissue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.AssetIssueList)
}

inline void AssetIssueList::SharedCtor() {
}

AssetIssueList::~AssetIssueList() {
  // @@protoc_insertion_point(destructor:protocol.AssetIssueList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssetIssueList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssetIssueList::ArenaDtor(void* object) {
  AssetIssueList* _this = reinterpret_cast< AssetIssueList* >(object);
  (void)_this;
}
void AssetIssueList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetIssueList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetIssueList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AssetIssueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetissue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetIssueList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.AssetIssueContract assetIssue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assetissue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetIssueList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AssetIssueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.AssetIssueContract assetIssue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assetissue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assetissue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AssetIssueList)
  return target;
}

size_t AssetIssueList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AssetIssueList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.AssetIssueContract assetIssue = 1;
  total_size += 1UL * this->_internal_assetissue_size();
  for (const auto& msg : this->assetissue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetIssueList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssetIssueList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetIssueList::GetClassData() const { return &_class_data_; }

void AssetIssueList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AssetIssueList *>(to)->MergeFrom(
      static_cast<const AssetIssueList &>(from));
}


void AssetIssueList::MergeFrom(const AssetIssueList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AssetIssueList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assetissue_.MergeFrom(from.assetissue_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetIssueList::CopyFrom(const AssetIssueList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AssetIssueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetIssueList::IsInitialized() const {
  return true;
}

void AssetIssueList::InternalSwap(AssetIssueList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assetissue_.InternalSwap(&other->assetissue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetIssueList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[5]);
}

// ===================================================================

class BlockList::_Internal {
 public:
};

void BlockList::clear_block() {
  block_.Clear();
}
BlockList::BlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockList)
}
BlockList::BlockList(const BlockList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.BlockList)
}

inline void BlockList::SharedCtor() {
}

BlockList::~BlockList() {
  // @@protoc_insertion_point(destructor:protocol.BlockList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockList::ArenaDtor(void* object) {
  BlockList* _this = reinterpret_cast< BlockList* >(object);
  (void)_this;
}
void BlockList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Block block = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_block(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockList)
  return target;
}

size_t BlockList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Block block = 1;
  total_size += 1UL * this->_internal_block_size();
  for (const auto& msg : this->block_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockList::GetClassData() const { return &_class_data_; }

void BlockList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockList *>(to)->MergeFrom(
      static_cast<const BlockList &>(from));
}


void BlockList::MergeFrom(const BlockList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockList::CopyFrom(const BlockList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockList::IsInitialized() const {
  return true;
}

void BlockList::InternalSwap(BlockList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[6]);
}

// ===================================================================

class TransactionList::_Internal {
 public:
};

void TransactionList::clear_transaction() {
  transaction_.Clear();
}
TransactionList::TransactionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionList)
}
TransactionList::TransactionList(const TransactionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_(from.transaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionList)
}

inline void TransactionList::SharedCtor() {
}

TransactionList::~TransactionList() {
  // @@protoc_insertion_point(destructor:protocol.TransactionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionList::ArenaDtor(void* object) {
  TransactionList* _this = reinterpret_cast< TransactionList* >(object);
  (void)_this;
}
void TransactionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transaction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionList)
  return target;
}

size_t TransactionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction transaction = 1;
  total_size += 1UL * this->_internal_transaction_size();
  for (const auto& msg : this->transaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionList::GetClassData() const { return &_class_data_; }

void TransactionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionList *>(to)->MergeFrom(
      static_cast<const TransactionList &>(from));
}


void TransactionList::MergeFrom(const TransactionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_.MergeFrom(from.transaction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionList::CopyFrom(const TransactionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionList::IsInitialized() const {
  return true;
}

void TransactionList::InternalSwap(TransactionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_.InternalSwap(&other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[7]);
}

// ===================================================================

class DelegatedResourceMessage::_Internal {
 public:
};

DelegatedResourceMessage::DelegatedResourceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DelegatedResourceMessage)
}
DelegatedResourceMessage::DelegatedResourceMessage(const DelegatedResourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fromaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromaddress().empty()) {
    fromaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fromaddress(), 
      GetArenaForAllocation());
  }
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResourceMessage)
}

inline void DelegatedResourceMessage::SharedCtor() {
fromaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegatedResourceMessage::~DelegatedResourceMessage() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResourceMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegatedResourceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fromaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegatedResourceMessage::ArenaDtor(void* object) {
  DelegatedResourceMessage* _this = reinterpret_cast< DelegatedResourceMessage* >(object);
  (void)_this;
}
void DelegatedResourceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedResourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegatedResourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaddress_.ClearToEmpty();
  toaddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedResourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes fromAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fromaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes toAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResourceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fromAddress = 1;
  if (!this->_internal_fromaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_fromaddress(), target);
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_toaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResourceMessage)
  return target;
}

size_t DelegatedResourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResourceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fromAddress = 1;
  if (!this->_internal_fromaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fromaddress());
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_toaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatedResourceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegatedResourceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatedResourceMessage::GetClassData() const { return &_class_data_; }

void DelegatedResourceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DelegatedResourceMessage *>(to)->MergeFrom(
      static_cast<const DelegatedResourceMessage &>(from));
}


void DelegatedResourceMessage::MergeFrom(const DelegatedResourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fromaddress().empty()) {
    _internal_set_fromaddress(from._internal_fromaddress());
  }
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatedResourceMessage::CopyFrom(const DelegatedResourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResourceMessage::IsInitialized() const {
  return true;
}

void DelegatedResourceMessage::InternalSwap(DelegatedResourceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fromaddress_, GetArenaForAllocation(),
      &other->fromaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, GetArenaForAllocation(),
      &other->toaddress_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResourceMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[8]);
}

// ===================================================================

class DelegatedResourceList::_Internal {
 public:
};

void DelegatedResourceList::clear_delegatedresource() {
  delegatedresource_.Clear();
}
DelegatedResourceList::DelegatedResourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  delegatedresource_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DelegatedResourceList)
}
DelegatedResourceList::DelegatedResourceList(const DelegatedResourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delegatedresource_(from.delegatedresource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResourceList)
}

inline void DelegatedResourceList::SharedCtor() {
}

DelegatedResourceList::~DelegatedResourceList() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResourceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegatedResourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelegatedResourceList::ArenaDtor(void* object) {
  DelegatedResourceList* _this = reinterpret_cast< DelegatedResourceList* >(object);
  (void)_this;
}
void DelegatedResourceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedResourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegatedResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegatedresource_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedResourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.DelegatedResource delegatedResource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegatedresource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.DelegatedResource delegatedResource = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegatedresource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_delegatedresource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResourceList)
  return target;
}

size_t DelegatedResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.DelegatedResource delegatedResource = 1;
  total_size += 1UL * this->_internal_delegatedresource_size();
  for (const auto& msg : this->delegatedresource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatedResourceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegatedResourceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatedResourceList::GetClassData() const { return &_class_data_; }

void DelegatedResourceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DelegatedResourceList *>(to)->MergeFrom(
      static_cast<const DelegatedResourceList &>(from));
}


void DelegatedResourceList::MergeFrom(const DelegatedResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delegatedresource_.MergeFrom(from.delegatedresource_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatedResourceList::CopyFrom(const DelegatedResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResourceList::IsInitialized() const {
  return true;
}

void DelegatedResourceList::InternalSwap(DelegatedResourceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  delegatedresource_.InternalSwap(&other->delegatedresource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResourceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[9]);
}

// ===================================================================

class NodeList::_Internal {
 public:
};

NodeList::NodeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeList)
}
NodeList::NodeList(const NodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.NodeList)
}

inline void NodeList::SharedCtor() {
}

NodeList::~NodeList() {
  // @@protoc_insertion_point(destructor:protocol.NodeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeList::ArenaDtor(void* object) {
  NodeList* _this = reinterpret_cast< NodeList* >(object);
  (void)_this;
}
void NodeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeList)
  return target;
}

size_t NodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeList::GetClassData() const { return &_class_data_; }

void NodeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeList *>(to)->MergeFrom(
      static_cast<const NodeList &>(from));
}


void NodeList::MergeFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeList::CopyFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {
  return true;
}

void NodeList::InternalSwap(NodeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[10]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::protocol::Address& address(const Node* msg);
};

const ::protocol::Address&
Node::_Internal::address(const Node* msg) {
  return *msg->address_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::protocol::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Node)
}

inline void Node::SharedCtor() {
address_ = nullptr;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:protocol.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete address_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Address address = 1;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Address address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Node)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _internal_mutable_address()->::protocol::Address::MergeFrom(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[11]);
}

// ===================================================================

class Address::_Internal {
 public:
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:protocol.Address)
}

inline void Address::SharedCtor() {
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:protocol.Address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes host = 1;
  if (!this->_internal_host().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_host(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_host());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }

void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address *>(to)->MergeFrom(
      static_cast<const Address &>(from));
}


void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Address)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, GetArenaForAllocation(),
      &other->host_, other->GetArenaForAllocation()
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[12]);
}

// ===================================================================

class EmptyMessage::_Internal {
 public:
};

EmptyMessage::EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EmptyMessage)
}
EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.EmptyMessage)
}

inline void EmptyMessage::SharedCtor() {
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:protocol.EmptyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmptyMessage::ArenaDtor(void* object) {
  EmptyMessage* _this = reinterpret_cast< EmptyMessage* >(object);
  (void)_this;
}
void EmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EmptyMessage)
  return target;
}

size_t EmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMessage::GetClassData() const { return &_class_data_; }

void EmptyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EmptyMessage *>(to)->MergeFrom(
      static_cast<const EmptyMessage &>(from));
}


void EmptyMessage::MergeFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  return true;
}

void EmptyMessage::InternalSwap(EmptyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[13]);
}

// ===================================================================

class NumberMessage::_Internal {
 public:
};

NumberMessage::NumberMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NumberMessage)
}
NumberMessage::NumberMessage(const NumberMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:protocol.NumberMessage)
}

inline void NumberMessage::SharedCtor() {
num_ = int64_t{0};
}

NumberMessage::~NumberMessage() {
  // @@protoc_insertion_point(destructor:protocol.NumberMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NumberMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NumberMessage::ArenaDtor(void* object) {
  NumberMessage* _this = reinterpret_cast< NumberMessage* >(object);
  (void)_this;
}
void NumberMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NumberMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NumberMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NumberMessage)
  return target;
}

size_t NumberMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NumberMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num = 1;
  if (this->_internal_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NumberMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberMessage::GetClassData() const { return &_class_data_; }

void NumberMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NumberMessage *>(to)->MergeFrom(
      static_cast<const NumberMessage &>(from));
}


void NumberMessage::MergeFrom(const NumberMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NumberMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberMessage::CopyFrom(const NumberMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NumberMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberMessage::IsInitialized() const {
  return true;
}

void NumberMessage::InternalSwap(NumberMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[14]);
}

// ===================================================================

class BytesMessage::_Internal {
 public:
};

BytesMessage::BytesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BytesMessage)
}
BytesMessage::BytesMessage(const BytesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.BytesMessage)
}

inline void BytesMessage::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BytesMessage::~BytesMessage() {
  // @@protoc_insertion_point(destructor:protocol.BytesMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BytesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BytesMessage::ArenaDtor(void* object) {
  BytesMessage* _this = reinterpret_cast< BytesMessage* >(object);
  (void)_this;
}
void BytesMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BytesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BytesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BytesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BytesMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BytesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BytesMessage)
  return target;
}

size_t BytesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BytesMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BytesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytesMessage::GetClassData() const { return &_class_data_; }

void BytesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BytesMessage *>(to)->MergeFrom(
      static_cast<const BytesMessage &>(from));
}


void BytesMessage::MergeFrom(const BytesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BytesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytesMessage::CopyFrom(const BytesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BytesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesMessage::IsInitialized() const {
  return true;
}

void BytesMessage::InternalSwap(BytesMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[15]);
}

// ===================================================================

class TimeMessage::_Internal {
 public:
};

TimeMessage::TimeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TimeMessage)
}
TimeMessage::TimeMessage(const TimeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begininmilliseconds_, &from.begininmilliseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&endinmilliseconds_) -
    reinterpret_cast<char*>(&begininmilliseconds_)) + sizeof(endinmilliseconds_));
  // @@protoc_insertion_point(copy_constructor:protocol.TimeMessage)
}

inline void TimeMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begininmilliseconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endinmilliseconds_) -
    reinterpret_cast<char*>(&begininmilliseconds_)) + sizeof(endinmilliseconds_));
}

TimeMessage::~TimeMessage() {
  // @@protoc_insertion_point(destructor:protocol.TimeMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeMessage::ArenaDtor(void* object) {
  TimeMessage* _this = reinterpret_cast< TimeMessage* >(object);
  (void)_this;
}
void TimeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TimeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begininmilliseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endinmilliseconds_) -
      reinterpret_cast<char*>(&begininmilliseconds_)) + sizeof(endinmilliseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 beginInMilliseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          begininmilliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endInMilliseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endinmilliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TimeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 beginInMilliseconds = 1;
  if (this->_internal_begininmilliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_begininmilliseconds(), target);
  }

  // int64 endInMilliseconds = 2;
  if (this->_internal_endinmilliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_endinmilliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TimeMessage)
  return target;
}

size_t TimeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TimeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 beginInMilliseconds = 1;
  if (this->_internal_begininmilliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_begininmilliseconds());
  }

  // int64 endInMilliseconds = 2;
  if (this->_internal_endinmilliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endinmilliseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeMessage::GetClassData() const { return &_class_data_; }

void TimeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TimeMessage *>(to)->MergeFrom(
      static_cast<const TimeMessage &>(from));
}


void TimeMessage::MergeFrom(const TimeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TimeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_begininmilliseconds() != 0) {
    _internal_set_begininmilliseconds(from._internal_begininmilliseconds());
  }
  if (from._internal_endinmilliseconds() != 0) {
    _internal_set_endinmilliseconds(from._internal_endinmilliseconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeMessage::CopyFrom(const TimeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TimeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeMessage::IsInitialized() const {
  return true;
}

void TimeMessage::InternalSwap(TimeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeMessage, endinmilliseconds_)
      + sizeof(TimeMessage::endinmilliseconds_)
      - PROTOBUF_FIELD_OFFSET(TimeMessage, begininmilliseconds_)>(
          reinterpret_cast<char*>(&begininmilliseconds_),
          reinterpret_cast<char*>(&other->begininmilliseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[16]);
}

// ===================================================================

class BlockLimit::_Internal {
 public:
};

BlockLimit::BlockLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockLimit)
}
BlockLimit::BlockLimit(const BlockLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startnum_, &from.startnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&endnum_) -
    reinterpret_cast<char*>(&startnum_)) + sizeof(endnum_));
  // @@protoc_insertion_point(copy_constructor:protocol.BlockLimit)
}

inline void BlockLimit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endnum_) -
    reinterpret_cast<char*>(&startnum_)) + sizeof(endnum_));
}

BlockLimit::~BlockLimit() {
  // @@protoc_insertion_point(destructor:protocol.BlockLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockLimit::ArenaDtor(void* object) {
  BlockLimit* _this = reinterpret_cast< BlockLimit* >(object);
  (void)_this;
}
void BlockLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endnum_) -
      reinterpret_cast<char*>(&startnum_)) + sizeof(endnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 startNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 startNum = 1;
  if (this->_internal_startnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_startnum(), target);
  }

  // int64 endNum = 2;
  if (this->_internal_endnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_endnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockLimit)
  return target;
}

size_t BlockLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 startNum = 1;
  if (this->_internal_startnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_startnum());
  }

  // int64 endNum = 2;
  if (this->_internal_endnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockLimit::GetClassData() const { return &_class_data_; }

void BlockLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockLimit *>(to)->MergeFrom(
      static_cast<const BlockLimit &>(from));
}


void BlockLimit::MergeFrom(const BlockLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_startnum() != 0) {
    _internal_set_startnum(from._internal_startnum());
  }
  if (from._internal_endnum() != 0) {
    _internal_set_endnum(from._internal_endnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockLimit::CopyFrom(const BlockLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLimit::IsInitialized() const {
  return true;
}

void BlockLimit::InternalSwap(BlockLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockLimit, endnum_)
      + sizeof(BlockLimit::endnum_)
      - PROTOBUF_FIELD_OFFSET(BlockLimit, startnum_)>(
          reinterpret_cast<char*>(&startnum_),
          reinterpret_cast<char*>(&other->startnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[17]);
}

// ===================================================================

class TransactionLimit::_Internal {
 public:
};

TransactionLimit::TransactionLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionLimit)
}
TransactionLimit::TransactionLimit(const TransactionLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionid().empty()) {
    transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transactionid(), 
      GetArenaForAllocation());
  }
  limitnum_ = from.limitnum_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionLimit)
}

inline void TransactionLimit::SharedCtor() {
transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
limitnum_ = int64_t{0};
}

TransactionLimit::~TransactionLimit() {
  // @@protoc_insertion_point(destructor:protocol.TransactionLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transactionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionLimit::ArenaDtor(void* object) {
  TransactionLimit* _this = reinterpret_cast< TransactionLimit* >(object);
  (void)_this;
}
void TransactionLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionid_.ClearToEmpty();
  limitnum_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limitNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transactionid(), target);
  }

  // int64 limitNum = 2;
  if (this->_internal_limitnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limitnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionLimit)
  return target;
}

size_t TransactionLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transactionid());
  }

  // int64 limitNum = 2;
  if (this->_internal_limitnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limitnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionLimit::GetClassData() const { return &_class_data_; }

void TransactionLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionLimit *>(to)->MergeFrom(
      static_cast<const TransactionLimit &>(from));
}


void TransactionLimit::MergeFrom(const TransactionLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transactionid().empty()) {
    _internal_set_transactionid(from._internal_transactionid());
  }
  if (from._internal_limitnum() != 0) {
    _internal_set_limitnum(from._internal_limitnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionLimit::CopyFrom(const TransactionLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionLimit::IsInitialized() const {
  return true;
}

void TransactionLimit::InternalSwap(TransactionLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transactionid_, GetArenaForAllocation(),
      &other->transactionid_, other->GetArenaForAllocation()
  );
  swap(limitnum_, other->limitnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[18]);
}

// ===================================================================

class AccountPaginated::_Internal {
 public:
  static const ::protocol::Account& account(const AccountPaginated* msg);
};

const ::protocol::Account&
AccountPaginated::_Internal::account(const AccountPaginated* msg) {
  return *msg->account_;
}
void AccountPaginated::clear_account() {
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
AccountPaginated::AccountPaginated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountPaginated)
}
AccountPaginated::AccountPaginated(const AccountPaginated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::protocol::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountPaginated)
}

inline void AccountPaginated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&account_)) + sizeof(limit_));
}

AccountPaginated::~AccountPaginated() {
  // @@protoc_insertion_point(destructor:protocol.AccountPaginated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountPaginated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void AccountPaginated::ArenaDtor(void* object) {
  AccountPaginated* _this = reinterpret_cast< AccountPaginated* >(object);
  (void)_this;
}
void AccountPaginated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountPaginated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountPaginated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountPaginated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountPaginated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountPaginated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountPaginated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Account account = 1;
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountPaginated)
  return target;
}

size_t AccountPaginated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountPaginated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Account account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountPaginated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountPaginated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountPaginated::GetClassData() const { return &_class_data_; }

void AccountPaginated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountPaginated *>(to)->MergeFrom(
      static_cast<const AccountPaginated &>(from));
}


void AccountPaginated::MergeFrom(const AccountPaginated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountPaginated)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account()) {
    _internal_mutable_account()->::protocol::Account::MergeFrom(from._internal_account());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPaginated::CopyFrom(const AccountPaginated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountPaginated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountPaginated::IsInitialized() const {
  return true;
}

void AccountPaginated::InternalSwap(AccountPaginated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountPaginated, limit_)
      + sizeof(AccountPaginated::limit_)
      - PROTOBUF_FIELD_OFFSET(AccountPaginated, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountPaginated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[19]);
}

// ===================================================================

class TimePaginatedMessage::_Internal {
 public:
  static const ::protocol::TimeMessage& timemessage(const TimePaginatedMessage* msg);
};

const ::protocol::TimeMessage&
TimePaginatedMessage::_Internal::timemessage(const TimePaginatedMessage* msg) {
  return *msg->timemessage_;
}
TimePaginatedMessage::TimePaginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TimePaginatedMessage)
}
TimePaginatedMessage::TimePaginatedMessage(const TimePaginatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timemessage()) {
    timemessage_ = new ::protocol::TimeMessage(*from.timemessage_);
  } else {
    timemessage_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.TimePaginatedMessage)
}

inline void TimePaginatedMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timemessage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&timemessage_)) + sizeof(limit_));
}

TimePaginatedMessage::~TimePaginatedMessage() {
  // @@protoc_insertion_point(destructor:protocol.TimePaginatedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimePaginatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timemessage_;
}

void TimePaginatedMessage::ArenaDtor(void* object) {
  TimePaginatedMessage* _this = reinterpret_cast< TimePaginatedMessage* >(object);
  (void)_this;
}
void TimePaginatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimePaginatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimePaginatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TimePaginatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timemessage_ != nullptr) {
    delete timemessage_;
  }
  timemessage_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimePaginatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.TimeMessage timeMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timemessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimePaginatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TimePaginatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TimeMessage timeMessage = 1;
  if (this->_internal_has_timemessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timemessage(this), target, stream);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TimePaginatedMessage)
  return target;
}

size_t TimePaginatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TimePaginatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.TimeMessage timeMessage = 1;
  if (this->_internal_has_timemessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timemessage_);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimePaginatedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimePaginatedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimePaginatedMessage::GetClassData() const { return &_class_data_; }

void TimePaginatedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TimePaginatedMessage *>(to)->MergeFrom(
      static_cast<const TimePaginatedMessage &>(from));
}


void TimePaginatedMessage::MergeFrom(const TimePaginatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TimePaginatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timemessage()) {
    _internal_mutable_timemessage()->::protocol::TimeMessage::MergeFrom(from._internal_timemessage());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimePaginatedMessage::CopyFrom(const TimePaginatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TimePaginatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePaginatedMessage::IsInitialized() const {
  return true;
}

void TimePaginatedMessage::InternalSwap(TimePaginatedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimePaginatedMessage, limit_)
      + sizeof(TimePaginatedMessage::limit_)
      - PROTOBUF_FIELD_OFFSET(TimePaginatedMessage, timemessage_)>(
          reinterpret_cast<char*>(&timemessage_),
          reinterpret_cast<char*>(&other->timemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimePaginatedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[20]);
}

// ===================================================================

AccountNetMessage_AssetNetUsedEntry_DoNotUse::AccountNetMessage_AssetNetUsedEntry_DoNotUse() {}
AccountNetMessage_AssetNetUsedEntry_DoNotUse::AccountNetMessage_AssetNetUsedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountNetMessage_AssetNetUsedEntry_DoNotUse::MergeFrom(const AccountNetMessage_AssetNetUsedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountNetMessage_AssetNetUsedEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[21]);
}

// ===================================================================

AccountNetMessage_AssetNetLimitEntry_DoNotUse::AccountNetMessage_AssetNetLimitEntry_DoNotUse() {}
AccountNetMessage_AssetNetLimitEntry_DoNotUse::AccountNetMessage_AssetNetLimitEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountNetMessage_AssetNetLimitEntry_DoNotUse::MergeFrom(const AccountNetMessage_AssetNetLimitEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountNetMessage_AssetNetLimitEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[22]);
}

// ===================================================================

class AccountNetMessage::_Internal {
 public:
};

AccountNetMessage::AccountNetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assetnetused_(arena),
  assetnetlimit_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountNetMessage)
}
AccountNetMessage::AccountNetMessage(const AccountNetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assetnetused_.MergeFrom(from.assetnetused_);
  assetnetlimit_.MergeFrom(from.assetnetlimit_);
  ::memcpy(&freenetused_, &from.freenetused_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnetweight_) -
    reinterpret_cast<char*>(&freenetused_)) + sizeof(totalnetweight_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountNetMessage)
}

inline void AccountNetMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&freenetused_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalnetweight_) -
    reinterpret_cast<char*>(&freenetused_)) + sizeof(totalnetweight_));
}

AccountNetMessage::~AccountNetMessage() {
  // @@protoc_insertion_point(destructor:protocol.AccountNetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountNetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountNetMessage::ArenaDtor(void* object) {
  AccountNetMessage* _this = reinterpret_cast< AccountNetMessage* >(object);
  (void)_this;
  _this->assetnetused_. ~MapField();
  _this->assetnetlimit_. ~MapField();
}
inline void AccountNetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AccountNetMessage::ArenaDtor);
  }
}
void AccountNetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountNetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountNetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetnetused_.Clear();
  assetnetlimit_.Clear();
  ::memset(&freenetused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalnetweight_) -
      reinterpret_cast<char*>(&freenetused_)) + sizeof(totalnetweight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountNetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 freeNetUsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          freenetused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 freeNetLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          freenetlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NetUsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          netused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NetLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          netlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetNetUsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assetnetused_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetNetLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assetnetlimit_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 TotalNetLimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalnetlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalNetWeight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          totalnetweight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountNetMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountNetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 freeNetUsed = 1;
  if (this->_internal_freenetused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_freenetused(), target);
  }

  // int64 freeNetLimit = 2;
  if (this->_internal_freenetlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_freenetlimit(), target);
  }

  // int64 NetUsed = 3;
  if (this->_internal_netused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_netused(), target);
  }

  // int64 NetLimit = 4;
  if (this->_internal_netlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_netlimit(), target);
  }

  // map<string, int64> assetNetUsed = 5;
  if (!this->_internal_assetnetused().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountNetMessage.AssetNetUsedEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetnetused().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetnetused().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetused().begin();
          it != this->_internal_assetnetused().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountNetMessage_AssetNetUsedEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetused().begin();
          it != this->_internal_assetnetused().end(); ++it) {
        target = AccountNetMessage_AssetNetUsedEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> assetNetLimit = 6;
  if (!this->_internal_assetnetlimit().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountNetMessage.AssetNetLimitEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetnetlimit().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetnetlimit().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetlimit().begin();
          it != this->_internal_assetnetlimit().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountNetMessage_AssetNetLimitEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetlimit().begin();
          it != this->_internal_assetnetlimit().end(); ++it) {
        target = AccountNetMessage_AssetNetLimitEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 TotalNetLimit = 7;
  if (this->_internal_totalnetlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_totalnetlimit(), target);
  }

  // int64 TotalNetWeight = 8;
  if (this->_internal_totalnetweight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_totalnetweight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountNetMessage)
  return target;
}

size_t AccountNetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountNetMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> assetNetUsed = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetnetused_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetnetused().begin();
      it != this->_internal_assetnetused().end(); ++it) {
    total_size += AccountNetMessage_AssetNetUsedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> assetNetLimit = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetnetlimit_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetnetlimit().begin();
      it != this->_internal_assetnetlimit().end(); ++it) {
    total_size += AccountNetMessage_AssetNetLimitEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 freeNetUsed = 1;
  if (this->_internal_freenetused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_freenetused());
  }

  // int64 freeNetLimit = 2;
  if (this->_internal_freenetlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_freenetlimit());
  }

  // int64 NetUsed = 3;
  if (this->_internal_netused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_netused());
  }

  // int64 NetLimit = 4;
  if (this->_internal_netlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_netlimit());
  }

  // int64 TotalNetLimit = 7;
  if (this->_internal_totalnetlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalnetlimit());
  }

  // int64 TotalNetWeight = 8;
  if (this->_internal_totalnetweight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalnetweight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountNetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountNetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountNetMessage::GetClassData() const { return &_class_data_; }

void AccountNetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountNetMessage *>(to)->MergeFrom(
      static_cast<const AccountNetMessage &>(from));
}


void AccountNetMessage::MergeFrom(const AccountNetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountNetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assetnetused_.MergeFrom(from.assetnetused_);
  assetnetlimit_.MergeFrom(from.assetnetlimit_);
  if (from._internal_freenetused() != 0) {
    _internal_set_freenetused(from._internal_freenetused());
  }
  if (from._internal_freenetlimit() != 0) {
    _internal_set_freenetlimit(from._internal_freenetlimit());
  }
  if (from._internal_netused() != 0) {
    _internal_set_netused(from._internal_netused());
  }
  if (from._internal_netlimit() != 0) {
    _internal_set_netlimit(from._internal_netlimit());
  }
  if (from._internal_totalnetlimit() != 0) {
    _internal_set_totalnetlimit(from._internal_totalnetlimit());
  }
  if (from._internal_totalnetweight() != 0) {
    _internal_set_totalnetweight(from._internal_totalnetweight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountNetMessage::CopyFrom(const AccountNetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountNetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountNetMessage::IsInitialized() const {
  return true;
}

void AccountNetMessage::InternalSwap(AccountNetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assetnetused_.InternalSwap(&other->assetnetused_);
  assetnetlimit_.InternalSwap(&other->assetnetlimit_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountNetMessage, totalnetweight_)
      + sizeof(AccountNetMessage::totalnetweight_)
      - PROTOBUF_FIELD_OFFSET(AccountNetMessage, freenetused_)>(
          reinterpret_cast<char*>(&freenetused_),
          reinterpret_cast<char*>(&other->freenetused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountNetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[23]);
}

// ===================================================================

AccountResourceMessage_AssetNetUsedEntry_DoNotUse::AccountResourceMessage_AssetNetUsedEntry_DoNotUse() {}
AccountResourceMessage_AssetNetUsedEntry_DoNotUse::AccountResourceMessage_AssetNetUsedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountResourceMessage_AssetNetUsedEntry_DoNotUse::MergeFrom(const AccountResourceMessage_AssetNetUsedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountResourceMessage_AssetNetUsedEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[24]);
}

// ===================================================================

AccountResourceMessage_AssetNetLimitEntry_DoNotUse::AccountResourceMessage_AssetNetLimitEntry_DoNotUse() {}
AccountResourceMessage_AssetNetLimitEntry_DoNotUse::AccountResourceMessage_AssetNetLimitEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountResourceMessage_AssetNetLimitEntry_DoNotUse::MergeFrom(const AccountResourceMessage_AssetNetLimitEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountResourceMessage_AssetNetLimitEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[25]);
}

// ===================================================================

class AccountResourceMessage::_Internal {
 public:
};

AccountResourceMessage::AccountResourceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assetnetused_(arena),
  assetnetlimit_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountResourceMessage)
}
AccountResourceMessage::AccountResourceMessage(const AccountResourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assetnetused_.MergeFrom(from.assetnetused_);
  assetnetlimit_.MergeFrom(from.assetnetlimit_);
  ::memcpy(&freenetused_, &from.freenetused_,
    static_cast<size_t>(reinterpret_cast<char*>(&storagelimit_) -
    reinterpret_cast<char*>(&freenetused_)) + sizeof(storagelimit_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountResourceMessage)
}

inline void AccountResourceMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&freenetused_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storagelimit_) -
    reinterpret_cast<char*>(&freenetused_)) + sizeof(storagelimit_));
}

AccountResourceMessage::~AccountResourceMessage() {
  // @@protoc_insertion_point(destructor:protocol.AccountResourceMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountResourceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountResourceMessage::ArenaDtor(void* object) {
  AccountResourceMessage* _this = reinterpret_cast< AccountResourceMessage* >(object);
  (void)_this;
  _this->assetnetused_. ~MapField();
  _this->assetnetlimit_. ~MapField();
}
inline void AccountResourceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AccountResourceMessage::ArenaDtor);
  }
}
void AccountResourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountResourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountResourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetnetused_.Clear();
  assetnetlimit_.Clear();
  ::memset(&freenetused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storagelimit_) -
      reinterpret_cast<char*>(&freenetused_)) + sizeof(storagelimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountResourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 freeNetUsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          freenetused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 freeNetLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          freenetlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NetUsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          netused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NetLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          netlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetNetUsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assetnetused_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetNetLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assetnetlimit_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 TotalNetLimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalnetlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalNetWeight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          totalnetweight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalTronPowerWeight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          totaltronpowerweight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tronPowerUsed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tronpowerused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tronPowerLimit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tronpowerlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 EnergyUsed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          energyused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 EnergyLimit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          energylimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalEnergyLimit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          totalenergylimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TotalEnergyWeight = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          totalenergyweight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storageUsed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          storageused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storageLimit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          storagelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountResourceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountResourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 freeNetUsed = 1;
  if (this->_internal_freenetused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_freenetused(), target);
  }

  // int64 freeNetLimit = 2;
  if (this->_internal_freenetlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_freenetlimit(), target);
  }

  // int64 NetUsed = 3;
  if (this->_internal_netused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_netused(), target);
  }

  // int64 NetLimit = 4;
  if (this->_internal_netlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_netlimit(), target);
  }

  // map<string, int64> assetNetUsed = 5;
  if (!this->_internal_assetnetused().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountResourceMessage.AssetNetUsedEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetnetused().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetnetused().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetused().begin();
          it != this->_internal_assetnetused().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountResourceMessage_AssetNetUsedEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetused().begin();
          it != this->_internal_assetnetused().end(); ++it) {
        target = AccountResourceMessage_AssetNetUsedEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> assetNetLimit = 6;
  if (!this->_internal_assetnetlimit().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountResourceMessage.AssetNetLimitEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetnetlimit().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetnetlimit().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetlimit().begin();
          it != this->_internal_assetnetlimit().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountResourceMessage_AssetNetLimitEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetnetlimit().begin();
          it != this->_internal_assetnetlimit().end(); ++it) {
        target = AccountResourceMessage_AssetNetLimitEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 TotalNetLimit = 7;
  if (this->_internal_totalnetlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_totalnetlimit(), target);
  }

  // int64 TotalNetWeight = 8;
  if (this->_internal_totalnetweight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_totalnetweight(), target);
  }

  // int64 TotalTronPowerWeight = 9;
  if (this->_internal_totaltronpowerweight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_totaltronpowerweight(), target);
  }

  // int64 tronPowerUsed = 10;
  if (this->_internal_tronpowerused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_tronpowerused(), target);
  }

  // int64 tronPowerLimit = 11;
  if (this->_internal_tronpowerlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_tronpowerlimit(), target);
  }

  // int64 EnergyUsed = 13;
  if (this->_internal_energyused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_energyused(), target);
  }

  // int64 EnergyLimit = 14;
  if (this->_internal_energylimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_energylimit(), target);
  }

  // int64 TotalEnergyLimit = 15;
  if (this->_internal_totalenergylimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_totalenergylimit(), target);
  }

  // int64 TotalEnergyWeight = 16;
  if (this->_internal_totalenergyweight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_totalenergyweight(), target);
  }

  // int64 storageUsed = 21;
  if (this->_internal_storageused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_storageused(), target);
  }

  // int64 storageLimit = 22;
  if (this->_internal_storagelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_storagelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountResourceMessage)
  return target;
}

size_t AccountResourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountResourceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> assetNetUsed = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetnetused_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetnetused().begin();
      it != this->_internal_assetnetused().end(); ++it) {
    total_size += AccountResourceMessage_AssetNetUsedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> assetNetLimit = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetnetlimit_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetnetlimit().begin();
      it != this->_internal_assetnetlimit().end(); ++it) {
    total_size += AccountResourceMessage_AssetNetLimitEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 freeNetUsed = 1;
  if (this->_internal_freenetused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_freenetused());
  }

  // int64 freeNetLimit = 2;
  if (this->_internal_freenetlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_freenetlimit());
  }

  // int64 NetUsed = 3;
  if (this->_internal_netused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_netused());
  }

  // int64 NetLimit = 4;
  if (this->_internal_netlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_netlimit());
  }

  // int64 TotalNetLimit = 7;
  if (this->_internal_totalnetlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalnetlimit());
  }

  // int64 TotalNetWeight = 8;
  if (this->_internal_totalnetweight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalnetweight());
  }

  // int64 TotalTronPowerWeight = 9;
  if (this->_internal_totaltronpowerweight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totaltronpowerweight());
  }

  // int64 tronPowerUsed = 10;
  if (this->_internal_tronpowerused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tronpowerused());
  }

  // int64 tronPowerLimit = 11;
  if (this->_internal_tronpowerlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tronpowerlimit());
  }

  // int64 EnergyUsed = 13;
  if (this->_internal_energyused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energyused());
  }

  // int64 EnergyLimit = 14;
  if (this->_internal_energylimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energylimit());
  }

  // int64 TotalEnergyLimit = 15;
  if (this->_internal_totalenergylimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalenergylimit());
  }

  // int64 TotalEnergyWeight = 16;
  if (this->_internal_totalenergyweight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalenergyweight());
  }

  // int64 storageUsed = 21;
  if (this->_internal_storageused() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_storageused());
  }

  // int64 storageLimit = 22;
  if (this->_internal_storagelimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_storagelimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountResourceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountResourceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountResourceMessage::GetClassData() const { return &_class_data_; }

void AccountResourceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountResourceMessage *>(to)->MergeFrom(
      static_cast<const AccountResourceMessage &>(from));
}


void AccountResourceMessage::MergeFrom(const AccountResourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountResourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assetnetused_.MergeFrom(from.assetnetused_);
  assetnetlimit_.MergeFrom(from.assetnetlimit_);
  if (from._internal_freenetused() != 0) {
    _internal_set_freenetused(from._internal_freenetused());
  }
  if (from._internal_freenetlimit() != 0) {
    _internal_set_freenetlimit(from._internal_freenetlimit());
  }
  if (from._internal_netused() != 0) {
    _internal_set_netused(from._internal_netused());
  }
  if (from._internal_netlimit() != 0) {
    _internal_set_netlimit(from._internal_netlimit());
  }
  if (from._internal_totalnetlimit() != 0) {
    _internal_set_totalnetlimit(from._internal_totalnetlimit());
  }
  if (from._internal_totalnetweight() != 0) {
    _internal_set_totalnetweight(from._internal_totalnetweight());
  }
  if (from._internal_totaltronpowerweight() != 0) {
    _internal_set_totaltronpowerweight(from._internal_totaltronpowerweight());
  }
  if (from._internal_tronpowerused() != 0) {
    _internal_set_tronpowerused(from._internal_tronpowerused());
  }
  if (from._internal_tronpowerlimit() != 0) {
    _internal_set_tronpowerlimit(from._internal_tronpowerlimit());
  }
  if (from._internal_energyused() != 0) {
    _internal_set_energyused(from._internal_energyused());
  }
  if (from._internal_energylimit() != 0) {
    _internal_set_energylimit(from._internal_energylimit());
  }
  if (from._internal_totalenergylimit() != 0) {
    _internal_set_totalenergylimit(from._internal_totalenergylimit());
  }
  if (from._internal_totalenergyweight() != 0) {
    _internal_set_totalenergyweight(from._internal_totalenergyweight());
  }
  if (from._internal_storageused() != 0) {
    _internal_set_storageused(from._internal_storageused());
  }
  if (from._internal_storagelimit() != 0) {
    _internal_set_storagelimit(from._internal_storagelimit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountResourceMessage::CopyFrom(const AccountResourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountResourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResourceMessage::IsInitialized() const {
  return true;
}

void AccountResourceMessage::InternalSwap(AccountResourceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assetnetused_.InternalSwap(&other->assetnetused_);
  assetnetlimit_.InternalSwap(&other->assetnetlimit_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountResourceMessage, storagelimit_)
      + sizeof(AccountResourceMessage::storagelimit_)
      - PROTOBUF_FIELD_OFFSET(AccountResourceMessage, freenetused_)>(
          reinterpret_cast<char*>(&freenetused_),
          reinterpret_cast<char*>(&other->freenetused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountResourceMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[26]);
}

// ===================================================================

class PaginatedMessage::_Internal {
 public:
};

PaginatedMessage::PaginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PaginatedMessage)
}
PaginatedMessage::PaginatedMessage(const PaginatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.PaginatedMessage)
}

inline void PaginatedMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

PaginatedMessage::~PaginatedMessage() {
  // @@protoc_insertion_point(destructor:protocol.PaginatedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaginatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaginatedMessage::ArenaDtor(void* object) {
  PaginatedMessage* _this = reinterpret_cast< PaginatedMessage* >(object);
  (void)_this;
}
void PaginatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaginatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaginatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PaginatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaginatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PaginatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PaginatedMessage)
  return target;
}

size_t PaginatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PaginatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginatedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaginatedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginatedMessage::GetClassData() const { return &_class_data_; }

void PaginatedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PaginatedMessage *>(to)->MergeFrom(
      static_cast<const PaginatedMessage &>(from));
}


void PaginatedMessage::MergeFrom(const PaginatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PaginatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginatedMessage::CopyFrom(const PaginatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PaginatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginatedMessage::IsInitialized() const {
  return true;
}

void PaginatedMessage::InternalSwap(PaginatedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginatedMessage, limit_)
      + sizeof(PaginatedMessage::limit_)
      - PROTOBUF_FIELD_OFFSET(PaginatedMessage, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginatedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[27]);
}

// ===================================================================

class EasyTransferMessage::_Internal {
 public:
};

EasyTransferMessage::EasyTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EasyTransferMessage)
}
EasyTransferMessage::EasyTransferMessage(const EasyTransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passphrase(), 
      GetArenaForAllocation());
  }
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.EasyTransferMessage)
}

inline void EasyTransferMessage::SharedCtor() {
passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

EasyTransferMessage::~EasyTransferMessage() {
  // @@protoc_insertion_point(destructor:protocol.EasyTransferMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EasyTransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EasyTransferMessage::ArenaDtor(void* object) {
  EasyTransferMessage* _this = reinterpret_cast< EasyTransferMessage* >(object);
  (void)_this;
}
void EasyTransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyTransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EasyTransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EasyTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passphrase_.ClearToEmpty();
  toaddress_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyTransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes passPhrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes toAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyTransferMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EasyTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes passPhrase = 1;
  if (!this->_internal_passphrase().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_passphrase(), target);
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_toaddress(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EasyTransferMessage)
  return target;
}

size_t EasyTransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EasyTransferMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes passPhrase = 1;
  if (!this->_internal_passphrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passphrase());
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_toaddress());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyTransferMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EasyTransferMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyTransferMessage::GetClassData() const { return &_class_data_; }

void EasyTransferMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EasyTransferMessage *>(to)->MergeFrom(
      static_cast<const EasyTransferMessage &>(from));
}


void EasyTransferMessage::MergeFrom(const EasyTransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EasyTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_passphrase().empty()) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyTransferMessage::CopyFrom(const EasyTransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EasyTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyTransferMessage::IsInitialized() const {
  return true;
}

void EasyTransferMessage::InternalSwap(EasyTransferMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &passphrase_, GetArenaForAllocation(),
      &other->passphrase_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, GetArenaForAllocation(),
      &other->toaddress_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyTransferMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[28]);
}

// ===================================================================

class EasyTransferAssetMessage::_Internal {
 public:
};

EasyTransferAssetMessage::EasyTransferAssetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EasyTransferAssetMessage)
}
EasyTransferAssetMessage::EasyTransferAssetMessage(const EasyTransferAssetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passphrase(), 
      GetArenaForAllocation());
  }
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  assetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetid().empty()) {
    assetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assetid(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.EasyTransferAssetMessage)
}

inline void EasyTransferAssetMessage::SharedCtor() {
passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
assetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

EasyTransferAssetMessage::~EasyTransferAssetMessage() {
  // @@protoc_insertion_point(destructor:protocol.EasyTransferAssetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EasyTransferAssetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EasyTransferAssetMessage::ArenaDtor(void* object) {
  EasyTransferAssetMessage* _this = reinterpret_cast< EasyTransferAssetMessage* >(object);
  (void)_this;
}
void EasyTransferAssetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyTransferAssetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EasyTransferAssetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EasyTransferAssetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passphrase_.ClearToEmpty();
  toaddress_.ClearToEmpty();
  assetid_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyTransferAssetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes passPhrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes toAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.EasyTransferAssetMessage.assetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyTransferAssetMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EasyTransferAssetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes passPhrase = 1;
  if (!this->_internal_passphrase().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_passphrase(), target);
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_toaddress(), target);
  }

  // string assetId = 3;
  if (!this->_internal_assetid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetid().data(), static_cast<int>(this->_internal_assetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.EasyTransferAssetMessage.assetId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetid(), target);
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EasyTransferAssetMessage)
  return target;
}

size_t EasyTransferAssetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EasyTransferAssetMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes passPhrase = 1;
  if (!this->_internal_passphrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passphrase());
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_toaddress());
  }

  // string assetId = 3;
  if (!this->_internal_assetid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetid());
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyTransferAssetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EasyTransferAssetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyTransferAssetMessage::GetClassData() const { return &_class_data_; }

void EasyTransferAssetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EasyTransferAssetMessage *>(to)->MergeFrom(
      static_cast<const EasyTransferAssetMessage &>(from));
}


void EasyTransferAssetMessage::MergeFrom(const EasyTransferAssetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EasyTransferAssetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_passphrase().empty()) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  if (!from._internal_assetid().empty()) {
    _internal_set_assetid(from._internal_assetid());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyTransferAssetMessage::CopyFrom(const EasyTransferAssetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EasyTransferAssetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyTransferAssetMessage::IsInitialized() const {
  return true;
}

void EasyTransferAssetMessage::InternalSwap(EasyTransferAssetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &passphrase_, GetArenaForAllocation(),
      &other->passphrase_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, GetArenaForAllocation(),
      &other->toaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assetid_, GetArenaForAllocation(),
      &other->assetid_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyTransferAssetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[29]);
}

// ===================================================================

class EasyTransferByPrivateMessage::_Internal {
 public:
};

EasyTransferByPrivateMessage::EasyTransferByPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EasyTransferByPrivateMessage)
}
EasyTransferByPrivateMessage::EasyTransferByPrivateMessage(const EasyTransferByPrivateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekey(), 
      GetArenaForAllocation());
  }
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.EasyTransferByPrivateMessage)
}

inline void EasyTransferByPrivateMessage::SharedCtor() {
privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

EasyTransferByPrivateMessage::~EasyTransferByPrivateMessage() {
  // @@protoc_insertion_point(destructor:protocol.EasyTransferByPrivateMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EasyTransferByPrivateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EasyTransferByPrivateMessage::ArenaDtor(void* object) {
  EasyTransferByPrivateMessage* _this = reinterpret_cast< EasyTransferByPrivateMessage* >(object);
  (void)_this;
}
void EasyTransferByPrivateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyTransferByPrivateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EasyTransferByPrivateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EasyTransferByPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privatekey_.ClearToEmpty();
  toaddress_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyTransferByPrivateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes privateKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes toAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyTransferByPrivateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EasyTransferByPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes privateKey = 1;
  if (!this->_internal_privatekey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_privatekey(), target);
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_toaddress(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EasyTransferByPrivateMessage)
  return target;
}

size_t EasyTransferByPrivateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EasyTransferByPrivateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes privateKey = 1;
  if (!this->_internal_privatekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_toaddress());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyTransferByPrivateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EasyTransferByPrivateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyTransferByPrivateMessage::GetClassData() const { return &_class_data_; }

void EasyTransferByPrivateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EasyTransferByPrivateMessage *>(to)->MergeFrom(
      static_cast<const EasyTransferByPrivateMessage &>(from));
}


void EasyTransferByPrivateMessage::MergeFrom(const EasyTransferByPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EasyTransferByPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_privatekey().empty()) {
    _internal_set_privatekey(from._internal_privatekey());
  }
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyTransferByPrivateMessage::CopyFrom(const EasyTransferByPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EasyTransferByPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyTransferByPrivateMessage::IsInitialized() const {
  return true;
}

void EasyTransferByPrivateMessage::InternalSwap(EasyTransferByPrivateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privatekey_, GetArenaForAllocation(),
      &other->privatekey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, GetArenaForAllocation(),
      &other->toaddress_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyTransferByPrivateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[30]);
}

// ===================================================================

class EasyTransferAssetByPrivateMessage::_Internal {
 public:
};

EasyTransferAssetByPrivateMessage::EasyTransferAssetByPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EasyTransferAssetByPrivateMessage)
}
EasyTransferAssetByPrivateMessage::EasyTransferAssetByPrivateMessage(const EasyTransferAssetByPrivateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekey(), 
      GetArenaForAllocation());
  }
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  assetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetid().empty()) {
    assetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assetid(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.EasyTransferAssetByPrivateMessage)
}

inline void EasyTransferAssetByPrivateMessage::SharedCtor() {
privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
assetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

EasyTransferAssetByPrivateMessage::~EasyTransferAssetByPrivateMessage() {
  // @@protoc_insertion_point(destructor:protocol.EasyTransferAssetByPrivateMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EasyTransferAssetByPrivateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EasyTransferAssetByPrivateMessage::ArenaDtor(void* object) {
  EasyTransferAssetByPrivateMessage* _this = reinterpret_cast< EasyTransferAssetByPrivateMessage* >(object);
  (void)_this;
}
void EasyTransferAssetByPrivateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyTransferAssetByPrivateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EasyTransferAssetByPrivateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EasyTransferAssetByPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privatekey_.ClearToEmpty();
  toaddress_.ClearToEmpty();
  assetid_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyTransferAssetByPrivateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes privateKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes toAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.EasyTransferAssetByPrivateMessage.assetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyTransferAssetByPrivateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EasyTransferAssetByPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes privateKey = 1;
  if (!this->_internal_privatekey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_privatekey(), target);
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_toaddress(), target);
  }

  // string assetId = 3;
  if (!this->_internal_assetid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetid().data(), static_cast<int>(this->_internal_assetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.EasyTransferAssetByPrivateMessage.assetId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetid(), target);
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EasyTransferAssetByPrivateMessage)
  return target;
}

size_t EasyTransferAssetByPrivateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EasyTransferAssetByPrivateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes privateKey = 1;
  if (!this->_internal_privatekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // bytes toAddress = 2;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_toaddress());
  }

  // string assetId = 3;
  if (!this->_internal_assetid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetid());
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyTransferAssetByPrivateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EasyTransferAssetByPrivateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyTransferAssetByPrivateMessage::GetClassData() const { return &_class_data_; }

void EasyTransferAssetByPrivateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EasyTransferAssetByPrivateMessage *>(to)->MergeFrom(
      static_cast<const EasyTransferAssetByPrivateMessage &>(from));
}


void EasyTransferAssetByPrivateMessage::MergeFrom(const EasyTransferAssetByPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EasyTransferAssetByPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_privatekey().empty()) {
    _internal_set_privatekey(from._internal_privatekey());
  }
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  if (!from._internal_assetid().empty()) {
    _internal_set_assetid(from._internal_assetid());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyTransferAssetByPrivateMessage::CopyFrom(const EasyTransferAssetByPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EasyTransferAssetByPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyTransferAssetByPrivateMessage::IsInitialized() const {
  return true;
}

void EasyTransferAssetByPrivateMessage::InternalSwap(EasyTransferAssetByPrivateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privatekey_, GetArenaForAllocation(),
      &other->privatekey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, GetArenaForAllocation(),
      &other->toaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assetid_, GetArenaForAllocation(),
      &other->assetid_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyTransferAssetByPrivateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[31]);
}

// ===================================================================

class EasyTransferResponse::_Internal {
 public:
  static const ::protocol::Transaction& transaction(const EasyTransferResponse* msg);
  static const ::protocol::Return& result(const EasyTransferResponse* msg);
};

const ::protocol::Transaction&
EasyTransferResponse::_Internal::transaction(const EasyTransferResponse* msg) {
  return *msg->transaction_;
}
const ::protocol::Return&
EasyTransferResponse::_Internal::result(const EasyTransferResponse* msg) {
  return *msg->result_;
}
void EasyTransferResponse::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
EasyTransferResponse::EasyTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.EasyTransferResponse)
}
EasyTransferResponse::EasyTransferResponse(const EasyTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::protocol::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::protocol::Return(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.EasyTransferResponse)
}

inline void EasyTransferResponse::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(result_));
}

EasyTransferResponse::~EasyTransferResponse() {
  // @@protoc_insertion_point(destructor:protocol.EasyTransferResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EasyTransferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete result_;
}

void EasyTransferResponse::ArenaDtor(void* object) {
  EasyTransferResponse* _this = reinterpret_cast< EasyTransferResponse* >(object);
  (void)_this;
}
void EasyTransferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EasyTransferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EasyTransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EasyTransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyTransferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Return result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EasyTransferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EasyTransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // .protocol.Return result = 2;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bytes txid = 3;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EasyTransferResponse)
  return target;
}

size_t EasyTransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EasyTransferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid = 3;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .protocol.Return result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EasyTransferResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyTransferResponse::GetClassData() const { return &_class_data_; }

void EasyTransferResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EasyTransferResponse *>(to)->MergeFrom(
      static_cast<const EasyTransferResponse &>(from));
}


void EasyTransferResponse::MergeFrom(const EasyTransferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EasyTransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::protocol::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::protocol::Return::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyTransferResponse::CopyFrom(const EasyTransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EasyTransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyTransferResponse::IsInitialized() const {
  return true;
}

void EasyTransferResponse::InternalSwap(EasyTransferResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EasyTransferResponse, result_)
      + sizeof(EasyTransferResponse::result_)
      - PROTOBUF_FIELD_OFFSET(EasyTransferResponse, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyTransferResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[32]);
}

// ===================================================================

class AddressPrKeyPairMessage::_Internal {
 public:
};

AddressPrKeyPairMessage::AddressPrKeyPairMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AddressPrKeyPairMessage)
}
AddressPrKeyPairMessage::AddressPrKeyPairMessage(const AddressPrKeyPairMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekey(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AddressPrKeyPairMessage)
}

inline void AddressPrKeyPairMessage::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddressPrKeyPairMessage::~AddressPrKeyPairMessage() {
  // @@protoc_insertion_point(destructor:protocol.AddressPrKeyPairMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressPrKeyPairMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressPrKeyPairMessage::ArenaDtor(void* object) {
  AddressPrKeyPairMessage* _this = reinterpret_cast< AddressPrKeyPairMessage* >(object);
  (void)_this;
}
void AddressPrKeyPairMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressPrKeyPairMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressPrKeyPairMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AddressPrKeyPairMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  privatekey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressPrKeyPairMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.AddressPrKeyPairMessage.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string privateKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.AddressPrKeyPairMessage.privateKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressPrKeyPairMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AddressPrKeyPairMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.AddressPrKeyPairMessage.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string privateKey = 2;
  if (!this->_internal_privatekey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_privatekey().data(), static_cast<int>(this->_internal_privatekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.AddressPrKeyPairMessage.privateKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_privatekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AddressPrKeyPairMessage)
  return target;
}

size_t AddressPrKeyPairMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AddressPrKeyPairMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string privateKey = 2;
  if (!this->_internal_privatekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_privatekey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressPrKeyPairMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressPrKeyPairMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressPrKeyPairMessage::GetClassData() const { return &_class_data_; }

void AddressPrKeyPairMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressPrKeyPairMessage *>(to)->MergeFrom(
      static_cast<const AddressPrKeyPairMessage &>(from));
}


void AddressPrKeyPairMessage::MergeFrom(const AddressPrKeyPairMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AddressPrKeyPairMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_privatekey().empty()) {
    _internal_set_privatekey(from._internal_privatekey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressPrKeyPairMessage::CopyFrom(const AddressPrKeyPairMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AddressPrKeyPairMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressPrKeyPairMessage::IsInitialized() const {
  return true;
}

void AddressPrKeyPairMessage::InternalSwap(AddressPrKeyPairMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privatekey_, GetArenaForAllocation(),
      &other->privatekey_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressPrKeyPairMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[33]);
}

// ===================================================================

class TransactionExtention::_Internal {
 public:
  static const ::protocol::Transaction& transaction(const TransactionExtention* msg);
  static const ::protocol::Return& result(const TransactionExtention* msg);
};

const ::protocol::Transaction&
TransactionExtention::_Internal::transaction(const TransactionExtention* msg) {
  return *msg->transaction_;
}
const ::protocol::Return&
TransactionExtention::_Internal::result(const TransactionExtention* msg) {
  return *msg->result_;
}
void TransactionExtention::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
TransactionExtention::TransactionExtention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  constant_result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionExtention)
}
TransactionExtention::TransactionExtention(const TransactionExtention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constant_result_(from.constant_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::protocol::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::protocol::Return(*from.result_);
  } else {
    result_ = nullptr;
  }
  energy_used_ = from.energy_used_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionExtention)
}

inline void TransactionExtention::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&energy_used_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(energy_used_));
}

TransactionExtention::~TransactionExtention() {
  // @@protoc_insertion_point(destructor:protocol.TransactionExtention)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionExtention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete result_;
}

void TransactionExtention::ArenaDtor(void* object) {
  TransactionExtention* _this = reinterpret_cast< TransactionExtention* >(object);
  (void)_this;
}
void TransactionExtention::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionExtention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionExtention::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constant_result_.Clear();
  txid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  energy_used_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionExtention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes constant_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_constant_result();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.Return result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 energy_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          energy_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionExtention::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txid(), target);
  }

  // repeated bytes constant_result = 3;
  for (int i = 0, n = this->_internal_constant_result_size(); i < n; i++) {
    const auto& s = this->_internal_constant_result(i);
    target = stream->WriteBytes(3, s, target);
  }

  // .protocol.Return result = 4;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result(this), target, stream);
  }

  // int64 energy_used = 5;
  if (this->_internal_energy_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_energy_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionExtention)
  return target;
}

size_t TransactionExtention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionExtention)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes constant_result = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(constant_result_.size());
  for (int i = 0, n = constant_result_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      constant_result_.Get(i));
  }

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .protocol.Return result = 4;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 energy_used = 5;
  if (this->_internal_energy_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energy_used());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionExtention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionExtention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionExtention::GetClassData() const { return &_class_data_; }

void TransactionExtention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionExtention *>(to)->MergeFrom(
      static_cast<const TransactionExtention &>(from));
}


void TransactionExtention::MergeFrom(const TransactionExtention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionExtention)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constant_result_.MergeFrom(from.constant_result_);
  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::protocol::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::protocol::Return::MergeFrom(from._internal_result());
  }
  if (from._internal_energy_used() != 0) {
    _internal_set_energy_used(from._internal_energy_used());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionExtention::CopyFrom(const TransactionExtention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionExtention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionExtention::IsInitialized() const {
  return true;
}

void TransactionExtention::InternalSwap(TransactionExtention* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  constant_result_.InternalSwap(&other->constant_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionExtention, energy_used_)
      + sizeof(TransactionExtention::energy_used_)
      - PROTOBUF_FIELD_OFFSET(TransactionExtention, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionExtention::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[34]);
}

// ===================================================================

class BlockExtention::_Internal {
 public:
  static const ::protocol::BlockHeader& block_header(const BlockExtention* msg);
};

const ::protocol::BlockHeader&
BlockExtention::_Internal::block_header(const BlockExtention* msg) {
  return *msg->block_header_;
}
void BlockExtention::clear_block_header() {
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
}
BlockExtention::BlockExtention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockExtention)
}
BlockExtention::BlockExtention(const BlockExtention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blockid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blockid().empty()) {
    blockid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blockid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_header()) {
    block_header_ = new ::protocol::BlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.BlockExtention)
}

inline void BlockExtention::SharedCtor() {
blockid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_header_ = nullptr;
}

BlockExtention::~BlockExtention() {
  // @@protoc_insertion_point(destructor:protocol.BlockExtention)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockExtention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blockid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_header_;
}

void BlockExtention::ArenaDtor(void* object) {
  BlockExtention* _this = reinterpret_cast< BlockExtention* >(object);
  (void)_this;
}
void BlockExtention::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockExtention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockExtention::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  blockid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockExtention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.TransactionExtention transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.BlockHeader block_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blockid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_blockid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockExtention::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TransactionExtention transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->_internal_has_block_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_header(this), target, stream);
  }

  // bytes blockid = 3;
  if (!this->_internal_blockid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blockid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockExtention)
  return target;
}

size_t BlockExtention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockExtention)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionExtention transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes blockid = 3;
  if (!this->_internal_blockid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockid());
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->_internal_has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockExtention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockExtention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockExtention::GetClassData() const { return &_class_data_; }

void BlockExtention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockExtention *>(to)->MergeFrom(
      static_cast<const BlockExtention &>(from));
}


void BlockExtention::MergeFrom(const BlockExtention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockExtention)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (!from._internal_blockid().empty()) {
    _internal_set_blockid(from._internal_blockid());
  }
  if (from._internal_has_block_header()) {
    _internal_mutable_block_header()->::protocol::BlockHeader::MergeFrom(from._internal_block_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockExtention::CopyFrom(const BlockExtention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockExtention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockExtention::IsInitialized() const {
  return true;
}

void BlockExtention::InternalSwap(BlockExtention* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blockid_, GetArenaForAllocation(),
      &other->blockid_, other->GetArenaForAllocation()
  );
  swap(block_header_, other->block_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockExtention::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[35]);
}

// ===================================================================

class BlockListExtention::_Internal {
 public:
};

BlockListExtention::BlockListExtention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockListExtention)
}
BlockListExtention::BlockListExtention(const BlockListExtention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.BlockListExtention)
}

inline void BlockListExtention::SharedCtor() {
}

BlockListExtention::~BlockListExtention() {
  // @@protoc_insertion_point(destructor:protocol.BlockListExtention)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockListExtention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockListExtention::ArenaDtor(void* object) {
  BlockListExtention* _this = reinterpret_cast< BlockListExtention* >(object);
  (void)_this;
}
void BlockListExtention::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockListExtention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockListExtention::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockListExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockListExtention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.BlockExtention block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockListExtention::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockListExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.BlockExtention block = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_block(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockListExtention)
  return target;
}

size_t BlockListExtention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockListExtention)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.BlockExtention block = 1;
  total_size += 1UL * this->_internal_block_size();
  for (const auto& msg : this->block_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockListExtention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockListExtention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockListExtention::GetClassData() const { return &_class_data_; }

void BlockListExtention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockListExtention *>(to)->MergeFrom(
      static_cast<const BlockListExtention &>(from));
}


void BlockListExtention::MergeFrom(const BlockListExtention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockListExtention)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockListExtention::CopyFrom(const BlockListExtention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockListExtention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockListExtention::IsInitialized() const {
  return true;
}

void BlockListExtention::InternalSwap(BlockListExtention* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockListExtention::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[36]);
}

// ===================================================================

class TransactionListExtention::_Internal {
 public:
};

TransactionListExtention::TransactionListExtention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionListExtention)
}
TransactionListExtention::TransactionListExtention(const TransactionListExtention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_(from.transaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionListExtention)
}

inline void TransactionListExtention::SharedCtor() {
}

TransactionListExtention::~TransactionListExtention() {
  // @@protoc_insertion_point(destructor:protocol.TransactionListExtention)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionListExtention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionListExtention::ArenaDtor(void* object) {
  TransactionListExtention* _this = reinterpret_cast< TransactionListExtention* >(object);
  (void)_this;
}
void TransactionListExtention::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionListExtention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionListExtention::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionListExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionListExtention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.TransactionExtention transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionListExtention::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionListExtention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TransactionExtention transaction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionListExtention)
  return target;
}

size_t TransactionListExtention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionListExtention)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionExtention transaction = 1;
  total_size += 1UL * this->_internal_transaction_size();
  for (const auto& msg : this->transaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionListExtention::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionListExtention::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionListExtention::GetClassData() const { return &_class_data_; }

void TransactionListExtention::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionListExtention *>(to)->MergeFrom(
      static_cast<const TransactionListExtention &>(from));
}


void TransactionListExtention::MergeFrom(const TransactionListExtention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionListExtention)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_.MergeFrom(from.transaction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionListExtention::CopyFrom(const TransactionListExtention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionListExtention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionListExtention::IsInitialized() const {
  return true;
}

void TransactionListExtention::InternalSwap(TransactionListExtention* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_.InternalSwap(&other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionListExtention::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[37]);
}

// ===================================================================

class BlockIncrementalMerkleTree::_Internal {
 public:
  static const ::protocol::IncrementalMerkleTree& merkletree(const BlockIncrementalMerkleTree* msg);
};

const ::protocol::IncrementalMerkleTree&
BlockIncrementalMerkleTree::_Internal::merkletree(const BlockIncrementalMerkleTree* msg) {
  return *msg->merkletree_;
}
void BlockIncrementalMerkleTree::clear_merkletree() {
  if (GetArenaForAllocation() == nullptr && merkletree_ != nullptr) {
    delete merkletree_;
  }
  merkletree_ = nullptr;
}
BlockIncrementalMerkleTree::BlockIncrementalMerkleTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockIncrementalMerkleTree)
}
BlockIncrementalMerkleTree::BlockIncrementalMerkleTree(const BlockIncrementalMerkleTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_merkletree()) {
    merkletree_ = new ::protocol::IncrementalMerkleTree(*from.merkletree_);
  } else {
    merkletree_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockIncrementalMerkleTree)
}

inline void BlockIncrementalMerkleTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&merkletree_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&merkletree_)) + sizeof(number_));
}

BlockIncrementalMerkleTree::~BlockIncrementalMerkleTree() {
  // @@protoc_insertion_point(destructor:protocol.BlockIncrementalMerkleTree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockIncrementalMerkleTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete merkletree_;
}

void BlockIncrementalMerkleTree::ArenaDtor(void* object) {
  BlockIncrementalMerkleTree* _this = reinterpret_cast< BlockIncrementalMerkleTree* >(object);
  (void)_this;
}
void BlockIncrementalMerkleTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockIncrementalMerkleTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockIncrementalMerkleTree::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockIncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && merkletree_ != nullptr) {
    delete merkletree_;
  }
  merkletree_ = nullptr;
  number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockIncrementalMerkleTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.IncrementalMerkleTree merkleTree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_merkletree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockIncrementalMerkleTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockIncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_number(), target);
  }

  // .protocol.IncrementalMerkleTree merkleTree = 2;
  if (this->_internal_has_merkletree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::merkletree(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockIncrementalMerkleTree)
  return target;
}

size_t BlockIncrementalMerkleTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockIncrementalMerkleTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.IncrementalMerkleTree merkleTree = 2;
  if (this->_internal_has_merkletree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merkletree_);
  }

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockIncrementalMerkleTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockIncrementalMerkleTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockIncrementalMerkleTree::GetClassData() const { return &_class_data_; }

void BlockIncrementalMerkleTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockIncrementalMerkleTree *>(to)->MergeFrom(
      static_cast<const BlockIncrementalMerkleTree &>(from));
}


void BlockIncrementalMerkleTree::MergeFrom(const BlockIncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockIncrementalMerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_merkletree()) {
    _internal_mutable_merkletree()->::protocol::IncrementalMerkleTree::MergeFrom(from._internal_merkletree());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockIncrementalMerkleTree::CopyFrom(const BlockIncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockIncrementalMerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIncrementalMerkleTree::IsInitialized() const {
  return true;
}

void BlockIncrementalMerkleTree::InternalSwap(BlockIncrementalMerkleTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockIncrementalMerkleTree, number_)
      + sizeof(BlockIncrementalMerkleTree::number_)
      - PROTOBUF_FIELD_OFFSET(BlockIncrementalMerkleTree, merkletree_)>(
          reinterpret_cast<char*>(&merkletree_),
          reinterpret_cast<char*>(&other->merkletree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockIncrementalMerkleTree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[38]);
}

// ===================================================================

class TransactionSignWeight_Result::_Internal {
 public:
};

TransactionSignWeight_Result::TransactionSignWeight_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionSignWeight.Result)
}
TransactionSignWeight_Result::TransactionSignWeight_Result(const TransactionSignWeight_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionSignWeight.Result)
}

inline void TransactionSignWeight_Result::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = 0;
}

TransactionSignWeight_Result::~TransactionSignWeight_Result() {
  // @@protoc_insertion_point(destructor:protocol.TransactionSignWeight.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionSignWeight_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionSignWeight_Result::ArenaDtor(void* object) {
  TransactionSignWeight_Result* _this = reinterpret_cast< TransactionSignWeight_Result* >(object);
  (void)_this;
}
void TransactionSignWeight_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionSignWeight_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionSignWeight_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionSignWeight.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionSignWeight_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.TransactionSignWeight.Result.response_code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::protocol::TransactionSignWeight_Result_response_code>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.TransactionSignWeight.Result.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionSignWeight_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionSignWeight.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TransactionSignWeight.Result.response_code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionSignWeight.Result.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionSignWeight.Result)
  return target;
}

size_t TransactionSignWeight_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionSignWeight.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .protocol.TransactionSignWeight.Result.response_code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionSignWeight_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionSignWeight_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionSignWeight_Result::GetClassData() const { return &_class_data_; }

void TransactionSignWeight_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionSignWeight_Result *>(to)->MergeFrom(
      static_cast<const TransactionSignWeight_Result &>(from));
}


void TransactionSignWeight_Result::MergeFrom(const TransactionSignWeight_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionSignWeight.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionSignWeight_Result::CopyFrom(const TransactionSignWeight_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionSignWeight.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionSignWeight_Result::IsInitialized() const {
  return true;
}

void TransactionSignWeight_Result::InternalSwap(TransactionSignWeight_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionSignWeight_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[39]);
}

// ===================================================================

class TransactionSignWeight::_Internal {
 public:
  static const ::protocol::Permission& permission(const TransactionSignWeight* msg);
  static const ::protocol::TransactionSignWeight_Result& result(const TransactionSignWeight* msg);
  static const ::protocol::TransactionExtention& transaction(const TransactionSignWeight* msg);
};

const ::protocol::Permission&
TransactionSignWeight::_Internal::permission(const TransactionSignWeight* msg) {
  return *msg->permission_;
}
const ::protocol::TransactionSignWeight_Result&
TransactionSignWeight::_Internal::result(const TransactionSignWeight* msg) {
  return *msg->result_;
}
const ::protocol::TransactionExtention&
TransactionSignWeight::_Internal::transaction(const TransactionSignWeight* msg) {
  return *msg->transaction_;
}
void TransactionSignWeight::clear_permission() {
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
}
TransactionSignWeight::TransactionSignWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  approved_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionSignWeight)
}
TransactionSignWeight::TransactionSignWeight(const TransactionSignWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      approved_list_(from.approved_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permission()) {
    permission_ = new ::protocol::Permission(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::protocol::TransactionSignWeight_Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::protocol::TransactionExtention(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  current_weight_ = from.current_weight_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionSignWeight)
}

inline void TransactionSignWeight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_weight_) -
    reinterpret_cast<char*>(&permission_)) + sizeof(current_weight_));
}

TransactionSignWeight::~TransactionSignWeight() {
  // @@protoc_insertion_point(destructor:protocol.TransactionSignWeight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionSignWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete permission_;
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionSignWeight::ArenaDtor(void* object) {
  TransactionSignWeight* _this = reinterpret_cast< TransactionSignWeight* >(object);
  (void)_this;
}
void TransactionSignWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionSignWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionSignWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionSignWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approved_list_.Clear();
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  current_weight_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionSignWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Permission permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes approved_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_approved_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 current_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionSignWeight.Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionExtention transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionSignWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionSignWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Permission permission = 1;
  if (this->_internal_has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permission(this), target, stream);
  }

  // repeated bytes approved_list = 2;
  for (int i = 0, n = this->_internal_approved_list_size(); i < n; i++) {
    const auto& s = this->_internal_approved_list(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int64 current_weight = 3;
  if (this->_internal_current_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_weight(), target);
  }

  // .protocol.TransactionSignWeight.Result result = 4;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result(this), target, stream);
  }

  // .protocol.TransactionExtention transaction = 5;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionSignWeight)
  return target;
}

size_t TransactionSignWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionSignWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes approved_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(approved_list_.size());
  for (int i = 0, n = approved_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      approved_list_.Get(i));
  }

  // .protocol.Permission permission = 1;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  // .protocol.TransactionSignWeight.Result result = 4;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .protocol.TransactionExtention transaction = 5;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int64 current_weight = 3;
  if (this->_internal_current_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionSignWeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionSignWeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionSignWeight::GetClassData() const { return &_class_data_; }

void TransactionSignWeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionSignWeight *>(to)->MergeFrom(
      static_cast<const TransactionSignWeight &>(from));
}


void TransactionSignWeight::MergeFrom(const TransactionSignWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionSignWeight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  approved_list_.MergeFrom(from.approved_list_);
  if (from._internal_has_permission()) {
    _internal_mutable_permission()->::protocol::Permission::MergeFrom(from._internal_permission());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::protocol::TransactionSignWeight_Result::MergeFrom(from._internal_result());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::protocol::TransactionExtention::MergeFrom(from._internal_transaction());
  }
  if (from._internal_current_weight() != 0) {
    _internal_set_current_weight(from._internal_current_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionSignWeight::CopyFrom(const TransactionSignWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionSignWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionSignWeight::IsInitialized() const {
  return true;
}

void TransactionSignWeight::InternalSwap(TransactionSignWeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  approved_list_.InternalSwap(&other->approved_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionSignWeight, current_weight_)
      + sizeof(TransactionSignWeight::current_weight_)
      - PROTOBUF_FIELD_OFFSET(TransactionSignWeight, permission_)>(
          reinterpret_cast<char*>(&permission_),
          reinterpret_cast<char*>(&other->permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionSignWeight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[40]);
}

// ===================================================================

class TransactionApprovedList_Result::_Internal {
 public:
};

TransactionApprovedList_Result::TransactionApprovedList_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionApprovedList.Result)
}
TransactionApprovedList_Result::TransactionApprovedList_Result(const TransactionApprovedList_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionApprovedList.Result)
}

inline void TransactionApprovedList_Result::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = 0;
}

TransactionApprovedList_Result::~TransactionApprovedList_Result() {
  // @@protoc_insertion_point(destructor:protocol.TransactionApprovedList.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionApprovedList_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionApprovedList_Result::ArenaDtor(void* object) {
  TransactionApprovedList_Result* _this = reinterpret_cast< TransactionApprovedList_Result* >(object);
  (void)_this;
}
void TransactionApprovedList_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionApprovedList_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionApprovedList_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionApprovedList.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionApprovedList_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.TransactionApprovedList.Result.response_code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::protocol::TransactionApprovedList_Result_response_code>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.TransactionApprovedList.Result.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionApprovedList_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionApprovedList.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TransactionApprovedList.Result.response_code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionApprovedList.Result.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionApprovedList.Result)
  return target;
}

size_t TransactionApprovedList_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionApprovedList.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .protocol.TransactionApprovedList.Result.response_code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionApprovedList_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionApprovedList_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionApprovedList_Result::GetClassData() const { return &_class_data_; }

void TransactionApprovedList_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionApprovedList_Result *>(to)->MergeFrom(
      static_cast<const TransactionApprovedList_Result &>(from));
}


void TransactionApprovedList_Result::MergeFrom(const TransactionApprovedList_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionApprovedList.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionApprovedList_Result::CopyFrom(const TransactionApprovedList_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionApprovedList.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionApprovedList_Result::IsInitialized() const {
  return true;
}

void TransactionApprovedList_Result::InternalSwap(TransactionApprovedList_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionApprovedList_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[41]);
}

// ===================================================================

class TransactionApprovedList::_Internal {
 public:
  static const ::protocol::TransactionApprovedList_Result& result(const TransactionApprovedList* msg);
  static const ::protocol::TransactionExtention& transaction(const TransactionApprovedList* msg);
};

const ::protocol::TransactionApprovedList_Result&
TransactionApprovedList::_Internal::result(const TransactionApprovedList* msg) {
  return *msg->result_;
}
const ::protocol::TransactionExtention&
TransactionApprovedList::_Internal::transaction(const TransactionApprovedList* msg) {
  return *msg->transaction_;
}
TransactionApprovedList::TransactionApprovedList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  approved_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionApprovedList)
}
TransactionApprovedList::TransactionApprovedList(const TransactionApprovedList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      approved_list_(from.approved_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::protocol::TransactionApprovedList_Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::protocol::TransactionExtention(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionApprovedList)
}

inline void TransactionApprovedList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&result_)) + sizeof(transaction_));
}

TransactionApprovedList::~TransactionApprovedList() {
  // @@protoc_insertion_point(destructor:protocol.TransactionApprovedList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionApprovedList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionApprovedList::ArenaDtor(void* object) {
  TransactionApprovedList* _this = reinterpret_cast< TransactionApprovedList* >(object);
  (void)_this;
}
void TransactionApprovedList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionApprovedList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionApprovedList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionApprovedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approved_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionApprovedList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes approved_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_approved_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionApprovedList.Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionExtention transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionApprovedList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionApprovedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes approved_list = 2;
  for (int i = 0, n = this->_internal_approved_list_size(); i < n; i++) {
    const auto& s = this->_internal_approved_list(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .protocol.TransactionApprovedList.Result result = 4;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result(this), target, stream);
  }

  // .protocol.TransactionExtention transaction = 5;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionApprovedList)
  return target;
}

size_t TransactionApprovedList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionApprovedList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes approved_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(approved_list_.size());
  for (int i = 0, n = approved_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      approved_list_.Get(i));
  }

  // .protocol.TransactionApprovedList.Result result = 4;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .protocol.TransactionExtention transaction = 5;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionApprovedList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionApprovedList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionApprovedList::GetClassData() const { return &_class_data_; }

void TransactionApprovedList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionApprovedList *>(to)->MergeFrom(
      static_cast<const TransactionApprovedList &>(from));
}


void TransactionApprovedList::MergeFrom(const TransactionApprovedList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionApprovedList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  approved_list_.MergeFrom(from.approved_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::protocol::TransactionApprovedList_Result::MergeFrom(from._internal_result());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::protocol::TransactionExtention::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionApprovedList::CopyFrom(const TransactionApprovedList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionApprovedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionApprovedList::IsInitialized() const {
  return true;
}

void TransactionApprovedList::InternalSwap(TransactionApprovedList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  approved_list_.InternalSwap(&other->approved_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionApprovedList, transaction_)
      + sizeof(TransactionApprovedList::transaction_)
      - PROTOBUF_FIELD_OFFSET(TransactionApprovedList, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionApprovedList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[42]);
}

// ===================================================================

class IvkDecryptParameters::_Internal {
 public:
};

IvkDecryptParameters::IvkDecryptParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IvkDecryptParameters)
}
IvkDecryptParameters::IvkDecryptParameters(const IvkDecryptParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ivk().empty()) {
    ivk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ivk(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_block_index_, &from.start_block_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.IvkDecryptParameters)
}

inline void IvkDecryptParameters::SharedCtor() {
ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_block_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
}

IvkDecryptParameters::~IvkDecryptParameters() {
  // @@protoc_insertion_point(destructor:protocol.IvkDecryptParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IvkDecryptParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ivk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IvkDecryptParameters::ArenaDtor(void* object) {
  IvkDecryptParameters* _this = reinterpret_cast< IvkDecryptParameters* >(object);
  (void)_this;
}
void IvkDecryptParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IvkDecryptParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IvkDecryptParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IvkDecryptParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ivk_.ClearToEmpty();
  ::memset(&start_block_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_block_index_) -
      reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IvkDecryptParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_block_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_block_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ivk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ivk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IvkDecryptParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IvkDecryptParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_block_index(), target);
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_block_index(), target);
  }

  // bytes ivk = 3;
  if (!this->_internal_ivk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ivk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IvkDecryptParameters)
  return target;
}

size_t IvkDecryptParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IvkDecryptParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ivk = 3;
  if (!this->_internal_ivk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ivk());
  }

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_block_index());
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_block_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IvkDecryptParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IvkDecryptParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IvkDecryptParameters::GetClassData() const { return &_class_data_; }

void IvkDecryptParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IvkDecryptParameters *>(to)->MergeFrom(
      static_cast<const IvkDecryptParameters &>(from));
}


void IvkDecryptParameters::MergeFrom(const IvkDecryptParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IvkDecryptParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ivk().empty()) {
    _internal_set_ivk(from._internal_ivk());
  }
  if (from._internal_start_block_index() != 0) {
    _internal_set_start_block_index(from._internal_start_block_index());
  }
  if (from._internal_end_block_index() != 0) {
    _internal_set_end_block_index(from._internal_end_block_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IvkDecryptParameters::CopyFrom(const IvkDecryptParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IvkDecryptParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IvkDecryptParameters::IsInitialized() const {
  return true;
}

void IvkDecryptParameters::InternalSwap(IvkDecryptParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ivk_, GetArenaForAllocation(),
      &other->ivk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IvkDecryptParameters, end_block_index_)
      + sizeof(IvkDecryptParameters::end_block_index_)
      - PROTOBUF_FIELD_OFFSET(IvkDecryptParameters, start_block_index_)>(
          reinterpret_cast<char*>(&start_block_index_),
          reinterpret_cast<char*>(&other->start_block_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IvkDecryptParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[43]);
}

// ===================================================================

class IvkDecryptAndMarkParameters::_Internal {
 public:
};

IvkDecryptAndMarkParameters::IvkDecryptAndMarkParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IvkDecryptAndMarkParameters)
}
IvkDecryptAndMarkParameters::IvkDecryptAndMarkParameters(const IvkDecryptAndMarkParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ivk().empty()) {
    ivk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ivk(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_block_index_, &from.start_block_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.IvkDecryptAndMarkParameters)
}

inline void IvkDecryptAndMarkParameters::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_block_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
}

IvkDecryptAndMarkParameters::~IvkDecryptAndMarkParameters() {
  // @@protoc_insertion_point(destructor:protocol.IvkDecryptAndMarkParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IvkDecryptAndMarkParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ivk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IvkDecryptAndMarkParameters::ArenaDtor(void* object) {
  IvkDecryptAndMarkParameters* _this = reinterpret_cast< IvkDecryptAndMarkParameters* >(object);
  (void)_this;
}
void IvkDecryptAndMarkParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IvkDecryptAndMarkParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IvkDecryptAndMarkParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IvkDecryptAndMarkParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  ivk_.ClearToEmpty();
  ::memset(&start_block_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_block_index_) -
      reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IvkDecryptAndMarkParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_block_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_block_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ivk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ivk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IvkDecryptAndMarkParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IvkDecryptAndMarkParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_block_index(), target);
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_block_index(), target);
  }

  // bytes ak = 3;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ak(), target);
  }

  // bytes nk = 4;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nk(), target);
  }

  // bytes ivk = 5;
  if (!this->_internal_ivk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ivk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IvkDecryptAndMarkParameters)
  return target;
}

size_t IvkDecryptAndMarkParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IvkDecryptAndMarkParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ak = 3;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 4;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // bytes ivk = 5;
  if (!this->_internal_ivk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ivk());
  }

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_block_index());
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_block_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IvkDecryptAndMarkParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IvkDecryptAndMarkParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IvkDecryptAndMarkParameters::GetClassData() const { return &_class_data_; }

void IvkDecryptAndMarkParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IvkDecryptAndMarkParameters *>(to)->MergeFrom(
      static_cast<const IvkDecryptAndMarkParameters &>(from));
}


void IvkDecryptAndMarkParameters::MergeFrom(const IvkDecryptAndMarkParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IvkDecryptAndMarkParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (!from._internal_ivk().empty()) {
    _internal_set_ivk(from._internal_ivk());
  }
  if (from._internal_start_block_index() != 0) {
    _internal_set_start_block_index(from._internal_start_block_index());
  }
  if (from._internal_end_block_index() != 0) {
    _internal_set_end_block_index(from._internal_end_block_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IvkDecryptAndMarkParameters::CopyFrom(const IvkDecryptAndMarkParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IvkDecryptAndMarkParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IvkDecryptAndMarkParameters::IsInitialized() const {
  return true;
}

void IvkDecryptAndMarkParameters::InternalSwap(IvkDecryptAndMarkParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ivk_, GetArenaForAllocation(),
      &other->ivk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IvkDecryptAndMarkParameters, end_block_index_)
      + sizeof(IvkDecryptAndMarkParameters::end_block_index_)
      - PROTOBUF_FIELD_OFFSET(IvkDecryptAndMarkParameters, start_block_index_)>(
          reinterpret_cast<char*>(&start_block_index_),
          reinterpret_cast<char*>(&other->start_block_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IvkDecryptAndMarkParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[44]);
}

// ===================================================================

class OvkDecryptParameters::_Internal {
 public:
};

OvkDecryptParameters::OvkDecryptParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.OvkDecryptParameters)
}
OvkDecryptParameters::OvkDecryptParameters(const OvkDecryptParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_block_index_, &from.start_block_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.OvkDecryptParameters)
}

inline void OvkDecryptParameters::SharedCtor() {
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_block_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
}

OvkDecryptParameters::~OvkDecryptParameters() {
  // @@protoc_insertion_point(destructor:protocol.OvkDecryptParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OvkDecryptParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OvkDecryptParameters::ArenaDtor(void* object) {
  OvkDecryptParameters* _this = reinterpret_cast< OvkDecryptParameters* >(object);
  (void)_this;
}
void OvkDecryptParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OvkDecryptParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OvkDecryptParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OvkDecryptParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ovk_.ClearToEmpty();
  ::memset(&start_block_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_block_index_) -
      reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OvkDecryptParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_block_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_block_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OvkDecryptParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OvkDecryptParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_block_index(), target);
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_block_index(), target);
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ovk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OvkDecryptParameters)
  return target;
}

size_t OvkDecryptParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OvkDecryptParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_block_index());
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_block_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OvkDecryptParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OvkDecryptParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OvkDecryptParameters::GetClassData() const { return &_class_data_; }

void OvkDecryptParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OvkDecryptParameters *>(to)->MergeFrom(
      static_cast<const OvkDecryptParameters &>(from));
}


void OvkDecryptParameters::MergeFrom(const OvkDecryptParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OvkDecryptParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (from._internal_start_block_index() != 0) {
    _internal_set_start_block_index(from._internal_start_block_index());
  }
  if (from._internal_end_block_index() != 0) {
    _internal_set_end_block_index(from._internal_end_block_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OvkDecryptParameters::CopyFrom(const OvkDecryptParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OvkDecryptParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OvkDecryptParameters::IsInitialized() const {
  return true;
}

void OvkDecryptParameters::InternalSwap(OvkDecryptParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OvkDecryptParameters, end_block_index_)
      + sizeof(OvkDecryptParameters::end_block_index_)
      - PROTOBUF_FIELD_OFFSET(OvkDecryptParameters, start_block_index_)>(
          reinterpret_cast<char*>(&start_block_index_),
          reinterpret_cast<char*>(&other->start_block_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OvkDecryptParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[45]);
}

// ===================================================================

class DecryptNotes_NoteTx::_Internal {
 public:
  static const ::protocol::Note& note(const DecryptNotes_NoteTx* msg);
};

const ::protocol::Note&
DecryptNotes_NoteTx::_Internal::note(const DecryptNotes_NoteTx* msg) {
  return *msg->note_;
}
DecryptNotes_NoteTx::DecryptNotes_NoteTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotes.NoteTx)
}
DecryptNotes_NoteTx::DecryptNotes_NoteTx(const DecryptNotes_NoteTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotes.NoteTx)
}

inline void DecryptNotes_NoteTx::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&note_)) + sizeof(index_));
}

DecryptNotes_NoteTx::~DecryptNotes_NoteTx() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotes.NoteTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotes_NoteTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void DecryptNotes_NoteTx::ArenaDtor(void* object) {
  DecryptNotes_NoteTx* _this = reinterpret_cast< DecryptNotes_NoteTx* >(object);
  (void)_this;
}
void DecryptNotes_NoteTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotes_NoteTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotes_NoteTx::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotes.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotes_NoteTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotes_NoteTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotes.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txid(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotes.NoteTx)
  return target;
}

size_t DecryptNotes_NoteTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotes.NoteTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotes_NoteTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotes_NoteTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotes_NoteTx::GetClassData() const { return &_class_data_; }

void DecryptNotes_NoteTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotes_NoteTx *>(to)->MergeFrom(
      static_cast<const DecryptNotes_NoteTx &>(from));
}


void DecryptNotes_NoteTx::MergeFrom(const DecryptNotes_NoteTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotes.NoteTx)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotes_NoteTx::CopyFrom(const DecryptNotes_NoteTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotes.NoteTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotes_NoteTx::IsInitialized() const {
  return true;
}

void DecryptNotes_NoteTx::InternalSwap(DecryptNotes_NoteTx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecryptNotes_NoteTx, index_)
      + sizeof(DecryptNotes_NoteTx::index_)
      - PROTOBUF_FIELD_OFFSET(DecryptNotes_NoteTx, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotes_NoteTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[46]);
}

// ===================================================================

class DecryptNotes::_Internal {
 public:
};

DecryptNotes::DecryptNotes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notetxs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotes)
}
DecryptNotes::DecryptNotes(const DecryptNotes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notetxs_(from.notetxs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotes)
}

inline void DecryptNotes::SharedCtor() {
}

DecryptNotes::~DecryptNotes() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecryptNotes::ArenaDtor(void* object) {
  DecryptNotes* _this = reinterpret_cast< DecryptNotes* >(object);
  (void)_this;
}
void DecryptNotes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotes::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notetxs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.DecryptNotes.NoteTx noteTxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notetxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotes.NoteTx noteTxs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notetxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notetxs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotes)
  return target;
}

size_t DecryptNotes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotes.NoteTx noteTxs = 1;
  total_size += 1UL * this->_internal_notetxs_size();
  for (const auto& msg : this->notetxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotes::GetClassData() const { return &_class_data_; }

void DecryptNotes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotes *>(to)->MergeFrom(
      static_cast<const DecryptNotes &>(from));
}


void DecryptNotes::MergeFrom(const DecryptNotes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notetxs_.MergeFrom(from.notetxs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotes::CopyFrom(const DecryptNotes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotes::IsInitialized() const {
  return true;
}

void DecryptNotes::InternalSwap(DecryptNotes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notetxs_.InternalSwap(&other->notetxs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[47]);
}

// ===================================================================

class DecryptNotesMarked_NoteTx::_Internal {
 public:
  static const ::protocol::Note& note(const DecryptNotesMarked_NoteTx* msg);
};

const ::protocol::Note&
DecryptNotesMarked_NoteTx::_Internal::note(const DecryptNotesMarked_NoteTx* msg) {
  return *msg->note_;
}
DecryptNotesMarked_NoteTx::DecryptNotesMarked_NoteTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotesMarked.NoteTx)
}
DecryptNotesMarked_NoteTx::DecryptNotesMarked_NoteTx(const DecryptNotesMarked_NoteTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_spend_) -
    reinterpret_cast<char*>(&index_)) + sizeof(is_spend_));
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotesMarked.NoteTx)
}

inline void DecryptNotesMarked_NoteTx::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_spend_) -
    reinterpret_cast<char*>(&note_)) + sizeof(is_spend_));
}

DecryptNotesMarked_NoteTx::~DecryptNotesMarked_NoteTx() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotesMarked.NoteTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotesMarked_NoteTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void DecryptNotesMarked_NoteTx::ArenaDtor(void* object) {
  DecryptNotesMarked_NoteTx* _this = reinterpret_cast< DecryptNotesMarked_NoteTx* >(object);
  (void)_this;
}
void DecryptNotesMarked_NoteTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotesMarked_NoteTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotesMarked_NoteTx::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotesMarked.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_spend_) -
      reinterpret_cast<char*>(&index_)) + sizeof(is_spend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotesMarked_NoteTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_spend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_spend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotesMarked_NoteTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotesMarked.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txid(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // bool is_spend = 4;
  if (this->_internal_is_spend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_spend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotesMarked.NoteTx)
  return target;
}

size_t DecryptNotesMarked_NoteTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotesMarked.NoteTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid = 2;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // bool is_spend = 4;
  if (this->_internal_is_spend() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotesMarked_NoteTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotesMarked_NoteTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotesMarked_NoteTx::GetClassData() const { return &_class_data_; }

void DecryptNotesMarked_NoteTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotesMarked_NoteTx *>(to)->MergeFrom(
      static_cast<const DecryptNotesMarked_NoteTx &>(from));
}


void DecryptNotesMarked_NoteTx::MergeFrom(const DecryptNotesMarked_NoteTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotesMarked.NoteTx)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_is_spend() != 0) {
    _internal_set_is_spend(from._internal_is_spend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotesMarked_NoteTx::CopyFrom(const DecryptNotesMarked_NoteTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotesMarked.NoteTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotesMarked_NoteTx::IsInitialized() const {
  return true;
}

void DecryptNotesMarked_NoteTx::InternalSwap(DecryptNotesMarked_NoteTx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecryptNotesMarked_NoteTx, is_spend_)
      + sizeof(DecryptNotesMarked_NoteTx::is_spend_)
      - PROTOBUF_FIELD_OFFSET(DecryptNotesMarked_NoteTx, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotesMarked_NoteTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[48]);
}

// ===================================================================

class DecryptNotesMarked::_Internal {
 public:
};

DecryptNotesMarked::DecryptNotesMarked(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notetxs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotesMarked)
}
DecryptNotesMarked::DecryptNotesMarked(const DecryptNotesMarked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notetxs_(from.notetxs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotesMarked)
}

inline void DecryptNotesMarked::SharedCtor() {
}

DecryptNotesMarked::~DecryptNotesMarked() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotesMarked)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotesMarked::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecryptNotesMarked::ArenaDtor(void* object) {
  DecryptNotesMarked* _this = reinterpret_cast< DecryptNotesMarked* >(object);
  (void)_this;
}
void DecryptNotesMarked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotesMarked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotesMarked::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotesMarked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notetxs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotesMarked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.DecryptNotesMarked.NoteTx noteTxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notetxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotesMarked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotesMarked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotesMarked.NoteTx noteTxs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notetxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notetxs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotesMarked)
  return target;
}

size_t DecryptNotesMarked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotesMarked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotesMarked.NoteTx noteTxs = 1;
  total_size += 1UL * this->_internal_notetxs_size();
  for (const auto& msg : this->notetxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotesMarked::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotesMarked::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotesMarked::GetClassData() const { return &_class_data_; }

void DecryptNotesMarked::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotesMarked *>(to)->MergeFrom(
      static_cast<const DecryptNotesMarked &>(from));
}


void DecryptNotesMarked::MergeFrom(const DecryptNotesMarked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotesMarked)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notetxs_.MergeFrom(from.notetxs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotesMarked::CopyFrom(const DecryptNotesMarked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotesMarked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotesMarked::IsInitialized() const {
  return true;
}

void DecryptNotesMarked::InternalSwap(DecryptNotesMarked* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notetxs_.InternalSwap(&other->notetxs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotesMarked::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[49]);
}

// ===================================================================

class Note::_Internal {
 public:
};

Note::Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Note)
}
Note::Note(const Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_address().empty()) {
    payment_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payment_address(), 
      GetArenaForAllocation());
  }
  rcm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rcm().empty()) {
    rcm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rcm(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protocol.Note)
}

inline void Note::SharedCtor() {
payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rcm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = int64_t{0};
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:protocol.Note)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Note::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payment_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rcm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Note::ArenaDtor(void* object) {
  Note* _this = reinterpret_cast< Note* >(object);
  (void)_this;
}
void Note::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_address_.ClearToEmpty();
  rcm_.ClearToEmpty();
  memo_.ClearToEmpty();
  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Note::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Note.payment_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rcm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rcm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes memo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Note::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // string payment_address = 2;
  if (!this->_internal_payment_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_address().data(), static_cast<int>(this->_internal_payment_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Note.payment_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_address(), target);
  }

  // bytes rcm = 3;
  if (!this->_internal_rcm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rcm(), target);
  }

  // bytes memo = 4;
  if (!this->_internal_memo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Note)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payment_address = 2;
  if (!this->_internal_payment_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_address());
  }

  // bytes rcm = 3;
  if (!this->_internal_rcm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rcm());
  }

  // bytes memo = 4;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memo());
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Note::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Note::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Note::GetClassData() const { return &_class_data_; }

void Note::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Note *>(to)->MergeFrom(
      static_cast<const Note &>(from));
}


void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Note)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payment_address().empty()) {
    _internal_set_payment_address(from._internal_payment_address());
  }
  if (!from._internal_rcm().empty()) {
    _internal_set_rcm(from._internal_rcm());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::InternalSwap(Note* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payment_address_, GetArenaForAllocation(),
      &other->payment_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rcm_, GetArenaForAllocation(),
      &other->rcm_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, GetArenaForAllocation(),
      &other->memo_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Note::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[50]);
}

// ===================================================================

class SpendNote::_Internal {
 public:
  static const ::protocol::Note& note(const SpendNote* msg);
  static const ::protocol::IncrementalMerkleVoucher& voucher(const SpendNote* msg);
};

const ::protocol::Note&
SpendNote::_Internal::note(const SpendNote* msg) {
  return *msg->note_;
}
const ::protocol::IncrementalMerkleVoucher&
SpendNote::_Internal::voucher(const SpendNote* msg) {
  return *msg->voucher_;
}
void SpendNote::clear_voucher() {
  if (GetArenaForAllocation() == nullptr && voucher_ != nullptr) {
    delete voucher_;
  }
  voucher_ = nullptr;
}
SpendNote::SpendNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SpendNote)
}
SpendNote::SpendNote(const SpendNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alpha().empty()) {
    alpha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alpha(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  if (from._internal_has_voucher()) {
    voucher_ = new ::protocol::IncrementalMerkleVoucher(*from.voucher_);
  } else {
    voucher_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SpendNote)
}

inline void SpendNote::SharedCtor() {
alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voucher_) -
    reinterpret_cast<char*>(&note_)) + sizeof(voucher_));
}

SpendNote::~SpendNote() {
  // @@protoc_insertion_point(destructor:protocol.SpendNote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpendNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alpha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
  if (this != internal_default_instance()) delete voucher_;
}

void SpendNote::ArenaDtor(void* object) {
  SpendNote* _this = reinterpret_cast< SpendNote* >(object);
  (void)_this;
}
void SpendNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpendNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpendNote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_.ClearToEmpty();
  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  if (GetArenaForAllocation() == nullptr && voucher_ != nullptr) {
    delete voucher_;
  }
  voucher_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpendNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alpha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.IncrementalMerkleVoucher voucher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_voucher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 3;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::note(this), target, stream);
  }

  // bytes alpha = 4;
  if (!this->_internal_alpha().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_alpha(), target);
  }

  // .protocol.IncrementalMerkleVoucher voucher = 5;
  if (this->_internal_has_voucher()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::voucher(this), target, stream);
  }

  // bytes path = 6;
  if (!this->_internal_path().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendNote)
  return target;
}

size_t SpendNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes alpha = 4;
  if (!this->_internal_alpha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alpha());
  }

  // bytes path = 6;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());
  }

  // .protocol.Note note = 3;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // .protocol.IncrementalMerkleVoucher voucher = 5;
  if (this->_internal_has_voucher()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voucher_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpendNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpendNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpendNote::GetClassData() const { return &_class_data_; }

void SpendNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpendNote *>(to)->MergeFrom(
      static_cast<const SpendNote &>(from));
}


void SpendNote::MergeFrom(const SpendNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendNote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alpha().empty()) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_has_voucher()) {
    _internal_mutable_voucher()->::protocol::IncrementalMerkleVoucher::MergeFrom(from._internal_voucher());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpendNote::CopyFrom(const SpendNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendNote::IsInitialized() const {
  return true;
}

void SpendNote::InternalSwap(SpendNote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alpha_, GetArenaForAllocation(),
      &other->alpha_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpendNote, voucher_)
      + sizeof(SpendNote::voucher_)
      - PROTOBUF_FIELD_OFFSET(SpendNote, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendNote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[51]);
}

// ===================================================================

class ReceiveNote::_Internal {
 public:
  static const ::protocol::Note& note(const ReceiveNote* msg);
};

const ::protocol::Note&
ReceiveNote::_Internal::note(const ReceiveNote* msg) {
  return *msg->note_;
}
ReceiveNote::ReceiveNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ReceiveNote)
}
ReceiveNote::ReceiveNote(const ReceiveNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ReceiveNote)
}

inline void ReceiveNote::SharedCtor() {
note_ = nullptr;
}

ReceiveNote::~ReceiveNote() {
  // @@protoc_insertion_point(destructor:protocol.ReceiveNote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReceiveNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete note_;
}

void ReceiveNote::ArenaDtor(void* object) {
  ReceiveNote* _this = reinterpret_cast< ReceiveNote* >(object);
  (void)_this;
}
void ReceiveNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceiveNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReceiveNote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ReceiveNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ReceiveNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ReceiveNote)
  return target;
}

size_t ReceiveNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ReceiveNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReceiveNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveNote::GetClassData() const { return &_class_data_; }

void ReceiveNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReceiveNote *>(to)->MergeFrom(
      static_cast<const ReceiveNote &>(from));
}


void ReceiveNote::MergeFrom(const ReceiveNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ReceiveNote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveNote::CopyFrom(const ReceiveNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ReceiveNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveNote::IsInitialized() const {
  return true;
}

void ReceiveNote::InternalSwap(ReceiveNote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(note_, other->note_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveNote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[52]);
}

// ===================================================================

class PrivateParameters::_Internal {
 public:
};

PrivateParameters::PrivateParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shielded_spends_(arena),
  shielded_receives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PrivateParameters)
}
PrivateParameters::PrivateParameters(const PrivateParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shielded_spends_(from.shielded_spends_),
      shielded_receives_(from.shielded_receives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_from_address().empty()) {
    transparent_from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_from_address(), 
      GetArenaForAllocation());
  }
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_amount_, &from.from_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:protocol.PrivateParameters)
}

inline void PrivateParameters::SharedCtor() {
transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
}

PrivateParameters::~PrivateParameters() {
  // @@protoc_insertion_point(destructor:protocol.PrivateParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrivateParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transparent_from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivateParameters::ArenaDtor(void* object) {
  PrivateParameters* _this = reinterpret_cast< PrivateParameters* >(object);
  (void)_this;
}
void PrivateParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PrivateParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shielded_spends_.Clear();
  shielded_receives_.Clear();
  transparent_from_address_.ClearToEmpty();
  ask_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  ::memset(&from_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transparent_from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transparent_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          from_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendNote shielded_spends = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_spends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveNote shielded_receives = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_receives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          to_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PrivateParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transparent_from_address(), target);
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ask(), target);
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nsk(), target);
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ovk(), target);
  }

  // int64 from_amount = 5;
  if (this->_internal_from_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_from_amount(), target);
  }

  // repeated .protocol.SpendNote shielded_spends = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_spends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_shielded_spends(i), target, stream);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_receives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_shielded_receives(i), target, stream);
  }

  // bytes transparent_to_address = 8;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_transparent_to_address(), target);
  }

  // int64 to_amount = 9;
  if (this->_internal_to_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_to_amount(), target);
  }

  // int64 timeout = 10;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PrivateParameters)
  return target;
}

size_t PrivateParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PrivateParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendNote shielded_spends = 6;
  total_size += 1UL * this->_internal_shielded_spends_size();
  for (const auto& msg : this->shielded_spends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 7;
  total_size += 1UL * this->_internal_shielded_receives_size();
  for (const auto& msg : this->shielded_receives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_from_address());
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // bytes transparent_to_address = 8;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // int64 from_amount = 5;
  if (this->_internal_from_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_amount());
  }

  // int64 to_amount = 9;
  if (this->_internal_to_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_amount());
  }

  // int64 timeout = 10;
  if (this->_internal_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrivateParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateParameters::GetClassData() const { return &_class_data_; }

void PrivateParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrivateParameters *>(to)->MergeFrom(
      static_cast<const PrivateParameters &>(from));
}


void PrivateParameters::MergeFrom(const PrivateParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PrivateParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shielded_spends_.MergeFrom(from.shielded_spends_);
  shielded_receives_.MergeFrom(from.shielded_receives_);
  if (!from._internal_transparent_from_address().empty()) {
    _internal_set_transparent_from_address(from._internal_transparent_from_address());
  }
  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (from._internal_from_amount() != 0) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (from._internal_to_amount() != 0) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateParameters::CopyFrom(const PrivateParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PrivateParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateParameters::IsInitialized() const {
  return true;
}

void PrivateParameters::InternalSwap(PrivateParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shielded_spends_.InternalSwap(&other->shielded_spends_);
  shielded_receives_.InternalSwap(&other->shielded_receives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_from_address_, GetArenaForAllocation(),
      &other->transparent_from_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, GetArenaForAllocation(),
      &other->ask_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateParameters, timeout_)
      + sizeof(PrivateParameters::timeout_)
      - PROTOBUF_FIELD_OFFSET(PrivateParameters, from_amount_)>(
          reinterpret_cast<char*>(&from_amount_),
          reinterpret_cast<char*>(&other->from_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[53]);
}

// ===================================================================

class PrivateParametersWithoutAsk::_Internal {
 public:
};

PrivateParametersWithoutAsk::PrivateParametersWithoutAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shielded_spends_(arena),
  shielded_receives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PrivateParametersWithoutAsk)
}
PrivateParametersWithoutAsk::PrivateParametersWithoutAsk(const PrivateParametersWithoutAsk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shielded_spends_(from.shielded_spends_),
      shielded_receives_(from.shielded_receives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_from_address().empty()) {
    transparent_from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_from_address(), 
      GetArenaForAllocation());
  }
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_amount_, &from.from_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:protocol.PrivateParametersWithoutAsk)
}

inline void PrivateParametersWithoutAsk::SharedCtor() {
transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
}

PrivateParametersWithoutAsk::~PrivateParametersWithoutAsk() {
  // @@protoc_insertion_point(destructor:protocol.PrivateParametersWithoutAsk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrivateParametersWithoutAsk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transparent_from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivateParametersWithoutAsk::ArenaDtor(void* object) {
  PrivateParametersWithoutAsk* _this = reinterpret_cast< PrivateParametersWithoutAsk* >(object);
  (void)_this;
}
void PrivateParametersWithoutAsk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateParametersWithoutAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateParametersWithoutAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PrivateParametersWithoutAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shielded_spends_.Clear();
  shielded_receives_.Clear();
  transparent_from_address_.ClearToEmpty();
  ak_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  ::memset(&from_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&from_amount_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateParametersWithoutAsk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transparent_from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transparent_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          from_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendNote shielded_spends = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_spends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveNote shielded_receives = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_receives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          to_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateParametersWithoutAsk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PrivateParametersWithoutAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transparent_from_address(), target);
  }

  // bytes ak = 2;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ak(), target);
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nsk(), target);
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ovk(), target);
  }

  // int64 from_amount = 5;
  if (this->_internal_from_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_from_amount(), target);
  }

  // repeated .protocol.SpendNote shielded_spends = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_spends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_shielded_spends(i), target, stream);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_receives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_shielded_receives(i), target, stream);
  }

  // bytes transparent_to_address = 8;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_transparent_to_address(), target);
  }

  // int64 to_amount = 9;
  if (this->_internal_to_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_to_amount(), target);
  }

  // int64 timeout = 10;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PrivateParametersWithoutAsk)
  return target;
}

size_t PrivateParametersWithoutAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PrivateParametersWithoutAsk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendNote shielded_spends = 6;
  total_size += 1UL * this->_internal_shielded_spends_size();
  for (const auto& msg : this->shielded_spends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 7;
  total_size += 1UL * this->_internal_shielded_receives_size();
  for (const auto& msg : this->shielded_receives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_from_address());
  }

  // bytes ak = 2;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // bytes transparent_to_address = 8;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // int64 from_amount = 5;
  if (this->_internal_from_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_amount());
  }

  // int64 to_amount = 9;
  if (this->_internal_to_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_amount());
  }

  // int64 timeout = 10;
  if (this->_internal_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateParametersWithoutAsk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrivateParametersWithoutAsk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateParametersWithoutAsk::GetClassData() const { return &_class_data_; }

void PrivateParametersWithoutAsk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrivateParametersWithoutAsk *>(to)->MergeFrom(
      static_cast<const PrivateParametersWithoutAsk &>(from));
}


void PrivateParametersWithoutAsk::MergeFrom(const PrivateParametersWithoutAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PrivateParametersWithoutAsk)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shielded_spends_.MergeFrom(from.shielded_spends_);
  shielded_receives_.MergeFrom(from.shielded_receives_);
  if (!from._internal_transparent_from_address().empty()) {
    _internal_set_transparent_from_address(from._internal_transparent_from_address());
  }
  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (from._internal_from_amount() != 0) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (from._internal_to_amount() != 0) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateParametersWithoutAsk::CopyFrom(const PrivateParametersWithoutAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PrivateParametersWithoutAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateParametersWithoutAsk::IsInitialized() const {
  return true;
}

void PrivateParametersWithoutAsk::InternalSwap(PrivateParametersWithoutAsk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shielded_spends_.InternalSwap(&other->shielded_spends_);
  shielded_receives_.InternalSwap(&other->shielded_receives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_from_address_, GetArenaForAllocation(),
      &other->transparent_from_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateParametersWithoutAsk, timeout_)
      + sizeof(PrivateParametersWithoutAsk::timeout_)
      - PROTOBUF_FIELD_OFFSET(PrivateParametersWithoutAsk, from_amount_)>(
          reinterpret_cast<char*>(&from_amount_),
          reinterpret_cast<char*>(&other->from_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateParametersWithoutAsk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[54]);
}

// ===================================================================

class SpendAuthSigParameters::_Internal {
 public:
};

SpendAuthSigParameters::SpendAuthSigParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SpendAuthSigParameters)
}
SpendAuthSigParameters::SpendAuthSigParameters(const SpendAuthSigParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(), 
      GetArenaForAllocation());
  }
  alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alpha().empty()) {
    alpha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alpha(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SpendAuthSigParameters)
}

inline void SpendAuthSigParameters::SharedCtor() {
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpendAuthSigParameters::~SpendAuthSigParameters() {
  // @@protoc_insertion_point(destructor:protocol.SpendAuthSigParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpendAuthSigParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alpha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpendAuthSigParameters::ArenaDtor(void* object) {
  SpendAuthSigParameters* _this = reinterpret_cast< SpendAuthSigParameters* >(object);
  (void)_this;
}
void SpendAuthSigParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpendAuthSigParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpendAuthSigParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendAuthSigParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_.ClearToEmpty();
  tx_hash_.ClearToEmpty();
  alpha_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpendAuthSigParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alpha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendAuthSigParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendAuthSigParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ask(), target);
  }

  // bytes tx_hash = 2;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_hash(), target);
  }

  // bytes alpha = 3;
  if (!this->_internal_alpha().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendAuthSigParameters)
  return target;
}

size_t SpendAuthSigParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendAuthSigParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes tx_hash = 2;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes alpha = 3;
  if (!this->_internal_alpha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alpha());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpendAuthSigParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpendAuthSigParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpendAuthSigParameters::GetClassData() const { return &_class_data_; }

void SpendAuthSigParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpendAuthSigParameters *>(to)->MergeFrom(
      static_cast<const SpendAuthSigParameters &>(from));
}


void SpendAuthSigParameters::MergeFrom(const SpendAuthSigParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendAuthSigParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_tx_hash().empty()) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_alpha().empty()) {
    _internal_set_alpha(from._internal_alpha());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpendAuthSigParameters::CopyFrom(const SpendAuthSigParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendAuthSigParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendAuthSigParameters::IsInitialized() const {
  return true;
}

void SpendAuthSigParameters::InternalSwap(SpendAuthSigParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, GetArenaForAllocation(),
      &other->ask_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_hash_, GetArenaForAllocation(),
      &other->tx_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alpha_, GetArenaForAllocation(),
      &other->alpha_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendAuthSigParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[55]);
}

// ===================================================================

class NfParameters::_Internal {
 public:
  static const ::protocol::Note& note(const NfParameters* msg);
  static const ::protocol::IncrementalMerkleVoucher& voucher(const NfParameters* msg);
};

const ::protocol::Note&
NfParameters::_Internal::note(const NfParameters* msg) {
  return *msg->note_;
}
const ::protocol::IncrementalMerkleVoucher&
NfParameters::_Internal::voucher(const NfParameters* msg) {
  return *msg->voucher_;
}
void NfParameters::clear_voucher() {
  if (GetArenaForAllocation() == nullptr && voucher_ != nullptr) {
    delete voucher_;
  }
  voucher_ = nullptr;
}
NfParameters::NfParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NfParameters)
}
NfParameters::NfParameters(const NfParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  if (from._internal_has_voucher()) {
    voucher_ = new ::protocol::IncrementalMerkleVoucher(*from.voucher_);
  } else {
    voucher_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.NfParameters)
}

inline void NfParameters::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voucher_) -
    reinterpret_cast<char*>(&note_)) + sizeof(voucher_));
}

NfParameters::~NfParameters() {
  // @@protoc_insertion_point(destructor:protocol.NfParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NfParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
  if (this != internal_default_instance()) delete voucher_;
}

void NfParameters::ArenaDtor(void* object) {
  NfParameters* _this = reinterpret_cast< NfParameters* >(object);
  (void)_this;
}
void NfParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NfParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NfParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NfParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  if (GetArenaForAllocation() == nullptr && voucher_ != nullptr) {
    delete voucher_;
  }
  voucher_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NfParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.IncrementalMerkleVoucher voucher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_voucher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NfParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NfParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // .protocol.IncrementalMerkleVoucher voucher = 2;
  if (this->_internal_has_voucher()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::voucher(this), target, stream);
  }

  // bytes ak = 3;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ak(), target);
  }

  // bytes nk = 4;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NfParameters)
  return target;
}

size_t NfParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NfParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ak = 3;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 4;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // .protocol.IncrementalMerkleVoucher voucher = 2;
  if (this->_internal_has_voucher()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voucher_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NfParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NfParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NfParameters::GetClassData() const { return &_class_data_; }

void NfParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NfParameters *>(to)->MergeFrom(
      static_cast<const NfParameters &>(from));
}


void NfParameters::MergeFrom(const NfParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NfParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_has_voucher()) {
    _internal_mutable_voucher()->::protocol::IncrementalMerkleVoucher::MergeFrom(from._internal_voucher());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NfParameters::CopyFrom(const NfParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NfParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NfParameters::IsInitialized() const {
  return true;
}

void NfParameters::InternalSwap(NfParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NfParameters, voucher_)
      + sizeof(NfParameters::voucher_)
      - PROTOBUF_FIELD_OFFSET(NfParameters, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NfParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[56]);
}

// ===================================================================

class ExpandedSpendingKeyMessage::_Internal {
 public:
};

ExpandedSpendingKeyMessage::ExpandedSpendingKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExpandedSpendingKeyMessage)
}
ExpandedSpendingKeyMessage::ExpandedSpendingKeyMessage(const ExpandedSpendingKeyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ExpandedSpendingKeyMessage)
}

inline void ExpandedSpendingKeyMessage::SharedCtor() {
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExpandedSpendingKeyMessage::~ExpandedSpendingKeyMessage() {
  // @@protoc_insertion_point(destructor:protocol.ExpandedSpendingKeyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpandedSpendingKeyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExpandedSpendingKeyMessage::ArenaDtor(void* object) {
  ExpandedSpendingKeyMessage* _this = reinterpret_cast< ExpandedSpendingKeyMessage* >(object);
  (void)_this;
}
void ExpandedSpendingKeyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedSpendingKeyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedSpendingKeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExpandedSpendingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedSpendingKeyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedSpendingKeyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExpandedSpendingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ask(), target);
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nsk(), target);
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ovk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExpandedSpendingKeyMessage)
  return target;
}

size_t ExpandedSpendingKeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExpandedSpendingKeyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedSpendingKeyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpandedSpendingKeyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedSpendingKeyMessage::GetClassData() const { return &_class_data_; }

void ExpandedSpendingKeyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExpandedSpendingKeyMessage *>(to)->MergeFrom(
      static_cast<const ExpandedSpendingKeyMessage &>(from));
}


void ExpandedSpendingKeyMessage::MergeFrom(const ExpandedSpendingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExpandedSpendingKeyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedSpendingKeyMessage::CopyFrom(const ExpandedSpendingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExpandedSpendingKeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedSpendingKeyMessage::IsInitialized() const {
  return true;
}

void ExpandedSpendingKeyMessage::InternalSwap(ExpandedSpendingKeyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, GetArenaForAllocation(),
      &other->ask_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedSpendingKeyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[57]);
}

// ===================================================================

class ViewingKeyMessage::_Internal {
 public:
};

ViewingKeyMessage::ViewingKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ViewingKeyMessage)
}
ViewingKeyMessage::ViewingKeyMessage(const ViewingKeyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ViewingKeyMessage)
}

inline void ViewingKeyMessage::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ViewingKeyMessage::~ViewingKeyMessage() {
  // @@protoc_insertion_point(destructor:protocol.ViewingKeyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewingKeyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewingKeyMessage::ArenaDtor(void* object) {
  ViewingKeyMessage* _this = reinterpret_cast< ViewingKeyMessage* >(object);
  (void)_this;
}
void ViewingKeyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewingKeyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewingKeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ViewingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewingKeyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ak = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewingKeyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ViewingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ak(), target);
  }

  // bytes nk = 2;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ViewingKeyMessage)
  return target;
}

size_t ViewingKeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ViewingKeyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 2;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewingKeyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewingKeyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewingKeyMessage::GetClassData() const { return &_class_data_; }

void ViewingKeyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ViewingKeyMessage *>(to)->MergeFrom(
      static_cast<const ViewingKeyMessage &>(from));
}


void ViewingKeyMessage::MergeFrom(const ViewingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ViewingKeyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewingKeyMessage::CopyFrom(const ViewingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ViewingKeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewingKeyMessage::IsInitialized() const {
  return true;
}

void ViewingKeyMessage::InternalSwap(ViewingKeyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewingKeyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[58]);
}

// ===================================================================

class IncomingViewingKeyMessage::_Internal {
 public:
};

IncomingViewingKeyMessage::IncomingViewingKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IncomingViewingKeyMessage)
}
IncomingViewingKeyMessage::IncomingViewingKeyMessage(const IncomingViewingKeyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ivk().empty()) {
    ivk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ivk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.IncomingViewingKeyMessage)
}

inline void IncomingViewingKeyMessage::SharedCtor() {
ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IncomingViewingKeyMessage::~IncomingViewingKeyMessage() {
  // @@protoc_insertion_point(destructor:protocol.IncomingViewingKeyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncomingViewingKeyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ivk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncomingViewingKeyMessage::ArenaDtor(void* object) {
  IncomingViewingKeyMessage* _this = reinterpret_cast< IncomingViewingKeyMessage* >(object);
  (void)_this;
}
void IncomingViewingKeyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncomingViewingKeyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncomingViewingKeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncomingViewingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ivk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncomingViewingKeyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ivk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ivk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncomingViewingKeyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncomingViewingKeyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ivk = 1;
  if (!this->_internal_ivk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ivk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncomingViewingKeyMessage)
  return target;
}

size_t IncomingViewingKeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncomingViewingKeyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ivk = 1;
  if (!this->_internal_ivk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ivk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncomingViewingKeyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncomingViewingKeyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncomingViewingKeyMessage::GetClassData() const { return &_class_data_; }

void IncomingViewingKeyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IncomingViewingKeyMessage *>(to)->MergeFrom(
      static_cast<const IncomingViewingKeyMessage &>(from));
}


void IncomingViewingKeyMessage::MergeFrom(const IncomingViewingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncomingViewingKeyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ivk().empty()) {
    _internal_set_ivk(from._internal_ivk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncomingViewingKeyMessage::CopyFrom(const IncomingViewingKeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncomingViewingKeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingViewingKeyMessage::IsInitialized() const {
  return true;
}

void IncomingViewingKeyMessage::InternalSwap(IncomingViewingKeyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ivk_, GetArenaForAllocation(),
      &other->ivk_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IncomingViewingKeyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[59]);
}

// ===================================================================

class DiversifierMessage::_Internal {
 public:
};

DiversifierMessage::DiversifierMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DiversifierMessage)
}
DiversifierMessage::DiversifierMessage(const DiversifierMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_d().empty()) {
    d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.DiversifierMessage)
}

inline void DiversifierMessage::SharedCtor() {
d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiversifierMessage::~DiversifierMessage() {
  // @@protoc_insertion_point(destructor:protocol.DiversifierMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiversifierMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiversifierMessage::ArenaDtor(void* object) {
  DiversifierMessage* _this = reinterpret_cast< DiversifierMessage* >(object);
  (void)_this;
}
void DiversifierMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiversifierMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiversifierMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DiversifierMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiversifierMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiversifierMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DiversifierMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes d = 1;
  if (!this->_internal_d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DiversifierMessage)
  return target;
}

size_t DiversifierMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DiversifierMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes d = 1;
  if (!this->_internal_d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_d());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiversifierMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiversifierMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiversifierMessage::GetClassData() const { return &_class_data_; }

void DiversifierMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DiversifierMessage *>(to)->MergeFrom(
      static_cast<const DiversifierMessage &>(from));
}


void DiversifierMessage::MergeFrom(const DiversifierMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DiversifierMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_d().empty()) {
    _internal_set_d(from._internal_d());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiversifierMessage::CopyFrom(const DiversifierMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DiversifierMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiversifierMessage::IsInitialized() const {
  return true;
}

void DiversifierMessage::InternalSwap(DiversifierMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &d_, GetArenaForAllocation(),
      &other->d_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiversifierMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[60]);
}

// ===================================================================

class IncomingViewingKeyDiversifierMessage::_Internal {
 public:
  static const ::protocol::IncomingViewingKeyMessage& ivk(const IncomingViewingKeyDiversifierMessage* msg);
  static const ::protocol::DiversifierMessage& d(const IncomingViewingKeyDiversifierMessage* msg);
};

const ::protocol::IncomingViewingKeyMessage&
IncomingViewingKeyDiversifierMessage::_Internal::ivk(const IncomingViewingKeyDiversifierMessage* msg) {
  return *msg->ivk_;
}
const ::protocol::DiversifierMessage&
IncomingViewingKeyDiversifierMessage::_Internal::d(const IncomingViewingKeyDiversifierMessage* msg) {
  return *msg->d_;
}
IncomingViewingKeyDiversifierMessage::IncomingViewingKeyDiversifierMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IncomingViewingKeyDiversifierMessage)
}
IncomingViewingKeyDiversifierMessage::IncomingViewingKeyDiversifierMessage(const IncomingViewingKeyDiversifierMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ivk()) {
    ivk_ = new ::protocol::IncomingViewingKeyMessage(*from.ivk_);
  } else {
    ivk_ = nullptr;
  }
  if (from._internal_has_d()) {
    d_ = new ::protocol::DiversifierMessage(*from.d_);
  } else {
    d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.IncomingViewingKeyDiversifierMessage)
}

inline void IncomingViewingKeyDiversifierMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ivk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&ivk_)) + sizeof(d_));
}

IncomingViewingKeyDiversifierMessage::~IncomingViewingKeyDiversifierMessage() {
  // @@protoc_insertion_point(destructor:protocol.IncomingViewingKeyDiversifierMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncomingViewingKeyDiversifierMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ivk_;
  if (this != internal_default_instance()) delete d_;
}

void IncomingViewingKeyDiversifierMessage::ArenaDtor(void* object) {
  IncomingViewingKeyDiversifierMessage* _this = reinterpret_cast< IncomingViewingKeyDiversifierMessage* >(object);
  (void)_this;
}
void IncomingViewingKeyDiversifierMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncomingViewingKeyDiversifierMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncomingViewingKeyDiversifierMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncomingViewingKeyDiversifierMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ivk_ != nullptr) {
    delete ivk_;
  }
  ivk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncomingViewingKeyDiversifierMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.IncomingViewingKeyMessage ivk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ivk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.DiversifierMessage d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncomingViewingKeyDiversifierMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncomingViewingKeyDiversifierMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.IncomingViewingKeyMessage ivk = 1;
  if (this->_internal_has_ivk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ivk(this), target, stream);
  }

  // .protocol.DiversifierMessage d = 2;
  if (this->_internal_has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::d(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncomingViewingKeyDiversifierMessage)
  return target;
}

size_t IncomingViewingKeyDiversifierMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncomingViewingKeyDiversifierMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.IncomingViewingKeyMessage ivk = 1;
  if (this->_internal_has_ivk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ivk_);
  }

  // .protocol.DiversifierMessage d = 2;
  if (this->_internal_has_d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncomingViewingKeyDiversifierMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncomingViewingKeyDiversifierMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncomingViewingKeyDiversifierMessage::GetClassData() const { return &_class_data_; }

void IncomingViewingKeyDiversifierMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IncomingViewingKeyDiversifierMessage *>(to)->MergeFrom(
      static_cast<const IncomingViewingKeyDiversifierMessage &>(from));
}


void IncomingViewingKeyDiversifierMessage::MergeFrom(const IncomingViewingKeyDiversifierMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncomingViewingKeyDiversifierMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ivk()) {
    _internal_mutable_ivk()->::protocol::IncomingViewingKeyMessage::MergeFrom(from._internal_ivk());
  }
  if (from._internal_has_d()) {
    _internal_mutable_d()->::protocol::DiversifierMessage::MergeFrom(from._internal_d());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncomingViewingKeyDiversifierMessage::CopyFrom(const IncomingViewingKeyDiversifierMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncomingViewingKeyDiversifierMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingViewingKeyDiversifierMessage::IsInitialized() const {
  return true;
}

void IncomingViewingKeyDiversifierMessage::InternalSwap(IncomingViewingKeyDiversifierMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncomingViewingKeyDiversifierMessage, d_)
      + sizeof(IncomingViewingKeyDiversifierMessage::d_)
      - PROTOBUF_FIELD_OFFSET(IncomingViewingKeyDiversifierMessage, ivk_)>(
          reinterpret_cast<char*>(&ivk_),
          reinterpret_cast<char*>(&other->ivk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncomingViewingKeyDiversifierMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[61]);
}

// ===================================================================

class PaymentAddressMessage::_Internal {
 public:
  static const ::protocol::DiversifierMessage& d(const PaymentAddressMessage* msg);
};

const ::protocol::DiversifierMessage&
PaymentAddressMessage::_Internal::d(const PaymentAddressMessage* msg) {
  return *msg->d_;
}
PaymentAddressMessage::PaymentAddressMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PaymentAddressMessage)
}
PaymentAddressMessage::PaymentAddressMessage(const PaymentAddressMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pkd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pkd().empty()) {
    pkd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pkd(), 
      GetArenaForAllocation());
  }
  payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_address().empty()) {
    payment_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payment_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_d()) {
    d_ = new ::protocol::DiversifierMessage(*from.d_);
  } else {
    d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PaymentAddressMessage)
}

inline void PaymentAddressMessage::SharedCtor() {
pkd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
d_ = nullptr;
}

PaymentAddressMessage::~PaymentAddressMessage() {
  // @@protoc_insertion_point(destructor:protocol.PaymentAddressMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaymentAddressMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pkd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete d_;
}

void PaymentAddressMessage::ArenaDtor(void* object) {
  PaymentAddressMessage* _this = reinterpret_cast< PaymentAddressMessage* >(object);
  (void)_this;
}
void PaymentAddressMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaymentAddressMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentAddressMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PaymentAddressMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pkd_.ClearToEmpty();
  payment_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentAddressMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.DiversifierMessage d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pkD = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pkd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.PaymentAddressMessage.payment_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentAddressMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PaymentAddressMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.DiversifierMessage d = 1;
  if (this->_internal_has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::d(this), target, stream);
  }

  // bytes pkD = 2;
  if (!this->_internal_pkd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pkd(), target);
  }

  // string payment_address = 3;
  if (!this->_internal_payment_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_address().data(), static_cast<int>(this->_internal_payment_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.PaymentAddressMessage.payment_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payment_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PaymentAddressMessage)
  return target;
}

size_t PaymentAddressMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PaymentAddressMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pkD = 2;
  if (!this->_internal_pkd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pkd());
  }

  // string payment_address = 3;
  if (!this->_internal_payment_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_address());
  }

  // .protocol.DiversifierMessage d = 1;
  if (this->_internal_has_d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentAddressMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentAddressMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentAddressMessage::GetClassData() const { return &_class_data_; }

void PaymentAddressMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PaymentAddressMessage *>(to)->MergeFrom(
      static_cast<const PaymentAddressMessage &>(from));
}


void PaymentAddressMessage::MergeFrom(const PaymentAddressMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PaymentAddressMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pkd().empty()) {
    _internal_set_pkd(from._internal_pkd());
  }
  if (!from._internal_payment_address().empty()) {
    _internal_set_payment_address(from._internal_payment_address());
  }
  if (from._internal_has_d()) {
    _internal_mutable_d()->::protocol::DiversifierMessage::MergeFrom(from._internal_d());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentAddressMessage::CopyFrom(const PaymentAddressMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PaymentAddressMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentAddressMessage::IsInitialized() const {
  return true;
}

void PaymentAddressMessage::InternalSwap(PaymentAddressMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pkd_, GetArenaForAllocation(),
      &other->pkd_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payment_address_, GetArenaForAllocation(),
      &other->payment_address_, other->GetArenaForAllocation()
  );
  swap(d_, other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentAddressMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[62]);
}

// ===================================================================

class ShieldedAddressInfo::_Internal {
 public:
};

ShieldedAddressInfo::ShieldedAddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ShieldedAddressInfo)
}
ShieldedAddressInfo::ShieldedAddressInfo(const ShieldedAddressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sk().empty()) {
    sk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sk(), 
      GetArenaForAllocation());
  }
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ivk().empty()) {
    ivk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ivk(), 
      GetArenaForAllocation());
  }
  d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_d().empty()) {
    d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d(), 
      GetArenaForAllocation());
  }
  pkd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pkd().empty()) {
    pkd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pkd(), 
      GetArenaForAllocation());
  }
  payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_address().empty()) {
    payment_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payment_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ShieldedAddressInfo)
}

inline void ShieldedAddressInfo::SharedCtor() {
sk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pkd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payment_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShieldedAddressInfo::~ShieldedAddressInfo() {
  // @@protoc_insertion_point(destructor:protocol.ShieldedAddressInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShieldedAddressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ivk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pkd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShieldedAddressInfo::ArenaDtor(void* object) {
  ShieldedAddressInfo* _this = reinterpret_cast< ShieldedAddressInfo* >(object);
  (void)_this;
}
void ShieldedAddressInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShieldedAddressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShieldedAddressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ShieldedAddressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sk_.ClearToEmpty();
  ask_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  ivk_.ClearToEmpty();
  d_.ClearToEmpty();
  pkd_.ClearToEmpty();
  payment_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShieldedAddressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ivk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ivk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pkD = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_pkd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_payment_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.ShieldedAddressInfo.payment_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldedAddressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ShieldedAddressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sk = 1;
  if (!this->_internal_sk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sk(), target);
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ask(), target);
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nsk(), target);
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ovk(), target);
  }

  // bytes ak = 5;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ak(), target);
  }

  // bytes nk = 6;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_nk(), target);
  }

  // bytes ivk = 7;
  if (!this->_internal_ivk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_ivk(), target);
  }

  // bytes d = 8;
  if (!this->_internal_d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_d(), target);
  }

  // bytes pkD = 9;
  if (!this->_internal_pkd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_pkd(), target);
  }

  // string payment_address = 10;
  if (!this->_internal_payment_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_address().data(), static_cast<int>(this->_internal_payment_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ShieldedAddressInfo.payment_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_payment_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ShieldedAddressInfo)
  return target;
}

size_t ShieldedAddressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ShieldedAddressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sk = 1;
  if (!this->_internal_sk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sk());
  }

  // bytes ask = 2;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes nsk = 3;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 4;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // bytes ak = 5;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 6;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // bytes ivk = 7;
  if (!this->_internal_ivk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ivk());
  }

  // bytes d = 8;
  if (!this->_internal_d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_d());
  }

  // bytes pkD = 9;
  if (!this->_internal_pkd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pkd());
  }

  // string payment_address = 10;
  if (!this->_internal_payment_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShieldedAddressInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShieldedAddressInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShieldedAddressInfo::GetClassData() const { return &_class_data_; }

void ShieldedAddressInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShieldedAddressInfo *>(to)->MergeFrom(
      static_cast<const ShieldedAddressInfo &>(from));
}


void ShieldedAddressInfo::MergeFrom(const ShieldedAddressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ShieldedAddressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sk().empty()) {
    _internal_set_sk(from._internal_sk());
  }
  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (!from._internal_ivk().empty()) {
    _internal_set_ivk(from._internal_ivk());
  }
  if (!from._internal_d().empty()) {
    _internal_set_d(from._internal_d());
  }
  if (!from._internal_pkd().empty()) {
    _internal_set_pkd(from._internal_pkd());
  }
  if (!from._internal_payment_address().empty()) {
    _internal_set_payment_address(from._internal_payment_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShieldedAddressInfo::CopyFrom(const ShieldedAddressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ShieldedAddressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldedAddressInfo::IsInitialized() const {
  return true;
}

void ShieldedAddressInfo::InternalSwap(ShieldedAddressInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sk_, GetArenaForAllocation(),
      &other->sk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, GetArenaForAllocation(),
      &other->ask_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ivk_, GetArenaForAllocation(),
      &other->ivk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &d_, GetArenaForAllocation(),
      &other->d_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pkd_, GetArenaForAllocation(),
      &other->pkd_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payment_address_, GetArenaForAllocation(),
      &other->payment_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShieldedAddressInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[63]);
}

// ===================================================================

class NoteParameters::_Internal {
 public:
  static const ::protocol::Note& note(const NoteParameters* msg);
};

const ::protocol::Note&
NoteParameters::_Internal::note(const NoteParameters* msg) {
  return *msg->note_;
}
NoteParameters::NoteParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NoteParameters)
}
NoteParameters::NoteParameters(const NoteParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.NoteParameters)
}

inline void NoteParameters::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&note_)) + sizeof(index_));
}

NoteParameters::~NoteParameters() {
  // @@protoc_insertion_point(destructor:protocol.NoteParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NoteParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void NoteParameters::ArenaDtor(void* object) {
  NoteParameters* _this = reinterpret_cast< NoteParameters* >(object);
  (void)_this;
}
void NoteParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoteParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoteParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NoteParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  txid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ak = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Note note = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoteParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NoteParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ak(), target);
  }

  // bytes nk = 2;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nk(), target);
  }

  // .protocol.Note note = 3;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::note(this), target, stream);
  }

  // bytes txid = 4;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_txid(), target);
  }

  // int32 index = 5;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NoteParameters)
  return target;
}

size_t NoteParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NoteParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 2;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // bytes txid = 4;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // .protocol.Note note = 3;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int32 index = 5;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NoteParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteParameters::GetClassData() const { return &_class_data_; }

void NoteParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NoteParameters *>(to)->MergeFrom(
      static_cast<const NoteParameters &>(from));
}


void NoteParameters::MergeFrom(const NoteParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NoteParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteParameters::CopyFrom(const NoteParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NoteParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteParameters::IsInitialized() const {
  return true;
}

void NoteParameters::InternalSwap(NoteParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteParameters, index_)
      + sizeof(NoteParameters::index_)
      - PROTOBUF_FIELD_OFFSET(NoteParameters, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[64]);
}

// ===================================================================

class SpendResult::_Internal {
 public:
};

SpendResult::SpendResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SpendResult)
}
SpendResult::SpendResult(const SpendResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:protocol.SpendResult)
}

inline void SpendResult::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = false;
}

SpendResult::~SpendResult() {
  // @@protoc_insertion_point(destructor:protocol.SpendResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpendResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpendResult::ArenaDtor(void* object) {
  SpendResult* _this = reinterpret_cast< SpendResult* >(object);
  (void)_this;
}
void SpendResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpendResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpendResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpendResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.SpendResult.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.SpendResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendResult)
  return target;
}

size_t SpendResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpendResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpendResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpendResult::GetClassData() const { return &_class_data_; }

void SpendResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpendResult *>(to)->MergeFrom(
      static_cast<const SpendResult &>(from));
}


void SpendResult::MergeFrom(const SpendResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpendResult::CopyFrom(const SpendResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendResult::IsInitialized() const {
  return true;
}

void SpendResult::InternalSwap(SpendResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[65]);
}

// ===================================================================

class TransactionInfoList::_Internal {
 public:
};

void TransactionInfoList::clear_transactioninfo() {
  transactioninfo_.Clear();
}
TransactionInfoList::TransactionInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactioninfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionInfoList)
}
TransactionInfoList::TransactionInfoList(const TransactionInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactioninfo_(from.transactioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionInfoList)
}

inline void TransactionInfoList::SharedCtor() {
}

TransactionInfoList::~TransactionInfoList() {
  // @@protoc_insertion_point(destructor:protocol.TransactionInfoList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionInfoList::ArenaDtor(void* object) {
  TransactionInfoList* _this = reinterpret_cast< TransactionInfoList* >(object);
  (void)_this;
}
void TransactionInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactioninfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.TransactionInfo transactionInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TransactionInfo transactionInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactioninfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionInfoList)
  return target;
}

size_t TransactionInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionInfo transactionInfo = 1;
  total_size += 1UL * this->_internal_transactioninfo_size();
  for (const auto& msg : this->transactioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInfoList::GetClassData() const { return &_class_data_; }

void TransactionInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionInfoList *>(to)->MergeFrom(
      static_cast<const TransactionInfoList &>(from));
}


void TransactionInfoList::MergeFrom(const TransactionInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactioninfo_.MergeFrom(from.transactioninfo_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInfoList::CopyFrom(const TransactionInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfoList::IsInitialized() const {
  return true;
}

void TransactionInfoList::InternalSwap(TransactionInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactioninfo_.InternalSwap(&other->transactioninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfoList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[66]);
}

// ===================================================================

class SpendNoteTRC20::_Internal {
 public:
  static const ::protocol::Note& note(const SpendNoteTRC20* msg);
};

const ::protocol::Note&
SpendNoteTRC20::_Internal::note(const SpendNoteTRC20* msg) {
  return *msg->note_;
}
SpendNoteTRC20::SpendNoteTRC20(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SpendNoteTRC20)
}
SpendNoteTRC20::SpendNoteTRC20(const SpendNoteTRC20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alpha().empty()) {
    alpha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alpha(), 
      GetArenaForAllocation());
  }
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  pos_ = from.pos_;
  // @@protoc_insertion_point(copy_constructor:protocol.SpendNoteTRC20)
}

inline void SpendNoteTRC20::SharedCtor() {
alpha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&note_)) + sizeof(pos_));
}

SpendNoteTRC20::~SpendNoteTRC20() {
  // @@protoc_insertion_point(destructor:protocol.SpendNoteTRC20)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpendNoteTRC20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alpha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void SpendNoteTRC20::ArenaDtor(void* object) {
  SpendNoteTRC20* _this = reinterpret_cast< SpendNoteTRC20* >(object);
  (void)_this;
}
void SpendNoteTRC20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpendNoteTRC20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpendNoteTRC20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendNoteTRC20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_.ClearToEmpty();
  root_.ClearToEmpty();
  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  pos_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpendNoteTRC20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes alpha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alpha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendNoteTRC20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendNoteTRC20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // bytes alpha = 2;
  if (!this->_internal_alpha().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_alpha(), target);
  }

  // bytes root = 3;
  if (!this->_internal_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_root(), target);
  }

  // bytes path = 4;
  if (!this->_internal_path().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_path(), target);
  }

  // int64 pos = 5;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendNoteTRC20)
  return target;
}

size_t SpendNoteTRC20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendNoteTRC20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes alpha = 2;
  if (!this->_internal_alpha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alpha());
  }

  // bytes root = 3;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root());
  }

  // bytes path = 4;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int64 pos = 5;
  if (this->_internal_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpendNoteTRC20::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpendNoteTRC20::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpendNoteTRC20::GetClassData() const { return &_class_data_; }

void SpendNoteTRC20::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpendNoteTRC20 *>(to)->MergeFrom(
      static_cast<const SpendNoteTRC20 &>(from));
}


void SpendNoteTRC20::MergeFrom(const SpendNoteTRC20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendNoteTRC20)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alpha().empty()) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!from._internal_root().empty()) {
    _internal_set_root(from._internal_root());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpendNoteTRC20::CopyFrom(const SpendNoteTRC20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendNoteTRC20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendNoteTRC20::IsInitialized() const {
  return true;
}

void SpendNoteTRC20::InternalSwap(SpendNoteTRC20* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alpha_, GetArenaForAllocation(),
      &other->alpha_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &root_, GetArenaForAllocation(),
      &other->root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpendNoteTRC20, pos_)
      + sizeof(SpendNoteTRC20::pos_)
      - PROTOBUF_FIELD_OFFSET(SpendNoteTRC20, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendNoteTRC20::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[67]);
}

// ===================================================================

class PrivateShieldedTRC20Parameters::_Internal {
 public:
};

PrivateShieldedTRC20Parameters::PrivateShieldedTRC20Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shielded_spends_(arena),
  shielded_receives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PrivateShieldedTRC20Parameters)
}
PrivateShieldedTRC20Parameters::PrivateShieldedTRC20Parameters(const PrivateShieldedTRC20Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shielded_spends_(from.shielded_spends_),
      shielded_receives_(from.shielded_receives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ask().empty()) {
    ask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ask(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_amount().empty()) {
    from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_amount(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_amount().empty()) {
    to_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_amount(), 
      GetArenaForAllocation());
  }
  shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    shielded_trc20_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shielded_trc20_contract_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PrivateShieldedTRC20Parameters)
}

inline void PrivateShieldedTRC20Parameters::SharedCtor() {
ask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrivateShieldedTRC20Parameters::~PrivateShieldedTRC20Parameters() {
  // @@protoc_insertion_point(destructor:protocol.PrivateShieldedTRC20Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrivateShieldedTRC20Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shielded_trc20_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivateShieldedTRC20Parameters::ArenaDtor(void* object) {
  PrivateShieldedTRC20Parameters* _this = reinterpret_cast< PrivateShieldedTRC20Parameters* >(object);
  (void)_this;
}
void PrivateShieldedTRC20Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateShieldedTRC20Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateShieldedTRC20Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PrivateShieldedTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shielded_spends_.Clear();
  shielded_receives_.Clear();
  ask_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  from_amount_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  to_amount_.ClearToEmpty();
  shielded_trc20_contract_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateShieldedTRC20Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_from_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.PrivateShieldedTRC20Parameters.from_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_spends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveNote shielded_receives = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_receives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_to_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.PrivateShieldedTRC20Parameters.to_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shielded_TRC20_contract_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_shielded_trc20_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateShieldedTRC20Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PrivateShieldedTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ask(), target);
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nsk(), target);
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ovk(), target);
  }

  // string from_amount = 4;
  if (!this->_internal_from_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_amount().data(), static_cast<int>(this->_internal_from_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.PrivateShieldedTRC20Parameters.from_amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_from_amount(), target);
  }

  // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_spends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shielded_spends(i), target, stream);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_receives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_shielded_receives(i), target, stream);
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_transparent_to_address(), target);
  }

  // string to_amount = 8;
  if (!this->_internal_to_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_amount().data(), static_cast<int>(this->_internal_to_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.PrivateShieldedTRC20Parameters.to_amount");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_amount(), target);
  }

  // bytes shielded_TRC20_contract_address = 9;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_shielded_trc20_contract_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PrivateShieldedTRC20Parameters)
  return target;
}

size_t PrivateShieldedTRC20Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PrivateShieldedTRC20Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
  total_size += 1UL * this->_internal_shielded_spends_size();
  for (const auto& msg : this->shielded_spends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 6;
  total_size += 1UL * this->_internal_shielded_receives_size();
  for (const auto& msg : this->shielded_receives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ask = 1;
  if (!this->_internal_ask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ask());
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // string from_amount = 4;
  if (!this->_internal_from_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_amount());
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // string to_amount = 8;
  if (!this->_internal_to_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_amount());
  }

  // bytes shielded_TRC20_contract_address = 9;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shielded_trc20_contract_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateShieldedTRC20Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrivateShieldedTRC20Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateShieldedTRC20Parameters::GetClassData() const { return &_class_data_; }

void PrivateShieldedTRC20Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrivateShieldedTRC20Parameters *>(to)->MergeFrom(
      static_cast<const PrivateShieldedTRC20Parameters &>(from));
}


void PrivateShieldedTRC20Parameters::MergeFrom(const PrivateShieldedTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PrivateShieldedTRC20Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shielded_spends_.MergeFrom(from.shielded_spends_);
  shielded_receives_.MergeFrom(from.shielded_receives_);
  if (!from._internal_ask().empty()) {
    _internal_set_ask(from._internal_ask());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_from_amount().empty()) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (!from._internal_to_amount().empty()) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    _internal_set_shielded_trc20_contract_address(from._internal_shielded_trc20_contract_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateShieldedTRC20Parameters::CopyFrom(const PrivateShieldedTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PrivateShieldedTRC20Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateShieldedTRC20Parameters::IsInitialized() const {
  return true;
}

void PrivateShieldedTRC20Parameters::InternalSwap(PrivateShieldedTRC20Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shielded_spends_.InternalSwap(&other->shielded_spends_);
  shielded_receives_.InternalSwap(&other->shielded_receives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ask_, GetArenaForAllocation(),
      &other->ask_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_amount_, GetArenaForAllocation(),
      &other->from_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_amount_, GetArenaForAllocation(),
      &other->to_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shielded_trc20_contract_address_, GetArenaForAllocation(),
      &other->shielded_trc20_contract_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateShieldedTRC20Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[68]);
}

// ===================================================================

class PrivateShieldedTRC20ParametersWithoutAsk::_Internal {
 public:
};

PrivateShieldedTRC20ParametersWithoutAsk::PrivateShieldedTRC20ParametersWithoutAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shielded_spends_(arena),
  shielded_receives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
}
PrivateShieldedTRC20ParametersWithoutAsk::PrivateShieldedTRC20ParametersWithoutAsk(const PrivateShieldedTRC20ParametersWithoutAsk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shielded_spends_(from.shielded_spends_),
      shielded_receives_(from.shielded_receives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nsk().empty()) {
    nsk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nsk(), 
      GetArenaForAllocation());
  }
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_amount().empty()) {
    from_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_amount(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_amount().empty()) {
    to_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_amount(), 
      GetArenaForAllocation());
  }
  shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    shielded_trc20_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shielded_trc20_contract_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
}

inline void PrivateShieldedTRC20ParametersWithoutAsk::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nsk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrivateShieldedTRC20ParametersWithoutAsk::~PrivateShieldedTRC20ParametersWithoutAsk() {
  // @@protoc_insertion_point(destructor:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrivateShieldedTRC20ParametersWithoutAsk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shielded_trc20_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrivateShieldedTRC20ParametersWithoutAsk::ArenaDtor(void* object) {
  PrivateShieldedTRC20ParametersWithoutAsk* _this = reinterpret_cast< PrivateShieldedTRC20ParametersWithoutAsk* >(object);
  (void)_this;
}
void PrivateShieldedTRC20ParametersWithoutAsk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrivateShieldedTRC20ParametersWithoutAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateShieldedTRC20ParametersWithoutAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shielded_spends_.Clear();
  shielded_receives_.Clear();
  ak_.ClearToEmpty();
  nsk_.ClearToEmpty();
  ovk_.ClearToEmpty();
  from_amount_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  to_amount_.ClearToEmpty();
  shielded_trc20_contract_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateShieldedTRC20ParametersWithoutAsk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ak = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nsk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nsk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_from_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.PrivateShieldedTRC20ParametersWithoutAsk.from_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_spends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveNote shielded_receives = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shielded_receives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_to_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.PrivateShieldedTRC20ParametersWithoutAsk.to_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shielded_TRC20_contract_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_shielded_trc20_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivateShieldedTRC20ParametersWithoutAsk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ak(), target);
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nsk(), target);
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ovk(), target);
  }

  // string from_amount = 4;
  if (!this->_internal_from_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_amount().data(), static_cast<int>(this->_internal_from_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.PrivateShieldedTRC20ParametersWithoutAsk.from_amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_from_amount(), target);
  }

  // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_spends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shielded_spends(i), target, stream);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shielded_receives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_shielded_receives(i), target, stream);
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_transparent_to_address(), target);
  }

  // string to_amount = 8;
  if (!this->_internal_to_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_amount().data(), static_cast<int>(this->_internal_to_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.PrivateShieldedTRC20ParametersWithoutAsk.to_amount");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_to_amount(), target);
  }

  // bytes shielded_TRC20_contract_address = 9;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_shielded_trc20_contract_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  return target;
}

size_t PrivateShieldedTRC20ParametersWithoutAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendNoteTRC20 shielded_spends = 5;
  total_size += 1UL * this->_internal_shielded_spends_size();
  for (const auto& msg : this->shielded_spends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveNote shielded_receives = 6;
  total_size += 1UL * this->_internal_shielded_receives_size();
  for (const auto& msg : this->shielded_receives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ak = 1;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nsk = 2;
  if (!this->_internal_nsk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nsk());
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // string from_amount = 4;
  if (!this->_internal_from_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_amount());
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // string to_amount = 8;
  if (!this->_internal_to_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_amount());
  }

  // bytes shielded_TRC20_contract_address = 9;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shielded_trc20_contract_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateShieldedTRC20ParametersWithoutAsk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrivateShieldedTRC20ParametersWithoutAsk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateShieldedTRC20ParametersWithoutAsk::GetClassData() const { return &_class_data_; }

void PrivateShieldedTRC20ParametersWithoutAsk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrivateShieldedTRC20ParametersWithoutAsk *>(to)->MergeFrom(
      static_cast<const PrivateShieldedTRC20ParametersWithoutAsk &>(from));
}


void PrivateShieldedTRC20ParametersWithoutAsk::MergeFrom(const PrivateShieldedTRC20ParametersWithoutAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shielded_spends_.MergeFrom(from.shielded_spends_);
  shielded_receives_.MergeFrom(from.shielded_receives_);
  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nsk().empty()) {
    _internal_set_nsk(from._internal_nsk());
  }
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_from_amount().empty()) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (!from._internal_to_amount().empty()) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    _internal_set_shielded_trc20_contract_address(from._internal_shielded_trc20_contract_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateShieldedTRC20ParametersWithoutAsk::CopyFrom(const PrivateShieldedTRC20ParametersWithoutAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PrivateShieldedTRC20ParametersWithoutAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateShieldedTRC20ParametersWithoutAsk::IsInitialized() const {
  return true;
}

void PrivateShieldedTRC20ParametersWithoutAsk::InternalSwap(PrivateShieldedTRC20ParametersWithoutAsk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shielded_spends_.InternalSwap(&other->shielded_spends_);
  shielded_receives_.InternalSwap(&other->shielded_receives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nsk_, GetArenaForAllocation(),
      &other->nsk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_amount_, GetArenaForAllocation(),
      &other->from_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_amount_, GetArenaForAllocation(),
      &other->to_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shielded_trc20_contract_address_, GetArenaForAllocation(),
      &other->shielded_trc20_contract_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateShieldedTRC20ParametersWithoutAsk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[69]);
}

// ===================================================================

class ShieldedTRC20Parameters::_Internal {
 public:
};

void ShieldedTRC20Parameters::clear_spend_description() {
  spend_description_.Clear();
}
void ShieldedTRC20Parameters::clear_receive_description() {
  receive_description_.Clear();
}
ShieldedTRC20Parameters::ShieldedTRC20Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spend_description_(arena),
  receive_description_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ShieldedTRC20Parameters)
}
ShieldedTRC20Parameters::ShieldedTRC20Parameters(const ShieldedTRC20Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spend_description_(from.spend_description_),
      receive_description_(from.receive_description_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_binding_signature().empty()) {
    binding_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binding_signature(), 
      GetArenaForAllocation());
  }
  message_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_hash().empty()) {
    message_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_hash(), 
      GetArenaForAllocation());
  }
  trigger_contract_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trigger_contract_input().empty()) {
    trigger_contract_input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trigger_contract_input(), 
      GetArenaForAllocation());
  }
  parameter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parameter_type().empty()) {
    parameter_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parameter_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ShieldedTRC20Parameters)
}

inline void ShieldedTRC20Parameters::SharedCtor() {
binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trigger_contract_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parameter_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShieldedTRC20Parameters::~ShieldedTRC20Parameters() {
  // @@protoc_insertion_point(destructor:protocol.ShieldedTRC20Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShieldedTRC20Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  binding_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trigger_contract_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShieldedTRC20Parameters::ArenaDtor(void* object) {
  ShieldedTRC20Parameters* _this = reinterpret_cast< ShieldedTRC20Parameters* >(object);
  (void)_this;
}
void ShieldedTRC20Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShieldedTRC20Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShieldedTRC20Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ShieldedTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spend_description_.Clear();
  receive_description_.Clear();
  binding_signature_.ClearToEmpty();
  message_hash_.ClearToEmpty();
  trigger_contract_input_.ClearToEmpty();
  parameter_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShieldedTRC20Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.SpendDescription spend_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spend_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveDescription receive_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receive_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes binding_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_binding_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trigger_contract_input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trigger_contract_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.ShieldedTRC20Parameters.trigger_contract_input"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parameter_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_parameter_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.ShieldedTRC20Parameters.parameter_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldedTRC20Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ShieldedTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.SpendDescription spend_description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spend_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spend_description(i), target, stream);
  }

  // repeated .protocol.ReceiveDescription receive_description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receive_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_receive_description(i), target, stream);
  }

  // bytes binding_signature = 3;
  if (!this->_internal_binding_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_binding_signature(), target);
  }

  // bytes message_hash = 4;
  if (!this->_internal_message_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message_hash(), target);
  }

  // string trigger_contract_input = 5;
  if (!this->_internal_trigger_contract_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_contract_input().data(), static_cast<int>(this->_internal_trigger_contract_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ShieldedTRC20Parameters.trigger_contract_input");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trigger_contract_input(), target);
  }

  // string parameter_type = 6;
  if (!this->_internal_parameter_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameter_type().data(), static_cast<int>(this->_internal_parameter_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ShieldedTRC20Parameters.parameter_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_parameter_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ShieldedTRC20Parameters)
  return target;
}

size_t ShieldedTRC20Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ShieldedTRC20Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendDescription spend_description = 1;
  total_size += 1UL * this->_internal_spend_description_size();
  for (const auto& msg : this->spend_description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveDescription receive_description = 2;
  total_size += 1UL * this->_internal_receive_description_size();
  for (const auto& msg : this->receive_description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes binding_signature = 3;
  if (!this->_internal_binding_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binding_signature());
  }

  // bytes message_hash = 4;
  if (!this->_internal_message_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_hash());
  }

  // string trigger_contract_input = 5;
  if (!this->_internal_trigger_contract_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_contract_input());
  }

  // string parameter_type = 6;
  if (!this->_internal_parameter_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShieldedTRC20Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShieldedTRC20Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShieldedTRC20Parameters::GetClassData() const { return &_class_data_; }

void ShieldedTRC20Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShieldedTRC20Parameters *>(to)->MergeFrom(
      static_cast<const ShieldedTRC20Parameters &>(from));
}


void ShieldedTRC20Parameters::MergeFrom(const ShieldedTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ShieldedTRC20Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spend_description_.MergeFrom(from.spend_description_);
  receive_description_.MergeFrom(from.receive_description_);
  if (!from._internal_binding_signature().empty()) {
    _internal_set_binding_signature(from._internal_binding_signature());
  }
  if (!from._internal_message_hash().empty()) {
    _internal_set_message_hash(from._internal_message_hash());
  }
  if (!from._internal_trigger_contract_input().empty()) {
    _internal_set_trigger_contract_input(from._internal_trigger_contract_input());
  }
  if (!from._internal_parameter_type().empty()) {
    _internal_set_parameter_type(from._internal_parameter_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShieldedTRC20Parameters::CopyFrom(const ShieldedTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ShieldedTRC20Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldedTRC20Parameters::IsInitialized() const {
  return true;
}

void ShieldedTRC20Parameters::InternalSwap(ShieldedTRC20Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spend_description_.InternalSwap(&other->spend_description_);
  receive_description_.InternalSwap(&other->receive_description_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &binding_signature_, GetArenaForAllocation(),
      &other->binding_signature_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_hash_, GetArenaForAllocation(),
      &other->message_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trigger_contract_input_, GetArenaForAllocation(),
      &other->trigger_contract_input_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parameter_type_, GetArenaForAllocation(),
      &other->parameter_type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShieldedTRC20Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[70]);
}

// ===================================================================

class IvkDecryptTRC20Parameters::_Internal {
 public:
};

IvkDecryptTRC20Parameters::IvkDecryptTRC20Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IvkDecryptTRC20Parameters)
}
IvkDecryptTRC20Parameters::IvkDecryptTRC20Parameters(const IvkDecryptTRC20Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    shielded_trc20_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shielded_trc20_contract_address(), 
      GetArenaForAllocation());
  }
  ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ivk().empty()) {
    ivk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ivk(), 
      GetArenaForAllocation());
  }
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_block_index_, &from.start_block_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.IvkDecryptTRC20Parameters)
}

inline void IvkDecryptTRC20Parameters::SharedCtor() {
shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ivk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_block_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
}

IvkDecryptTRC20Parameters::~IvkDecryptTRC20Parameters() {
  // @@protoc_insertion_point(destructor:protocol.IvkDecryptTRC20Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IvkDecryptTRC20Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shielded_trc20_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ivk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IvkDecryptTRC20Parameters::ArenaDtor(void* object) {
  IvkDecryptTRC20Parameters* _this = reinterpret_cast< IvkDecryptTRC20Parameters* >(object);
  (void)_this;
}
void IvkDecryptTRC20Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IvkDecryptTRC20Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IvkDecryptTRC20Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IvkDecryptTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  shielded_trc20_contract_address_.ClearToEmpty();
  ivk_.ClearToEmpty();
  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  ::memset(&start_block_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_block_index_) -
      reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IvkDecryptTRC20Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_block_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_block_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shielded_TRC20_contract_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shielded_trc20_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ivk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ivk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_events();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.IvkDecryptTRC20Parameters.events"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IvkDecryptTRC20Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IvkDecryptTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_block_index(), target);
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_block_index(), target);
  }

  // bytes shielded_TRC20_contract_address = 3;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shielded_trc20_contract_address(), target);
  }

  // bytes ivk = 4;
  if (!this->_internal_ivk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ivk(), target);
  }

  // bytes ak = 5;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ak(), target);
  }

  // bytes nk = 6;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_nk(), target);
  }

  // repeated string events = 7;
  for (int i = 0, n = this->_internal_events_size(); i < n; i++) {
    const auto& s = this->_internal_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.IvkDecryptTRC20Parameters.events");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IvkDecryptTRC20Parameters)
  return target;
}

size_t IvkDecryptTRC20Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IvkDecryptTRC20Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string events = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(events_.size());
  for (int i = 0, n = events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      events_.Get(i));
  }

  // bytes shielded_TRC20_contract_address = 3;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shielded_trc20_contract_address());
  }

  // bytes ivk = 4;
  if (!this->_internal_ivk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ivk());
  }

  // bytes ak = 5;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 6;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_block_index());
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_block_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IvkDecryptTRC20Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IvkDecryptTRC20Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IvkDecryptTRC20Parameters::GetClassData() const { return &_class_data_; }

void IvkDecryptTRC20Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IvkDecryptTRC20Parameters *>(to)->MergeFrom(
      static_cast<const IvkDecryptTRC20Parameters &>(from));
}


void IvkDecryptTRC20Parameters::MergeFrom(const IvkDecryptTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IvkDecryptTRC20Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    _internal_set_shielded_trc20_contract_address(from._internal_shielded_trc20_contract_address());
  }
  if (!from._internal_ivk().empty()) {
    _internal_set_ivk(from._internal_ivk());
  }
  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (from._internal_start_block_index() != 0) {
    _internal_set_start_block_index(from._internal_start_block_index());
  }
  if (from._internal_end_block_index() != 0) {
    _internal_set_end_block_index(from._internal_end_block_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IvkDecryptTRC20Parameters::CopyFrom(const IvkDecryptTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IvkDecryptTRC20Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IvkDecryptTRC20Parameters::IsInitialized() const {
  return true;
}

void IvkDecryptTRC20Parameters::InternalSwap(IvkDecryptTRC20Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shielded_trc20_contract_address_, GetArenaForAllocation(),
      &other->shielded_trc20_contract_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ivk_, GetArenaForAllocation(),
      &other->ivk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IvkDecryptTRC20Parameters, end_block_index_)
      + sizeof(IvkDecryptTRC20Parameters::end_block_index_)
      - PROTOBUF_FIELD_OFFSET(IvkDecryptTRC20Parameters, start_block_index_)>(
          reinterpret_cast<char*>(&start_block_index_),
          reinterpret_cast<char*>(&other->start_block_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IvkDecryptTRC20Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[71]);
}

// ===================================================================

class OvkDecryptTRC20Parameters::_Internal {
 public:
};

OvkDecryptTRC20Parameters::OvkDecryptTRC20Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.OvkDecryptTRC20Parameters)
}
OvkDecryptTRC20Parameters::OvkDecryptTRC20Parameters(const OvkDecryptTRC20Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ovk().empty()) {
    ovk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ovk(), 
      GetArenaForAllocation());
  }
  shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    shielded_trc20_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shielded_trc20_contract_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_block_index_, &from.start_block_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.OvkDecryptTRC20Parameters)
}

inline void OvkDecryptTRC20Parameters::SharedCtor() {
ovk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_block_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_block_index_) -
    reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
}

OvkDecryptTRC20Parameters::~OvkDecryptTRC20Parameters() {
  // @@protoc_insertion_point(destructor:protocol.OvkDecryptTRC20Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OvkDecryptTRC20Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ovk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shielded_trc20_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OvkDecryptTRC20Parameters::ArenaDtor(void* object) {
  OvkDecryptTRC20Parameters* _this = reinterpret_cast< OvkDecryptTRC20Parameters* >(object);
  (void)_this;
}
void OvkDecryptTRC20Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OvkDecryptTRC20Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OvkDecryptTRC20Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OvkDecryptTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  ovk_.ClearToEmpty();
  shielded_trc20_contract_address_.ClearToEmpty();
  ::memset(&start_block_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_block_index_) -
      reinterpret_cast<char*>(&start_block_index_)) + sizeof(end_block_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OvkDecryptTRC20Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_block_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_block_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_block_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ovk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ovk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shielded_TRC20_contract_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_shielded_trc20_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_events();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.OvkDecryptTRC20Parameters.events"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OvkDecryptTRC20Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OvkDecryptTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_block_index(), target);
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_block_index(), target);
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ovk(), target);
  }

  // bytes shielded_TRC20_contract_address = 4;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_shielded_trc20_contract_address(), target);
  }

  // repeated string events = 5;
  for (int i = 0, n = this->_internal_events_size(); i < n; i++) {
    const auto& s = this->_internal_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.OvkDecryptTRC20Parameters.events");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OvkDecryptTRC20Parameters)
  return target;
}

size_t OvkDecryptTRC20Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OvkDecryptTRC20Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string events = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(events_.size());
  for (int i = 0, n = events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      events_.Get(i));
  }

  // bytes ovk = 3;
  if (!this->_internal_ovk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ovk());
  }

  // bytes shielded_TRC20_contract_address = 4;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shielded_trc20_contract_address());
  }

  // int64 start_block_index = 1;
  if (this->_internal_start_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_block_index());
  }

  // int64 end_block_index = 2;
  if (this->_internal_end_block_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_block_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OvkDecryptTRC20Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OvkDecryptTRC20Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OvkDecryptTRC20Parameters::GetClassData() const { return &_class_data_; }

void OvkDecryptTRC20Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OvkDecryptTRC20Parameters *>(to)->MergeFrom(
      static_cast<const OvkDecryptTRC20Parameters &>(from));
}


void OvkDecryptTRC20Parameters::MergeFrom(const OvkDecryptTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OvkDecryptTRC20Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_ovk().empty()) {
    _internal_set_ovk(from._internal_ovk());
  }
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    _internal_set_shielded_trc20_contract_address(from._internal_shielded_trc20_contract_address());
  }
  if (from._internal_start_block_index() != 0) {
    _internal_set_start_block_index(from._internal_start_block_index());
  }
  if (from._internal_end_block_index() != 0) {
    _internal_set_end_block_index(from._internal_end_block_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OvkDecryptTRC20Parameters::CopyFrom(const OvkDecryptTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OvkDecryptTRC20Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OvkDecryptTRC20Parameters::IsInitialized() const {
  return true;
}

void OvkDecryptTRC20Parameters::InternalSwap(OvkDecryptTRC20Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ovk_, GetArenaForAllocation(),
      &other->ovk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shielded_trc20_contract_address_, GetArenaForAllocation(),
      &other->shielded_trc20_contract_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OvkDecryptTRC20Parameters, end_block_index_)
      + sizeof(OvkDecryptTRC20Parameters::end_block_index_)
      - PROTOBUF_FIELD_OFFSET(OvkDecryptTRC20Parameters, start_block_index_)>(
          reinterpret_cast<char*>(&start_block_index_),
          reinterpret_cast<char*>(&other->start_block_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OvkDecryptTRC20Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[72]);
}

// ===================================================================

class DecryptNotesTRC20_NoteTx::_Internal {
 public:
  static const ::protocol::Note& note(const DecryptNotesTRC20_NoteTx* msg);
};

const ::protocol::Note&
DecryptNotesTRC20_NoteTx::_Internal::note(const DecryptNotesTRC20_NoteTx* msg) {
  return *msg->note_;
}
DecryptNotesTRC20_NoteTx::DecryptNotesTRC20_NoteTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotesTRC20.NoteTx)
}
DecryptNotesTRC20_NoteTx::DecryptNotesTRC20_NoteTx(const DecryptNotesTRC20_NoteTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_amount().empty()) {
    to_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_amount(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotesTRC20.NoteTx)
}

inline void DecryptNotesTRC20_NoteTx::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&note_)) + sizeof(index_));
}

DecryptNotesTRC20_NoteTx::~DecryptNotesTRC20_NoteTx() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotesTRC20.NoteTx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotesTRC20_NoteTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void DecryptNotesTRC20_NoteTx::ArenaDtor(void* object) {
  DecryptNotesTRC20_NoteTx* _this = reinterpret_cast< DecryptNotesTRC20_NoteTx* >(object);
  (void)_this;
}
void DecryptNotesTRC20_NoteTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotesTRC20_NoteTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotesTRC20_NoteTx::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotesTRC20.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmpty();
  to_amount_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&position_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotesTRC20_NoteTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_to_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.DecryptNotesTRC20.NoteTx.to_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotesTRC20_NoteTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotesTRC20.NoteTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_position(), target);
  }

  // bool is_spent = 3;
  if (this->_internal_is_spent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_spent(), target);
  }

  // bytes txid = 4;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_txid(), target);
  }

  // int32 index = 5;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  // string to_amount = 6;
  if (!this->_internal_to_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_amount().data(), static_cast<int>(this->_internal_to_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.DecryptNotesTRC20.NoteTx.to_amount");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_to_amount(), target);
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_transparent_to_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotesTRC20.NoteTx)
  return target;
}

size_t DecryptNotesTRC20_NoteTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotesTRC20.NoteTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid = 4;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // string to_amount = 6;
  if (!this->_internal_to_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_amount());
  }

  // bytes transparent_to_address = 7;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_position());
  }

  // bool is_spent = 3;
  if (this->_internal_is_spent() != 0) {
    total_size += 1 + 1;
  }

  // int32 index = 5;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotesTRC20_NoteTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotesTRC20_NoteTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotesTRC20_NoteTx::GetClassData() const { return &_class_data_; }

void DecryptNotesTRC20_NoteTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotesTRC20_NoteTx *>(to)->MergeFrom(
      static_cast<const DecryptNotesTRC20_NoteTx &>(from));
}


void DecryptNotesTRC20_NoteTx::MergeFrom(const DecryptNotesTRC20_NoteTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotesTRC20.NoteTx)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (!from._internal_to_amount().empty()) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_is_spent() != 0) {
    _internal_set_is_spent(from._internal_is_spent());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotesTRC20_NoteTx::CopyFrom(const DecryptNotesTRC20_NoteTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotesTRC20.NoteTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotesTRC20_NoteTx::IsInitialized() const {
  return true;
}

void DecryptNotesTRC20_NoteTx::InternalSwap(DecryptNotesTRC20_NoteTx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_amount_, GetArenaForAllocation(),
      &other->to_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecryptNotesTRC20_NoteTx, index_)
      + sizeof(DecryptNotesTRC20_NoteTx::index_)
      - PROTOBUF_FIELD_OFFSET(DecryptNotesTRC20_NoteTx, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotesTRC20_NoteTx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[73]);
}

// ===================================================================

class DecryptNotesTRC20::_Internal {
 public:
};

DecryptNotesTRC20::DecryptNotesTRC20(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notetxs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DecryptNotesTRC20)
}
DecryptNotesTRC20::DecryptNotesTRC20(const DecryptNotesTRC20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notetxs_(from.notetxs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.DecryptNotesTRC20)
}

inline void DecryptNotesTRC20::SharedCtor() {
}

DecryptNotesTRC20::~DecryptNotesTRC20() {
  // @@protoc_insertion_point(destructor:protocol.DecryptNotesTRC20)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecryptNotesTRC20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecryptNotesTRC20::ArenaDtor(void* object) {
  DecryptNotesTRC20* _this = reinterpret_cast< DecryptNotesTRC20* >(object);
  (void)_this;
}
void DecryptNotesTRC20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecryptNotesTRC20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecryptNotesTRC20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DecryptNotesTRC20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notetxs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecryptNotesTRC20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.DecryptNotesTRC20.NoteTx noteTxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notetxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecryptNotesTRC20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DecryptNotesTRC20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotesTRC20.NoteTx noteTxs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notetxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notetxs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DecryptNotesTRC20)
  return target;
}

size_t DecryptNotesTRC20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DecryptNotesTRC20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.DecryptNotesTRC20.NoteTx noteTxs = 1;
  total_size += 1UL * this->_internal_notetxs_size();
  for (const auto& msg : this->notetxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecryptNotesTRC20::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecryptNotesTRC20::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecryptNotesTRC20::GetClassData() const { return &_class_data_; }

void DecryptNotesTRC20::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DecryptNotesTRC20 *>(to)->MergeFrom(
      static_cast<const DecryptNotesTRC20 &>(from));
}


void DecryptNotesTRC20::MergeFrom(const DecryptNotesTRC20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DecryptNotesTRC20)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notetxs_.MergeFrom(from.notetxs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecryptNotesTRC20::CopyFrom(const DecryptNotesTRC20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DecryptNotesTRC20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptNotesTRC20::IsInitialized() const {
  return true;
}

void DecryptNotesTRC20::InternalSwap(DecryptNotesTRC20* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notetxs_.InternalSwap(&other->notetxs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecryptNotesTRC20::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[74]);
}

// ===================================================================

class NfTRC20Parameters::_Internal {
 public:
  static const ::protocol::Note& note(const NfTRC20Parameters* msg);
};

const ::protocol::Note&
NfTRC20Parameters::_Internal::note(const NfTRC20Parameters* msg) {
  return *msg->note_;
}
NfTRC20Parameters::NfTRC20Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NfTRC20Parameters)
}
NfTRC20Parameters::NfTRC20Parameters(const NfTRC20Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ak().empty()) {
    ak_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ak(), 
      GetArenaForAllocation());
  }
  nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nk().empty()) {
    nk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nk(), 
      GetArenaForAllocation());
  }
  shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    shielded_trc20_contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shielded_trc20_contract_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_note()) {
    note_ = new ::protocol::Note(*from.note_);
  } else {
    note_ = nullptr;
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:protocol.NfTRC20Parameters)
}

inline void NfTRC20Parameters::SharedCtor() {
ak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shielded_trc20_contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&note_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&note_)) + sizeof(position_));
}

NfTRC20Parameters::~NfTRC20Parameters() {
  // @@protoc_insertion_point(destructor:protocol.NfTRC20Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NfTRC20Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shielded_trc20_contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete note_;
}

void NfTRC20Parameters::ArenaDtor(void* object) {
  NfTRC20Parameters* _this = reinterpret_cast< NfTRC20Parameters* >(object);
  (void)_this;
}
void NfTRC20Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NfTRC20Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NfTRC20Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NfTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ak_.ClearToEmpty();
  nk_.ClearToEmpty();
  shielded_trc20_contract_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
  position_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NfTRC20Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Note note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ak = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shielded_TRC20_contract_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_shielded_trc20_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NfTRC20Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NfTRC20Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::note(this), target, stream);
  }

  // bytes ak = 2;
  if (!this->_internal_ak().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ak(), target);
  }

  // bytes nk = 3;
  if (!this->_internal_nk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nk(), target);
  }

  // int64 position = 4;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_position(), target);
  }

  // bytes shielded_TRC20_contract_address = 5;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_shielded_trc20_contract_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NfTRC20Parameters)
  return target;
}

size_t NfTRC20Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NfTRC20Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ak = 2;
  if (!this->_internal_ak().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ak());
  }

  // bytes nk = 3;
  if (!this->_internal_nk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nk());
  }

  // bytes shielded_TRC20_contract_address = 5;
  if (!this->_internal_shielded_trc20_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shielded_trc20_contract_address());
  }

  // .protocol.Note note = 1;
  if (this->_internal_has_note()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *note_);
  }

  // int64 position = 4;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NfTRC20Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NfTRC20Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NfTRC20Parameters::GetClassData() const { return &_class_data_; }

void NfTRC20Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NfTRC20Parameters *>(to)->MergeFrom(
      static_cast<const NfTRC20Parameters &>(from));
}


void NfTRC20Parameters::MergeFrom(const NfTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NfTRC20Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ak().empty()) {
    _internal_set_ak(from._internal_ak());
  }
  if (!from._internal_nk().empty()) {
    _internal_set_nk(from._internal_nk());
  }
  if (!from._internal_shielded_trc20_contract_address().empty()) {
    _internal_set_shielded_trc20_contract_address(from._internal_shielded_trc20_contract_address());
  }
  if (from._internal_has_note()) {
    _internal_mutable_note()->::protocol::Note::MergeFrom(from._internal_note());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NfTRC20Parameters::CopyFrom(const NfTRC20Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NfTRC20Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NfTRC20Parameters::IsInitialized() const {
  return true;
}

void NfTRC20Parameters::InternalSwap(NfTRC20Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ak_, GetArenaForAllocation(),
      &other->ak_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nk_, GetArenaForAllocation(),
      &other->nk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shielded_trc20_contract_address_, GetArenaForAllocation(),
      &other->shielded_trc20_contract_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NfTRC20Parameters, position_)
      + sizeof(NfTRC20Parameters::position_)
      - PROTOBUF_FIELD_OFFSET(NfTRC20Parameters, note_)>(
          reinterpret_cast<char*>(&note_),
          reinterpret_cast<char*>(&other->note_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NfTRC20Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[75]);
}

// ===================================================================

class NullifierResult::_Internal {
 public:
};

NullifierResult::NullifierResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NullifierResult)
}
NullifierResult::NullifierResult(const NullifierResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_spent_ = from.is_spent_;
  // @@protoc_insertion_point(copy_constructor:protocol.NullifierResult)
}

inline void NullifierResult::SharedCtor() {
is_spent_ = false;
}

NullifierResult::~NullifierResult() {
  // @@protoc_insertion_point(destructor:protocol.NullifierResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NullifierResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NullifierResult::ArenaDtor(void* object) {
  NullifierResult* _this = reinterpret_cast< NullifierResult* >(object);
  (void)_this;
}
void NullifierResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NullifierResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NullifierResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NullifierResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_spent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NullifierResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_spent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NullifierResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NullifierResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_spent = 1;
  if (this->_internal_is_spent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_spent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NullifierResult)
  return target;
}

size_t NullifierResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NullifierResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_spent = 1;
  if (this->_internal_is_spent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullifierResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NullifierResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NullifierResult::GetClassData() const { return &_class_data_; }

void NullifierResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NullifierResult *>(to)->MergeFrom(
      static_cast<const NullifierResult &>(from));
}


void NullifierResult::MergeFrom(const NullifierResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NullifierResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_spent() != 0) {
    _internal_set_is_spent(from._internal_is_spent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NullifierResult::CopyFrom(const NullifierResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NullifierResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullifierResult::IsInitialized() const {
  return true;
}

void NullifierResult::InternalSwap(NullifierResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_spent_, other->is_spent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullifierResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[76]);
}

// ===================================================================

class ShieldedTRC20TriggerContractParameters::_Internal {
 public:
  static const ::protocol::ShieldedTRC20Parameters& shielded_trc20_parameters(const ShieldedTRC20TriggerContractParameters* msg);
};

const ::protocol::ShieldedTRC20Parameters&
ShieldedTRC20TriggerContractParameters::_Internal::shielded_trc20_parameters(const ShieldedTRC20TriggerContractParameters* msg) {
  return *msg->shielded_trc20_parameters_;
}
ShieldedTRC20TriggerContractParameters::ShieldedTRC20TriggerContractParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spend_authority_signature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ShieldedTRC20TriggerContractParameters)
}
ShieldedTRC20TriggerContractParameters::ShieldedTRC20TriggerContractParameters(const ShieldedTRC20TriggerContractParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spend_authority_signature_(from.spend_authority_signature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_shielded_trc20_parameters()) {
    shielded_trc20_parameters_ = new ::protocol::ShieldedTRC20Parameters(*from.shielded_trc20_parameters_);
  } else {
    shielded_trc20_parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ShieldedTRC20TriggerContractParameters)
}

inline void ShieldedTRC20TriggerContractParameters::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shielded_trc20_parameters_ = nullptr;
}

ShieldedTRC20TriggerContractParameters::~ShieldedTRC20TriggerContractParameters() {
  // @@protoc_insertion_point(destructor:protocol.ShieldedTRC20TriggerContractParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShieldedTRC20TriggerContractParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shielded_trc20_parameters_;
}

void ShieldedTRC20TriggerContractParameters::ArenaDtor(void* object) {
  ShieldedTRC20TriggerContractParameters* _this = reinterpret_cast< ShieldedTRC20TriggerContractParameters* >(object);
  (void)_this;
}
void ShieldedTRC20TriggerContractParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShieldedTRC20TriggerContractParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShieldedTRC20TriggerContractParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ShieldedTRC20TriggerContractParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spend_authority_signature_.Clear();
  amount_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && shielded_trc20_parameters_ != nullptr) {
    delete shielded_trc20_parameters_;
  }
  shielded_trc20_parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShieldedTRC20TriggerContractParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.ShieldedTRC20Parameters shielded_TRC20_Parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shielded_trc20_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.BytesMessage spend_authority_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spend_authority_signature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.ShieldedTRC20TriggerContractParameters.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldedTRC20TriggerContractParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ShieldedTRC20TriggerContractParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.ShieldedTRC20Parameters shielded_TRC20_Parameters = 1;
  if (this->_internal_has_shielded_trc20_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shielded_trc20_parameters(this), target, stream);
  }

  // repeated .protocol.BytesMessage spend_authority_signature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spend_authority_signature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_spend_authority_signature(i), target, stream);
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ShieldedTRC20TriggerContractParameters.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // bytes transparent_to_address = 4;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_transparent_to_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ShieldedTRC20TriggerContractParameters)
  return target;
}

size_t ShieldedTRC20TriggerContractParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ShieldedTRC20TriggerContractParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.BytesMessage spend_authority_signature = 2;
  total_size += 1UL * this->_internal_spend_authority_signature_size();
  for (const auto& msg : this->spend_authority_signature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string amount = 3;
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // bytes transparent_to_address = 4;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // .protocol.ShieldedTRC20Parameters shielded_TRC20_Parameters = 1;
  if (this->_internal_has_shielded_trc20_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shielded_trc20_parameters_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShieldedTRC20TriggerContractParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShieldedTRC20TriggerContractParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShieldedTRC20TriggerContractParameters::GetClassData() const { return &_class_data_; }

void ShieldedTRC20TriggerContractParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShieldedTRC20TriggerContractParameters *>(to)->MergeFrom(
      static_cast<const ShieldedTRC20TriggerContractParameters &>(from));
}


void ShieldedTRC20TriggerContractParameters::MergeFrom(const ShieldedTRC20TriggerContractParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ShieldedTRC20TriggerContractParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spend_authority_signature_.MergeFrom(from.spend_authority_signature_);
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (from._internal_has_shielded_trc20_parameters()) {
    _internal_mutable_shielded_trc20_parameters()->::protocol::ShieldedTRC20Parameters::MergeFrom(from._internal_shielded_trc20_parameters());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShieldedTRC20TriggerContractParameters::CopyFrom(const ShieldedTRC20TriggerContractParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ShieldedTRC20TriggerContractParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldedTRC20TriggerContractParameters::IsInitialized() const {
  return true;
}

void ShieldedTRC20TriggerContractParameters::InternalSwap(ShieldedTRC20TriggerContractParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spend_authority_signature_.InternalSwap(&other->spend_authority_signature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  swap(shielded_trc20_parameters_, other->shielded_trc20_parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShieldedTRC20TriggerContractParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_api_2fapi_2eproto_getter, &descriptor_table_api_2fapi_2eproto_once,
      file_level_metadata_api_2fapi_2eproto[77]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::Return* Arena::CreateMaybeMessage< ::protocol::Return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Return >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockReference* Arena::CreateMaybeMessage< ::protocol::BlockReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockReference >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WitnessList* Arena::CreateMaybeMessage< ::protocol::WitnessList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WitnessList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ProposalList* Arena::CreateMaybeMessage< ::protocol::ProposalList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ProposalList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ExchangeList* Arena::CreateMaybeMessage< ::protocol::ExchangeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExchangeList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AssetIssueList* Arena::CreateMaybeMessage< ::protocol::AssetIssueList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AssetIssueList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockList* Arena::CreateMaybeMessage< ::protocol::BlockList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionList* Arena::CreateMaybeMessage< ::protocol::TransactionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResourceMessage* Arena::CreateMaybeMessage< ::protocol::DelegatedResourceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DelegatedResourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResourceList* Arena::CreateMaybeMessage< ::protocol::DelegatedResourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DelegatedResourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeList* Arena::CreateMaybeMessage< ::protocol::NodeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Node* Arena::CreateMaybeMessage< ::protocol::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Address* Arena::CreateMaybeMessage< ::protocol::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EmptyMessage* Arena::CreateMaybeMessage< ::protocol::EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NumberMessage* Arena::CreateMaybeMessage< ::protocol::NumberMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NumberMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BytesMessage* Arena::CreateMaybeMessage< ::protocol::BytesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BytesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TimeMessage* Arena::CreateMaybeMessage< ::protocol::TimeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TimeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockLimit* Arena::CreateMaybeMessage< ::protocol::BlockLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionLimit* Arena::CreateMaybeMessage< ::protocol::TransactionLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountPaginated* Arena::CreateMaybeMessage< ::protocol::AccountPaginated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountPaginated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TimePaginatedMessage* Arena::CreateMaybeMessage< ::protocol::TimePaginatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TimePaginatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountNetMessage_AssetNetUsedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountNetMessage_AssetNetLimitEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountNetMessage* Arena::CreateMaybeMessage< ::protocol::AccountNetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountNetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountResourceMessage_AssetNetUsedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountResourceMessage_AssetNetLimitEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountResourceMessage* Arena::CreateMaybeMessage< ::protocol::AccountResourceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountResourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PaginatedMessage* Arena::CreateMaybeMessage< ::protocol::PaginatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PaginatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EasyTransferMessage* Arena::CreateMaybeMessage< ::protocol::EasyTransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EasyTransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EasyTransferAssetMessage* Arena::CreateMaybeMessage< ::protocol::EasyTransferAssetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EasyTransferAssetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EasyTransferByPrivateMessage* Arena::CreateMaybeMessage< ::protocol::EasyTransferByPrivateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EasyTransferByPrivateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EasyTransferAssetByPrivateMessage* Arena::CreateMaybeMessage< ::protocol::EasyTransferAssetByPrivateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EasyTransferAssetByPrivateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::EasyTransferResponse* Arena::CreateMaybeMessage< ::protocol::EasyTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::EasyTransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AddressPrKeyPairMessage* Arena::CreateMaybeMessage< ::protocol::AddressPrKeyPairMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AddressPrKeyPairMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionExtention* Arena::CreateMaybeMessage< ::protocol::TransactionExtention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionExtention >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockExtention* Arena::CreateMaybeMessage< ::protocol::BlockExtention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockExtention >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockListExtention* Arena::CreateMaybeMessage< ::protocol::BlockListExtention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockListExtention >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionListExtention* Arena::CreateMaybeMessage< ::protocol::TransactionListExtention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionListExtention >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockIncrementalMerkleTree* Arena::CreateMaybeMessage< ::protocol::BlockIncrementalMerkleTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockIncrementalMerkleTree >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionSignWeight_Result* Arena::CreateMaybeMessage< ::protocol::TransactionSignWeight_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionSignWeight_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionSignWeight* Arena::CreateMaybeMessage< ::protocol::TransactionSignWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionSignWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionApprovedList_Result* Arena::CreateMaybeMessage< ::protocol::TransactionApprovedList_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionApprovedList_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionApprovedList* Arena::CreateMaybeMessage< ::protocol::TransactionApprovedList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionApprovedList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IvkDecryptParameters* Arena::CreateMaybeMessage< ::protocol::IvkDecryptParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IvkDecryptParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IvkDecryptAndMarkParameters* Arena::CreateMaybeMessage< ::protocol::IvkDecryptAndMarkParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IvkDecryptAndMarkParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OvkDecryptParameters* Arena::CreateMaybeMessage< ::protocol::OvkDecryptParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::OvkDecryptParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotes_NoteTx* Arena::CreateMaybeMessage< ::protocol::DecryptNotes_NoteTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotes_NoteTx >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotes* Arena::CreateMaybeMessage< ::protocol::DecryptNotes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotes >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotesMarked_NoteTx* Arena::CreateMaybeMessage< ::protocol::DecryptNotesMarked_NoteTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotesMarked_NoteTx >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotesMarked* Arena::CreateMaybeMessage< ::protocol::DecryptNotesMarked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotesMarked >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Note* Arena::CreateMaybeMessage< ::protocol::Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Note >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendNote* Arena::CreateMaybeMessage< ::protocol::SpendNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SpendNote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ReceiveNote* Arena::CreateMaybeMessage< ::protocol::ReceiveNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ReceiveNote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PrivateParameters* Arena::CreateMaybeMessage< ::protocol::PrivateParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PrivateParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PrivateParametersWithoutAsk* Arena::CreateMaybeMessage< ::protocol::PrivateParametersWithoutAsk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PrivateParametersWithoutAsk >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendAuthSigParameters* Arena::CreateMaybeMessage< ::protocol::SpendAuthSigParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SpendAuthSigParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NfParameters* Arena::CreateMaybeMessage< ::protocol::NfParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NfParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ExpandedSpendingKeyMessage* Arena::CreateMaybeMessage< ::protocol::ExpandedSpendingKeyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExpandedSpendingKeyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ViewingKeyMessage* Arena::CreateMaybeMessage< ::protocol::ViewingKeyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ViewingKeyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncomingViewingKeyMessage* Arena::CreateMaybeMessage< ::protocol::IncomingViewingKeyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IncomingViewingKeyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DiversifierMessage* Arena::CreateMaybeMessage< ::protocol::DiversifierMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DiversifierMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncomingViewingKeyDiversifierMessage* Arena::CreateMaybeMessage< ::protocol::IncomingViewingKeyDiversifierMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IncomingViewingKeyDiversifierMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PaymentAddressMessage* Arena::CreateMaybeMessage< ::protocol::PaymentAddressMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PaymentAddressMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ShieldedAddressInfo* Arena::CreateMaybeMessage< ::protocol::ShieldedAddressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ShieldedAddressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NoteParameters* Arena::CreateMaybeMessage< ::protocol::NoteParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NoteParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendResult* Arena::CreateMaybeMessage< ::protocol::SpendResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SpendResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionInfoList* Arena::CreateMaybeMessage< ::protocol::TransactionInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendNoteTRC20* Arena::CreateMaybeMessage< ::protocol::SpendNoteTRC20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SpendNoteTRC20 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PrivateShieldedTRC20Parameters* Arena::CreateMaybeMessage< ::protocol::PrivateShieldedTRC20Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PrivateShieldedTRC20Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PrivateShieldedTRC20ParametersWithoutAsk* Arena::CreateMaybeMessage< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PrivateShieldedTRC20ParametersWithoutAsk >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ShieldedTRC20Parameters* Arena::CreateMaybeMessage< ::protocol::ShieldedTRC20Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ShieldedTRC20Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IvkDecryptTRC20Parameters* Arena::CreateMaybeMessage< ::protocol::IvkDecryptTRC20Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IvkDecryptTRC20Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OvkDecryptTRC20Parameters* Arena::CreateMaybeMessage< ::protocol::OvkDecryptTRC20Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::OvkDecryptTRC20Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotesTRC20_NoteTx* Arena::CreateMaybeMessage< ::protocol::DecryptNotesTRC20_NoteTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotesTRC20_NoteTx >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DecryptNotesTRC20* Arena::CreateMaybeMessage< ::protocol::DecryptNotesTRC20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DecryptNotesTRC20 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NfTRC20Parameters* Arena::CreateMaybeMessage< ::protocol::NfTRC20Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NfTRC20Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NullifierResult* Arena::CreateMaybeMessage< ::protocol::NullifierResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NullifierResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ShieldedTRC20TriggerContractParameters* Arena::CreateMaybeMessage< ::protocol::ShieldedTRC20TriggerContractParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ShieldedTRC20TriggerContractParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
