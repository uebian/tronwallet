// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/service.proto

#include "google/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace api {
constexpr Service::Service(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apis_()
  , types_()
  , enums_()
  , endpoints_()
  , logs_()
  , metrics_()
  , monitored_resources_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , producer_project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , documentation_(nullptr)
  , backend_(nullptr)
  , http_(nullptr)
  , quota_(nullptr)
  , authentication_(nullptr)
  , context_(nullptr)
  , usage_(nullptr)
  , config_version_(nullptr)
  , control_(nullptr)
  , billing_(nullptr)
  , logging_(nullptr)
  , monitoring_(nullptr)
  , system_parameters_(nullptr)
  , source_info_(nullptr){}
struct ServiceDefaultTypeInternal {
  constexpr ServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceDefaultTypeInternal() {}
  union {
    Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceDefaultTypeInternal _Service_default_instance_;
}  // namespace api
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservice_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Service, name_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, title_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, producer_project_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, id_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, apis_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, types_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, enums_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, documentation_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, backend_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, http_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, quota_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, authentication_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, context_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, usage_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, endpoints_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, control_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, logs_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, monitored_resources_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, billing_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, logging_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, monitoring_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, system_parameters_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, source_info_),
  PROTOBUF_FIELD_OFFSET(::google::api::Service, config_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::Service)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Service_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030google/api/service.proto\022\ngoogle.api\032\025"
  "google/api/auth.proto\032\030google/api/backen"
  "d.proto\032\030google/api/billing.proto\032\030googl"
  "e/api/context.proto\032\030google/api/control."
  "proto\032\036google/api/documentation.proto\032\031g"
  "oogle/api/endpoint.proto\032\025google/api/htt"
  "p.proto\032\026google/api/label.proto\032\024google/"
  "api/log.proto\032\030google/api/logging.proto\032"
  "\027google/api/metric.proto\032#google/api/mon"
  "itored_resource.proto\032\033google/api/monito"
  "ring.proto\032\026google/api/quota.proto\032\031goog"
  "le/api/resource.proto\032\034google/api/source"
  "_info.proto\032!google/api/system_parameter"
  ".proto\032\026google/api/usage.proto\032\031google/p"
  "rotobuf/any.proto\032\031google/protobuf/api.p"
  "roto\032\032google/protobuf/type.proto\032\036google"
  "/protobuf/wrappers.proto\"\332\007\n\007Service\022\014\n\004"
  "name\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\033\n\023producer_pr"
  "oject_id\030\026 \001(\t\022\n\n\002id\030! \001(\t\022\"\n\004apis\030\003 \003(\013"
  "2\024.google.protobuf.Api\022$\n\005types\030\004 \003(\0132\025."
  "google.protobuf.Type\022$\n\005enums\030\005 \003(\0132\025.go"
  "ogle.protobuf.Enum\0220\n\rdocumentation\030\006 \001("
  "\0132\031.google.api.Documentation\022$\n\007backend\030"
  "\010 \001(\0132\023.google.api.Backend\022\036\n\004http\030\t \001(\013"
  "2\020.google.api.Http\022 \n\005quota\030\n \001(\0132\021.goog"
  "le.api.Quota\0222\n\016authentication\030\013 \001(\0132\032.g"
  "oogle.api.Authentication\022$\n\007context\030\014 \001("
  "\0132\023.google.api.Context\022 \n\005usage\030\017 \001(\0132\021."
  "google.api.Usage\022\'\n\tendpoints\030\022 \003(\0132\024.go"
  "ogle.api.Endpoint\022$\n\007control\030\025 \001(\0132\023.goo"
  "gle.api.Control\022\'\n\004logs\030\027 \003(\0132\031.google.a"
  "pi.LogDescriptor\022-\n\007metrics\030\030 \003(\0132\034.goog"
  "le.api.MetricDescriptor\022D\n\023monitored_res"
  "ources\030\031 \003(\0132\'.google.api.MonitoredResou"
  "rceDescriptor\022$\n\007billing\030\032 \001(\0132\023.google."
  "api.Billing\022$\n\007logging\030\033 \001(\0132\023.google.ap"
  "i.Logging\022*\n\nmonitoring\030\034 \001(\0132\026.google.a"
  "pi.Monitoring\0227\n\021system_parameters\030\035 \001(\013"
  "2\034.google.api.SystemParameters\022+\n\013source"
  "_info\030% \001(\0132\026.google.api.SourceInfo\0228\n\016c"
  "onfig_version\030\024 \001(\0132\034.google.protobuf.UI"
  "nt32ValueB\002\030\001Bn\n\016com.google.apiB\014Service"
  "ProtoP\001ZEgoogle.golang.org/genproto/goog"
  "leapis/api/serviceconfig;serviceconfig\242\002"
  "\004GAPIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fservice_2eproto_deps[23] = {
  &::descriptor_table_google_2fapi_2fauth_2eproto,
  &::descriptor_table_google_2fapi_2fbackend_2eproto,
  &::descriptor_table_google_2fapi_2fbilling_2eproto,
  &::descriptor_table_google_2fapi_2fcontext_2eproto,
  &::descriptor_table_google_2fapi_2fcontrol_2eproto,
  &::descriptor_table_google_2fapi_2fdocumentation_2eproto,
  &::descriptor_table_google_2fapi_2fendpoint_2eproto,
  &::descriptor_table_google_2fapi_2fhttp_2eproto,
  &::descriptor_table_google_2fapi_2flabel_2eproto,
  &::descriptor_table_google_2fapi_2flog_2eproto,
  &::descriptor_table_google_2fapi_2flogging_2eproto,
  &::descriptor_table_google_2fapi_2fmetric_2eproto,
  &::descriptor_table_google_2fapi_2fmonitored_5fresource_2eproto,
  &::descriptor_table_google_2fapi_2fmonitoring_2eproto,
  &::descriptor_table_google_2fapi_2fquota_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fapi_2fsource_5finfo_2eproto,
  &::descriptor_table_google_2fapi_2fsystem_5fparameter_2eproto,
  &::descriptor_table_google_2fapi_2fusage_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fapi_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftype_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservice_2eproto = {
  false, false, 1773, descriptor_table_protodef_google_2fapi_2fservice_2eproto, "google/api/service.proto", 
  &descriptor_table_google_2fapi_2fservice_2eproto_once, descriptor_table_google_2fapi_2fservice_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_google_2fapi_2fservice_2eproto::offsets,
  file_level_metadata_google_2fapi_2fservice_2eproto, file_level_enum_descriptors_google_2fapi_2fservice_2eproto, file_level_service_descriptors_google_2fapi_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_google_2fapi_2fservice_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fservice_2eproto(&descriptor_table_google_2fapi_2fservice_2eproto);
namespace google {
namespace api {

// ===================================================================

class Service::_Internal {
 public:
  static const ::google::api::Documentation& documentation(const Service* msg);
  static const ::google::api::Backend& backend(const Service* msg);
  static const ::google::api::Http& http(const Service* msg);
  static const ::google::api::Quota& quota(const Service* msg);
  static const ::google::api::Authentication& authentication(const Service* msg);
  static const ::google::api::Context& context(const Service* msg);
  static const ::google::api::Usage& usage(const Service* msg);
  static const ::google::api::Control& control(const Service* msg);
  static const ::google::api::Billing& billing(const Service* msg);
  static const ::google::api::Logging& logging(const Service* msg);
  static const ::google::api::Monitoring& monitoring(const Service* msg);
  static const ::google::api::SystemParameters& system_parameters(const Service* msg);
  static const ::google::api::SourceInfo& source_info(const Service* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& config_version(const Service* msg);
};

const ::google::api::Documentation&
Service::_Internal::documentation(const Service* msg) {
  return *msg->documentation_;
}
const ::google::api::Backend&
Service::_Internal::backend(const Service* msg) {
  return *msg->backend_;
}
const ::google::api::Http&
Service::_Internal::http(const Service* msg) {
  return *msg->http_;
}
const ::google::api::Quota&
Service::_Internal::quota(const Service* msg) {
  return *msg->quota_;
}
const ::google::api::Authentication&
Service::_Internal::authentication(const Service* msg) {
  return *msg->authentication_;
}
const ::google::api::Context&
Service::_Internal::context(const Service* msg) {
  return *msg->context_;
}
const ::google::api::Usage&
Service::_Internal::usage(const Service* msg) {
  return *msg->usage_;
}
const ::google::api::Control&
Service::_Internal::control(const Service* msg) {
  return *msg->control_;
}
const ::google::api::Billing&
Service::_Internal::billing(const Service* msg) {
  return *msg->billing_;
}
const ::google::api::Logging&
Service::_Internal::logging(const Service* msg) {
  return *msg->logging_;
}
const ::google::api::Monitoring&
Service::_Internal::monitoring(const Service* msg) {
  return *msg->monitoring_;
}
const ::google::api::SystemParameters&
Service::_Internal::system_parameters(const Service* msg) {
  return *msg->system_parameters_;
}
const ::google::api::SourceInfo&
Service::_Internal::source_info(const Service* msg) {
  return *msg->source_info_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
Service::_Internal::config_version(const Service* msg) {
  return *msg->config_version_;
}
void Service::clear_apis() {
  apis_.Clear();
}
void Service::clear_types() {
  types_.Clear();
}
void Service::clear_enums() {
  enums_.Clear();
}
void Service::clear_documentation() {
  if (GetArenaForAllocation() == nullptr && documentation_ != nullptr) {
    delete documentation_;
  }
  documentation_ = nullptr;
}
void Service::clear_backend() {
  if (GetArenaForAllocation() == nullptr && backend_ != nullptr) {
    delete backend_;
  }
  backend_ = nullptr;
}
void Service::clear_http() {
  if (GetArenaForAllocation() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
}
void Service::clear_quota() {
  if (GetArenaForAllocation() == nullptr && quota_ != nullptr) {
    delete quota_;
  }
  quota_ = nullptr;
}
void Service::clear_authentication() {
  if (GetArenaForAllocation() == nullptr && authentication_ != nullptr) {
    delete authentication_;
  }
  authentication_ = nullptr;
}
void Service::clear_context() {
  if (GetArenaForAllocation() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
void Service::clear_usage() {
  if (GetArenaForAllocation() == nullptr && usage_ != nullptr) {
    delete usage_;
  }
  usage_ = nullptr;
}
void Service::clear_endpoints() {
  endpoints_.Clear();
}
void Service::clear_control() {
  if (GetArenaForAllocation() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
void Service::clear_logs() {
  logs_.Clear();
}
void Service::clear_metrics() {
  metrics_.Clear();
}
void Service::clear_monitored_resources() {
  monitored_resources_.Clear();
}
void Service::clear_billing() {
  if (GetArenaForAllocation() == nullptr && billing_ != nullptr) {
    delete billing_;
  }
  billing_ = nullptr;
}
void Service::clear_logging() {
  if (GetArenaForAllocation() == nullptr && logging_ != nullptr) {
    delete logging_;
  }
  logging_ = nullptr;
}
void Service::clear_monitoring() {
  if (GetArenaForAllocation() == nullptr && monitoring_ != nullptr) {
    delete monitoring_;
  }
  monitoring_ = nullptr;
}
void Service::clear_system_parameters() {
  if (GetArenaForAllocation() == nullptr && system_parameters_ != nullptr) {
    delete system_parameters_;
  }
  system_parameters_ = nullptr;
}
void Service::clear_source_info() {
  if (GetArenaForAllocation() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
}
void Service::clear_config_version() {
  if (GetArenaForAllocation() == nullptr && config_version_ != nullptr) {
    delete config_version_;
  }
  config_version_ = nullptr;
}
Service::Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apis_(arena),
  types_(arena),
  enums_(arena),
  endpoints_(arena),
  logs_(arena),
  metrics_(arena),
  monitored_resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apis_(from.apis_),
      types_(from.types_),
      enums_(from.enums_),
      endpoints_(from.endpoints_),
      logs_(from.logs_),
      metrics_(from.metrics_),
      monitored_resources_(from.monitored_resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  producer_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    producer_project_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer_project_id().empty()) {
    producer_project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_producer_project_id(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_documentation()) {
    documentation_ = new ::google::api::Documentation(*from.documentation_);
  } else {
    documentation_ = nullptr;
  }
  if (from._internal_has_backend()) {
    backend_ = new ::google::api::Backend(*from.backend_);
  } else {
    backend_ = nullptr;
  }
  if (from._internal_has_http()) {
    http_ = new ::google::api::Http(*from.http_);
  } else {
    http_ = nullptr;
  }
  if (from._internal_has_quota()) {
    quota_ = new ::google::api::Quota(*from.quota_);
  } else {
    quota_ = nullptr;
  }
  if (from._internal_has_authentication()) {
    authentication_ = new ::google::api::Authentication(*from.authentication_);
  } else {
    authentication_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::google::api::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_usage()) {
    usage_ = new ::google::api::Usage(*from.usage_);
  } else {
    usage_ = nullptr;
  }
  if (from._internal_has_config_version()) {
    config_version_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.config_version_);
  } else {
    config_version_ = nullptr;
  }
  if (from._internal_has_control()) {
    control_ = new ::google::api::Control(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from._internal_has_billing()) {
    billing_ = new ::google::api::Billing(*from.billing_);
  } else {
    billing_ = nullptr;
  }
  if (from._internal_has_logging()) {
    logging_ = new ::google::api::Logging(*from.logging_);
  } else {
    logging_ = nullptr;
  }
  if (from._internal_has_monitoring()) {
    monitoring_ = new ::google::api::Monitoring(*from.monitoring_);
  } else {
    monitoring_ = nullptr;
  }
  if (from._internal_has_system_parameters()) {
    system_parameters_ = new ::google::api::SystemParameters(*from.system_parameters_);
  } else {
    system_parameters_ = nullptr;
  }
  if (from._internal_has_source_info()) {
    source_info_ = new ::google::api::SourceInfo(*from.source_info_);
  } else {
    source_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.Service)
}

inline void Service::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
producer_project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_project_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&documentation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_info_) -
    reinterpret_cast<char*>(&documentation_)) + sizeof(source_info_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:google.api.Service)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete documentation_;
  if (this != internal_default_instance()) delete backend_;
  if (this != internal_default_instance()) delete http_;
  if (this != internal_default_instance()) delete quota_;
  if (this != internal_default_instance()) delete authentication_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete usage_;
  if (this != internal_default_instance()) delete config_version_;
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete billing_;
  if (this != internal_default_instance()) delete logging_;
  if (this != internal_default_instance()) delete monitoring_;
  if (this != internal_default_instance()) delete system_parameters_;
  if (this != internal_default_instance()) delete source_info_;
}

void Service::ArenaDtor(void* object) {
  Service* _this = reinterpret_cast< Service* >(object);
  (void)_this;
}
void Service::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Service)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apis_.Clear();
  types_.Clear();
  enums_.Clear();
  endpoints_.Clear();
  logs_.Clear();
  metrics_.Clear();
  monitored_resources_.Clear();
  name_.ClearToEmpty();
  title_.ClearToEmpty();
  producer_project_id_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && documentation_ != nullptr) {
    delete documentation_;
  }
  documentation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && backend_ != nullptr) {
    delete backend_;
  }
  backend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
  if (GetArenaForAllocation() == nullptr && quota_ != nullptr) {
    delete quota_;
  }
  quota_ = nullptr;
  if (GetArenaForAllocation() == nullptr && authentication_ != nullptr) {
    delete authentication_;
  }
  authentication_ = nullptr;
  if (GetArenaForAllocation() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && usage_ != nullptr) {
    delete usage_;
  }
  usage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_version_ != nullptr) {
    delete config_version_;
  }
  config_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
  if (GetArenaForAllocation() == nullptr && billing_ != nullptr) {
    delete billing_;
  }
  billing_ = nullptr;
  if (GetArenaForAllocation() == nullptr && logging_ != nullptr) {
    delete logging_;
  }
  logging_ = nullptr;
  if (GetArenaForAllocation() == nullptr && monitoring_ != nullptr) {
    delete monitoring_;
  }
  monitoring_ = nullptr;
  if (GetArenaForAllocation() == nullptr && system_parameters_ != nullptr) {
    delete system_parameters_;
  }
  system_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.Service.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.Service.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Api apis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Type types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Enum enums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enums(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.Documentation documentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Backend backend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_backend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Http http = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Quota quota = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_quota(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Authentication authentication = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Context context = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Usage usage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.Endpoint endpoints = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value config_version = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Control control = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string producer_project_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_producer_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.Service.producer_project_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.LogDescriptor logs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.MetricDescriptor metrics = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_monitored_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.Billing billing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Logging logging = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_logging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Monitoring monitoring = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitoring(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.SystemParameters system_parameters = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.Service.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.SourceInfo source_info = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Service::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Service)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // repeated .google.protobuf.Api apis = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_apis(i), target, stream);
  }

  // repeated .google.protobuf.Type types = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_types(i), target, stream);
  }

  // repeated .google.protobuf.Enum enums = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enums_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_enums(i), target, stream);
  }

  // .google.api.Documentation documentation = 6;
  if (this->_internal_has_documentation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::documentation(this), target, stream);
  }

  // .google.api.Backend backend = 8;
  if (this->_internal_has_backend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::backend(this), target, stream);
  }

  // .google.api.Http http = 9;
  if (this->_internal_has_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::http(this), target, stream);
  }

  // .google.api.Quota quota = 10;
  if (this->_internal_has_quota()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::quota(this), target, stream);
  }

  // .google.api.Authentication authentication = 11;
  if (this->_internal_has_authentication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::authentication(this), target, stream);
  }

  // .google.api.Context context = 12;
  if (this->_internal_has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::context(this), target, stream);
  }

  // .google.api.Usage usage = 15;
  if (this->_internal_has_usage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::usage(this), target, stream);
  }

  // repeated .google.api.Endpoint endpoints = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_endpoints(i), target, stream);
  }

  // .google.protobuf.UInt32Value config_version = 20 [deprecated = true];
  if (this->_internal_has_config_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::config_version(this), target, stream);
  }

  // .google.api.Control control = 21;
  if (this->_internal_has_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::control(this), target, stream);
  }

  // string producer_project_id = 22;
  if (!this->_internal_producer_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producer_project_id().data(), static_cast<int>(this->_internal_producer_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.producer_project_id");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_producer_project_id(), target);
  }

  // repeated .google.api.LogDescriptor logs = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_logs(i), target, stream);
  }

  // repeated .google.api.MetricDescriptor metrics = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_metrics(i), target, stream);
  }

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monitored_resources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_monitored_resources(i), target, stream);
  }

  // .google.api.Billing billing = 26;
  if (this->_internal_has_billing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::billing(this), target, stream);
  }

  // .google.api.Logging logging = 27;
  if (this->_internal_has_logging()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::logging(this), target, stream);
  }

  // .google.api.Monitoring monitoring = 28;
  if (this->_internal_has_monitoring()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::monitoring(this), target, stream);
  }

  // .google.api.SystemParameters system_parameters = 29;
  if (this->_internal_has_system_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::system_parameters(this), target, stream);
  }

  // string id = 33;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.Service.id");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_id(), target);
  }

  // .google.api.SourceInfo source_info = 37;
  if (this->_internal_has_source_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::source_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Service)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Api apis = 3;
  total_size += 1UL * this->_internal_apis_size();
  for (const auto& msg : this->apis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Type types = 4;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Enum enums = 5;
  total_size += 1UL * this->_internal_enums_size();
  for (const auto& msg : this->enums_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.Endpoint endpoints = 18;
  total_size += 2UL * this->_internal_endpoints_size();
  for (const auto& msg : this->endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.LogDescriptor logs = 23;
  total_size += 2UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.MetricDescriptor metrics = 24;
  total_size += 2UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  total_size += 2UL * this->_internal_monitored_resources_size();
  for (const auto& msg : this->monitored_resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string producer_project_id = 22;
  if (!this->_internal_producer_project_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producer_project_id());
  }

  // string id = 33;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.api.Documentation documentation = 6;
  if (this->_internal_has_documentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *documentation_);
  }

  // .google.api.Backend backend = 8;
  if (this->_internal_has_backend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backend_);
  }

  // .google.api.Http http = 9;
  if (this->_internal_has_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_);
  }

  // .google.api.Quota quota = 10;
  if (this->_internal_has_quota()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quota_);
  }

  // .google.api.Authentication authentication = 11;
  if (this->_internal_has_authentication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authentication_);
  }

  // .google.api.Context context = 12;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // .google.api.Usage usage = 15;
  if (this->_internal_has_usage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usage_);
  }

  // .google.protobuf.UInt32Value config_version = 20 [deprecated = true];
  if (this->_internal_has_config_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_version_);
  }

  // .google.api.Control control = 21;
  if (this->_internal_has_control()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_);
  }

  // .google.api.Billing billing = 26;
  if (this->_internal_has_billing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billing_);
  }

  // .google.api.Logging logging = 27;
  if (this->_internal_has_logging()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_);
  }

  // .google.api.Monitoring monitoring = 28;
  if (this->_internal_has_monitoring()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monitoring_);
  }

  // .google.api.SystemParameters system_parameters = 29;
  if (this->_internal_has_system_parameters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_parameters_);
  }

  // .google.api.SourceInfo source_info = 37;
  if (this->_internal_has_source_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Service::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Service::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Service::GetClassData() const { return &_class_data_; }

void Service::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Service *>(to)->MergeFrom(
      static_cast<const Service &>(from));
}


void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Service)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apis_.MergeFrom(from.apis_);
  types_.MergeFrom(from.types_);
  enums_.MergeFrom(from.enums_);
  endpoints_.MergeFrom(from.endpoints_);
  logs_.MergeFrom(from.logs_);
  metrics_.MergeFrom(from.metrics_);
  monitored_resources_.MergeFrom(from.monitored_resources_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_producer_project_id().empty()) {
    _internal_set_producer_project_id(from._internal_producer_project_id());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_documentation()) {
    _internal_mutable_documentation()->::google::api::Documentation::MergeFrom(from._internal_documentation());
  }
  if (from._internal_has_backend()) {
    _internal_mutable_backend()->::google::api::Backend::MergeFrom(from._internal_backend());
  }
  if (from._internal_has_http()) {
    _internal_mutable_http()->::google::api::Http::MergeFrom(from._internal_http());
  }
  if (from._internal_has_quota()) {
    _internal_mutable_quota()->::google::api::Quota::MergeFrom(from._internal_quota());
  }
  if (from._internal_has_authentication()) {
    _internal_mutable_authentication()->::google::api::Authentication::MergeFrom(from._internal_authentication());
  }
  if (from._internal_has_context()) {
    _internal_mutable_context()->::google::api::Context::MergeFrom(from._internal_context());
  }
  if (from._internal_has_usage()) {
    _internal_mutable_usage()->::google::api::Usage::MergeFrom(from._internal_usage());
  }
  if (from._internal_has_config_version()) {
    _internal_mutable_config_version()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_config_version());
  }
  if (from._internal_has_control()) {
    _internal_mutable_control()->::google::api::Control::MergeFrom(from._internal_control());
  }
  if (from._internal_has_billing()) {
    _internal_mutable_billing()->::google::api::Billing::MergeFrom(from._internal_billing());
  }
  if (from._internal_has_logging()) {
    _internal_mutable_logging()->::google::api::Logging::MergeFrom(from._internal_logging());
  }
  if (from._internal_has_monitoring()) {
    _internal_mutable_monitoring()->::google::api::Monitoring::MergeFrom(from._internal_monitoring());
  }
  if (from._internal_has_system_parameters()) {
    _internal_mutable_system_parameters()->::google::api::SystemParameters::MergeFrom(from._internal_system_parameters());
  }
  if (from._internal_has_source_info()) {
    _internal_mutable_source_info()->::google::api::SourceInfo::MergeFrom(from._internal_source_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apis_.InternalSwap(&other->apis_);
  types_.InternalSwap(&other->types_);
  enums_.InternalSwap(&other->enums_);
  endpoints_.InternalSwap(&other->endpoints_);
  logs_.InternalSwap(&other->logs_);
  metrics_.InternalSwap(&other->metrics_);
  monitored_resources_.InternalSwap(&other->monitored_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &producer_project_id_, lhs_arena,
      &other->producer_project_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Service, source_info_)
      + sizeof(Service::source_info_)
      - PROTOBUF_FIELD_OFFSET(Service, documentation_)>(
          reinterpret_cast<char*>(&documentation_),
          reinterpret_cast<char*>(&other->documentation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fservice_2eproto_getter, &descriptor_table_google_2fapi_2fservice_2eproto_once,
      file_level_metadata_google_2fapi_2fservice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Service* Arena::CreateMaybeMessage< ::google::api::Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Service >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
