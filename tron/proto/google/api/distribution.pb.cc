// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/distribution.proto

#include "google/api/distribution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace api {
constexpr Distribution_Range::Distribution_Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(0)
  , max_(0){}
struct Distribution_RangeDefaultTypeInternal {
  constexpr Distribution_RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_RangeDefaultTypeInternal() {}
  union {
    Distribution_Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_RangeDefaultTypeInternal _Distribution_Range_default_instance_;
constexpr Distribution_BucketOptions_Linear::Distribution_BucketOptions_Linear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , offset_(0)
  , num_finite_buckets_(0){}
struct Distribution_BucketOptions_LinearDefaultTypeInternal {
  constexpr Distribution_BucketOptions_LinearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_BucketOptions_LinearDefaultTypeInternal() {}
  union {
    Distribution_BucketOptions_Linear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_BucketOptions_LinearDefaultTypeInternal _Distribution_BucketOptions_Linear_default_instance_;
constexpr Distribution_BucketOptions_Exponential::Distribution_BucketOptions_Exponential(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : growth_factor_(0)
  , scale_(0)
  , num_finite_buckets_(0){}
struct Distribution_BucketOptions_ExponentialDefaultTypeInternal {
  constexpr Distribution_BucketOptions_ExponentialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_BucketOptions_ExponentialDefaultTypeInternal() {}
  union {
    Distribution_BucketOptions_Exponential _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_BucketOptions_ExponentialDefaultTypeInternal _Distribution_BucketOptions_Exponential_default_instance_;
constexpr Distribution_BucketOptions_Explicit::Distribution_BucketOptions_Explicit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bounds_(){}
struct Distribution_BucketOptions_ExplicitDefaultTypeInternal {
  constexpr Distribution_BucketOptions_ExplicitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_BucketOptions_ExplicitDefaultTypeInternal() {}
  union {
    Distribution_BucketOptions_Explicit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_BucketOptions_ExplicitDefaultTypeInternal _Distribution_BucketOptions_Explicit_default_instance_;
constexpr Distribution_BucketOptions::Distribution_BucketOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct Distribution_BucketOptionsDefaultTypeInternal {
  constexpr Distribution_BucketOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_BucketOptionsDefaultTypeInternal() {}
  union {
    Distribution_BucketOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_BucketOptionsDefaultTypeInternal _Distribution_BucketOptions_default_instance_;
constexpr Distribution_Exemplar::Distribution_Exemplar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_()
  , timestamp_(nullptr)
  , value_(0){}
struct Distribution_ExemplarDefaultTypeInternal {
  constexpr Distribution_ExemplarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Distribution_ExemplarDefaultTypeInternal() {}
  union {
    Distribution_Exemplar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Distribution_ExemplarDefaultTypeInternal _Distribution_Exemplar_default_instance_;
constexpr Distribution::Distribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_counts_()
  , _bucket_counts_cached_byte_size_(0)
  , exemplars_()
  , range_(nullptr)
  , bucket_options_(nullptr)
  , count_(int64_t{0})
  , mean_(0)
  , sum_of_squared_deviation_(0){}
struct DistributionDefaultTypeInternal {
  constexpr DistributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistributionDefaultTypeInternal() {}
  union {
    Distribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistributionDefaultTypeInternal _Distribution_default_instance_;
}  // namespace api
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fdistribution_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fdistribution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fdistribution_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fdistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, min_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, width_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, growth_factor_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Explicit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Explicit, bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Exemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Exemplar, value_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Exemplar, timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Exemplar, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, count_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, mean_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, sum_of_squared_deviation_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, range_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, bucket_options_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, exemplars_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::Distribution_Range)},
  { 8, -1, -1, sizeof(::google::api::Distribution_BucketOptions_Linear)},
  { 17, -1, -1, sizeof(::google::api::Distribution_BucketOptions_Exponential)},
  { 26, -1, -1, sizeof(::google::api::Distribution_BucketOptions_Explicit)},
  { 33, -1, -1, sizeof(::google::api::Distribution_BucketOptions)},
  { 43, -1, -1, sizeof(::google::api::Distribution_Exemplar)},
  { 52, -1, -1, sizeof(::google::api::Distribution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Linear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Exponential_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Explicit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_Exemplar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fdistribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035google/api/distribution.proto\022\ngoogle."
  "api\032\031google/protobuf/any.proto\032\037google/p"
  "rotobuf/timestamp.proto\"\331\006\n\014Distribution"
  "\022\r\n\005count\030\001 \001(\003\022\014\n\004mean\030\002 \001(\001\022 \n\030sum_of_"
  "squared_deviation\030\003 \001(\001\022-\n\005range\030\004 \001(\0132\036"
  ".google.api.Distribution.Range\022>\n\016bucket"
  "_options\030\006 \001(\0132&.google.api.Distribution"
  ".BucketOptions\022\025\n\rbucket_counts\030\007 \003(\003\0224\n"
  "\texemplars\030\n \003(\0132!.google.api.Distributi"
  "on.Exemplar\032!\n\005Range\022\013\n\003min\030\001 \001(\001\022\013\n\003max"
  "\030\002 \001(\001\032\265\003\n\rBucketOptions\022G\n\016linear_bucke"
  "ts\030\001 \001(\0132-.google.api.Distribution.Bucke"
  "tOptions.LinearH\000\022Q\n\023exponential_buckets"
  "\030\002 \001(\01322.google.api.Distribution.BucketO"
  "ptions.ExponentialH\000\022K\n\020explicit_buckets"
  "\030\003 \001(\0132/.google.api.Distribution.BucketO"
  "ptions.ExplicitH\000\032C\n\006Linear\022\032\n\022num_finit"
  "e_buckets\030\001 \001(\005\022\r\n\005width\030\002 \001(\001\022\016\n\006offset"
  "\030\003 \001(\001\032O\n\013Exponential\022\032\n\022num_finite_buck"
  "ets\030\001 \001(\005\022\025\n\rgrowth_factor\030\002 \001(\001\022\r\n\005scal"
  "e\030\003 \001(\001\032\032\n\010Explicit\022\016\n\006bounds\030\001 \003(\001B\t\n\007o"
  "ptions\032s\n\010Exemplar\022\r\n\005value\030\001 \001(\001\022-\n\ttim"
  "estamp\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\022)\n\013attachments\030\003 \003(\0132\024.google.protobuf."
  "AnyBq\n\016com.google.apiB\021DistributionProto"
  "P\001ZCgoogle.golang.org/genproto/googleapi"
  "s/api/distribution;distribution\242\002\004GAPIb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fdistribution_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fdistribution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fdistribution_2eproto = {
  false, false, 1086, descriptor_table_protodef_google_2fapi_2fdistribution_2eproto, "google/api/distribution.proto", 
  &descriptor_table_google_2fapi_2fdistribution_2eproto_once, descriptor_table_google_2fapi_2fdistribution_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_google_2fapi_2fdistribution_2eproto::offsets,
  file_level_metadata_google_2fapi_2fdistribution_2eproto, file_level_enum_descriptors_google_2fapi_2fdistribution_2eproto, file_level_service_descriptors_google_2fapi_2fdistribution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_google_2fapi_2fdistribution_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fdistribution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fdistribution_2eproto(&descriptor_table_google_2fapi_2fdistribution_2eproto);
namespace google {
namespace api {

// ===================================================================

class Distribution_Range::_Internal {
 public:
};

Distribution_Range::Distribution_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.Range)
}
Distribution_Range::Distribution_Range(const Distribution_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.Range)
}

inline void Distribution_Range::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Distribution_Range::~Distribution_Range() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distribution_Range::ArenaDtor(void* object) {
  Distribution_Range* _this = reinterpret_cast< Distribution_Range* >(object);
  (void)_this;
}
void Distribution_Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.Range)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_Range::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.Range)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min(), target);
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.Range)
  return target;
}

size_t Distribution_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.Range)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 8;
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_Range::GetClassData() const { return &_class_data_; }

void Distribution_Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_Range *>(to)->MergeFrom(
      static_cast<const Distribution_Range &>(from));
}


void Distribution_Range::MergeFrom(const Distribution_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.Range)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _internal_set_max(from._internal_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_Range::CopyFrom(const Distribution_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_Range::IsInitialized() const {
  return true;
}

void Distribution_Range::InternalSwap(Distribution_Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution_Range, max_)
      + sizeof(Distribution_Range::max_)
      - PROTOBUF_FIELD_OFFSET(Distribution_Range, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[0]);
}

// ===================================================================

class Distribution_BucketOptions_Linear::_Internal {
 public:
};

Distribution_BucketOptions_Linear::Distribution_BucketOptions_Linear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.BucketOptions.Linear)
}
Distribution_BucketOptions_Linear::Distribution_BucketOptions_Linear(const Distribution_BucketOptions_Linear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Linear)
}

inline void Distribution_BucketOptions_Linear::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
}

Distribution_BucketOptions_Linear::~Distribution_BucketOptions_Linear() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Linear)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_BucketOptions_Linear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distribution_BucketOptions_Linear::ArenaDtor(void* object) {
  Distribution_BucketOptions_Linear* _this = reinterpret_cast< Distribution_BucketOptions_Linear* >(object);
  (void)_this;
}
void Distribution_BucketOptions_Linear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_BucketOptions_Linear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_BucketOptions_Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Linear)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_BucketOptions_Linear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_BucketOptions_Linear::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Linear)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->_internal_num_finite_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_finite_buckets(), target);
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Linear)
  return target;
}

size_t Distribution_BucketOptions_Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Linear)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->_internal_num_finite_buckets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_finite_buckets());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_BucketOptions_Linear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_BucketOptions_Linear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_BucketOptions_Linear::GetClassData() const { return &_class_data_; }

void Distribution_BucketOptions_Linear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_BucketOptions_Linear *>(to)->MergeFrom(
      static_cast<const Distribution_BucketOptions_Linear &>(from));
}


void Distribution_BucketOptions_Linear::MergeFrom(const Distribution_BucketOptions_Linear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_num_finite_buckets() != 0) {
    _internal_set_num_finite_buckets(from._internal_num_finite_buckets());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_BucketOptions_Linear::CopyFrom(const Distribution_BucketOptions_Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Linear::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Linear::InternalSwap(Distribution_BucketOptions_Linear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution_BucketOptions_Linear, num_finite_buckets_)
      + sizeof(Distribution_BucketOptions_Linear::num_finite_buckets_)
      - PROTOBUF_FIELD_OFFSET(Distribution_BucketOptions_Linear, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Linear::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[1]);
}

// ===================================================================

class Distribution_BucketOptions_Exponential::_Internal {
 public:
};

Distribution_BucketOptions_Exponential::Distribution_BucketOptions_Exponential(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.BucketOptions.Exponential)
}
Distribution_BucketOptions_Exponential::Distribution_BucketOptions_Exponential(const Distribution_BucketOptions_Exponential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&growth_factor_, &from.growth_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Exponential)
}

inline void Distribution_BucketOptions_Exponential::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&growth_factor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
}

Distribution_BucketOptions_Exponential::~Distribution_BucketOptions_Exponential() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Exponential)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_BucketOptions_Exponential::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distribution_BucketOptions_Exponential::ArenaDtor(void* object) {
  Distribution_BucketOptions_Exponential* _this = reinterpret_cast< Distribution_BucketOptions_Exponential* >(object);
  (void)_this;
}
void Distribution_BucketOptions_Exponential::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_BucketOptions_Exponential::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_BucketOptions_Exponential::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Exponential)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&growth_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_BucketOptions_Exponential::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double growth_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          growth_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_BucketOptions_Exponential::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Exponential)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->_internal_num_finite_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_finite_buckets(), target);
  }

  // double growth_factor = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_growth_factor = this->_internal_growth_factor();
  uint64_t raw_growth_factor;
  memcpy(&raw_growth_factor, &tmp_growth_factor, sizeof(tmp_growth_factor));
  if (raw_growth_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_growth_factor(), target);
  }

  // double scale = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scale = this->_internal_scale();
  uint64_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Exponential)
  return target;
}

size_t Distribution_BucketOptions_Exponential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Exponential)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double growth_factor = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_growth_factor = this->_internal_growth_factor();
  uint64_t raw_growth_factor;
  memcpy(&raw_growth_factor, &tmp_growth_factor, sizeof(tmp_growth_factor));
  if (raw_growth_factor != 0) {
    total_size += 1 + 8;
  }

  // double scale = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scale = this->_internal_scale();
  uint64_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->_internal_num_finite_buckets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_finite_buckets());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_BucketOptions_Exponential::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_BucketOptions_Exponential::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_BucketOptions_Exponential::GetClassData() const { return &_class_data_; }

void Distribution_BucketOptions_Exponential::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_BucketOptions_Exponential *>(to)->MergeFrom(
      static_cast<const Distribution_BucketOptions_Exponential &>(from));
}


void Distribution_BucketOptions_Exponential::MergeFrom(const Distribution_BucketOptions_Exponential& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Exponential)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_growth_factor = from._internal_growth_factor();
  uint64_t raw_growth_factor;
  memcpy(&raw_growth_factor, &tmp_growth_factor, sizeof(tmp_growth_factor));
  if (raw_growth_factor != 0) {
    _internal_set_growth_factor(from._internal_growth_factor());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scale = from._internal_scale();
  uint64_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from._internal_num_finite_buckets() != 0) {
    _internal_set_num_finite_buckets(from._internal_num_finite_buckets());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_BucketOptions_Exponential::CopyFrom(const Distribution_BucketOptions_Exponential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Exponential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Exponential::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Exponential::InternalSwap(Distribution_BucketOptions_Exponential* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution_BucketOptions_Exponential, num_finite_buckets_)
      + sizeof(Distribution_BucketOptions_Exponential::num_finite_buckets_)
      - PROTOBUF_FIELD_OFFSET(Distribution_BucketOptions_Exponential, growth_factor_)>(
          reinterpret_cast<char*>(&growth_factor_),
          reinterpret_cast<char*>(&other->growth_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Exponential::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[2]);
}

// ===================================================================

class Distribution_BucketOptions_Explicit::_Internal {
 public:
};

Distribution_BucketOptions_Explicit::Distribution_BucketOptions_Explicit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bounds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.BucketOptions.Explicit)
}
Distribution_BucketOptions_Explicit::Distribution_BucketOptions_Explicit(const Distribution_BucketOptions_Explicit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bounds_(from.bounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Explicit)
}

inline void Distribution_BucketOptions_Explicit::SharedCtor() {
}

Distribution_BucketOptions_Explicit::~Distribution_BucketOptions_Explicit() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Explicit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_BucketOptions_Explicit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distribution_BucketOptions_Explicit::ArenaDtor(void* object) {
  Distribution_BucketOptions_Explicit* _this = reinterpret_cast< Distribution_BucketOptions_Explicit* >(object);
  (void)_this;
}
void Distribution_BucketOptions_Explicit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_BucketOptions_Explicit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_BucketOptions_Explicit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Explicit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_BucketOptions_Explicit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_BucketOptions_Explicit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Explicit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bounds = 1;
  if (this->_internal_bounds_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_bounds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Explicit)
  return target;
}

size_t Distribution_BucketOptions_Explicit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Explicit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_BucketOptions_Explicit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_BucketOptions_Explicit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_BucketOptions_Explicit::GetClassData() const { return &_class_data_; }

void Distribution_BucketOptions_Explicit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_BucketOptions_Explicit *>(to)->MergeFrom(
      static_cast<const Distribution_BucketOptions_Explicit &>(from));
}


void Distribution_BucketOptions_Explicit::MergeFrom(const Distribution_BucketOptions_Explicit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Explicit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bounds_.MergeFrom(from.bounds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_BucketOptions_Explicit::CopyFrom(const Distribution_BucketOptions_Explicit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Explicit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Explicit::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Explicit::InternalSwap(Distribution_BucketOptions_Explicit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bounds_.InternalSwap(&other->bounds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Explicit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[3]);
}

// ===================================================================

class Distribution_BucketOptions::_Internal {
 public:
  static const ::google::api::Distribution_BucketOptions_Linear& linear_buckets(const Distribution_BucketOptions* msg);
  static const ::google::api::Distribution_BucketOptions_Exponential& exponential_buckets(const Distribution_BucketOptions* msg);
  static const ::google::api::Distribution_BucketOptions_Explicit& explicit_buckets(const Distribution_BucketOptions* msg);
};

const ::google::api::Distribution_BucketOptions_Linear&
Distribution_BucketOptions::_Internal::linear_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.linear_buckets_;
}
const ::google::api::Distribution_BucketOptions_Exponential&
Distribution_BucketOptions::_Internal::exponential_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.exponential_buckets_;
}
const ::google::api::Distribution_BucketOptions_Explicit&
Distribution_BucketOptions::_Internal::explicit_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.explicit_buckets_;
}
void Distribution_BucketOptions::set_allocated_linear_buckets(::google::api::Distribution_BucketOptions_Linear* linear_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (linear_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::api::Distribution_BucketOptions_Linear>::GetOwningArena(linear_buckets);
    if (message_arena != submessage_arena) {
      linear_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_buckets, submessage_arena);
    }
    set_has_linear_buckets();
    options_.linear_buckets_ = linear_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.linear_buckets)
}
void Distribution_BucketOptions::set_allocated_exponential_buckets(::google::api::Distribution_BucketOptions_Exponential* exponential_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (exponential_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::api::Distribution_BucketOptions_Exponential>::GetOwningArena(exponential_buckets);
    if (message_arena != submessage_arena) {
      exponential_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_buckets, submessage_arena);
    }
    set_has_exponential_buckets();
    options_.exponential_buckets_ = exponential_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.exponential_buckets)
}
void Distribution_BucketOptions::set_allocated_explicit_buckets(::google::api::Distribution_BucketOptions_Explicit* explicit_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_options();
  if (explicit_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::api::Distribution_BucketOptions_Explicit>::GetOwningArena(explicit_buckets);
    if (message_arena != submessage_arena) {
      explicit_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_buckets, submessage_arena);
    }
    set_has_explicit_buckets();
    options_.explicit_buckets_ = explicit_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.explicit_buckets)
}
Distribution_BucketOptions::Distribution_BucketOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.BucketOptions)
}
Distribution_BucketOptions::Distribution_BucketOptions(const Distribution_BucketOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_options();
  switch (from.options_case()) {
    case kLinearBuckets: {
      _internal_mutable_linear_buckets()->::google::api::Distribution_BucketOptions_Linear::MergeFrom(from._internal_linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      _internal_mutable_exponential_buckets()->::google::api::Distribution_BucketOptions_Exponential::MergeFrom(from._internal_exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      _internal_mutable_explicit_buckets()->::google::api::Distribution_BucketOptions_Explicit::MergeFrom(from._internal_explicit_buckets());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions)
}

inline void Distribution_BucketOptions::SharedCtor() {
clear_has_options();
}

Distribution_BucketOptions::~Distribution_BucketOptions() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_BucketOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_options()) {
    clear_options();
  }
}

void Distribution_BucketOptions::ArenaDtor(void* object) {
  Distribution_BucketOptions* _this = reinterpret_cast< Distribution_BucketOptions* >(object);
  (void)_this;
}
void Distribution_BucketOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_BucketOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_BucketOptions::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:google.api.Distribution.BucketOptions)
  switch (options_case()) {
    case kLinearBuckets: {
      if (GetArenaForAllocation() == nullptr) {
        delete options_.linear_buckets_;
      }
      break;
    }
    case kExponentialBuckets: {
      if (GetArenaForAllocation() == nullptr) {
        delete options_.exponential_buckets_;
      }
      break;
    }
    case kExplicitBuckets: {
      if (GetArenaForAllocation() == nullptr) {
        delete options_.explicit_buckets_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONS_NOT_SET;
}


void Distribution_BucketOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_options();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_BucketOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_buckets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exponential_buckets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_buckets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_BucketOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
  if (_internal_has_linear_buckets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_buckets(this), target, stream);
  }

  // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
  if (_internal_has_exponential_buckets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exponential_buckets(this), target, stream);
  }

  // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
  if (_internal_has_explicit_buckets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::explicit_buckets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions)
  return target;
}

size_t Distribution_BucketOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (options_case()) {
    // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
    case kLinearBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.linear_buckets_);
      break;
    }
    // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
    case kExponentialBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.exponential_buckets_);
      break;
    }
    // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
    case kExplicitBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.explicit_buckets_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_BucketOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_BucketOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_BucketOptions::GetClassData() const { return &_class_data_; }

void Distribution_BucketOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_BucketOptions *>(to)->MergeFrom(
      static_cast<const Distribution_BucketOptions &>(from));
}


void Distribution_BucketOptions::MergeFrom(const Distribution_BucketOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.options_case()) {
    case kLinearBuckets: {
      _internal_mutable_linear_buckets()->::google::api::Distribution_BucketOptions_Linear::MergeFrom(from._internal_linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      _internal_mutable_exponential_buckets()->::google::api::Distribution_BucketOptions_Exponential::MergeFrom(from._internal_exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      _internal_mutable_explicit_buckets()->::google::api::Distribution_BucketOptions_Explicit::MergeFrom(from._internal_explicit_buckets());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_BucketOptions::CopyFrom(const Distribution_BucketOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions::InternalSwap(Distribution_BucketOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(options_, other->options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[4]);
}

// ===================================================================

class Distribution_Exemplar::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Distribution_Exemplar* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Distribution_Exemplar::_Internal::timestamp(const Distribution_Exemplar* msg) {
  return *msg->timestamp_;
}
void Distribution_Exemplar::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Distribution_Exemplar::clear_attachments() {
  attachments_.Clear();
}
Distribution_Exemplar::Distribution_Exemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attachments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution.Exemplar)
}
Distribution_Exemplar::Distribution_Exemplar(const Distribution_Exemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.Exemplar)
}

inline void Distribution_Exemplar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

Distribution_Exemplar::~Distribution_Exemplar() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.Exemplar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution_Exemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void Distribution_Exemplar::ArenaDtor(void* object) {
  Distribution_Exemplar* _this = reinterpret_cast< Distribution_Exemplar* >(object);
  (void)_this;
}
void Distribution_Exemplar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_Exemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution_Exemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.Exemplar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution_Exemplar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any attachments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution_Exemplar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.Exemplar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // repeated .google.protobuf.Any attachments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.Exemplar)
  return target;
}

size_t Distribution_Exemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.Exemplar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any attachments = 3;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution_Exemplar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution_Exemplar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution_Exemplar::GetClassData() const { return &_class_data_; }

void Distribution_Exemplar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution_Exemplar *>(to)->MergeFrom(
      static_cast<const Distribution_Exemplar &>(from));
}


void Distribution_Exemplar::MergeFrom(const Distribution_Exemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.Exemplar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution_Exemplar::CopyFrom(const Distribution_Exemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_Exemplar::IsInitialized() const {
  return true;
}

void Distribution_Exemplar::InternalSwap(Distribution_Exemplar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution_Exemplar, value_)
      + sizeof(Distribution_Exemplar::value_)
      - PROTOBUF_FIELD_OFFSET(Distribution_Exemplar, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_Exemplar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[5]);
}

// ===================================================================

class Distribution::_Internal {
 public:
  static const ::google::api::Distribution_Range& range(const Distribution* msg);
  static const ::google::api::Distribution_BucketOptions& bucket_options(const Distribution* msg);
};

const ::google::api::Distribution_Range&
Distribution::_Internal::range(const Distribution* msg) {
  return *msg->range_;
}
const ::google::api::Distribution_BucketOptions&
Distribution::_Internal::bucket_options(const Distribution* msg) {
  return *msg->bucket_options_;
}
Distribution::Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bucket_counts_(arena),
  exemplars_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bucket_counts_(from.bucket_counts_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::google::api::Distribution_Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_bucket_options()) {
    bucket_options_ = new ::google::api::Distribution_BucketOptions(*from.bucket_options_);
  } else {
    bucket_options_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_of_squared_deviation_) -
    reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution)
}

inline void Distribution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sum_of_squared_deviation_) -
    reinterpret_cast<char*>(&range_)) + sizeof(sum_of_squared_deviation_));
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:google.api.Distribution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete bucket_options_;
}

void Distribution::ArenaDtor(void* object) {
  Distribution* _this = reinterpret_cast< Distribution* >(object);
  (void)_this;
}
void Distribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_counts_.Clear();
  exemplars_.Clear();
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bucket_options_ != nullptr) {
    delete bucket_options_;
  }
  bucket_options_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_squared_deviation_) -
      reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum_of_squared_deviation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          sum_of_squared_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Distribution.Range range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions bucket_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bucket_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 bucket_counts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.Distribution.Exemplar exemplars = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  // double mean = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean = this->_internal_mean();
  uint64_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mean(), target);
  }

  // double sum_of_squared_deviation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_of_squared_deviation = this->_internal_sum_of_squared_deviation();
  uint64_t raw_sum_of_squared_deviation;
  memcpy(&raw_sum_of_squared_deviation, &tmp_sum_of_squared_deviation, sizeof(tmp_sum_of_squared_deviation));
  if (raw_sum_of_squared_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sum_of_squared_deviation(), target);
  }

  // .google.api.Distribution.Range range = 4;
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range(this), target, stream);
  }

  // .google.api.Distribution.BucketOptions bucket_options = 6;
  if (this->_internal_has_bucket_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bucket_options(this), target, stream);
  }

  // repeated int64 bucket_counts = 7;
  {
    int byte_size = _bucket_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_bucket_counts(), byte_size, target);
    }
  }

  // repeated .google.api.Distribution.Exemplar exemplars = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bucket_counts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bucket_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.api.Distribution.Exemplar exemplars = 10;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.api.Distribution.Range range = 4;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .google.api.Distribution.BucketOptions bucket_options = 6;
  if (this->_internal_has_bucket_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bucket_options_);
  }

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  // double mean = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean = this->_internal_mean();
  uint64_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    total_size += 1 + 8;
  }

  // double sum_of_squared_deviation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_of_squared_deviation = this->_internal_sum_of_squared_deviation();
  uint64_t raw_sum_of_squared_deviation;
  memcpy(&raw_sum_of_squared_deviation, &tmp_sum_of_squared_deviation, sizeof(tmp_sum_of_squared_deviation));
  if (raw_sum_of_squared_deviation != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution::GetClassData() const { return &_class_data_; }

void Distribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution *>(to)->MergeFrom(
      static_cast<const Distribution &>(from));
}


void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_counts_.MergeFrom(from.bucket_counts_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from._internal_has_range()) {
    _internal_mutable_range()->::google::api::Distribution_Range::MergeFrom(from._internal_range());
  }
  if (from._internal_has_bucket_options()) {
    _internal_mutable_bucket_options()->::google::api::Distribution_BucketOptions::MergeFrom(from._internal_bucket_options());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean = from._internal_mean();
  uint64_t raw_mean;
  memcpy(&raw_mean, &tmp_mean, sizeof(tmp_mean));
  if (raw_mean != 0) {
    _internal_set_mean(from._internal_mean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_of_squared_deviation = from._internal_sum_of_squared_deviation();
  uint64_t raw_sum_of_squared_deviation;
  memcpy(&raw_sum_of_squared_deviation, &tmp_sum_of_squared_deviation, sizeof(tmp_sum_of_squared_deviation));
  if (raw_sum_of_squared_deviation != 0) {
    _internal_set_sum_of_squared_deviation(from._internal_sum_of_squared_deviation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution, sum_of_squared_deviation_)
      + sizeof(Distribution::sum_of_squared_deviation_)
      - PROTOBUF_FIELD_OFFSET(Distribution, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fdistribution_2eproto_getter, &descriptor_table_google_2fapi_2fdistribution_2eproto_once,
      file_level_metadata_google_2fapi_2fdistribution_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Distribution_Range* Arena::CreateMaybeMessage< ::google::api::Distribution_Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Linear* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Linear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_BucketOptions_Linear >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Exponential* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Exponential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_BucketOptions_Exponential >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Explicit* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Explicit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_BucketOptions_Explicit >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_BucketOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_Exemplar* Arena::CreateMaybeMessage< ::google::api::Distribution_Exemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution_Exemplar >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution* Arena::CreateMaybeMessage< ::google::api::Distribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Distribution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
