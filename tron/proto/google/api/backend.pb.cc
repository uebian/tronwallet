// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/backend.proto

#include "google/api/backend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace api {
constexpr Backend::Backend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_(){}
struct BackendDefaultTypeInternal {
  constexpr BackendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BackendDefaultTypeInternal() {}
  union {
    Backend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BackendDefaultTypeInternal _Backend_default_instance_;
constexpr BackendRule::BackendRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selector_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deadline_(0)
  , min_deadline_(0)
  , operation_deadline_(0)
  , path_translation_(0)

  , _oneof_case_{}{}
struct BackendRuleDefaultTypeInternal {
  constexpr BackendRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BackendRuleDefaultTypeInternal() {}
  union {
    BackendRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BackendRuleDefaultTypeInternal _BackendRule_default_instance_;
}  // namespace api
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fbackend_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fbackend_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fbackend_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fbackend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Backend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Backend, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, selector_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, address_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, min_deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, operation_deadline_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, path_translation_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, protocol_),
  PROTOBUF_FIELD_OFFSET(::google::api::BackendRule, authentication_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::Backend)},
  { 6, -1, sizeof(::google::api::BackendRule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Backend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_BackendRule_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fbackend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030google/api/backend.proto\022\ngoogle.api\"1"
  "\n\007Backend\022&\n\005rules\030\001 \003(\0132\027.google.api.Ba"
  "ckendRule\"\362\002\n\013BackendRule\022\020\n\010selector\030\001 "
  "\001(\t\022\017\n\007address\030\002 \001(\t\022\020\n\010deadline\030\003 \001(\001\022\024"
  "\n\014min_deadline\030\004 \001(\001\022\032\n\022operation_deadli"
  "ne\030\005 \001(\001\022A\n\020path_translation\030\006 \001(\0162\'.goo"
  "gle.api.BackendRule.PathTranslation\022\026\n\014j"
  "wt_audience\030\007 \001(\tH\000\022\026\n\014disable_auth\030\010 \001("
  "\010H\000\022\020\n\010protocol\030\t \001(\t\"e\n\017PathTranslation"
  "\022 \n\034PATH_TRANSLATION_UNSPECIFIED\020\000\022\024\n\020CO"
  "NSTANT_ADDRESS\020\001\022\032\n\026APPEND_PATH_TO_ADDRE"
  "SS\020\002B\020\n\016authenticationBn\n\016com.google.api"
  "B\014BackendProtoP\001ZEgoogle.golang.org/genp"
  "roto/googleapis/api/serviceconfig;servic"
  "econfig\242\002\004GAPIb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fbackend_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fbackend_2eproto = {
  false, false, 582, descriptor_table_protodef_google_2fapi_2fbackend_2eproto, "google/api/backend.proto", 
  &descriptor_table_google_2fapi_2fbackend_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_google_2fapi_2fbackend_2eproto::offsets,
  file_level_metadata_google_2fapi_2fbackend_2eproto, file_level_enum_descriptors_google_2fapi_2fbackend_2eproto, file_level_service_descriptors_google_2fapi_2fbackend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_google_2fapi_2fbackend_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fbackend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fbackend_2eproto(&descriptor_table_google_2fapi_2fbackend_2eproto);
namespace google {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackendRule_PathTranslation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fbackend_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fbackend_2eproto[0];
}
bool BackendRule_PathTranslation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackendRule_PathTranslation BackendRule::PATH_TRANSLATION_UNSPECIFIED;
constexpr BackendRule_PathTranslation BackendRule::CONSTANT_ADDRESS;
constexpr BackendRule_PathTranslation BackendRule::APPEND_PATH_TO_ADDRESS;
constexpr BackendRule_PathTranslation BackendRule::PathTranslation_MIN;
constexpr BackendRule_PathTranslation BackendRule::PathTranslation_MAX;
constexpr int BackendRule::PathTranslation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Backend::_Internal {
 public:
};

Backend::Backend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.Backend)
}
Backend::Backend(const Backend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Backend)
}

inline void Backend::SharedCtor() {
}

Backend::~Backend() {
  // @@protoc_insertion_point(destructor:google.api.Backend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Backend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Backend::ArenaDtor(void* object) {
  Backend* _this = reinterpret_cast< Backend* >(object);
  (void)_this;
}
void Backend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Backend::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Backend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.api.BackendRule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Backend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.BackendRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Backend)
  return target;
}

size_t Backend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Backend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.BackendRule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Backend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Backend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Backend::GetClassData() const { return &_class_data_; }

void Backend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Backend *>(to)->MergeFrom(
      static_cast<const Backend &>(from));
}


void Backend::MergeFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Backend)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Backend::CopyFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Backend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backend::IsInitialized() const {
  return true;
}

void Backend::InternalSwap(Backend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fbackend_2eproto_getter, &descriptor_table_google_2fapi_2fbackend_2eproto_once,
      file_level_metadata_google_2fapi_2fbackend_2eproto[0]);
}

// ===================================================================

class BackendRule::_Internal {
 public:
};

BackendRule::BackendRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.BackendRule)
}
BackendRule::BackendRule(const BackendRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selector().empty()) {
    selector_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selector(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  ::memcpy(&deadline_, &from.deadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_translation_) -
    reinterpret_cast<char*>(&deadline_)) + sizeof(path_translation_));
  clear_has_authentication();
  switch (from.authentication_case()) {
    case kJwtAudience: {
      _internal_set_jwt_audience(from._internal_jwt_audience());
      break;
    }
    case kDisableAuth: {
      _internal_set_disable_auth(from._internal_disable_auth());
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.BackendRule)
}

inline void BackendRule::SharedCtor() {
selector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deadline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_translation_) -
    reinterpret_cast<char*>(&deadline_)) + sizeof(path_translation_));
clear_has_authentication();
}

BackendRule::~BackendRule() {
  // @@protoc_insertion_point(destructor:google.api.BackendRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BackendRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  selector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_authentication()) {
    clear_authentication();
  }
}

void BackendRule::ArenaDtor(void* object) {
  BackendRule* _this = reinterpret_cast< BackendRule* >(object);
  (void)_this;
}
void BackendRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackendRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackendRule::clear_authentication() {
// @@protoc_insertion_point(one_of_clear_start:google.api.BackendRule)
  switch (authentication_case()) {
    case kJwtAudience: {
      authentication_.jwt_audience_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDisableAuth: {
      // No need to clear
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHENTICATION_NOT_SET;
}


void BackendRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.BackendRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selector_.ClearToEmpty();
  address_.ClearToEmpty();
  protocol_.ClearToEmpty();
  ::memset(&deadline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_translation_) -
      reinterpret_cast<char*>(&deadline_)) + sizeof(path_translation_));
  clear_authentication();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackendRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string selector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_selector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.BackendRule.selector"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.BackendRule.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double deadline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_deadline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          min_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double operation_deadline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          operation_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.api.BackendRule.PathTranslation path_translation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_path_translation(static_cast<::google::api::BackendRule_PathTranslation>(val));
        } else goto handle_unusual;
        continue;
      // string jwt_audience = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_jwt_audience();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.BackendRule.jwt_audience"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_auth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_disable_auth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.api.BackendRule.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackendRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.BackendRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (!this->_internal_selector().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selector().data(), static_cast<int>(this->_internal_selector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.selector");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selector(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // double deadline = 3;
  if (!(this->_internal_deadline() <= 0 && this->_internal_deadline() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deadline(), target);
  }

  // double min_deadline = 4;
  if (!(this->_internal_min_deadline() <= 0 && this->_internal_min_deadline() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_deadline(), target);
  }

  // double operation_deadline = 5;
  if (!(this->_internal_operation_deadline() <= 0 && this->_internal_operation_deadline() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_operation_deadline(), target);
  }

  // .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->_internal_path_translation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_path_translation(), target);
  }

  // string jwt_audience = 7;
  if (_internal_has_jwt_audience()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwt_audience().data(), static_cast<int>(this->_internal_jwt_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.jwt_audience");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_jwt_audience(), target);
  }

  // bool disable_auth = 8;
  if (_internal_has_disable_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_auth(), target);
  }

  // string protocol = 9;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.protocol");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.BackendRule)
  return target;
}

size_t BackendRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.BackendRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string selector = 1;
  if (!this->_internal_selector().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selector());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string protocol = 9;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // double deadline = 3;
  if (!(this->_internal_deadline() <= 0 && this->_internal_deadline() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_deadline = 4;
  if (!(this->_internal_min_deadline() <= 0 && this->_internal_min_deadline() >= 0)) {
    total_size += 1 + 8;
  }

  // double operation_deadline = 5;
  if (!(this->_internal_operation_deadline() <= 0 && this->_internal_operation_deadline() >= 0)) {
    total_size += 1 + 8;
  }

  // .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->_internal_path_translation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_path_translation());
  }

  switch (authentication_case()) {
    // string jwt_audience = 7;
    case kJwtAudience: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jwt_audience());
      break;
    }
    // bool disable_auth = 8;
    case kDisableAuth: {
      total_size += 1 + 1;
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackendRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BackendRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackendRule::GetClassData() const { return &_class_data_; }

void BackendRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BackendRule *>(to)->MergeFrom(
      static_cast<const BackendRule &>(from));
}


void BackendRule::MergeFrom(const BackendRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.BackendRule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_selector().empty()) {
    _internal_set_selector(from._internal_selector());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!(from._internal_deadline() <= 0 && from._internal_deadline() >= 0)) {
    _internal_set_deadline(from._internal_deadline());
  }
  if (!(from._internal_min_deadline() <= 0 && from._internal_min_deadline() >= 0)) {
    _internal_set_min_deadline(from._internal_min_deadline());
  }
  if (!(from._internal_operation_deadline() <= 0 && from._internal_operation_deadline() >= 0)) {
    _internal_set_operation_deadline(from._internal_operation_deadline());
  }
  if (from._internal_path_translation() != 0) {
    _internal_set_path_translation(from._internal_path_translation());
  }
  switch (from.authentication_case()) {
    case kJwtAudience: {
      _internal_set_jwt_audience(from._internal_jwt_audience());
      break;
    }
    case kDisableAuth: {
      _internal_set_disable_auth(from._internal_disable_auth());
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackendRule::CopyFrom(const BackendRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.BackendRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackendRule::IsInitialized() const {
  return true;
}

void BackendRule::InternalSwap(BackendRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &selector_, GetArenaForAllocation(),
      &other->selector_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, GetArenaForAllocation(),
      &other->protocol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackendRule, path_translation_)
      + sizeof(BackendRule::path_translation_)
      - PROTOBUF_FIELD_OFFSET(BackendRule, deadline_)>(
          reinterpret_cast<char*>(&deadline_),
          reinterpret_cast<char*>(&other->deadline_));
  swap(authentication_, other->authentication_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackendRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2fapi_2fbackend_2eproto_getter, &descriptor_table_google_2fapi_2fbackend_2eproto_once,
      file_level_metadata_google_2fapi_2fbackend_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Backend* Arena::CreateMaybeMessage< ::google::api::Backend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::Backend >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::BackendRule* Arena::CreateMaybeMessage< ::google::api::BackendRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::BackendRule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
