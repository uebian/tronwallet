// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Tron.proto

#include "core/Tron.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr AccountId::AccountId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountIdDefaultTypeInternal {
  constexpr AccountIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountIdDefaultTypeInternal() {}
  union {
    AccountId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountIdDefaultTypeInternal _AccountId_default_instance_;
constexpr Vote::Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vote_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_count_(int64_t{0}){}
struct VoteDefaultTypeInternal {
  constexpr VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteDefaultTypeInternal _Vote_default_instance_;
constexpr Proposal_ParametersEntry_DoNotUse::Proposal_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Proposal_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr Proposal_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Proposal_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Proposal_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Proposal_ParametersEntry_DoNotUseDefaultTypeInternal _Proposal_ParametersEntry_DoNotUse_default_instance_;
constexpr Proposal::Proposal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , approvals_()
  , proposer_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proposal_id_(int64_t{0})
  , expiration_time_(int64_t{0})
  , create_time_(int64_t{0})
  , state_(0)
{}
struct ProposalDefaultTypeInternal {
  constexpr ProposalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalDefaultTypeInternal _Proposal_default_instance_;
constexpr Exchange::Exchange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creator_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , second_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(int64_t{0})
  , create_time_(int64_t{0})
  , first_token_balance_(int64_t{0})
  , second_token_balance_(int64_t{0}){}
struct ExchangeDefaultTypeInternal {
  constexpr ExchangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeDefaultTypeInternal() {}
  union {
    Exchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeDefaultTypeInternal _Exchange_default_instance_;
constexpr MarketOrder::MarketOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_time_(int64_t{0})
  , sell_token_quantity_(int64_t{0})
  , buy_token_quantity_(int64_t{0})
  , sell_token_quantity_remain_(int64_t{0})
  , sell_token_quantity_return_(int64_t{0})
  , state_(0)
{}
struct MarketOrderDefaultTypeInternal {
  constexpr MarketOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderDefaultTypeInternal() {}
  union {
    MarketOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderDefaultTypeInternal _MarketOrder_default_instance_;
constexpr MarketOrderList::MarketOrderList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_(){}
struct MarketOrderListDefaultTypeInternal {
  constexpr MarketOrderListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderListDefaultTypeInternal() {}
  union {
    MarketOrderList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderListDefaultTypeInternal _MarketOrderList_default_instance_;
constexpr MarketOrderPairList::MarketOrderPairList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orderpair_(){}
struct MarketOrderPairListDefaultTypeInternal {
  constexpr MarketOrderPairListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderPairListDefaultTypeInternal() {}
  union {
    MarketOrderPairList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderPairListDefaultTypeInternal _MarketOrderPairList_default_instance_;
constexpr MarketOrderPair::MarketOrderPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sell_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MarketOrderPairDefaultTypeInternal {
  constexpr MarketOrderPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderPairDefaultTypeInternal() {}
  union {
    MarketOrderPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderPairDefaultTypeInternal _MarketOrderPair_default_instance_;
constexpr MarketAccountOrder::MarketAccountOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_()
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(int64_t{0})
  , total_count_(int64_t{0}){}
struct MarketAccountOrderDefaultTypeInternal {
  constexpr MarketAccountOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketAccountOrderDefaultTypeInternal() {}
  union {
    MarketAccountOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketAccountOrderDefaultTypeInternal _MarketAccountOrder_default_instance_;
constexpr MarketPrice::MarketPrice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sell_token_quantity_(int64_t{0})
  , buy_token_quantity_(int64_t{0}){}
struct MarketPriceDefaultTypeInternal {
  constexpr MarketPriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketPriceDefaultTypeInternal() {}
  union {
    MarketPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketPriceDefaultTypeInternal _MarketPrice_default_instance_;
constexpr MarketPriceList::MarketPriceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prices_()
  , sell_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MarketPriceListDefaultTypeInternal {
  constexpr MarketPriceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketPriceListDefaultTypeInternal() {}
  union {
    MarketPriceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketPriceListDefaultTypeInternal _MarketPriceList_default_instance_;
constexpr MarketOrderIdList::MarketOrderIdList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MarketOrderIdListDefaultTypeInternal {
  constexpr MarketOrderIdListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderIdListDefaultTypeInternal() {}
  union {
    MarketOrderIdList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderIdListDefaultTypeInternal _MarketOrderIdList_default_instance_;
constexpr ChainParameters_ChainParameter::ChainParameters_ChainParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(int64_t{0}){}
struct ChainParameters_ChainParameterDefaultTypeInternal {
  constexpr ChainParameters_ChainParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChainParameters_ChainParameterDefaultTypeInternal() {}
  union {
    ChainParameters_ChainParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChainParameters_ChainParameterDefaultTypeInternal _ChainParameters_ChainParameter_default_instance_;
constexpr ChainParameters::ChainParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chainparameter_(){}
struct ChainParametersDefaultTypeInternal {
  constexpr ChainParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChainParametersDefaultTypeInternal() {}
  union {
    ChainParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChainParametersDefaultTypeInternal _ChainParameters_default_instance_;
constexpr Account_Frozen::Account_Frozen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frozen_balance_(int64_t{0})
  , expire_time_(int64_t{0}){}
struct Account_FrozenDefaultTypeInternal {
  constexpr Account_FrozenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_FrozenDefaultTypeInternal() {}
  union {
    Account_Frozen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_FrozenDefaultTypeInternal _Account_Frozen_default_instance_;
constexpr Account_AssetEntry_DoNotUse::Account_AssetEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_AssetEntry_DoNotUseDefaultTypeInternal {
  constexpr Account_AssetEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_AssetEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_AssetEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_AssetEntry_DoNotUseDefaultTypeInternal _Account_AssetEntry_DoNotUse_default_instance_;
constexpr Account_AssetV2Entry_DoNotUse::Account_AssetV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_AssetV2Entry_DoNotUseDefaultTypeInternal {
  constexpr Account_AssetV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_AssetV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_AssetV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_AssetV2Entry_DoNotUseDefaultTypeInternal _Account_AssetV2Entry_DoNotUse_default_instance_;
constexpr Account_LatestAssetOperationTimeEntry_DoNotUse::Account_LatestAssetOperationTimeEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal {
  constexpr Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_LatestAssetOperationTimeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal _Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_;
constexpr Account_LatestAssetOperationTimeV2Entry_DoNotUse::Account_LatestAssetOperationTimeV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal {
  constexpr Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_LatestAssetOperationTimeV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal _Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_;
constexpr Account_FreeAssetNetUsageEntry_DoNotUse::Account_FreeAssetNetUsageEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal {
  constexpr Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_FreeAssetNetUsageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal _Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_;
constexpr Account_FreeAssetNetUsageV2Entry_DoNotUse::Account_FreeAssetNetUsageV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal {
  constexpr Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    Account_FreeAssetNetUsageV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal _Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_;
constexpr Account_AccountResource::Account_AccountResource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frozen_balance_for_energy_(nullptr)
  , energy_usage_(int64_t{0})
  , latest_consume_time_for_energy_(int64_t{0})
  , acquired_delegated_frozen_balance_for_energy_(int64_t{0})
  , delegated_frozen_balance_for_energy_(int64_t{0})
  , storage_limit_(int64_t{0})
  , storage_usage_(int64_t{0})
  , latest_exchange_storage_time_(int64_t{0}){}
struct Account_AccountResourceDefaultTypeInternal {
  constexpr Account_AccountResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Account_AccountResourceDefaultTypeInternal() {}
  union {
    Account_AccountResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Account_AccountResourceDefaultTypeInternal _Account_AccountResource_default_instance_;
constexpr Account::Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_()
  , asset_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , frozen_()
  , frozen_supply_()
  , latest_asset_operation_time_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , free_asset_net_usage_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , active_permission_()
  , assetv2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , latest_asset_operation_timev2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , free_asset_net_usagev2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_issued_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codehash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_issued_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_resource_(nullptr)
  , owner_permission_(nullptr)
  , witness_permission_(nullptr)
  , tron_power_(nullptr)
  , balance_(int64_t{0})
  , net_usage_(int64_t{0})
  , create_time_(int64_t{0})
  , latest_opration_time_(int64_t{0})
  , type_(0)

  , is_witness_(false)
  , is_committee_(false)
  , allowance_(int64_t{0})
  , latest_withdraw_time_(int64_t{0})
  , free_net_usage_(int64_t{0})
  , latest_consume_time_(int64_t{0})
  , latest_consume_free_time_(int64_t{0})
  , acquired_delegated_frozen_balance_for_bandwidth_(int64_t{0})
  , delegated_frozen_balance_for_bandwidth_(int64_t{0})
  , old_tron_power_(int64_t{0}){}
struct AccountDefaultTypeInternal {
  constexpr AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDefaultTypeInternal _Account_default_instance_;
constexpr AccountAsset_Frozen::AccountAsset_Frozen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frozen_balance_(int64_t{0})
  , expire_time_(int64_t{0}){}
struct AccountAsset_FrozenDefaultTypeInternal {
  constexpr AccountAsset_FrozenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_FrozenDefaultTypeInternal() {}
  union {
    AccountAsset_Frozen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_FrozenDefaultTypeInternal _AccountAsset_Frozen_default_instance_;
constexpr AccountAsset_AssetEntry_DoNotUse::AccountAsset_AssetEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_AssetEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_AssetEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_AssetEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_AssetEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_AssetEntry_DoNotUseDefaultTypeInternal _AccountAsset_AssetEntry_DoNotUse_default_instance_;
constexpr AccountAsset_AssetV2Entry_DoNotUse::AccountAsset_AssetV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_AssetV2Entry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_AssetV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_AssetV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_AssetV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_AssetV2Entry_DoNotUseDefaultTypeInternal _AccountAsset_AssetV2Entry_DoNotUse_default_instance_;
constexpr AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_LatestAssetOperationTimeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal _AccountAsset_LatestAssetOperationTimeEntry_DoNotUse_default_instance_;
constexpr AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal _AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_;
constexpr AccountAsset_FreeAssetNetUsageEntry_DoNotUse::AccountAsset_FreeAssetNetUsageEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_FreeAssetNetUsageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal _AccountAsset_FreeAssetNetUsageEntry_DoNotUse_default_instance_;
constexpr AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AccountAsset_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal {
  constexpr AccountAsset_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAsset_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAsset_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal _AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_;
constexpr AccountAsset::AccountAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , assetv2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , latest_asset_operation_time_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , latest_asset_operation_timev2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , free_asset_net_usage_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , free_asset_net_usagev2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , frozen_supply_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_issued_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_issued_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountAssetDefaultTypeInternal {
  constexpr AccountAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAssetDefaultTypeInternal() {}
  union {
    AccountAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAssetDefaultTypeInternal _AccountAsset_default_instance_;
constexpr Key::Key(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(int64_t{0}){}
struct KeyDefaultTypeInternal {
  constexpr KeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDefaultTypeInternal() {}
  union {
    Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDefaultTypeInternal _Key_default_instance_;
constexpr DelegatedResource::DelegatedResource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frozen_balance_for_bandwidth_(int64_t{0})
  , frozen_balance_for_energy_(int64_t{0})
  , expire_time_for_bandwidth_(int64_t{0})
  , expire_time_for_energy_(int64_t{0}){}
struct DelegatedResourceDefaultTypeInternal {
  constexpr DelegatedResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegatedResourceDefaultTypeInternal() {}
  union {
    DelegatedResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegatedResourceDefaultTypeInternal _DelegatedResource_default_instance_;
constexpr authority::authority(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(nullptr){}
struct authorityDefaultTypeInternal {
  constexpr authorityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~authorityDefaultTypeInternal() {}
  union {
    authority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT authorityDefaultTypeInternal _authority_default_instance_;
constexpr Permission::Permission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , permission_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operations_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , id_(0)
  , threshold_(int64_t{0})
  , parent_id_(0){}
struct PermissionDefaultTypeInternal {
  constexpr PermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionDefaultTypeInternal _Permission_default_instance_;
constexpr Witness::Witness(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pubkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , votecount_(int64_t{0})
  , totalproduced_(int64_t{0})
  , totalmissed_(int64_t{0})
  , latestblocknum_(int64_t{0})
  , latestslotnum_(int64_t{0})
  , isjobs_(false){}
struct WitnessDefaultTypeInternal {
  constexpr WitnessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WitnessDefaultTypeInternal() {}
  union {
    Witness _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WitnessDefaultTypeInternal _Witness_default_instance_;
constexpr Votes::Votes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_votes_()
  , new_votes_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VotesDefaultTypeInternal {
  constexpr VotesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VotesDefaultTypeInternal() {}
  union {
    Votes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VotesDefaultTypeInternal _Votes_default_instance_;
constexpr TXOutput::TXOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pubkeyhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(int64_t{0}){}
struct TXOutputDefaultTypeInternal {
  constexpr TXOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TXOutputDefaultTypeInternal() {}
  union {
    TXOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TXOutputDefaultTypeInternal _TXOutput_default_instance_;
constexpr TXInput_raw::TXInput_raw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pubkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vout_(int64_t{0}){}
struct TXInput_rawDefaultTypeInternal {
  constexpr TXInput_rawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TXInput_rawDefaultTypeInternal() {}
  union {
    TXInput_raw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TXInput_rawDefaultTypeInternal _TXInput_raw_default_instance_;
constexpr TXInput::TXInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_data_(nullptr){}
struct TXInputDefaultTypeInternal {
  constexpr TXInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TXInputDefaultTypeInternal() {}
  union {
    TXInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TXInputDefaultTypeInternal _TXInput_default_instance_;
constexpr TXOutputs::TXOutputs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_(){}
struct TXOutputsDefaultTypeInternal {
  constexpr TXOutputsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TXOutputsDefaultTypeInternal() {}
  union {
    TXOutputs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TXOutputsDefaultTypeInternal _TXOutputs_default_instance_;
constexpr ResourceReceipt::ResourceReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : energy_usage_(int64_t{0})
  , energy_fee_(int64_t{0})
  , origin_energy_usage_(int64_t{0})
  , energy_usage_total_(int64_t{0})
  , net_usage_(int64_t{0})
  , net_fee_(int64_t{0})
  , result_(0)
{}
struct ResourceReceiptDefaultTypeInternal {
  constexpr ResourceReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceReceiptDefaultTypeInternal() {}
  union {
    ResourceReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceReceiptDefaultTypeInternal _ResourceReceipt_default_instance_;
constexpr MarketOrderDetail::MarketOrderDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : makerorderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , takerorderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fillsellquantity_(int64_t{0})
  , fillbuyquantity_(int64_t{0}){}
struct MarketOrderDetailDefaultTypeInternal {
  constexpr MarketOrderDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketOrderDetailDefaultTypeInternal() {}
  union {
    MarketOrderDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketOrderDetailDefaultTypeInternal _MarketOrderDetail_default_instance_;
constexpr Transaction_Contract::Transaction_Contract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contractname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameter_(nullptr)
  , type_(0)

  , permission_id_(0){}
struct Transaction_ContractDefaultTypeInternal {
  constexpr Transaction_ContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ContractDefaultTypeInternal() {}
  union {
    Transaction_Contract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ContractDefaultTypeInternal _Transaction_Contract_default_instance_;
constexpr Transaction_Result::Transaction_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orderdetails_()
  , assetissueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fee_(int64_t{0})
  , ret_(0)

  , contractret_(0)

  , withdraw_amount_(int64_t{0})
  , unfreeze_amount_(int64_t{0})
  , exchange_received_amount_(int64_t{0})
  , exchange_inject_another_amount_(int64_t{0})
  , exchange_withdraw_another_amount_(int64_t{0})
  , exchange_id_(int64_t{0})
  , shielded_transaction_fee_(int64_t{0}){}
struct Transaction_ResultDefaultTypeInternal {
  constexpr Transaction_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_ResultDefaultTypeInternal() {}
  union {
    Transaction_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_ResultDefaultTypeInternal _Transaction_Result_default_instance_;
constexpr Transaction_raw::Transaction_raw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auths_()
  , contract_()
  , ref_block_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ref_block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scripts_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ref_block_num_(int64_t{0})
  , expiration_(int64_t{0})
  , timestamp_(int64_t{0})
  , fee_limit_(int64_t{0}){}
struct Transaction_rawDefaultTypeInternal {
  constexpr Transaction_rawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_rawDefaultTypeInternal() {}
  union {
    Transaction_raw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_rawDefaultTypeInternal _Transaction_raw_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_()
  , ret_()
  , raw_data_(nullptr){}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
constexpr TransactionInfo_Log::TransactionInfo_Log(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topics_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionInfo_LogDefaultTypeInternal {
  constexpr TransactionInfo_LogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInfo_LogDefaultTypeInternal() {}
  union {
    TransactionInfo_Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInfo_LogDefaultTypeInternal _TransactionInfo_Log_default_instance_;
constexpr TransactionInfo::TransactionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contractresult_()
  , log_()
  , internal_transactions_()
  , orderdetails_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contract_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resmessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , assetissueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receipt_(nullptr)
  , fee_(int64_t{0})
  , blocknumber_(int64_t{0})
  , blocktimestamp_(int64_t{0})
  , withdraw_amount_(int64_t{0})
  , unfreeze_amount_(int64_t{0})
  , exchange_received_amount_(int64_t{0})
  , exchange_inject_another_amount_(int64_t{0})
  , exchange_withdraw_another_amount_(int64_t{0})
  , exchange_id_(int64_t{0})
  , shielded_transaction_fee_(int64_t{0})
  , result_(0)

  , packingfee_(int64_t{0}){}
struct TransactionInfoDefaultTypeInternal {
  constexpr TransactionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInfoDefaultTypeInternal() {}
  union {
    TransactionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInfoDefaultTypeInternal _TransactionInfo_default_instance_;
constexpr TransactionRet::TransactionRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactioninfo_()
  , blocknumber_(int64_t{0})
  , blocktimestamp_(int64_t{0}){}
struct TransactionRetDefaultTypeInternal {
  constexpr TransactionRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionRetDefaultTypeInternal() {}
  union {
    TransactionRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionRetDefaultTypeInternal _TransactionRet_default_instance_;
constexpr Transactions::Transactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct TransactionsDefaultTypeInternal {
  constexpr TransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionsDefaultTypeInternal() {}
  union {
    Transactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionsDefaultTypeInternal _Transactions_default_instance_;
constexpr TransactionSign::TransactionSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privatekey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(nullptr){}
struct TransactionSignDefaultTypeInternal {
  constexpr TransactionSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionSignDefaultTypeInternal() {}
  union {
    TransactionSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionSignDefaultTypeInternal _TransactionSign_default_instance_;
constexpr BlockHeader_raw::BlockHeader_raw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txtrieroot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parenthash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witness_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountstateroot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , number_(int64_t{0})
  , witness_id_(int64_t{0})
  , version_(0){}
struct BlockHeader_rawDefaultTypeInternal {
  constexpr BlockHeader_rawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeader_rawDefaultTypeInternal() {}
  union {
    BlockHeader_raw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeader_rawDefaultTypeInternal _BlockHeader_raw_default_instance_;
constexpr BlockHeader::BlockHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witness_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_data_(nullptr){}
struct BlockHeaderDefaultTypeInternal {
  constexpr BlockHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderDefaultTypeInternal() {}
  union {
    BlockHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , block_header_(nullptr){}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
constexpr ChainInventory_BlockId::ChainInventory_BlockId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_(int64_t{0}){}
struct ChainInventory_BlockIdDefaultTypeInternal {
  constexpr ChainInventory_BlockIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChainInventory_BlockIdDefaultTypeInternal() {}
  union {
    ChainInventory_BlockId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChainInventory_BlockIdDefaultTypeInternal _ChainInventory_BlockId_default_instance_;
constexpr ChainInventory::ChainInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , remain_num_(int64_t{0}){}
struct ChainInventoryDefaultTypeInternal {
  constexpr ChainInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChainInventoryDefaultTypeInternal() {}
  union {
    ChainInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChainInventoryDefaultTypeInternal _ChainInventory_default_instance_;
constexpr BlockInventory_BlockId::BlockInventory_BlockId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_(int64_t{0}){}
struct BlockInventory_BlockIdDefaultTypeInternal {
  constexpr BlockInventory_BlockIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockInventory_BlockIdDefaultTypeInternal() {}
  union {
    BlockInventory_BlockId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockInventory_BlockIdDefaultTypeInternal _BlockInventory_BlockId_default_instance_;
constexpr BlockInventory::BlockInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , type_(0)
{}
struct BlockInventoryDefaultTypeInternal {
  constexpr BlockInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockInventoryDefaultTypeInternal() {}
  union {
    BlockInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockInventoryDefaultTypeInternal _BlockInventory_default_instance_;
constexpr Inventory::Inventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , type_(0)
{}
struct InventoryDefaultTypeInternal {
  constexpr InventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InventoryDefaultTypeInternal() {}
  union {
    Inventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InventoryDefaultTypeInternal _Inventory_default_instance_;
constexpr Items::Items(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocks_()
  , block_headers_()
  , transactions_()
  , type_(0)
{}
struct ItemsDefaultTypeInternal {
  constexpr ItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemsDefaultTypeInternal() {}
  union {
    Items _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemsDefaultTypeInternal _Items_default_instance_;
constexpr DynamicProperties::DynamicProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_solidity_block_num_(int64_t{0}){}
struct DynamicPropertiesDefaultTypeInternal {
  constexpr DynamicPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicPropertiesDefaultTypeInternal() {}
  union {
    DynamicProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicPropertiesDefaultTypeInternal _DynamicProperties_default_instance_;
constexpr DisconnectMessage::DisconnectMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0)
{}
struct DisconnectMessageDefaultTypeInternal {
  constexpr DisconnectMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DisconnectMessageDefaultTypeInternal() {}
  union {
    DisconnectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
constexpr HelloMessage_BlockId::HelloMessage_BlockId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_(int64_t{0}){}
struct HelloMessage_BlockIdDefaultTypeInternal {
  constexpr HelloMessage_BlockIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HelloMessage_BlockIdDefaultTypeInternal() {}
  union {
    HelloMessage_BlockId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HelloMessage_BlockIdDefaultTypeInternal _HelloMessage_BlockId_default_instance_;
constexpr HelloMessage::HelloMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , genesisblockid_(nullptr)
  , solidblockid_(nullptr)
  , headblockid_(nullptr)
  , timestamp_(int64_t{0})
  , version_(0){}
struct HelloMessageDefaultTypeInternal {
  constexpr HelloMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HelloMessageDefaultTypeInternal() {}
  union {
    HelloMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
constexpr InternalTransaction_CallValueInfo::InternalTransaction_CallValueInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokenid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , callvalue_(int64_t{0}){}
struct InternalTransaction_CallValueInfoDefaultTypeInternal {
  constexpr InternalTransaction_CallValueInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalTransaction_CallValueInfoDefaultTypeInternal() {}
  union {
    InternalTransaction_CallValueInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalTransaction_CallValueInfoDefaultTypeInternal _InternalTransaction_CallValueInfo_default_instance_;
constexpr InternalTransaction::InternalTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callvalueinfo_()
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caller_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transferto_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rejected_(false){}
struct InternalTransactionDefaultTypeInternal {
  constexpr InternalTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalTransactionDefaultTypeInternal() {}
  union {
    InternalTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalTransactionDefaultTypeInternal _InternalTransaction_default_instance_;
constexpr DelegatedResourceAccountIndex::DelegatedResourceAccountIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fromaccounts_()
  , toaccounts_()
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DelegatedResourceAccountIndexDefaultTypeInternal {
  constexpr DelegatedResourceAccountIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegatedResourceAccountIndexDefaultTypeInternal() {}
  union {
    DelegatedResourceAccountIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegatedResourceAccountIndexDefaultTypeInternal _DelegatedResourceAccountIndex_default_instance_;
constexpr NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal {
  constexpr NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodeInfo_CheatWitnessInfoMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal _NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_;
constexpr NodeInfo_PeerInfo::NodeInfo_PeerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lastsyncblock_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headblockwebothhave_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localdisconnectreason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remotedisconnectreason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remainnum_(int64_t{0})
  , lastblockupdatetime_(int64_t{0})
  , headblocktimewebothhave_(int64_t{0})
  , port_(0)
  , syncflag_(false)
  , needsyncfrompeer_(false)
  , needsyncfromus_(false)
  , isactive_(false)
  , connecttime_(int64_t{0})
  , avglatency_(0)
  , synctofetchsizepeeknum_(int64_t{0})
  , synctofetchsize_(0)
  , syncblockrequestedsize_(0)
  , unfetchsynnum_(int64_t{0})
  , blockinporcsize_(0)
  , score_(0)
  , inflow_(int64_t{0})
  , nodecount_(0)
  , disconnecttimes_(0){}
struct NodeInfo_PeerInfoDefaultTypeInternal {
  constexpr NodeInfo_PeerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_PeerInfoDefaultTypeInternal() {}
  union {
    NodeInfo_PeerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_PeerInfoDefaultTypeInternal _NodeInfo_PeerInfo_default_instance_;
constexpr NodeInfo_ConfigNodeInfo::NodeInfo_ConfigNodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codeversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , p2pversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , listenport_(0)
  , activenodesize_(0)
  , passivenodesize_(0)
  , sendnodesize_(0)
  , maxconnectcount_(0)
  , sameipmaxconnectcount_(0)
  , discoverenable_(false)
  , supportconstant_(false)
  , backuplistenport_(0)
  , backupmembersize_(0)
  , backuppriority_(0)
  , dbversion_(0)
  , minparticipationrate_(0)
  , mintimeratio_(0)
  , maxtimeratio_(0)
  , allowcreationofcontracts_(int64_t{0})
  , allowadaptiveenergy_(int64_t{0}){}
struct NodeInfo_ConfigNodeInfoDefaultTypeInternal {
  constexpr NodeInfo_ConfigNodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_ConfigNodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo_ConfigNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_ConfigNodeInfoDefaultTypeInternal _NodeInfo_ConfigNodeInfo_default_instance_;
constexpr NodeInfo_MachineInfo_MemoryDescInfo::NodeInfo_MachineInfo_MemoryDescInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initsize_(int64_t{0})
  , usesize_(int64_t{0})
  , maxsize_(int64_t{0})
  , userate_(0){}
struct NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal {
  constexpr NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal() {}
  union {
    NodeInfo_MachineInfo_MemoryDescInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal _NodeInfo_MachineInfo_MemoryDescInfo_default_instance_;
constexpr NodeInfo_MachineInfo_DeadLockThreadInfo::NodeInfo_MachineInfo_DeadLockThreadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lockname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lockowner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stacktrace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocktime_(int64_t{0})
  , waittime_(int64_t{0}){}
struct NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal {
  constexpr NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal() {}
  union {
    NodeInfo_MachineInfo_DeadLockThreadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal _NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_;
constexpr NodeInfo_MachineInfo::NodeInfo_MachineInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memorydescinfolist_()
  , deadlockthreadinfolist_()
  , javaversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , osname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , threadcount_(0)
  , deadlockthreadcount_(0)
  , totalmemory_(int64_t{0})
  , freememory_(int64_t{0})
  , cpurate_(0)
  , jvmtotalmemory_(int64_t{0})
  , jvmfreememory_(int64_t{0})
  , processcpurate_(0)
  , cpucount_(0){}
struct NodeInfo_MachineInfoDefaultTypeInternal {
  constexpr NodeInfo_MachineInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_MachineInfoDefaultTypeInternal() {}
  union {
    NodeInfo_MachineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_MachineInfoDefaultTypeInternal _NodeInfo_MachineInfo_default_instance_;
constexpr NodeInfo::NodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peerinfolist_()
  , cheatwitnessinfomap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , solidityblock_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confignodeinfo_(nullptr)
  , machineinfo_(nullptr)
  , beginsyncnum_(int64_t{0})
  , currentconnectcount_(0)
  , activeconnectcount_(0)
  , totalflow_(int64_t{0})
  , passiveconnectcount_(0){}
struct NodeInfoDefaultTypeInternal {
  constexpr NodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
constexpr MetricsInfo_NodeInfo::MetricsInfo_NodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodetype_(0)
  , backupstatus_(0){}
struct MetricsInfo_NodeInfoDefaultTypeInternal {
  constexpr MetricsInfo_NodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NodeInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NodeInfoDefaultTypeInternal _MetricsInfo_NodeInfo_default_instance_;
constexpr MetricsInfo_BlockChainInfo_Witness::MetricsInfo_BlockChainInfo_Witness(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct MetricsInfo_BlockChainInfo_WitnessDefaultTypeInternal {
  constexpr MetricsInfo_BlockChainInfo_WitnessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_BlockChainInfo_WitnessDefaultTypeInternal() {}
  union {
    MetricsInfo_BlockChainInfo_Witness _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_BlockChainInfo_WitnessDefaultTypeInternal _MetricsInfo_BlockChainInfo_Witness_default_instance_;
constexpr MetricsInfo_BlockChainInfo_DupWitness::MetricsInfo_BlockChainInfo_DupWitness(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocknum_(int64_t{0})
  , count_(0){}
struct MetricsInfo_BlockChainInfo_DupWitnessDefaultTypeInternal {
  constexpr MetricsInfo_BlockChainInfo_DupWitnessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_BlockChainInfo_DupWitnessDefaultTypeInternal() {}
  union {
    MetricsInfo_BlockChainInfo_DupWitness _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_BlockChainInfo_DupWitnessDefaultTypeInternal _MetricsInfo_BlockChainInfo_DupWitness_default_instance_;
constexpr MetricsInfo_BlockChainInfo::MetricsInfo_BlockChainInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witnesses_()
  , dupwitness_()
  , headblockhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failprocessblockreason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blockprocesstime_(nullptr)
  , tps_(nullptr)
  , missedtransaction_(nullptr)
  , headblocknum_(int64_t{0})
  , headblocktimestamp_(int64_t{0})
  , forkcount_(0)
  , failforkcount_(0)
  , failprocessblocknum_(int64_t{0})
  , transactioncachesize_(0){}
struct MetricsInfo_BlockChainInfoDefaultTypeInternal {
  constexpr MetricsInfo_BlockChainInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_BlockChainInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_BlockChainInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_BlockChainInfoDefaultTypeInternal _MetricsInfo_BlockChainInfo_default_instance_;
constexpr MetricsInfo_RateInfo::MetricsInfo_RateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(int64_t{0})
  , meanrate_(0)
  , oneminuterate_(0)
  , fiveminuterate_(0)
  , fifteenminuterate_(0){}
struct MetricsInfo_RateInfoDefaultTypeInternal {
  constexpr MetricsInfo_RateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_RateInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_RateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_RateInfoDefaultTypeInternal _MetricsInfo_RateInfo_default_instance_;
constexpr MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , qps_(nullptr)
  , failqps_(nullptr)
  , outtraffic_(nullptr){}
struct MetricsInfo_NetInfo_ApiInfo_ApiDetailInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfo_ApiInfo_ApiDetailInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfo_ApiInfo_ApiDetailInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfo_ApiInfo_ApiDetailInfoDefaultTypeInternal _MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_default_instance_;
constexpr MetricsInfo_NetInfo_ApiInfo::MetricsInfo_NetInfo_ApiInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_()
  , qps_(nullptr)
  , failqps_(nullptr)
  , outtraffic_(nullptr){}
struct MetricsInfo_NetInfo_ApiInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfo_ApiInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfo_ApiInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo_ApiInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfo_ApiInfoDefaultTypeInternal _MetricsInfo_NetInfo_ApiInfo_default_instance_;
constexpr MetricsInfo_NetInfo_DisconnectionDetailInfo::MetricsInfo_NetInfo_DisconnectionDetailInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0){}
struct MetricsInfo_NetInfo_DisconnectionDetailInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfo_DisconnectionDetailInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfo_DisconnectionDetailInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo_DisconnectionDetailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfo_DisconnectionDetailInfoDefaultTypeInternal _MetricsInfo_NetInfo_DisconnectionDetailInfo_default_instance_;
constexpr MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witness_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , top99_(0)
  , top95_(0)
  , top75_(0)
  , count_(0)
  , delay1s_(0)
  , delay2s_(0)
  , delay3s_(0){}
struct MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfoDefaultTypeInternal _MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_default_instance_;
constexpr MetricsInfo_NetInfo_LatencyInfo::MetricsInfo_NetInfo_LatencyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_()
  , top99_(0)
  , top95_(0)
  , top75_(0)
  , totalcount_(0)
  , delay1s_(0)
  , delay2s_(0)
  , delay3s_(0){}
struct MetricsInfo_NetInfo_LatencyInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfo_LatencyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfo_LatencyInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo_LatencyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfo_LatencyInfoDefaultTypeInternal _MetricsInfo_NetInfo_LatencyInfo_default_instance_;
constexpr MetricsInfo_NetInfo::MetricsInfo_NetInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disconnectiondetail_()
  , api_(nullptr)
  , tcpintraffic_(nullptr)
  , tcpouttraffic_(nullptr)
  , udpintraffic_(nullptr)
  , udpouttraffic_(nullptr)
  , latency_(nullptr)
  , errorprotocount_(0)
  , connectioncount_(0)
  , validconnectioncount_(0)
  , disconnectioncount_(0){}
struct MetricsInfo_NetInfoDefaultTypeInternal {
  constexpr MetricsInfo_NetInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfo_NetInfoDefaultTypeInternal() {}
  union {
    MetricsInfo_NetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfo_NetInfoDefaultTypeInternal _MetricsInfo_NetInfo_default_instance_;
constexpr MetricsInfo::MetricsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(nullptr)
  , blockchain_(nullptr)
  , net_(nullptr)
  , interval_(int64_t{0}){}
struct MetricsInfoDefaultTypeInternal {
  constexpr MetricsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricsInfoDefaultTypeInternal() {}
  union {
    MetricsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsInfoDefaultTypeInternal _MetricsInfo_default_instance_;
constexpr PBFTMessage_Raw::PBFTMessage_Raw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0)

  , data_type_(0)

  , view_n_(int64_t{0})
  , epoch_(int64_t{0}){}
struct PBFTMessage_RawDefaultTypeInternal {
  constexpr PBFTMessage_RawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBFTMessage_RawDefaultTypeInternal() {}
  union {
    PBFTMessage_Raw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBFTMessage_RawDefaultTypeInternal _PBFTMessage_Raw_default_instance_;
constexpr PBFTMessage::PBFTMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_data_(nullptr){}
struct PBFTMessageDefaultTypeInternal {
  constexpr PBFTMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBFTMessageDefaultTypeInternal() {}
  union {
    PBFTMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBFTMessageDefaultTypeInternal _PBFTMessage_default_instance_;
constexpr PBFTCommitResult::PBFTCommitResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PBFTCommitResultDefaultTypeInternal {
  constexpr PBFTCommitResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBFTCommitResultDefaultTypeInternal() {}
  union {
    PBFTCommitResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBFTCommitResultDefaultTypeInternal _PBFTCommitResult_default_instance_;
constexpr SRL::SRL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sraddress_(){}
struct SRLDefaultTypeInternal {
  constexpr SRLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SRLDefaultTypeInternal() {}
  union {
    SRL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SRLDefaultTypeInternal _SRL_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fTron_2eproto[92];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_core_2fTron_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fTron_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fTron_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, vote_count_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, proposer_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, parameters_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, approvals_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, creator_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, first_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, first_token_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, second_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, second_token_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, order_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, sell_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, sell_token_quantity_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, buy_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, buy_token_quantity_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, sell_token_quantity_remain_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, sell_token_quantity_return_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, prev_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrder, next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderList, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderPairList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderPairList, orderpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderPair, sell_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderPair, buy_token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketAccountOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketAccountOrder, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketAccountOrder, orders_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketAccountOrder, count_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketAccountOrder, total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPrice, sell_token_quantity_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPrice, buy_token_quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPriceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPriceList, sell_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPriceList, buy_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketPriceList, prices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderIdList, head_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderIdList, tail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters, chainparameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, expire_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, latest_consume_time_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, acquired_delegated_frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, delegated_frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, storage_limit_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, storage_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, latest_exchange_storage_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, assetv2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, frozen_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, acquired_delegated_frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, delegated_frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, old_tron_power_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, tron_power_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_opration_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, allowance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_withdraw_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, is_witness_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, is_committee_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, frozen_supply_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_issued_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_issued_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_asset_operation_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_asset_operation_timev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_asset_net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_asset_net_usagev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_consume_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_consume_free_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, codehash_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, owner_permission_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, witness_permission_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, active_permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_Frozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_Frozen, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_Frozen, expire_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_AssetV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, asset_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, assetv2_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, asset_issued_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, asset_issued_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, latest_asset_operation_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, latest_asset_operation_timev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, free_asset_net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, free_asset_net_usagev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountAsset, frozen_supply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Key, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Key, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, from_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, to_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, expire_time_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, expire_time_for_energy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::authority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::authority, account_),
  PROTOBUF_FIELD_OFFSET(::protocol::authority, permission_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, permission_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, threshold_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, parent_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, operations_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, votecount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, pubkey_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, url_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, totalproduced_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, totalmissed_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, latestblocknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, latestslotnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, isjobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, old_votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, new_votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, value_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, pubkeyhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, vout_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutputs, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, origin_energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_usage_total_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, net_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderDetail, makerorderid_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderDetail, takerorderid_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderDetail, fillsellquantity_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketOrderDetail, fillbuyquantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, parameter_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, provider_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, contractname_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, permission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, ret_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, contractret_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, assetissueid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, withdraw_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, unfreeze_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_received_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_inject_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_withdraw_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, shielded_transaction_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, orderid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, orderdetails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_bytes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_num_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, expiration_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, auths_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, data_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, contract_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, scripts_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, fee_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, topics_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, contractresult_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, contract_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, receipt_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, log_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, resmessage_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, assetissueid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, withdraw_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, unfreeze_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, internal_transactions_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_received_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_inject_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_withdraw_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, shielded_transaction_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, orderid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, orderdetails_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, packingfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, transactioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transactions, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, transaction_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, privatekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, txtrieroot_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, parenthash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, number_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, version_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, accountstateroot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, witness_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Block, transactions_),
  PROTOBUF_FIELD_OFFSET(::protocol::Block, block_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, ids_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, remain_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, ids_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Items, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, blocks_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, block_headers_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DynamicProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DynamicProperties, last_solidity_block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DisconnectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DisconnectMessage, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, from_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, version_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, genesisblockid_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, solidblockid_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, headblockid_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, callvalue_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, tokenid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, caller_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, transferto_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, callvalueinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, rejected_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, account_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, fromaccounts_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, toaccounts_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, lastsyncblock_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, remainnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, lastblockupdatetime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, syncflag_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, headblocktimewebothhave_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, needsyncfrompeer_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, needsyncfromus_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, host_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, nodeid_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, connecttime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, avglatency_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, synctofetchsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, synctofetchsizepeeknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, syncblockrequestedsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, unfetchsynnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, blockinporcsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, headblockwebothhave_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, isactive_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, nodecount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, inflow_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, disconnecttimes_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, localdisconnectreason_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, remotedisconnectreason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, codeversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, p2pversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, listenport_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, discoverenable_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, activenodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, passivenodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, sendnodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, maxconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, sameipmaxconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backuplistenport_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backupmembersize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backuppriority_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, dbversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, minparticipationrate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, supportconstant_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, mintimeratio_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, maxtimeratio_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, allowcreationofcontracts_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, allowadaptiveenergy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, initsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, usesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, maxsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, userate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, lockname_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, lockowner_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, blocktime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, waittime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, stacktrace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, threadcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, deadlockthreadcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, cpucount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, totalmemory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, freememory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, cpurate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, javaversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, osname_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, jvmtotalmemory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, jvmfreememory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, processcpurate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, memorydescinfolist_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, deadlockthreadinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, beginsyncnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, block_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, solidityblock_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, currentconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, activeconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, passiveconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, totalflow_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, peerinfolist_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, confignodeinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, machineinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, cheatwitnessinfomap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NodeInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NodeInfo, nodetype_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NodeInfo, version_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NodeInfo, backupstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_Witness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_Witness, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_Witness, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_DupWitness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_DupWitness, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_DupWitness, blocknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo_DupWitness, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, headblocknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, headblocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, headblockhash_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, forkcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, failforkcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, blockprocesstime_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, tps_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, transactioncachesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, missedtransaction_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, witnesses_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, failprocessblocknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, failprocessblockreason_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_BlockChainInfo, dupwitness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, count_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, meanrate_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, oneminuterate_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, fiveminuterate_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_RateInfo, fifteenminuterate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, qps_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, failqps_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, outtraffic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo, qps_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo, failqps_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo, outtraffic_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_ApiInfo, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo, reason_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, witness_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, top99_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, top95_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, top75_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, count_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, delay1s_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, delay2s_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, delay3s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, top99_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, top95_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, top75_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, totalcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, delay1s_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, delay2s_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, delay3s_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo_LatencyInfo, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, errorprotocount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, api_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, connectioncount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, validconnectioncount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, tcpintraffic_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, tcpouttraffic_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, disconnectioncount_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, disconnectiondetail_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, udpintraffic_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, udpouttraffic_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo_NetInfo, latency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo, interval_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo, node_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo, blockchain_),
  PROTOBUF_FIELD_OFFSET(::protocol::MetricsInfo, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, msg_type_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, data_type_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, view_n_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, epoch_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage_Raw, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTMessage, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTCommitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTCommitResult, data_),
  PROTOBUF_FIELD_OFFSET(::protocol::PBFTCommitResult, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SRL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SRL, sraddress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::AccountId)},
  { 7, -1, sizeof(::protocol::Vote)},
  { 14, 21, sizeof(::protocol::Proposal_ParametersEntry_DoNotUse)},
  { 23, -1, sizeof(::protocol::Proposal)},
  { 35, -1, sizeof(::protocol::Exchange)},
  { 47, -1, sizeof(::protocol::MarketOrder)},
  { 64, -1, sizeof(::protocol::MarketOrderList)},
  { 70, -1, sizeof(::protocol::MarketOrderPairList)},
  { 76, -1, sizeof(::protocol::MarketOrderPair)},
  { 83, -1, sizeof(::protocol::MarketAccountOrder)},
  { 92, -1, sizeof(::protocol::MarketPrice)},
  { 99, -1, sizeof(::protocol::MarketPriceList)},
  { 107, -1, sizeof(::protocol::MarketOrderIdList)},
  { 114, -1, sizeof(::protocol::ChainParameters_ChainParameter)},
  { 121, -1, sizeof(::protocol::ChainParameters)},
  { 127, -1, sizeof(::protocol::Account_Frozen)},
  { 134, 141, sizeof(::protocol::Account_AssetEntry_DoNotUse)},
  { 143, 150, sizeof(::protocol::Account_AssetV2Entry_DoNotUse)},
  { 152, 159, sizeof(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse)},
  { 161, 168, sizeof(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse)},
  { 170, 177, sizeof(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse)},
  { 179, 186, sizeof(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse)},
  { 188, -1, sizeof(::protocol::Account_AccountResource)},
  { 201, -1, sizeof(::protocol::Account)},
  { 242, -1, sizeof(::protocol::AccountAsset_Frozen)},
  { 249, 256, sizeof(::protocol::AccountAsset_AssetEntry_DoNotUse)},
  { 258, 265, sizeof(::protocol::AccountAsset_AssetV2Entry_DoNotUse)},
  { 267, 274, sizeof(::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse)},
  { 276, 283, sizeof(::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse)},
  { 285, 292, sizeof(::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse)},
  { 294, 301, sizeof(::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse)},
  { 303, -1, sizeof(::protocol::AccountAsset)},
  { 318, -1, sizeof(::protocol::Key)},
  { 325, -1, sizeof(::protocol::DelegatedResource)},
  { 336, -1, sizeof(::protocol::authority)},
  { 343, -1, sizeof(::protocol::Permission)},
  { 355, -1, sizeof(::protocol::Witness)},
  { 369, -1, sizeof(::protocol::Votes)},
  { 377, -1, sizeof(::protocol::TXOutput)},
  { 384, -1, sizeof(::protocol::TXInput_raw)},
  { 392, -1, sizeof(::protocol::TXInput)},
  { 399, -1, sizeof(::protocol::TXOutputs)},
  { 405, -1, sizeof(::protocol::ResourceReceipt)},
  { 417, -1, sizeof(::protocol::MarketOrderDetail)},
  { 426, -1, sizeof(::protocol::Transaction_Contract)},
  { 436, -1, sizeof(::protocol::Transaction_Result)},
  { 454, -1, sizeof(::protocol::Transaction_raw)},
  { 469, -1, sizeof(::protocol::Transaction)},
  { 477, -1, sizeof(::protocol::TransactionInfo_Log)},
  { 485, -1, sizeof(::protocol::TransactionInfo)},
  { 512, -1, sizeof(::protocol::TransactionRet)},
  { 520, -1, sizeof(::protocol::Transactions)},
  { 526, -1, sizeof(::protocol::TransactionSign)},
  { 533, -1, sizeof(::protocol::BlockHeader_raw)},
  { 546, -1, sizeof(::protocol::BlockHeader)},
  { 553, -1, sizeof(::protocol::Block)},
  { 560, -1, sizeof(::protocol::ChainInventory_BlockId)},
  { 567, -1, sizeof(::protocol::ChainInventory)},
  { 574, -1, sizeof(::protocol::BlockInventory_BlockId)},
  { 581, -1, sizeof(::protocol::BlockInventory)},
  { 588, -1, sizeof(::protocol::Inventory)},
  { 595, -1, sizeof(::protocol::Items)},
  { 604, -1, sizeof(::protocol::DynamicProperties)},
  { 610, -1, sizeof(::protocol::DisconnectMessage)},
  { 616, -1, sizeof(::protocol::HelloMessage_BlockId)},
  { 623, -1, sizeof(::protocol::HelloMessage)},
  { 636, -1, sizeof(::protocol::InternalTransaction_CallValueInfo)},
  { 643, -1, sizeof(::protocol::InternalTransaction)},
  { 655, -1, sizeof(::protocol::DelegatedResourceAccountIndex)},
  { 663, 670, sizeof(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse)},
  { 672, -1, sizeof(::protocol::NodeInfo_PeerInfo)},
  { 702, -1, sizeof(::protocol::NodeInfo_ConfigNodeInfo)},
  { 726, -1, sizeof(::protocol::NodeInfo_MachineInfo_MemoryDescInfo)},
  { 736, -1, sizeof(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo)},
  { 748, -1, sizeof(::protocol::NodeInfo_MachineInfo)},
  { 766, -1, sizeof(::protocol::NodeInfo)},
  { 782, -1, sizeof(::protocol::MetricsInfo_NodeInfo)},
  { 791, -1, sizeof(::protocol::MetricsInfo_BlockChainInfo_Witness)},
  { 798, -1, sizeof(::protocol::MetricsInfo_BlockChainInfo_DupWitness)},
  { 806, -1, sizeof(::protocol::MetricsInfo_BlockChainInfo)},
  { 824, -1, sizeof(::protocol::MetricsInfo_RateInfo)},
  { 834, -1, sizeof(::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo)},
  { 843, -1, sizeof(::protocol::MetricsInfo_NetInfo_ApiInfo)},
  { 852, -1, sizeof(::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo)},
  { 859, -1, sizeof(::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo)},
  { 872, -1, sizeof(::protocol::MetricsInfo_NetInfo_LatencyInfo)},
  { 885, -1, sizeof(::protocol::MetricsInfo_NetInfo)},
  { 901, -1, sizeof(::protocol::MetricsInfo)},
  { 910, -1, sizeof(::protocol::PBFTMessage_Raw)},
  { 920, -1, sizeof(::protocol::PBFTMessage)},
  { 927, -1, sizeof(::protocol::PBFTCommitResult)},
  { 934, -1, sizeof(::protocol::SRL)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Proposal_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Exchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrderPairList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrderPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketAccountOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketPrice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketPriceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrderIdList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainParameters_ChainParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_Frozen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AssetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AssetV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AccountResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_Frozen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_AssetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_AssetV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_LatestAssetOperationTimeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_FreeAssetNetUsageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_authority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Witness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Votes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXInput_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXOutputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ResourceReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketOrderDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionInfo_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainInventory_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockInventory_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Inventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Items_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DynamicProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DisconnectMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_HelloMessage_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_HelloMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_InternalTransaction_CallValueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_InternalTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResourceAccountIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_PeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_ConfigNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_MemoryDescInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_BlockChainInfo_Witness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_BlockChainInfo_DupWitness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_BlockChainInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_RateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_ApiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_DisconnectionDetailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_LatencyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_NetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MetricsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PBFTMessage_Raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PBFTMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PBFTCommitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SRL_default_instance_),
};

const char descriptor_table_protodef_core_2fTron_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017core/Tron.proto\022\010protocol\032\031google/prot"
  "obuf/any.proto\032\023core/Discover.proto\"*\n\tA"
  "ccountId\022\014\n\004name\030\001 \001(\014\022\017\n\007address\030\002 \001(\014\""
  "0\n\004Vote\022\024\n\014vote_address\030\001 \001(\014\022\022\n\nvote_co"
  "unt\030\002 \001(\003\"\321\002\n\010Proposal\022\023\n\013proposal_id\030\001 "
  "\001(\003\022\030\n\020proposer_address\030\002 \001(\014\0226\n\nparamet"
  "ers\030\003 \003(\0132\".protocol.Proposal.Parameters"
  "Entry\022\027\n\017expiration_time\030\004 \001(\003\022\023\n\013create"
  "_time\030\005 \001(\003\022\021\n\tapprovals\030\006 \003(\014\022\'\n\005state\030"
  "\007 \001(\0162\030.protocol.Proposal.State\0321\n\017Param"
  "etersEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:\002"
  "8\001\"A\n\005State\022\013\n\007PENDING\020\000\022\017\n\013DISAPPROVED\020"
  "\001\022\014\n\010APPROVED\020\002\022\014\n\010CANCELED\020\003\"\271\001\n\010Exchan"
  "ge\022\023\n\013exchange_id\030\001 \001(\003\022\027\n\017creator_addre"
  "ss\030\002 \001(\014\022\023\n\013create_time\030\003 \001(\003\022\026\n\016first_t"
  "oken_id\030\006 \001(\014\022\033\n\023first_token_balance\030\007 \001"
  "(\003\022\027\n\017second_token_id\030\010 \001(\014\022\034\n\024second_to"
  "ken_balance\030\t \001(\003\"\362\002\n\013MarketOrder\022\020\n\010ord"
  "er_id\030\001 \001(\014\022\025\n\rowner_address\030\002 \001(\014\022\023\n\013cr"
  "eate_time\030\003 \001(\003\022\025\n\rsell_token_id\030\004 \001(\014\022\033"
  "\n\023sell_token_quantity\030\005 \001(\003\022\024\n\014buy_token"
  "_id\030\006 \001(\014\022\032\n\022buy_token_quantity\030\007 \001(\003\022\"\n"
  "\032sell_token_quantity_remain\030\t \001(\003\022\"\n\032sel"
  "l_token_quantity_return\030\n \001(\003\022*\n\005state\030\013"
  " \001(\0162\033.protocol.MarketOrder.State\022\014\n\004pre"
  "v\030\014 \001(\014\022\014\n\004next\030\r \001(\014\"/\n\005State\022\n\n\006ACTIVE"
  "\020\000\022\014\n\010INACTIVE\020\001\022\014\n\010CANCELED\020\002\"8\n\017Market"
  "OrderList\022%\n\006orders\030\001 \003(\0132\025.protocol.Mar"
  "ketOrder\"C\n\023MarketOrderPairList\022,\n\torder"
  "Pair\030\001 \003(\0132\031.protocol.MarketOrderPair\">\n"
  "\017MarketOrderPair\022\025\n\rsell_token_id\030\001 \001(\014\022"
  "\024\n\014buy_token_id\030\002 \001(\014\"_\n\022MarketAccountOr"
  "der\022\025\n\rowner_address\030\001 \001(\014\022\016\n\006orders\030\002 \003"
  "(\014\022\r\n\005count\030\003 \001(\003\022\023\n\013total_count\030\004 \001(\003\"F"
  "\n\013MarketPrice\022\033\n\023sell_token_quantity\030\001 \001"
  "(\003\022\032\n\022buy_token_quantity\030\002 \001(\003\"e\n\017Market"
  "PriceList\022\025\n\rsell_token_id\030\001 \001(\014\022\024\n\014buy_"
  "token_id\030\002 \001(\014\022%\n\006prices\030\003 \003(\0132\025.protoco"
  "l.MarketPrice\"/\n\021MarketOrderIdList\022\014\n\004he"
  "ad\030\001 \001(\014\022\014\n\004tail\030\002 \001(\014\"\201\001\n\017ChainParamete"
  "rs\022@\n\016chainParameter\030\001 \003(\0132(.protocol.Ch"
  "ainParameters.ChainParameter\032,\n\016ChainPar"
  "ameter\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003\"\266\020\n\007A"
  "ccount\022\024\n\014account_name\030\001 \001(\014\022#\n\004type\030\002 \001"
  "(\0162\025.protocol.AccountType\022\017\n\007address\030\003 \001"
  "(\014\022\017\n\007balance\030\004 \001(\003\022\035\n\005votes\030\005 \003(\0132\016.pro"
  "tocol.Vote\022+\n\005asset\030\006 \003(\0132\034.protocol.Acc"
  "ount.AssetEntry\022/\n\007assetV2\0308 \003(\0132\036.proto"
  "col.Account.AssetV2Entry\022(\n\006frozen\030\007 \003(\013"
  "2\030.protocol.Account.Frozen\022\021\n\tnet_usage\030"
  "\010 \001(\003\0227\n/acquired_delegated_frozen_balan"
  "ce_for_bandwidth\030) \001(\003\022.\n&delegated_froz"
  "en_balance_for_bandwidth\030* \001(\003\022\026\n\016old_tr"
  "on_power\030. \001(\003\022,\n\ntron_power\030/ \001(\0132\030.pro"
  "tocol.Account.Frozen\022\023\n\013create_time\030\t \001("
  "\003\022\034\n\024latest_opration_time\030\n \001(\003\022\021\n\tallow"
  "ance\030\013 \001(\003\022\034\n\024latest_withdraw_time\030\014 \001(\003"
  "\022\014\n\004code\030\r \001(\014\022\022\n\nis_witness\030\016 \001(\010\022\024\n\014is"
  "_committee\030\017 \001(\010\022/\n\rfrozen_supply\030\020 \003(\0132"
  "\030.protocol.Account.Frozen\022\031\n\021asset_issue"
  "d_name\030\021 \001(\014\022\027\n\017asset_issued_ID\0309 \001(\014\022T\n"
  "\033latest_asset_operation_time\030\022 \003(\0132/.pro"
  "tocol.Account.LatestAssetOperationTimeEn"
  "try\022X\n\035latest_asset_operation_timeV2\030: \003"
  "(\01321.protocol.Account.LatestAssetOperati"
  "onTimeV2Entry\022\026\n\016free_net_usage\030\023 \001(\003\022F\n"
  "\024free_asset_net_usage\030\024 \003(\0132(.protocol.A"
  "ccount.FreeAssetNetUsageEntry\022J\n\026free_as"
  "set_net_usageV2\030; \003(\0132*.protocol.Account"
  ".FreeAssetNetUsageV2Entry\022\033\n\023latest_cons"
  "ume_time\030\025 \001(\003\022 \n\030latest_consume_free_ti"
  "me\030\026 \001(\003\022\022\n\naccount_id\030\027 \001(\014\022;\n\020account_"
  "resource\030\032 \001(\0132!.protocol.Account.Accoun"
  "tResource\022\020\n\010codeHash\030\036 \001(\014\022.\n\020owner_per"
  "mission\030\037 \001(\0132\024.protocol.Permission\0220\n\022w"
  "itness_permission\030  \001(\0132\024.protocol.Permi"
  "ssion\022/\n\021active_permission\030! \003(\0132\024.proto"
  "col.Permission\0325\n\006Frozen\022\026\n\016frozen_balan"
  "ce\030\001 \001(\003\022\023\n\013expire_time\030\002 \001(\003\032,\n\nAssetEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032.\n\014A"
  "ssetV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:"
  "\0028\001\032\?\n\035LatestAssetOperationTimeEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032A\n\037LatestAs"
  "setOperationTimeV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\003:\0028\001\0328\n\026FreeAssetNetUsageEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032:\n\030Fre"
  "eAssetNetUsageV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\003:\0028\001\032\303\002\n\017AccountResource\022\024\n\014ene"
  "rgy_usage\030\001 \001(\003\022;\n\031frozen_balance_for_en"
  "ergy\030\002 \001(\0132\030.protocol.Account.Frozen\022&\n\036"
  "latest_consume_time_for_energy\030\003 \001(\003\0224\n,"
  "acquired_delegated_frozen_balance_for_en"
  "ergy\030\004 \001(\003\022+\n#delegated_frozen_balance_f"
  "or_energy\030\005 \001(\003\022\025\n\rstorage_limit\030\006 \001(\003\022\025"
  "\n\rstorage_usage\030\007 \001(\003\022$\n\034latest_exchange"
  "_storage_time\030\010 \001(\003\"\330\007\n\014AccountAsset\022\017\n\007"
  "address\030\001 \001(\014\0220\n\005asset\030\002 \003(\0132!.protocol."
  "AccountAsset.AssetEntry\0224\n\007assetV2\030\003 \003(\013"
  "2#.protocol.AccountAsset.AssetV2Entry\022\031\n"
  "\021asset_issued_name\030\004 \001(\014\022\027\n\017asset_issued"
  "_ID\030\005 \001(\014\022Y\n\033latest_asset_operation_time"
  "\030\006 \003(\01324.protocol.AccountAsset.LatestAss"
  "etOperationTimeEntry\022]\n\035latest_asset_ope"
  "ration_timeV2\030\007 \003(\01326.protocol.AccountAs"
  "set.LatestAssetOperationTimeV2Entry\022K\n\024f"
  "ree_asset_net_usage\030\010 \003(\0132-.protocol.Acc"
  "ountAsset.FreeAssetNetUsageEntry\022O\n\026free"
  "_asset_net_usageV2\030\t \003(\0132/.protocol.Acco"
  "untAsset.FreeAssetNetUsageV2Entry\0224\n\rfro"
  "zen_supply\030\n \003(\0132\035.protocol.AccountAsset"
  ".Frozen\0325\n\006Frozen\022\026\n\016frozen_balance\030\001 \001("
  "\003\022\023\n\013expire_time\030\002 \001(\003\032,\n\nAssetEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032.\n\014AssetV2E"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032\?\n\035"
  "LatestAssetOperationTimeEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032A\n\037LatestAssetOper"
  "ationTimeV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\003:\0028\001\0328\n\026FreeAssetNetUsageEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032:\n\030FreeAssetN"
  "etUsageV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\003:\0028\001\"&\n\003Key\022\017\n\007address\030\001 \001(\014\022\016\n\006weight"
  "\030\002 \001(\003\"\271\001\n\021DelegatedResource\022\014\n\004from\030\001 \001"
  "(\014\022\n\n\002to\030\002 \001(\014\022$\n\034frozen_balance_for_ban"
  "dwidth\030\003 \001(\003\022!\n\031frozen_balance_for_energ"
  "y\030\004 \001(\003\022!\n\031expire_time_for_bandwidth\030\005 \001"
  "(\003\022\036\n\026expire_time_for_energy\030\006 \001(\003\"J\n\tau"
  "thority\022$\n\007account\030\001 \001(\0132\023.protocol.Acco"
  "untId\022\027\n\017permission_name\030\002 \001(\014\"\361\001\n\nPermi"
  "ssion\0221\n\004type\030\001 \001(\0162#.protocol.Permissio"
  "n.PermissionType\022\n\n\002id\030\002 \001(\005\022\027\n\017permissi"
  "on_name\030\003 \001(\t\022\021\n\tthreshold\030\004 \001(\003\022\021\n\tpare"
  "nt_id\030\005 \001(\005\022\022\n\noperations\030\006 \001(\014\022\033\n\004keys\030"
  "\007 \003(\0132\r.protocol.Key\"4\n\016PermissionType\022\t"
  "\n\005Owner\020\000\022\013\n\007Witness\020\001\022\n\n\006Active\020\002\"\265\001\n\007W"
  "itness\022\017\n\007address\030\001 \001(\014\022\021\n\tvoteCount\030\002 \001"
  "(\003\022\016\n\006pubKey\030\003 \001(\014\022\013\n\003url\030\004 \001(\t\022\025\n\rtotal"
  "Produced\030\005 \001(\003\022\023\n\013totalMissed\030\006 \001(\003\022\026\n\016l"
  "atestBlockNum\030\007 \001(\003\022\025\n\rlatestSlotNum\030\010 \001"
  "(\003\022\016\n\006isJobs\030\t \001(\010\"^\n\005Votes\022\017\n\007address\030\001"
  " \001(\014\022!\n\told_votes\030\002 \003(\0132\016.protocol.Vote\022"
  "!\n\tnew_votes\030\003 \003(\0132\016.protocol.Vote\"-\n\010TX"
  "Output\022\r\n\005value\030\001 \001(\003\022\022\n\npubKeyHash\030\002 \001("
  "\014\"x\n\007TXInput\022\'\n\010raw_data\030\001 \001(\0132\025.protoco"
  "l.TXInput.raw\022\021\n\tsignature\030\004 \001(\014\0321\n\003raw\022"
  "\014\n\004txID\030\001 \001(\014\022\014\n\004vout\030\002 \001(\003\022\016\n\006pubKey\030\003 "
  "\001(\014\"0\n\tTXOutputs\022#\n\007outputs\030\001 \003(\0132\022.prot"
  "ocol.TXOutput\"\325\001\n\017ResourceReceipt\022\024\n\014ene"
  "rgy_usage\030\001 \001(\003\022\022\n\nenergy_fee\030\002 \001(\003\022\033\n\023o"
  "rigin_energy_usage\030\003 \001(\003\022\032\n\022energy_usage"
  "_total\030\004 \001(\003\022\021\n\tnet_usage\030\005 \001(\003\022\017\n\007net_f"
  "ee\030\006 \001(\003\022;\n\006result\030\007 \001(\0162+.protocol.Tran"
  "saction.Result.contractResult\"r\n\021MarketO"
  "rderDetail\022\024\n\014makerOrderId\030\001 \001(\014\022\024\n\014take"
  "rOrderId\030\002 \001(\014\022\030\n\020fillSellQuantity\030\003 \001(\003"
  "\022\027\n\017fillBuyQuantity\030\004 \001(\003\"\232\022\n\013Transactio"
  "n\022+\n\010raw_data\030\001 \001(\0132\031.protocol.Transacti"
  "on.raw\022\021\n\tsignature\030\002 \003(\014\022)\n\003ret\030\005 \003(\0132\034"
  ".protocol.Transaction.Result\032\371\010\n\010Contrac"
  "t\0229\n\004type\030\001 \001(\0162+.protocol.Transaction.C"
  "ontract.ContractType\022\'\n\tparameter\030\002 \001(\0132"
  "\024.google.protobuf.Any\022\020\n\010provider\030\003 \001(\014\022"
  "\024\n\014ContractName\030\004 \001(\014\022\025\n\rPermission_id\030\005"
  " \001(\005\"\311\007\n\014ContractType\022\031\n\025AccountCreateCo"
  "ntract\020\000\022\024\n\020TransferContract\020\001\022\031\n\025Transf"
  "erAssetContract\020\002\022\025\n\021VoteAssetContract\020\003"
  "\022\027\n\023VoteWitnessContract\020\004\022\031\n\025WitnessCrea"
  "teContract\020\005\022\026\n\022AssetIssueContract\020\006\022\031\n\025"
  "WitnessUpdateContract\020\010\022!\n\035ParticipateAs"
  "setIssueContract\020\t\022\031\n\025AccountUpdateContr"
  "act\020\n\022\031\n\025FreezeBalanceContract\020\013\022\033\n\027Unfr"
  "eezeBalanceContract\020\014\022\033\n\027WithdrawBalance"
  "Contract\020\r\022\031\n\025UnfreezeAssetContract\020\016\022\027\n"
  "\023UpdateAssetContract\020\017\022\032\n\026ProposalCreate"
  "Contract\020\020\022\033\n\027ProposalApproveContract\020\021\022"
  "\032\n\026ProposalDeleteContract\020\022\022\030\n\024SetAccoun"
  "tIdContract\020\023\022\022\n\016CustomContract\020\024\022\027\n\023Cre"
  "ateSmartContract\020\036\022\030\n\024TriggerSmartContra"
  "ct\020\037\022\017\n\013GetContract\020 \022\031\n\025UpdateSettingCo"
  "ntract\020!\022\032\n\026ExchangeCreateContract\020)\022\032\n\026"
  "ExchangeInjectContract\020*\022\034\n\030ExchangeWith"
  "drawContract\020+\022\037\n\033ExchangeTransactionCon"
  "tract\020,\022\035\n\031UpdateEnergyLimitContract\020-\022#"
  "\n\037AccountPermissionUpdateContract\020.\022\024\n\020C"
  "learABIContract\0200\022\033\n\027UpdateBrokerageCont"
  "ract\0201\022\034\n\030ShieldedTransferContract\0203\022\033\n\027"
  "MarketSellAssetContract\0204\022\035\n\031MarketCance"
  "lOrderContract\0205\032\244\006\n\006Result\022\013\n\003fee\030\001 \001(\003"
  "\022.\n\003ret\030\002 \001(\0162!.protocol.Transaction.Res"
  "ult.code\022@\n\013contractRet\030\003 \001(\0162+.protocol"
  ".Transaction.Result.contractResult\022\024\n\014as"
  "setIssueID\030\016 \001(\t\022\027\n\017withdraw_amount\030\017 \001("
  "\003\022\027\n\017unfreeze_amount\030\020 \001(\003\022 \n\030exchange_r"
  "eceived_amount\030\022 \001(\003\022&\n\036exchange_inject_"
  "another_amount\030\023 \001(\003\022(\n exchange_withdra"
  "w_another_amount\030\024 \001(\003\022\023\n\013exchange_id\030\025 "
  "\001(\003\022 \n\030shielded_transaction_fee\030\026 \001(\003\022\017\n"
  "\007orderId\030\031 \001(\014\0221\n\014orderDetails\030\032 \003(\0132\033.p"
  "rotocol.MarketOrderDetail\"\036\n\004code\022\n\n\006SUC"
  "ESS\020\000\022\n\n\006FAILED\020\001\"\303\002\n\016contractResult\022\013\n\007"
  "DEFAULT\020\000\022\013\n\007SUCCESS\020\001\022\n\n\006REVERT\020\002\022\030\n\024BA"
  "D_JUMP_DESTINATION\020\003\022\021\n\rOUT_OF_MEMORY\020\004\022"
  "\030\n\024PRECOMPILED_CONTRACT\020\005\022\023\n\017STACK_TOO_S"
  "MALL\020\006\022\023\n\017STACK_TOO_LARGE\020\007\022\025\n\021ILLEGAL_O"
  "PERATION\020\010\022\022\n\016STACK_OVERFLOW\020\t\022\021\n\rOUT_OF"
  "_ENERGY\020\n\022\017\n\013OUT_OF_TIME\020\013\022\027\n\023JVM_STACK_"
  "OVER_FLOW\020\014\022\013\n\007UNKNOWN\020\r\022\023\n\017TRANSFER_FAI"
  "LED\020\016\022\020\n\014INVALID_CODE\020\017\032\374\001\n\003raw\022\027\n\017ref_b"
  "lock_bytes\030\001 \001(\014\022\025\n\rref_block_num\030\003 \001(\003\022"
  "\026\n\016ref_block_hash\030\004 \001(\014\022\022\n\nexpiration\030\010 "
  "\001(\003\022\"\n\005auths\030\t \003(\0132\023.protocol.authority\022"
  "\014\n\004data\030\n \001(\014\0220\n\010contract\030\013 \003(\0132\036.protoc"
  "ol.Transaction.Contract\022\017\n\007scripts\030\014 \001(\014"
  "\022\021\n\ttimestamp\030\016 \001(\003\022\021\n\tfee_limit\030\022 \001(\003\"\204"
  "\006\n\017TransactionInfo\022\n\n\002id\030\001 \001(\014\022\013\n\003fee\030\002 "
  "\001(\003\022\023\n\013blockNumber\030\003 \001(\003\022\026\n\016blockTimeSta"
  "mp\030\004 \001(\003\022\026\n\016contractResult\030\005 \003(\014\022\030\n\020cont"
  "ract_address\030\006 \001(\014\022*\n\007receipt\030\007 \001(\0132\031.pr"
  "otocol.ResourceReceipt\022*\n\003log\030\010 \003(\0132\035.pr"
  "otocol.TransactionInfo.Log\022.\n\006result\030\t \001"
  "(\0162\036.protocol.TransactionInfo.code\022\022\n\nre"
  "sMessage\030\n \001(\014\022\024\n\014assetIssueID\030\016 \001(\t\022\027\n\017"
  "withdraw_amount\030\017 \001(\003\022\027\n\017unfreeze_amount"
  "\030\020 \001(\003\022<\n\025internal_transactions\030\021 \003(\0132\035."
  "protocol.InternalTransaction\022 \n\030exchange"
  "_received_amount\030\022 \001(\003\022&\n\036exchange_injec"
  "t_another_amount\030\023 \001(\003\022(\n exchange_withd"
  "raw_another_amount\030\024 \001(\003\022\023\n\013exchange_id\030"
  "\025 \001(\003\022 \n\030shielded_transaction_fee\030\026 \001(\003\022"
  "\017\n\007orderId\030\031 \001(\014\0221\n\014orderDetails\030\032 \003(\0132\033"
  ".protocol.MarketOrderDetail\022\022\n\npackingFe"
  "e\030\033 \001(\003\0324\n\003Log\022\017\n\007address\030\001 \001(\014\022\016\n\006topic"
  "s\030\002 \003(\014\022\014\n\004data\030\003 \001(\014\"\036\n\004code\022\n\n\006SUCESS\020"
  "\000\022\n\n\006FAILED\020\001\"q\n\016TransactionRet\022\023\n\013block"
  "Number\030\001 \001(\003\022\026\n\016blockTimeStamp\030\002 \001(\003\0222\n\017"
  "transactioninfo\030\003 \003(\0132\031.protocol.Transac"
  "tionInfo\";\n\014Transactions\022+\n\014transactions"
  "\030\001 \003(\0132\025.protocol.Transaction\"Q\n\017Transac"
  "tionSign\022*\n\013transaction\030\001 \001(\0132\025.protocol"
  ".Transaction\022\022\n\nprivateKey\030\002 \001(\014\"\200\002\n\013Blo"
  "ckHeader\022+\n\010raw_data\030\001 \001(\0132\031.protocol.Bl"
  "ockHeader.raw\022\031\n\021witness_signature\030\002 \001(\014"
  "\032\250\001\n\003raw\022\021\n\ttimestamp\030\001 \001(\003\022\022\n\ntxTrieRoo"
  "t\030\002 \001(\014\022\022\n\nparentHash\030\003 \001(\014\022\016\n\006number\030\007 "
  "\001(\003\022\022\n\nwitness_id\030\010 \001(\003\022\027\n\017witness_addre"
  "ss\030\t \001(\014\022\017\n\007version\030\n \001(\005\022\030\n\020accountStat"
  "eRoot\030\013 \001(\014\"a\n\005Block\022+\n\014transactions\030\001 \003"
  "(\0132\025.protocol.Transaction\022+\n\014block_heade"
  "r\030\002 \001(\0132\025.protocol.BlockHeader\"|\n\016ChainI"
  "nventory\022-\n\003ids\030\001 \003(\0132 .protocol.ChainIn"
  "ventory.BlockId\022\022\n\nremain_num\030\002 \001(\003\032\'\n\007B"
  "lockId\022\014\n\004hash\030\001 \001(\014\022\016\n\006number\030\002 \001(\003\"\277\001\n"
  "\016BlockInventory\022-\n\003ids\030\001 \003(\0132 .protocol."
  "BlockInventory.BlockId\022+\n\004type\030\002 \001(\0162\035.p"
  "rotocol.BlockInventory.Type\032\'\n\007BlockId\022\014"
  "\n\004hash\030\001 \001(\014\022\016\n\006number\030\002 \001(\003\"(\n\004Type\022\010\n\004"
  "SYNC\020\000\022\013\n\007ADVTISE\020\001\022\t\n\005FETCH\020\002\"n\n\tInvent"
  "ory\022/\n\004type\030\001 \001(\0162!.protocol.Inventory.I"
  "nventoryType\022\013\n\003ids\030\002 \003(\014\"#\n\rInventoryTy"
  "pe\022\007\n\003TRX\020\000\022\t\n\005BLOCK\020\001\"\345\001\n\005Items\022&\n\004type"
  "\030\001 \001(\0162\030.protocol.Items.ItemType\022\037\n\006bloc"
  "ks\030\002 \003(\0132\017.protocol.Block\022,\n\rblock_heade"
  "rs\030\003 \003(\0132\025.protocol.BlockHeader\022+\n\014trans"
  "actions\030\004 \003(\0132\025.protocol.Transaction\"8\n\010"
  "ItemType\022\007\n\003ERR\020\000\022\007\n\003TRX\020\001\022\t\n\005BLOCK\020\002\022\017\n"
  "\013BLOCKHEADER\020\003\"4\n\021DynamicProperties\022\037\n\027l"
  "ast_solidity_block_num\030\001 \001(\003\"9\n\021Disconne"
  "ctMessage\022$\n\006reason\030\001 \001(\0162\024.protocol.Rea"
  "sonCode\"\304\002\n\014HelloMessage\022 \n\004from\030\001 \001(\0132\022"
  ".protocol.Endpoint\022\017\n\007version\030\002 \001(\005\022\021\n\tt"
  "imestamp\030\003 \001(\003\0226\n\016genesisBlockId\030\004 \001(\0132\036"
  ".protocol.HelloMessage.BlockId\0224\n\014solidB"
  "lockId\030\005 \001(\0132\036.protocol.HelloMessage.Blo"
  "ckId\0223\n\013headBlockId\030\006 \001(\0132\036.protocol.Hel"
  "loMessage.BlockId\022\017\n\007address\030\007 \001(\014\022\021\n\tsi"
  "gnature\030\010 \001(\014\032\'\n\007BlockId\022\014\n\004hash\030\001 \001(\014\022\016"
  "\n\006number\030\002 \001(\003\"\377\001\n\023InternalTransaction\022\014"
  "\n\004hash\030\001 \001(\014\022\026\n\016caller_address\030\002 \001(\014\022\032\n\022"
  "transferTo_address\030\003 \001(\014\022B\n\rcallValueInf"
  "o\030\004 \003(\0132+.protocol.InternalTransaction.C"
  "allValueInfo\022\014\n\004note\030\005 \001(\014\022\020\n\010rejected\030\006"
  " \001(\010\022\r\n\005extra\030\007 \001(\t\0323\n\rCallValueInfo\022\021\n\t"
  "callValue\030\001 \001(\003\022\017\n\007tokenId\030\002 \001(\t\"Z\n\035Dele"
  "gatedResourceAccountIndex\022\017\n\007account\030\001 \001"
  "(\014\022\024\n\014fromAccounts\030\002 \003(\014\022\022\n\ntoAccounts\030\003"
  " \003(\014\"\237\021\n\010NodeInfo\022\024\n\014beginSyncNum\030\001 \001(\003\022"
  "\r\n\005block\030\002 \001(\t\022\025\n\rsolidityBlock\030\003 \001(\t\022\033\n"
  "\023currentConnectCount\030\004 \001(\005\022\032\n\022activeConn"
  "ectCount\030\005 \001(\005\022\033\n\023passiveConnectCount\030\006 "
  "\001(\005\022\021\n\ttotalFlow\030\007 \001(\003\0221\n\014peerInfoList\030\010"
  " \003(\0132\033.protocol.NodeInfo.PeerInfo\0229\n\016con"
  "figNodeInfo\030\t \001(\0132!.protocol.NodeInfo.Co"
  "nfigNodeInfo\0223\n\013machineInfo\030\n \001(\0132\036.prot"
  "ocol.NodeInfo.MachineInfo\022H\n\023cheatWitnes"
  "sInfoMap\030\013 \003(\0132+.protocol.NodeInfo.Cheat"
  "WitnessInfoMapEntry\032:\n\030CheatWitnessInfoM"
  "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032"
  "\315\004\n\010PeerInfo\022\025\n\rlastSyncBlock\030\001 \001(\t\022\021\n\tr"
  "emainNum\030\002 \001(\003\022\033\n\023lastBlockUpdateTime\030\003 "
  "\001(\003\022\020\n\010syncFlag\030\004 \001(\010\022\037\n\027headBlockTimeWe"
  "BothHave\030\005 \001(\003\022\030\n\020needSyncFromPeer\030\006 \001(\010"
  "\022\026\n\016needSyncFromUs\030\007 \001(\010\022\014\n\004host\030\010 \001(\t\022\014"
  "\n\004port\030\t \001(\005\022\016\n\006nodeId\030\n \001(\t\022\023\n\013connectT"
  "ime\030\013 \001(\003\022\022\n\navgLatency\030\014 \001(\001\022\027\n\017syncToF"
  "etchSize\030\r \001(\005\022\036\n\026syncToFetchSizePeekNum"
  "\030\016 \001(\003\022\036\n\026syncBlockRequestedSize\030\017 \001(\005\022\025"
  "\n\runFetchSynNum\030\020 \001(\003\022\027\n\017blockInPorcSize"
  "\030\021 \001(\005\022\033\n\023headBlockWeBothHave\030\022 \001(\t\022\020\n\010i"
  "sActive\030\023 \001(\010\022\r\n\005score\030\024 \001(\005\022\021\n\tnodeCoun"
  "t\030\025 \001(\005\022\016\n\006inFlow\030\026 \001(\003\022\027\n\017disconnectTim"
  "es\030\027 \001(\005\022\035\n\025localDisconnectReason\030\030 \001(\t\022"
  "\036\n\026remoteDisconnectReason\030\031 \001(\t\032\345\003\n\016Conf"
  "igNodeInfo\022\023\n\013codeVersion\030\001 \001(\t\022\022\n\np2pVe"
  "rsion\030\002 \001(\t\022\022\n\nlistenPort\030\003 \001(\005\022\026\n\016disco"
  "verEnable\030\004 \001(\010\022\026\n\016activeNodeSize\030\005 \001(\005\022"
  "\027\n\017passiveNodeSize\030\006 \001(\005\022\024\n\014sendNodeSize"
  "\030\007 \001(\005\022\027\n\017maxConnectCount\030\010 \001(\005\022\035\n\025sameI"
  "pMaxConnectCount\030\t \001(\005\022\030\n\020backupListenPo"
  "rt\030\n \001(\005\022\030\n\020backupMemberSize\030\013 \001(\005\022\026\n\016ba"
  "ckupPriority\030\014 \001(\005\022\021\n\tdbVersion\030\r \001(\005\022\034\n"
  "\024minParticipationRate\030\016 \001(\005\022\027\n\017supportCo"
  "nstant\030\017 \001(\010\022\024\n\014minTimeRatio\030\020 \001(\001\022\024\n\014ma"
  "xTimeRatio\030\021 \001(\001\022 \n\030allowCreationOfContr"
  "acts\030\022 \001(\003\022\033\n\023allowAdaptiveEnergy\030\023 \001(\003\032"
  "\214\005\n\013MachineInfo\022\023\n\013threadCount\030\001 \001(\005\022\033\n\023"
  "deadLockThreadCount\030\002 \001(\005\022\020\n\010cpuCount\030\003 "
  "\001(\005\022\023\n\013totalMemory\030\004 \001(\003\022\022\n\nfreeMemory\030\005"
  " \001(\003\022\017\n\007cpuRate\030\006 \001(\001\022\023\n\013javaVersion\030\007 \001"
  "(\t\022\016\n\006osName\030\010 \001(\t\022\026\n\016jvmTotalMemory\030\t \001"
  "(\003\022\025\n\rjvmFreeMemory\030\n \001(\003\022\026\n\016processCpuR"
  "ate\030\013 \001(\001\022I\n\022memoryDescInfoList\030\014 \003(\0132-."
  "protocol.NodeInfo.MachineInfo.MemoryDesc"
  "Info\022Q\n\026deadLockThreadInfoList\030\r \003(\01321.p"
  "rotocol.NodeInfo.MachineInfo.DeadLockThr"
  "eadInfo\032c\n\016MemoryDescInfo\022\014\n\004name\030\001 \001(\t\022"
  "\020\n\010initSize\030\002 \001(\003\022\017\n\007useSize\030\003 \001(\003\022\017\n\007ma"
  "xSize\030\004 \001(\003\022\017\n\007useRate\030\005 \001(\001\032\217\001\n\022DeadLoc"
  "kThreadInfo\022\014\n\004name\030\001 \001(\t\022\020\n\010lockName\030\002 "
  "\001(\t\022\021\n\tlockOwner\030\003 \001(\t\022\r\n\005state\030\004 \001(\t\022\021\n"
  "\tblockTime\030\005 \001(\003\022\020\n\010waitTime\030\006 \001(\003\022\022\n\nst"
  "ackTrace\030\007 \001(\t\"\275\022\n\013MetricsInfo\022\020\n\010interv"
  "al\030\001 \001(\003\022,\n\004node\030\002 \001(\0132\036.protocol.Metric"
  "sInfo.NodeInfo\0228\n\nblockchain\030\003 \001(\0132$.pro"
  "tocol.MetricsInfo.BlockChainInfo\022*\n\003net\030"
  "\004 \001(\0132\035.protocol.MetricsInfo.NetInfo\032O\n\010"
  "NodeInfo\022\n\n\002ip\030\001 \001(\t\022\020\n\010nodeType\030\002 \001(\005\022\017"
  "\n\007version\030\003 \001(\t\022\024\n\014backupStatus\030\004 \001(\005\032\363\004"
  "\n\016BlockChainInfo\022\024\n\014headBlockNum\030\001 \001(\003\022\032"
  "\n\022headBlockTimestamp\030\002 \001(\003\022\025\n\rheadBlockH"
  "ash\030\003 \001(\t\022\021\n\tforkCount\030\004 \001(\005\022\025\n\rfailFork"
  "Count\030\005 \001(\005\0228\n\020blockProcessTime\030\006 \001(\0132\036."
  "protocol.MetricsInfo.RateInfo\022+\n\003tps\030\007 \001"
  "(\0132\036.protocol.MetricsInfo.RateInfo\022\034\n\024tr"
  "ansactionCacheSize\030\010 \001(\005\0229\n\021missedTransa"
  "ction\030\t \001(\0132\036.protocol.MetricsInfo.RateI"
  "nfo\022\?\n\twitnesses\030\n \003(\0132,.protocol.Metric"
  "sInfo.BlockChainInfo.Witness\022\033\n\023failProc"
  "essBlockNum\030\013 \001(\003\022\036\n\026failProcessBlockRea"
  "son\030\014 \001(\t\022C\n\ndupWitness\030\r \003(\0132/.protocol"
  ".MetricsInfo.BlockChainInfo.DupWitness\032+"
  "\n\007Witness\022\017\n\007address\030\001 \001(\t\022\017\n\007version\030\002 "
  "\001(\005\032>\n\nDupWitness\022\017\n\007address\030\001 \001(\t\022\020\n\010bl"
  "ockNum\030\002 \001(\003\022\r\n\005count\030\003 \001(\005\032u\n\010RateInfo\022"
  "\r\n\005count\030\001 \001(\003\022\020\n\010meanRate\030\002 \001(\001\022\025\n\roneM"
  "inuteRate\030\003 \001(\001\022\026\n\016fiveMinuteRate\030\004 \001(\001\022"
  "\031\n\021fifteenMinuteRate\030\005 \001(\001\032\311\n\n\007NetInfo\022\027"
  "\n\017errorProtoCount\030\001 \001(\005\0222\n\003api\030\002 \001(\0132%.p"
  "rotocol.MetricsInfo.NetInfo.ApiInfo\022\027\n\017c"
  "onnectionCount\030\003 \001(\005\022\034\n\024validConnectionC"
  "ount\030\004 \001(\005\0224\n\014tcpInTraffic\030\005 \001(\0132\036.proto"
  "col.MetricsInfo.RateInfo\0225\n\rtcpOutTraffi"
  "c\030\006 \001(\0132\036.protocol.MetricsInfo.RateInfo\022"
  "\032\n\022disconnectionCount\030\007 \001(\005\022R\n\023disconnec"
  "tionDetail\030\010 \003(\01325.protocol.MetricsInfo."
  "NetInfo.DisconnectionDetailInfo\0224\n\014udpIn"
  "Traffic\030\t \001(\0132\036.protocol.MetricsInfo.Rat"
  "eInfo\0225\n\rudpOutTraffic\030\n \001(\0132\036.protocol."
  "MetricsInfo.RateInfo\022:\n\007latency\030\013 \001(\0132)."
  "protocol.MetricsInfo.NetInfo.LatencyInfo"
  "\032\222\003\n\007ApiInfo\022+\n\003qps\030\001 \001(\0132\036.protocol.Met"
  "ricsInfo.RateInfo\022/\n\007failQps\030\002 \001(\0132\036.pro"
  "tocol.MetricsInfo.RateInfo\0222\n\noutTraffic"
  "\030\003 \001(\0132\036.protocol.MetricsInfo.RateInfo\022C"
  "\n\006detail\030\004 \003(\01323.protocol.MetricsInfo.Ne"
  "tInfo.ApiInfo.ApiDetailInfo\032\257\001\n\rApiDetai"
  "lInfo\022\014\n\004name\030\001 \001(\t\022+\n\003qps\030\002 \001(\0132\036.proto"
  "col.MetricsInfo.RateInfo\022/\n\007failQps\030\003 \001("
  "\0132\036.protocol.MetricsInfo.RateInfo\0222\n\nout"
  "Traffic\030\004 \001(\0132\036.protocol.MetricsInfo.Rat"
  "eInfo\0328\n\027DisconnectionDetailInfo\022\016\n\006reas"
  "on\030\001 \001(\t\022\r\n\005count\030\002 \001(\005\032\344\002\n\013LatencyInfo\022"
  "\r\n\005top99\030\001 \001(\005\022\r\n\005top95\030\002 \001(\005\022\r\n\005top75\030\003"
  " \001(\005\022\022\n\ntotalCount\030\004 \001(\005\022\017\n\007delay1S\030\005 \001("
  "\005\022\017\n\007delay2S\030\006 \001(\005\022\017\n\007delay3S\030\007 \001(\005\022K\n\006d"
  "etail\030\010 \003(\0132;.protocol.MetricsInfo.NetIn"
  "fo.LatencyInfo.LatencyDetailInfo\032\223\001\n\021Lat"
  "encyDetailInfo\022\017\n\007witness\030\001 \001(\t\022\r\n\005top99"
  "\030\002 \001(\005\022\r\n\005top95\030\003 \001(\005\022\r\n\005top75\030\004 \001(\005\022\r\n\005"
  "count\030\005 \001(\005\022\017\n\007delay1S\030\006 \001(\005\022\017\n\007delay2S\030"
  "\007 \001(\005\022\017\n\007delay3S\030\010 \001(\005\"\330\002\n\013PBFTMessage\022+"
  "\n\010raw_data\030\001 \001(\0132\031.protocol.PBFTMessage."
  "Raw\022\021\n\tsignature\030\002 \001(\014\032\226\001\n\003Raw\022/\n\010msg_ty"
  "pe\030\001 \001(\0162\035.protocol.PBFTMessage.MsgType\022"
  "1\n\tdata_type\030\002 \001(\0162\036.protocol.PBFTMessag"
  "e.DataType\022\016\n\006view_n\030\003 \001(\003\022\r\n\005epoch\030\004 \001("
  "\003\022\014\n\004data\030\005 \001(\014\"P\n\007MsgType\022\017\n\013VIEW_CHANG"
  "E\020\000\022\013\n\007REQUEST\020\001\022\016\n\nPREPREPARE\020\002\022\013\n\007PREP"
  "ARE\020\003\022\n\n\006COMMIT\020\004\"\036\n\010DataType\022\t\n\005BLOCK\020\000"
  "\022\007\n\003SRL\020\001\"3\n\020PBFTCommitResult\022\014\n\004data\030\001 "
  "\001(\014\022\021\n\tsignature\030\002 \003(\014\"\030\n\003SRL\022\021\n\tsrAddre"
  "ss\030\001 \003(\014*7\n\013AccountType\022\n\n\006Normal\020\000\022\016\n\nA"
  "ssetIssue\020\001\022\014\n\010Contract\020\002*\307\003\n\nReasonCode"
  "\022\r\n\tREQUESTED\020\000\022\020\n\014BAD_PROTOCOL\020\002\022\022\n\016TOO"
  "_MANY_PEERS\020\004\022\022\n\016DUPLICATE_PEER\020\005\022\031\n\025INC"
  "OMPATIBLE_PROTOCOL\020\006\022\021\n\rNULL_IDENTITY\020\007\022"
  "\020\n\014PEER_QUITING\020\010\022\027\n\023UNEXPECTED_IDENTITY"
  "\020\t\022\022\n\016LOCAL_IDENTITY\020\n\022\020\n\014PING_TIMEOUT\020\013"
  "\022\017\n\013USER_REASON\020\020\022\t\n\005RESET\020\021\022\r\n\tSYNC_FAI"
  "L\020\022\022\016\n\nFETCH_FAIL\020\023\022\n\n\006BAD_TX\020\024\022\r\n\tBAD_B"
  "LOCK\020\025\022\n\n\006FORKED\020\026\022\016\n\nUNLINKABLE\020\027\022\030\n\024IN"
  "COMPATIBLE_VERSION\020\030\022\026\n\022INCOMPATIBLE_CHA"
  "IN\020\031\022\014\n\010TIME_OUT\020 \022\020\n\014CONNECT_FAIL\020!\022\037\n\033"
  "TOO_MANY_PEERS_WITH_SAME_IP\020\"\022\014\n\007UNKNOWN"
  "\020\377\001BF\n\017org.tron.protosB\010ProtocolZ)github"
  ".com/tronprotocol/grpc-gateway/coreb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fTron_2eproto_deps[2] = {
  &::descriptor_table_core_2fDiscover_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fTron_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fTron_2eproto = {
  false, false, 16963, descriptor_table_protodef_core_2fTron_2eproto, "core/Tron.proto", 
  &descriptor_table_core_2fTron_2eproto_once, descriptor_table_core_2fTron_2eproto_deps, 2, 92,
  schemas, file_default_instances, TableStruct_core_2fTron_2eproto::offsets,
  file_level_metadata_core_2fTron_2eproto, file_level_enum_descriptors_core_2fTron_2eproto, file_level_service_descriptors_core_2fTron_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fTron_2eproto_getter() {
  return &descriptor_table_core_2fTron_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fTron_2eproto(&descriptor_table_core_2fTron_2eproto);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proposal_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[0];
}
bool Proposal_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Proposal_State Proposal::PENDING;
constexpr Proposal_State Proposal::DISAPPROVED;
constexpr Proposal_State Proposal::APPROVED;
constexpr Proposal_State Proposal::CANCELED;
constexpr Proposal_State Proposal::State_MIN;
constexpr Proposal_State Proposal::State_MAX;
constexpr int Proposal::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketOrder_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[1];
}
bool MarketOrder_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketOrder_State MarketOrder::ACTIVE;
constexpr MarketOrder_State MarketOrder::INACTIVE;
constexpr MarketOrder_State MarketOrder::CANCELED;
constexpr MarketOrder_State MarketOrder::State_MIN;
constexpr MarketOrder_State MarketOrder::State_MAX;
constexpr int MarketOrder::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_PermissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[2];
}
bool Permission_PermissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Permission_PermissionType Permission::Owner;
constexpr Permission_PermissionType Permission::Witness;
constexpr Permission_PermissionType Permission::Active;
constexpr Permission_PermissionType Permission::PermissionType_MIN;
constexpr Permission_PermissionType Permission::PermissionType_MAX;
constexpr int Permission::PermissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Contract_ContractType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[3];
}
bool Transaction_Contract_ContractType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 30:
    case 31:
    case 32:
    case 33:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 48:
    case 49:
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteWitnessContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WitnessCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AssetIssueContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WitnessUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ParticipateAssetIssueContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::FreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WithdrawBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalApproveContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalDeleteContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::SetAccountIdContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::CustomContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::CreateSmartContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TriggerSmartContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::GetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateSettingContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeInjectContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeWithdrawContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeTransactionContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateEnergyLimitContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountPermissionUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ClearABIContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateBrokerageContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ShieldedTransferContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::MarketSellAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::MarketCancelOrderContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MIN;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MAX;
constexpr int Transaction_Contract::ContractType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[4];
}
bool Transaction_Result_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Result_code Transaction_Result::SUCESS;
constexpr Transaction_Result_code Transaction_Result::FAILED;
constexpr Transaction_Result_code Transaction_Result::code_MIN;
constexpr Transaction_Result_code Transaction_Result::code_MAX;
constexpr int Transaction_Result::code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_contractResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[5];
}
bool Transaction_Result_contractResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Result_contractResult Transaction_Result::DEFAULT;
constexpr Transaction_Result_contractResult Transaction_Result::SUCCESS;
constexpr Transaction_Result_contractResult Transaction_Result::REVERT;
constexpr Transaction_Result_contractResult Transaction_Result::BAD_JUMP_DESTINATION;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_MEMORY;
constexpr Transaction_Result_contractResult Transaction_Result::PRECOMPILED_CONTRACT;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_TOO_SMALL;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_TOO_LARGE;
constexpr Transaction_Result_contractResult Transaction_Result::ILLEGAL_OPERATION;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_OVERFLOW;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_ENERGY;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_TIME;
constexpr Transaction_Result_contractResult Transaction_Result::JVM_STACK_OVER_FLOW;
constexpr Transaction_Result_contractResult Transaction_Result::UNKNOWN;
constexpr Transaction_Result_contractResult Transaction_Result::TRANSFER_FAILED;
constexpr Transaction_Result_contractResult Transaction_Result::INVALID_CODE;
constexpr Transaction_Result_contractResult Transaction_Result::contractResult_MIN;
constexpr Transaction_Result_contractResult Transaction_Result::contractResult_MAX;
constexpr int Transaction_Result::contractResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionInfo_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[6];
}
bool TransactionInfo_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionInfo_code TransactionInfo::SUCESS;
constexpr TransactionInfo_code TransactionInfo::FAILED;
constexpr TransactionInfo_code TransactionInfo::code_MIN;
constexpr TransactionInfo_code TransactionInfo::code_MAX;
constexpr int TransactionInfo::code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockInventory_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[7];
}
bool BlockInventory_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlockInventory_Type BlockInventory::SYNC;
constexpr BlockInventory_Type BlockInventory::ADVTISE;
constexpr BlockInventory_Type BlockInventory::FETCH;
constexpr BlockInventory_Type BlockInventory::Type_MIN;
constexpr BlockInventory_Type BlockInventory::Type_MAX;
constexpr int BlockInventory::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inventory_InventoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[8];
}
bool Inventory_InventoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Inventory_InventoryType Inventory::TRX;
constexpr Inventory_InventoryType Inventory::BLOCK;
constexpr Inventory_InventoryType Inventory::InventoryType_MIN;
constexpr Inventory_InventoryType Inventory::InventoryType_MAX;
constexpr int Inventory::InventoryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Items_ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[9];
}
bool Items_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Items_ItemType Items::ERR;
constexpr Items_ItemType Items::TRX;
constexpr Items_ItemType Items::BLOCK;
constexpr Items_ItemType Items::BLOCKHEADER;
constexpr Items_ItemType Items::ItemType_MIN;
constexpr Items_ItemType Items::ItemType_MAX;
constexpr int Items::ItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBFTMessage_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[10];
}
bool PBFTMessage_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PBFTMessage_MsgType PBFTMessage::VIEW_CHANGE;
constexpr PBFTMessage_MsgType PBFTMessage::REQUEST;
constexpr PBFTMessage_MsgType PBFTMessage::PREPREPARE;
constexpr PBFTMessage_MsgType PBFTMessage::PREPARE;
constexpr PBFTMessage_MsgType PBFTMessage::COMMIT;
constexpr PBFTMessage_MsgType PBFTMessage::MsgType_MIN;
constexpr PBFTMessage_MsgType PBFTMessage::MsgType_MAX;
constexpr int PBFTMessage::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBFTMessage_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[11];
}
bool PBFTMessage_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PBFTMessage_DataType PBFTMessage::BLOCK;
constexpr PBFTMessage_DataType PBFTMessage::SRL;
constexpr PBFTMessage_DataType PBFTMessage::DataType_MIN;
constexpr PBFTMessage_DataType PBFTMessage::DataType_MAX;
constexpr int PBFTMessage::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[12];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[13];
}
bool ReasonCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 33:
    case 34:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AccountId::_Internal {
 public:
};

AccountId::AccountId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountId)
}
AccountId::AccountId(const AccountId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountId)
}

inline void AccountId::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountId::~AccountId() {
  // @@protoc_insertion_point(destructor:protocol.AccountId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountId::ArenaDtor(void* object) {
  AccountId* _this = reinterpret_cast< AccountId* >(object);
  (void)_this;
}
void AccountId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountId)
  return target;
}

size_t AccountId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountId::GetClassData() const { return &_class_data_; }

void AccountId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountId *>(to)->MergeFrom(
      static_cast<const AccountId &>(from));
}


void AccountId::MergeFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountId::CopyFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountId::IsInitialized() const {
  return true;
}

void AccountId::InternalSwap(AccountId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[0]);
}

// ===================================================================

class Vote::_Internal {
 public:
};

Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_address().empty()) {
    vote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_address(), 
      GetArenaForAllocation());
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:protocol.Vote)
}

inline void Vote::SharedCtor() {
vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_count_ = int64_t{0};
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:protocol.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmpty();
  vote_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (!this->_internal_vote_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->_internal_vote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_vote_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (!this->_internal_vote_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vote_address());
  }

  // int64 vote_count = 2;
  if (this->_internal_vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vote_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }

void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vote *>(to)->MergeFrom(
      static_cast<const Vote &>(from));
}


void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vote_address().empty()) {
    _internal_set_vote_address(from._internal_vote_address());
  }
  if (from._internal_vote_count() != 0) {
    _internal_set_vote_count(from._internal_vote_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_address_, GetArenaForAllocation(),
      &other->vote_address_, other->GetArenaForAllocation()
  );
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[1]);
}

// ===================================================================

Proposal_ParametersEntry_DoNotUse::Proposal_ParametersEntry_DoNotUse() {}
Proposal_ParametersEntry_DoNotUse::Proposal_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Proposal_ParametersEntry_DoNotUse::MergeFrom(const Proposal_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Proposal_ParametersEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[2]);
}

// ===================================================================

class Proposal::_Internal {
 public:
};

Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameters_(arena),
  approvals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      approvals_(from.approvals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposer_address().empty()) {
    proposer_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposer_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&proposal_id_, &from.proposal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:protocol.Proposal)
}

inline void Proposal::SharedCtor() {
proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:protocol.Proposal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proposer_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
  _this->parameters_. ~MapField();
}
inline void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Proposal::ArenaDtor);
  }
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  approvals_.Clear();
  proposer_address_.ClearToEmpty();
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 proposal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposer_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, int64> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 expiration_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes approvals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_approvals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.Proposal.State state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::protocol::Proposal_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 proposal_id = 1;
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_proposal_id(), target);
  }

  // bytes proposer_address = 2;
  if (!this->_internal_proposer_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proposer_address(), target);
  }

  // map<int64, int64> parameters = 3;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Proposal_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = Proposal_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // int64 expiration_time = 4;
  if (this->_internal_expiration_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiration_time(), target);
  }

  // int64 create_time = 5;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_create_time(), target);
  }

  // repeated bytes approvals = 6;
  for (int i = 0, n = this->_internal_approvals_size(); i < n; i++) {
    const auto& s = this->_internal_approvals(i);
    target = stream->WriteBytes(6, s, target);
  }

  // .protocol.Proposal.State state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Proposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, int64> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += Proposal_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes approvals = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(approvals_.size());
  for (int i = 0, n = approvals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      approvals_.Get(i));
  }

  // bytes proposer_address = 2;
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposer_address());
  }

  // int64 proposal_id = 1;
  if (this->_internal_proposal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_proposal_id());
  }

  // int64 expiration_time = 4;
  if (this->_internal_expiration_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_time());
  }

  // int64 create_time = 5;
  if (this->_internal_create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // .protocol.Proposal.State state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }

void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Proposal *>(to)->MergeFrom(
      static_cast<const Proposal &>(from));
}


void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  approvals_.MergeFrom(from.approvals_);
  if (!from._internal_proposer_address().empty()) {
    _internal_set_proposer_address(from._internal_proposer_address());
  }
  if (from._internal_proposal_id() != 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from._internal_expiration_time() != 0) {
    _internal_set_expiration_time(from._internal_expiration_time());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  approvals_.InternalSwap(&other->approvals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proposer_address_, GetArenaForAllocation(),
      &other->proposer_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, state_)
      + sizeof(Proposal::state_)
      - PROTOBUF_FIELD_OFFSET(Proposal, proposal_id_)>(
          reinterpret_cast<char*>(&proposal_id_),
          reinterpret_cast<char*>(&other->proposal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[3]);
}

// ===================================================================

class Exchange::_Internal {
 public:
};

Exchange::Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Exchange)
}
Exchange::Exchange(const Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  creator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_address().empty()) {
    creator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_address(), 
      GetArenaForAllocation());
  }
  first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_token_id().empty()) {
    first_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_token_id(), 
      GetArenaForAllocation());
  }
  second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_second_token_id().empty()) {
    second_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_second_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exchange_id_, &from.exchange_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_token_balance_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
  // @@protoc_insertion_point(copy_constructor:protocol.Exchange)
}

inline void Exchange::SharedCtor() {
creator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exchange_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_token_balance_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
}

Exchange::~Exchange() {
  // @@protoc_insertion_point(destructor:protocol.Exchange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Exchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  creator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Exchange::ArenaDtor(void* object) {
  Exchange* _this = reinterpret_cast< Exchange* >(object);
  (void)_this;
}
void Exchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creator_address_.ClearToEmpty();
  first_token_id_.ClearToEmpty();
  second_token_id_.ClearToEmpty();
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_token_balance_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes creator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_creator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes first_token_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_first_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 first_token_balance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          first_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes second_token_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_second_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 second_token_balance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          second_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Exchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 exchange_id = 1;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_exchange_id(), target);
  }

  // bytes creator_address = 2;
  if (!this->_internal_creator_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_creator_address(), target);
  }

  // int64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_create_time(), target);
  }

  // bytes first_token_id = 6;
  if (!this->_internal_first_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_first_token_id(), target);
  }

  // int64 first_token_balance = 7;
  if (this->_internal_first_token_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_first_token_balance(), target);
  }

  // bytes second_token_id = 8;
  if (!this->_internal_second_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_second_token_id(), target);
  }

  // int64 second_token_balance = 9;
  if (this->_internal_second_token_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_second_token_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Exchange)
  return target;
}

size_t Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Exchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes creator_address = 2;
  if (!this->_internal_creator_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_creator_address());
  }

  // bytes first_token_id = 6;
  if (!this->_internal_first_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_first_token_id());
  }

  // bytes second_token_id = 8;
  if (!this->_internal_second_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_second_token_id());
  }

  // int64 exchange_id = 1;
  if (this->_internal_exchange_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_id());
  }

  // int64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int64 first_token_balance = 7;
  if (this->_internal_first_token_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_first_token_balance());
  }

  // int64 second_token_balance = 9;
  if (this->_internal_second_token_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_second_token_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Exchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Exchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Exchange::GetClassData() const { return &_class_data_; }

void Exchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Exchange *>(to)->MergeFrom(
      static_cast<const Exchange &>(from));
}


void Exchange::MergeFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creator_address().empty()) {
    _internal_set_creator_address(from._internal_creator_address());
  }
  if (!from._internal_first_token_id().empty()) {
    _internal_set_first_token_id(from._internal_first_token_id());
  }
  if (!from._internal_second_token_id().empty()) {
    _internal_set_second_token_id(from._internal_second_token_id());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_first_token_balance() != 0) {
    _internal_set_first_token_balance(from._internal_first_token_balance());
  }
  if (from._internal_second_token_balance() != 0) {
    _internal_set_second_token_balance(from._internal_second_token_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Exchange::CopyFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exchange::IsInitialized() const {
  return true;
}

void Exchange::InternalSwap(Exchange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_address_, GetArenaForAllocation(),
      &other->creator_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_token_id_, GetArenaForAllocation(),
      &other->first_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &second_token_id_, GetArenaForAllocation(),
      &other->second_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Exchange, second_token_balance_)
      + sizeof(Exchange::second_token_balance_)
      - PROTOBUF_FIELD_OFFSET(Exchange, exchange_id_)>(
          reinterpret_cast<char*>(&exchange_id_),
          reinterpret_cast<char*>(&other->exchange_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Exchange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[4]);
}

// ===================================================================

class MarketOrder::_Internal {
 public:
};

MarketOrder::MarketOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrder)
}
MarketOrder::MarketOrder(const MarketOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_token_id().empty()) {
    sell_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_token_id(), 
      GetArenaForAllocation());
  }
  buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_token_id().empty()) {
    buy_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_token_id(), 
      GetArenaForAllocation());
  }
  prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev().empty()) {
    prev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev(), 
      GetArenaForAllocation());
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next().empty()) {
    next_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next(), 
      GetArenaForAllocation());
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrder)
}

inline void MarketOrder::SharedCtor() {
order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(state_));
}

MarketOrder::~MarketOrder() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketOrder::ArenaDtor(void* object) {
  MarketOrder* _this = reinterpret_cast< MarketOrder* >(object);
  (void)_this;
}
void MarketOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  sell_token_id_.ClearToEmpty();
  buy_token_id_.ClearToEmpty();
  prev_.ClearToEmpty();
  next_.ClearToEmpty();
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sell_token_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sell_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_token_quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sell_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buy_token_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buy_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buy_token_quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          buy_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_token_quantity_remain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sell_token_quantity_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sell_token_quantity_return = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sell_token_quantity_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MarketOrder.State state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::protocol::MarketOrder_State>(val));
        } else goto handle_unusual;
        continue;
      // bytes prev = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes next = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes order_id = 1;
  if (!this->_internal_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // int64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_create_time(), target);
  }

  // bytes sell_token_id = 4;
  if (!this->_internal_sell_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sell_token_id(), target);
  }

  // int64 sell_token_quantity = 5;
  if (this->_internal_sell_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sell_token_quantity(), target);
  }

  // bytes buy_token_id = 6;
  if (!this->_internal_buy_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_buy_token_id(), target);
  }

  // int64 buy_token_quantity = 7;
  if (this->_internal_buy_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_buy_token_quantity(), target);
  }

  // int64 sell_token_quantity_remain = 9;
  if (this->_internal_sell_token_quantity_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_sell_token_quantity_remain(), target);
  }

  // int64 sell_token_quantity_return = 10;
  if (this->_internal_sell_token_quantity_return() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_sell_token_quantity_return(), target);
  }

  // .protocol.MarketOrder.State state = 11;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_state(), target);
  }

  // bytes prev = 12;
  if (!this->_internal_prev().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_prev(), target);
  }

  // bytes next = 13;
  if (!this->_internal_next().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrder)
  return target;
}

size_t MarketOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_order_id());
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes sell_token_id = 4;
  if (!this->_internal_sell_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_token_id());
  }

  // bytes buy_token_id = 6;
  if (!this->_internal_buy_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_token_id());
  }

  // bytes prev = 12;
  if (!this->_internal_prev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev());
  }

  // bytes next = 13;
  if (!this->_internal_next().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next());
  }

  // int64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int64 sell_token_quantity = 5;
  if (this->_internal_sell_token_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_token_quantity());
  }

  // int64 buy_token_quantity = 7;
  if (this->_internal_buy_token_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_token_quantity());
  }

  // int64 sell_token_quantity_remain = 9;
  if (this->_internal_sell_token_quantity_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_token_quantity_remain());
  }

  // int64 sell_token_quantity_return = 10;
  if (this->_internal_sell_token_quantity_return() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_token_quantity_return());
  }

  // .protocol.MarketOrder.State state = 11;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrder::GetClassData() const { return &_class_data_; }

void MarketOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrder *>(to)->MergeFrom(
      static_cast<const MarketOrder &>(from));
}


void MarketOrder::MergeFrom(const MarketOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_sell_token_id().empty()) {
    _internal_set_sell_token_id(from._internal_sell_token_id());
  }
  if (!from._internal_buy_token_id().empty()) {
    _internal_set_buy_token_id(from._internal_buy_token_id());
  }
  if (!from._internal_prev().empty()) {
    _internal_set_prev(from._internal_prev());
  }
  if (!from._internal_next().empty()) {
    _internal_set_next(from._internal_next());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_sell_token_quantity() != 0) {
    _internal_set_sell_token_quantity(from._internal_sell_token_quantity());
  }
  if (from._internal_buy_token_quantity() != 0) {
    _internal_set_buy_token_quantity(from._internal_buy_token_quantity());
  }
  if (from._internal_sell_token_quantity_remain() != 0) {
    _internal_set_sell_token_quantity_remain(from._internal_sell_token_quantity_remain());
  }
  if (from._internal_sell_token_quantity_return() != 0) {
    _internal_set_sell_token_quantity_return(from._internal_sell_token_quantity_return());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrder::CopyFrom(const MarketOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrder::IsInitialized() const {
  return true;
}

void MarketOrder::InternalSwap(MarketOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_id_, GetArenaForAllocation(),
      &other->order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_token_id_, GetArenaForAllocation(),
      &other->sell_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_token_id_, GetArenaForAllocation(),
      &other->buy_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prev_, GetArenaForAllocation(),
      &other->prev_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_, GetArenaForAllocation(),
      &other->next_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketOrder, state_)
      + sizeof(MarketOrder::state_)
      - PROTOBUF_FIELD_OFFSET(MarketOrder, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[5]);
}

// ===================================================================

class MarketOrderList::_Internal {
 public:
};

MarketOrderList::MarketOrderList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrderList)
}
MarketOrderList::MarketOrderList(const MarketOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrderList)
}

inline void MarketOrderList::SharedCtor() {
}

MarketOrderList::~MarketOrderList() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrderList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrderList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarketOrderList::ArenaDtor(void* object) {
  MarketOrderList* _this = reinterpret_cast< MarketOrderList* >(object);
  (void)_this;
}
void MarketOrderList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.MarketOrder orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.MarketOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrderList)
  return target;
}

size_t MarketOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MarketOrder orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrderList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrderList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrderList::GetClassData() const { return &_class_data_; }

void MarketOrderList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrderList *>(to)->MergeFrom(
      static_cast<const MarketOrderList &>(from));
}


void MarketOrderList::MergeFrom(const MarketOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrderList::CopyFrom(const MarketOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrderList::IsInitialized() const {
  return true;
}

void MarketOrderList::InternalSwap(MarketOrderList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrderList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[6]);
}

// ===================================================================

class MarketOrderPairList::_Internal {
 public:
};

MarketOrderPairList::MarketOrderPairList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orderpair_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrderPairList)
}
MarketOrderPairList::MarketOrderPairList(const MarketOrderPairList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orderpair_(from.orderpair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrderPairList)
}

inline void MarketOrderPairList::SharedCtor() {
}

MarketOrderPairList::~MarketOrderPairList() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrderPairList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrderPairList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarketOrderPairList::ArenaDtor(void* object) {
  MarketOrderPairList* _this = reinterpret_cast< MarketOrderPairList* >(object);
  (void)_this;
}
void MarketOrderPairList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrderPairList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrderPairList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrderPairList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderpair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrderPairList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.MarketOrderPair orderPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderpair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrderPairList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrderPairList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.MarketOrderPair orderPair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orderpair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orderpair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrderPairList)
  return target;
}

size_t MarketOrderPairList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrderPairList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MarketOrderPair orderPair = 1;
  total_size += 1UL * this->_internal_orderpair_size();
  for (const auto& msg : this->orderpair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrderPairList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrderPairList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrderPairList::GetClassData() const { return &_class_data_; }

void MarketOrderPairList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrderPairList *>(to)->MergeFrom(
      static_cast<const MarketOrderPairList &>(from));
}


void MarketOrderPairList::MergeFrom(const MarketOrderPairList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrderPairList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orderpair_.MergeFrom(from.orderpair_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrderPairList::CopyFrom(const MarketOrderPairList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrderPairList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrderPairList::IsInitialized() const {
  return true;
}

void MarketOrderPairList::InternalSwap(MarketOrderPairList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orderpair_.InternalSwap(&other->orderpair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrderPairList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[7]);
}

// ===================================================================

class MarketOrderPair::_Internal {
 public:
};

MarketOrderPair::MarketOrderPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrderPair)
}
MarketOrderPair::MarketOrderPair(const MarketOrderPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_token_id().empty()) {
    sell_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_token_id(), 
      GetArenaForAllocation());
  }
  buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_token_id().empty()) {
    buy_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrderPair)
}

inline void MarketOrderPair::SharedCtor() {
sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketOrderPair::~MarketOrderPair() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrderPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrderPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sell_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketOrderPair::ArenaDtor(void* object) {
  MarketOrderPair* _this = reinterpret_cast< MarketOrderPair* >(object);
  (void)_this;
}
void MarketOrderPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrderPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrderPair::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrderPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sell_token_id_.ClearToEmpty();
  buy_token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrderPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sell_token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sell_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buy_token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_buy_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrderPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrderPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sell_token_id = 1;
  if (!this->_internal_sell_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sell_token_id(), target);
  }

  // bytes buy_token_id = 2;
  if (!this->_internal_buy_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_buy_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrderPair)
  return target;
}

size_t MarketOrderPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrderPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sell_token_id = 1;
  if (!this->_internal_sell_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_token_id());
  }

  // bytes buy_token_id = 2;
  if (!this->_internal_buy_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrderPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrderPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrderPair::GetClassData() const { return &_class_data_; }

void MarketOrderPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrderPair *>(to)->MergeFrom(
      static_cast<const MarketOrderPair &>(from));
}


void MarketOrderPair::MergeFrom(const MarketOrderPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrderPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sell_token_id().empty()) {
    _internal_set_sell_token_id(from._internal_sell_token_id());
  }
  if (!from._internal_buy_token_id().empty()) {
    _internal_set_buy_token_id(from._internal_buy_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrderPair::CopyFrom(const MarketOrderPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrderPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrderPair::IsInitialized() const {
  return true;
}

void MarketOrderPair::InternalSwap(MarketOrderPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_token_id_, GetArenaForAllocation(),
      &other->sell_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_token_id_, GetArenaForAllocation(),
      &other->buy_token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrderPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[8]);
}

// ===================================================================

class MarketAccountOrder::_Internal {
 public:
};

MarketAccountOrder::MarketAccountOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketAccountOrder)
}
MarketAccountOrder::MarketAccountOrder(const MarketAccountOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&count_)) + sizeof(total_count_));
  // @@protoc_insertion_point(copy_constructor:protocol.MarketAccountOrder)
}

inline void MarketAccountOrder::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&count_)) + sizeof(total_count_));
}

MarketAccountOrder::~MarketAccountOrder() {
  // @@protoc_insertion_point(destructor:protocol.MarketAccountOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketAccountOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketAccountOrder::ArenaDtor(void* object) {
  MarketAccountOrder* _this = reinterpret_cast< MarketAccountOrder* >(object);
  (void)_this;
}
void MarketAccountOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketAccountOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketAccountOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketAccountOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  owner_address_.ClearToEmpty();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&count_)) + sizeof(total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketAccountOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_orders();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketAccountOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketAccountOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated bytes orders = 2;
  for (int i = 0, n = this->_internal_orders_size(); i < n; i++) {
    const auto& s = this->_internal_orders(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int64 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  // int64 total_count = 4;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketAccountOrder)
  return target;
}

size_t MarketAccountOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketAccountOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes orders = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(orders_.size());
  for (int i = 0, n = orders_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      orders_.Get(i));
  }

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 count = 3;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 total_count = 4;
  if (this->_internal_total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketAccountOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketAccountOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketAccountOrder::GetClassData() const { return &_class_data_; }

void MarketAccountOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketAccountOrder *>(to)->MergeFrom(
      static_cast<const MarketAccountOrder &>(from));
}


void MarketAccountOrder::MergeFrom(const MarketAccountOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketAccountOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketAccountOrder::CopyFrom(const MarketAccountOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketAccountOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountOrder::IsInitialized() const {
  return true;
}

void MarketAccountOrder::InternalSwap(MarketAccountOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketAccountOrder, total_count_)
      + sizeof(MarketAccountOrder::total_count_)
      - PROTOBUF_FIELD_OFFSET(MarketAccountOrder, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketAccountOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[9]);
}

// ===================================================================

class MarketPrice::_Internal {
 public:
};

MarketPrice::MarketPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketPrice)
}
MarketPrice::MarketPrice(const MarketPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sell_token_quantity_, &from.sell_token_quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_token_quantity_) -
    reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
  // @@protoc_insertion_point(copy_constructor:protocol.MarketPrice)
}

inline void MarketPrice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sell_token_quantity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buy_token_quantity_) -
    reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
}

MarketPrice::~MarketPrice() {
  // @@protoc_insertion_point(destructor:protocol.MarketPrice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MarketPrice::ArenaDtor(void* object) {
  MarketPrice* _this = reinterpret_cast< MarketPrice* >(object);
  (void)_this;
}
void MarketPrice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sell_token_quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_token_quantity_) -
      reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketPrice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sell_token_quantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sell_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buy_token_quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          buy_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketPrice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sell_token_quantity = 1;
  if (this->_internal_sell_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sell_token_quantity(), target);
  }

  // int64 buy_token_quantity = 2;
  if (this->_internal_buy_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_buy_token_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketPrice)
  return target;
}

size_t MarketPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketPrice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sell_token_quantity = 1;
  if (this->_internal_sell_token_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sell_token_quantity());
  }

  // int64 buy_token_quantity = 2;
  if (this->_internal_buy_token_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buy_token_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketPrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketPrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketPrice::GetClassData() const { return &_class_data_; }

void MarketPrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketPrice *>(to)->MergeFrom(
      static_cast<const MarketPrice &>(from));
}


void MarketPrice::MergeFrom(const MarketPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketPrice)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sell_token_quantity() != 0) {
    _internal_set_sell_token_quantity(from._internal_sell_token_quantity());
  }
  if (from._internal_buy_token_quantity() != 0) {
    _internal_set_buy_token_quantity(from._internal_buy_token_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPrice::CopyFrom(const MarketPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPrice::IsInitialized() const {
  return true;
}

void MarketPrice::InternalSwap(MarketPrice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketPrice, buy_token_quantity_)
      + sizeof(MarketPrice::buy_token_quantity_)
      - PROTOBUF_FIELD_OFFSET(MarketPrice, sell_token_quantity_)>(
          reinterpret_cast<char*>(&sell_token_quantity_),
          reinterpret_cast<char*>(&other->sell_token_quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketPrice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[10]);
}

// ===================================================================

class MarketPriceList::_Internal {
 public:
};

MarketPriceList::MarketPriceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  prices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketPriceList)
}
MarketPriceList::MarketPriceList(const MarketPriceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prices_(from.prices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_token_id().empty()) {
    sell_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_token_id(), 
      GetArenaForAllocation());
  }
  buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_token_id().empty()) {
    buy_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MarketPriceList)
}

inline void MarketPriceList::SharedCtor() {
sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketPriceList::~MarketPriceList() {
  // @@protoc_insertion_point(destructor:protocol.MarketPriceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketPriceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sell_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketPriceList::ArenaDtor(void* object) {
  MarketPriceList* _this = reinterpret_cast< MarketPriceList* >(object);
  (void)_this;
}
void MarketPriceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketPriceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketPriceList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketPriceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prices_.Clear();
  sell_token_id_.ClearToEmpty();
  buy_token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketPriceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sell_token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sell_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buy_token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_buy_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MarketPrice prices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketPriceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketPriceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sell_token_id = 1;
  if (!this->_internal_sell_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sell_token_id(), target);
  }

  // bytes buy_token_id = 2;
  if (!this->_internal_buy_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_buy_token_id(), target);
  }

  // repeated .protocol.MarketPrice prices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_prices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketPriceList)
  return target;
}

size_t MarketPriceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketPriceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MarketPrice prices = 3;
  total_size += 1UL * this->_internal_prices_size();
  for (const auto& msg : this->prices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes sell_token_id = 1;
  if (!this->_internal_sell_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_token_id());
  }

  // bytes buy_token_id = 2;
  if (!this->_internal_buy_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketPriceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketPriceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketPriceList::GetClassData() const { return &_class_data_; }

void MarketPriceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketPriceList *>(to)->MergeFrom(
      static_cast<const MarketPriceList &>(from));
}


void MarketPriceList::MergeFrom(const MarketPriceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketPriceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prices_.MergeFrom(from.prices_);
  if (!from._internal_sell_token_id().empty()) {
    _internal_set_sell_token_id(from._internal_sell_token_id());
  }
  if (!from._internal_buy_token_id().empty()) {
    _internal_set_buy_token_id(from._internal_buy_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPriceList::CopyFrom(const MarketPriceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketPriceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPriceList::IsInitialized() const {
  return true;
}

void MarketPriceList::InternalSwap(MarketPriceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  prices_.InternalSwap(&other->prices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_token_id_, GetArenaForAllocation(),
      &other->sell_token_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_token_id_, GetArenaForAllocation(),
      &other->buy_token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketPriceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[11]);
}

// ===================================================================

class MarketOrderIdList::_Internal {
 public:
};

MarketOrderIdList::MarketOrderIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrderIdList)
}
MarketOrderIdList::MarketOrderIdList(const MarketOrderIdList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head(), 
      GetArenaForAllocation());
  }
  tail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tail().empty()) {
    tail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tail(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrderIdList)
}

inline void MarketOrderIdList::SharedCtor() {
head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketOrderIdList::~MarketOrderIdList() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrderIdList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrderIdList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketOrderIdList::ArenaDtor(void* object) {
  MarketOrderIdList* _this = reinterpret_cast< MarketOrderIdList* >(object);
  (void)_this;
}
void MarketOrderIdList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrderIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrderIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrderIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  head_.ClearToEmpty();
  tail_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrderIdList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrderIdList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrderIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes head = 1;
  if (!this->_internal_head().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_head(), target);
  }

  // bytes tail = 2;
  if (!this->_internal_tail().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrderIdList)
  return target;
}

size_t MarketOrderIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrderIdList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes head = 1;
  if (!this->_internal_head().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_head());
  }

  // bytes tail = 2;
  if (!this->_internal_tail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrderIdList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrderIdList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrderIdList::GetClassData() const { return &_class_data_; }

void MarketOrderIdList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrderIdList *>(to)->MergeFrom(
      static_cast<const MarketOrderIdList &>(from));
}


void MarketOrderIdList::MergeFrom(const MarketOrderIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrderIdList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_head().empty()) {
    _internal_set_head(from._internal_head());
  }
  if (!from._internal_tail().empty()) {
    _internal_set_tail(from._internal_tail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrderIdList::CopyFrom(const MarketOrderIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrderIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrderIdList::IsInitialized() const {
  return true;
}

void MarketOrderIdList::InternalSwap(MarketOrderIdList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &head_, GetArenaForAllocation(),
      &other->head_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tail_, GetArenaForAllocation(),
      &other->tail_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrderIdList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[12]);
}

// ===================================================================

class ChainParameters_ChainParameter::_Internal {
 public:
};

ChainParameters_ChainParameter::ChainParameters_ChainParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ChainParameters.ChainParameter)
}
ChainParameters_ChainParameter::ChainParameters_ChainParameter(const ChainParameters_ChainParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainParameters.ChainParameter)
}

inline void ChainParameters_ChainParameter::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = int64_t{0};
}

ChainParameters_ChainParameter::~ChainParameters_ChainParameter() {
  // @@protoc_insertion_point(destructor:protocol.ChainParameters.ChainParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChainParameters_ChainParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChainParameters_ChainParameter::ArenaDtor(void* object) {
  ChainParameters_ChainParameter* _this = reinterpret_cast< ChainParameters_ChainParameter* >(object);
  (void)_this;
}
void ChainParameters_ChainParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainParameters_ChainParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChainParameters_ChainParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainParameters.ChainParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainParameters_ChainParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.ChainParameters.ChainParameter.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainParameters_ChainParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainParameters.ChainParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainParameters.ChainParameter.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainParameters.ChainParameter)
  return target;
}

size_t ChainParameters_ChainParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainParameters.ChainParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainParameters_ChainParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChainParameters_ChainParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainParameters_ChainParameter::GetClassData() const { return &_class_data_; }

void ChainParameters_ChainParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChainParameters_ChainParameter *>(to)->MergeFrom(
      static_cast<const ChainParameters_ChainParameter &>(from));
}


void ChainParameters_ChainParameter::MergeFrom(const ChainParameters_ChainParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainParameters.ChainParameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainParameters_ChainParameter::CopyFrom(const ChainParameters_ChainParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainParameters.ChainParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainParameters_ChainParameter::IsInitialized() const {
  return true;
}

void ChainParameters_ChainParameter::InternalSwap(ChainParameters_ChainParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainParameters_ChainParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[13]);
}

// ===================================================================

class ChainParameters::_Internal {
 public:
};

ChainParameters::ChainParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chainparameter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ChainParameters)
}
ChainParameters::ChainParameters(const ChainParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chainparameter_(from.chainparameter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainParameters)
}

inline void ChainParameters::SharedCtor() {
}

ChainParameters::~ChainParameters() {
  // @@protoc_insertion_point(destructor:protocol.ChainParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChainParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChainParameters::ArenaDtor(void* object) {
  ChainParameters* _this = reinterpret_cast< ChainParameters* >(object);
  (void)_this;
}
void ChainParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChainParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chainparameter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chainparameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chainparameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chainparameter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainParameters)
  return target;
}

size_t ChainParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  total_size += 1UL * this->_internal_chainparameter_size();
  for (const auto& msg : this->chainparameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChainParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainParameters::GetClassData() const { return &_class_data_; }

void ChainParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChainParameters *>(to)->MergeFrom(
      static_cast<const ChainParameters &>(from));
}


void ChainParameters::MergeFrom(const ChainParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chainparameter_.MergeFrom(from.chainparameter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainParameters::CopyFrom(const ChainParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainParameters::IsInitialized() const {
  return true;
}

void ChainParameters::InternalSwap(ChainParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chainparameter_.InternalSwap(&other->chainparameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[14]);
}

// ===================================================================

class Account_Frozen::_Internal {
 public:
};

Account_Frozen::Account_Frozen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Account.Frozen)
}
Account_Frozen::Account_Frozen(const Account_Frozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account.Frozen)
}

inline void Account_Frozen::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
}

Account_Frozen::~Account_Frozen() {
  // @@protoc_insertion_point(destructor:protocol.Account.Frozen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Account_Frozen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Account_Frozen::ArenaDtor(void* object) {
  Account_Frozen* _this = reinterpret_cast< Account_Frozen* >(object);
  (void)_this;
}
void Account_Frozen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account_Frozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account_Frozen::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account_Frozen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 frozen_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account_Frozen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->_internal_frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_frozen_balance(), target);
  }

  // int64 expire_time = 2;
  if (this->_internal_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account.Frozen)
  return target;
}

size_t Account_Frozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account.Frozen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->_internal_frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // int64 expire_time = 2;
  if (this->_internal_expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account_Frozen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Account_Frozen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account_Frozen::GetClassData() const { return &_class_data_; }

void Account_Frozen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Account_Frozen *>(to)->MergeFrom(
      static_cast<const Account_Frozen &>(from));
}


void Account_Frozen::MergeFrom(const Account_Frozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account.Frozen)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from._internal_expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account_Frozen::CopyFrom(const Account_Frozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account.Frozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_Frozen::IsInitialized() const {
  return true;
}

void Account_Frozen::InternalSwap(Account_Frozen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account_Frozen, expire_time_)
      + sizeof(Account_Frozen::expire_time_)
      - PROTOBUF_FIELD_OFFSET(Account_Frozen, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account_Frozen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[15]);
}

// ===================================================================

Account_AssetEntry_DoNotUse::Account_AssetEntry_DoNotUse() {}
Account_AssetEntry_DoNotUse::Account_AssetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_AssetEntry_DoNotUse::MergeFrom(const Account_AssetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_AssetEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[16]);
}

// ===================================================================

Account_AssetV2Entry_DoNotUse::Account_AssetV2Entry_DoNotUse() {}
Account_AssetV2Entry_DoNotUse::Account_AssetV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_AssetV2Entry_DoNotUse::MergeFrom(const Account_AssetV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_AssetV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[17]);
}

// ===================================================================

Account_LatestAssetOperationTimeEntry_DoNotUse::Account_LatestAssetOperationTimeEntry_DoNotUse() {}
Account_LatestAssetOperationTimeEntry_DoNotUse::Account_LatestAssetOperationTimeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_LatestAssetOperationTimeEntry_DoNotUse::MergeFrom(const Account_LatestAssetOperationTimeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_LatestAssetOperationTimeEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[18]);
}

// ===================================================================

Account_LatestAssetOperationTimeV2Entry_DoNotUse::Account_LatestAssetOperationTimeV2Entry_DoNotUse() {}
Account_LatestAssetOperationTimeV2Entry_DoNotUse::Account_LatestAssetOperationTimeV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_LatestAssetOperationTimeV2Entry_DoNotUse::MergeFrom(const Account_LatestAssetOperationTimeV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_LatestAssetOperationTimeV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[19]);
}

// ===================================================================

Account_FreeAssetNetUsageEntry_DoNotUse::Account_FreeAssetNetUsageEntry_DoNotUse() {}
Account_FreeAssetNetUsageEntry_DoNotUse::Account_FreeAssetNetUsageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_FreeAssetNetUsageEntry_DoNotUse::MergeFrom(const Account_FreeAssetNetUsageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_FreeAssetNetUsageEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[20]);
}

// ===================================================================

Account_FreeAssetNetUsageV2Entry_DoNotUse::Account_FreeAssetNetUsageV2Entry_DoNotUse() {}
Account_FreeAssetNetUsageV2Entry_DoNotUse::Account_FreeAssetNetUsageV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_FreeAssetNetUsageV2Entry_DoNotUse::MergeFrom(const Account_FreeAssetNetUsageV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_FreeAssetNetUsageV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[21]);
}

// ===================================================================

class Account_AccountResource::_Internal {
 public:
  static const ::protocol::Account_Frozen& frozen_balance_for_energy(const Account_AccountResource* msg);
};

const ::protocol::Account_Frozen&
Account_AccountResource::_Internal::frozen_balance_for_energy(const Account_AccountResource* msg) {
  return *msg->frozen_balance_for_energy_;
}
Account_AccountResource::Account_AccountResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Account.AccountResource)
}
Account_AccountResource::Account_AccountResource(const Account_AccountResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frozen_balance_for_energy()) {
    frozen_balance_for_energy_ = new ::protocol::Account_Frozen(*from.frozen_balance_for_energy_);
  } else {
    frozen_balance_for_energy_ = nullptr;
  }
  ::memcpy(&energy_usage_, &from.energy_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_exchange_storage_time_) -
    reinterpret_cast<char*>(&energy_usage_)) + sizeof(latest_exchange_storage_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account.AccountResource)
}

inline void Account_AccountResource::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frozen_balance_for_energy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latest_exchange_storage_time_) -
    reinterpret_cast<char*>(&frozen_balance_for_energy_)) + sizeof(latest_exchange_storage_time_));
}

Account_AccountResource::~Account_AccountResource() {
  // @@protoc_insertion_point(destructor:protocol.Account.AccountResource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Account_AccountResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete frozen_balance_for_energy_;
}

void Account_AccountResource::ArenaDtor(void* object) {
  Account_AccountResource* _this = reinterpret_cast< Account_AccountResource* >(object);
  (void)_this;
}
void Account_AccountResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account_AccountResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account_AccountResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account.AccountResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && frozen_balance_for_energy_ != nullptr) {
    delete frozen_balance_for_energy_;
  }
  frozen_balance_for_energy_ = nullptr;
  ::memset(&energy_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_exchange_storage_time_) -
      reinterpret_cast<char*>(&energy_usage_)) + sizeof(latest_exchange_storage_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account_AccountResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 energy_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Account.Frozen frozen_balance_for_energy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frozen_balance_for_energy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_time_for_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latest_consume_time_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 acquired_delegated_frozen_balance_for_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          acquired_delegated_frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delegated_frozen_balance_for_energy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delegated_frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storage_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storage_usage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          storage_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_exchange_storage_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          latest_exchange_storage_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account_AccountResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account.AccountResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->_internal_energy_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_energy_usage(), target);
  }

  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  if (this->_internal_has_frozen_balance_for_energy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frozen_balance_for_energy(this), target, stream);
  }

  // int64 latest_consume_time_for_energy = 3;
  if (this->_internal_latest_consume_time_for_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_latest_consume_time_for_energy(), target);
  }

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  if (this->_internal_acquired_delegated_frozen_balance_for_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_acquired_delegated_frozen_balance_for_energy(), target);
  }

  // int64 delegated_frozen_balance_for_energy = 5;
  if (this->_internal_delegated_frozen_balance_for_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_delegated_frozen_balance_for_energy(), target);
  }

  // int64 storage_limit = 6;
  if (this->_internal_storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_storage_limit(), target);
  }

  // int64 storage_usage = 7;
  if (this->_internal_storage_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_storage_usage(), target);
  }

  // int64 latest_exchange_storage_time = 8;
  if (this->_internal_latest_exchange_storage_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_latest_exchange_storage_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account.AccountResource)
  return target;
}

size_t Account_AccountResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account.AccountResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  if (this->_internal_has_frozen_balance_for_energy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frozen_balance_for_energy_);
  }

  // int64 energy_usage = 1;
  if (this->_internal_energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energy_usage());
  }

  // int64 latest_consume_time_for_energy = 3;
  if (this->_internal_latest_consume_time_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_consume_time_for_energy());
  }

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  if (this->_internal_acquired_delegated_frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_acquired_delegated_frozen_balance_for_energy());
  }

  // int64 delegated_frozen_balance_for_energy = 5;
  if (this->_internal_delegated_frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delegated_frozen_balance_for_energy());
  }

  // int64 storage_limit = 6;
  if (this->_internal_storage_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_storage_limit());
  }

  // int64 storage_usage = 7;
  if (this->_internal_storage_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_storage_usage());
  }

  // int64 latest_exchange_storage_time = 8;
  if (this->_internal_latest_exchange_storage_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_exchange_storage_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account_AccountResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Account_AccountResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account_AccountResource::GetClassData() const { return &_class_data_; }

void Account_AccountResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Account_AccountResource *>(to)->MergeFrom(
      static_cast<const Account_AccountResource &>(from));
}


void Account_AccountResource::MergeFrom(const Account_AccountResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account.AccountResource)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_frozen_balance_for_energy()) {
    _internal_mutable_frozen_balance_for_energy()->::protocol::Account_Frozen::MergeFrom(from._internal_frozen_balance_for_energy());
  }
  if (from._internal_energy_usage() != 0) {
    _internal_set_energy_usage(from._internal_energy_usage());
  }
  if (from._internal_latest_consume_time_for_energy() != 0) {
    _internal_set_latest_consume_time_for_energy(from._internal_latest_consume_time_for_energy());
  }
  if (from._internal_acquired_delegated_frozen_balance_for_energy() != 0) {
    _internal_set_acquired_delegated_frozen_balance_for_energy(from._internal_acquired_delegated_frozen_balance_for_energy());
  }
  if (from._internal_delegated_frozen_balance_for_energy() != 0) {
    _internal_set_delegated_frozen_balance_for_energy(from._internal_delegated_frozen_balance_for_energy());
  }
  if (from._internal_storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  if (from._internal_storage_usage() != 0) {
    _internal_set_storage_usage(from._internal_storage_usage());
  }
  if (from._internal_latest_exchange_storage_time() != 0) {
    _internal_set_latest_exchange_storage_time(from._internal_latest_exchange_storage_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account_AccountResource::CopyFrom(const Account_AccountResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account.AccountResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_AccountResource::IsInitialized() const {
  return true;
}

void Account_AccountResource::InternalSwap(Account_AccountResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account_AccountResource, latest_exchange_storage_time_)
      + sizeof(Account_AccountResource::latest_exchange_storage_time_)
      - PROTOBUF_FIELD_OFFSET(Account_AccountResource, frozen_balance_for_energy_)>(
          reinterpret_cast<char*>(&frozen_balance_for_energy_),
          reinterpret_cast<char*>(&other->frozen_balance_for_energy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account_AccountResource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[22]);
}

// ===================================================================

class Account::_Internal {
 public:
  static const ::protocol::Account_Frozen& tron_power(const Account* msg);
  static const ::protocol::Account_AccountResource& account_resource(const Account* msg);
  static const ::protocol::Permission& owner_permission(const Account* msg);
  static const ::protocol::Permission& witness_permission(const Account* msg);
};

const ::protocol::Account_Frozen&
Account::_Internal::tron_power(const Account* msg) {
  return *msg->tron_power_;
}
const ::protocol::Account_AccountResource&
Account::_Internal::account_resource(const Account* msg) {
  return *msg->account_resource_;
}
const ::protocol::Permission&
Account::_Internal::owner_permission(const Account* msg) {
  return *msg->owner_permission_;
}
const ::protocol::Permission&
Account::_Internal::witness_permission(const Account* msg) {
  return *msg->witness_permission_;
}
Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena),
  asset_(arena),
  frozen_(arena),
  frozen_supply_(arena),
  latest_asset_operation_time_(arena),
  free_asset_net_usage_(arena),
  active_permission_(arena),
  assetv2_(arena),
  latest_asset_operation_timev2_(arena),
  free_asset_net_usagev2_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_),
      frozen_(from.frozen_),
      frozen_supply_(from.frozen_supply_),
      active_permission_(from.active_permission_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.MergeFrom(from.asset_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_name().empty()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_issued_name().empty()) {
    asset_issued_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_issued_name(), 
      GetArenaForAllocation());
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArenaForAllocation());
  }
  codehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codehash().empty()) {
    codehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codehash(), 
      GetArenaForAllocation());
  }
  asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_issued_id().empty()) {
    asset_issued_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_issued_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_account_resource()) {
    account_resource_ = new ::protocol::Account_AccountResource(*from.account_resource_);
  } else {
    account_resource_ = nullptr;
  }
  if (from._internal_has_owner_permission()) {
    owner_permission_ = new ::protocol::Permission(*from.owner_permission_);
  } else {
    owner_permission_ = nullptr;
  }
  if (from._internal_has_witness_permission()) {
    witness_permission_ = new ::protocol::Permission(*from.witness_permission_);
  } else {
    witness_permission_ = nullptr;
  }
  if (from._internal_has_tron_power()) {
    tron_power_ = new ::protocol::Account_Frozen(*from.tron_power_);
  } else {
    tron_power_ = nullptr;
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_tron_power_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(old_tron_power_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account)
}

inline void Account::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
codehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_resource_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_tron_power_) -
    reinterpret_cast<char*>(&account_resource_)) + sizeof(old_tron_power_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:protocol.Account)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_resource_;
  if (this != internal_default_instance()) delete owner_permission_;
  if (this != internal_default_instance()) delete witness_permission_;
  if (this != internal_default_instance()) delete tron_power_;
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
  _this->asset_. ~MapField();
  _this->latest_asset_operation_time_. ~MapField();
  _this->free_asset_net_usage_. ~MapField();
  _this->assetv2_. ~MapField();
  _this->latest_asset_operation_timev2_. ~MapField();
  _this->free_asset_net_usagev2_. ~MapField();
}
inline void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Account::ArenaDtor);
  }
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  asset_.Clear();
  frozen_.Clear();
  frozen_supply_.Clear();
  latest_asset_operation_time_.Clear();
  free_asset_net_usage_.Clear();
  active_permission_.Clear();
  assetv2_.Clear();
  latest_asset_operation_timev2_.Clear();
  free_asset_net_usagev2_.Clear();
  account_name_.ClearToEmpty();
  address_.ClearToEmpty();
  code_.ClearToEmpty();
  asset_issued_name_.ClearToEmpty();
  account_id_.ClearToEmpty();
  codehash_.ClearToEmpty();
  asset_issued_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && account_resource_ != nullptr) {
    delete account_resource_;
  }
  account_resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owner_permission_ != nullptr) {
    delete owner_permission_;
  }
  owner_permission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && witness_permission_ != nullptr) {
    delete witness_permission_;
  }
  witness_permission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tron_power_ != nullptr) {
    delete tron_power_;
  }
  tron_power_ = nullptr;
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_tron_power_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(old_tron_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.AccountType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // bytes address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote votes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> asset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&asset_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Account.Frozen frozen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frozen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 net_usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_opration_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          latest_opration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allowance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          allowance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_withdraw_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          latest_withdraw_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_witness = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_witness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_committee = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_committee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Account.Frozen frozen_supply = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_frozen_supply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_asset_issued_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&latest_asset_operation_time_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 free_net_usage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          free_net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&free_asset_net_usage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          latest_consume_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_free_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          latest_consume_free_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Account.AccountResource account_resource = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes codeHash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_codehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission owner_permission = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission witness_permission = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_witness_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Permission active_permission = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_active_permission(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          acquired_delegated_frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delegated_frozen_balance_for_bandwidth = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          delegated_frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 old_tron_power = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          old_tron_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Account.Frozen tron_power = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tron_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetV2 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&assetv2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_ID = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_asset_issued_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_timeV2 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&latest_asset_operation_timev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usageV2 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&free_asset_net_usagev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (!this->_internal_account_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // .protocol.AccountType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes address = 3;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_address(), target);
  }

  // int64 balance = 4;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_balance(), target);
  }

  // repeated .protocol.Vote votes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_votes(i), target, stream);
  }

  // map<string, int64> asset = 6;
  if (!this->_internal_asset().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_asset().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_asset().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_asset().begin();
          it != this->_internal_asset().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_AssetEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_asset().begin();
          it != this->_internal_asset().end(); ++it) {
        target = Account_AssetEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .protocol.Account.Frozen frozen = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_frozen(i), target, stream);
  }

  // int64 net_usage = 8;
  if (this->_internal_net_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_net_usage(), target);
  }

  // int64 create_time = 9;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_create_time(), target);
  }

  // int64 latest_opration_time = 10;
  if (this->_internal_latest_opration_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_latest_opration_time(), target);
  }

  // int64 allowance = 11;
  if (this->_internal_allowance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_allowance(), target);
  }

  // int64 latest_withdraw_time = 12;
  if (this->_internal_latest_withdraw_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_latest_withdraw_time(), target);
  }

  // bytes code = 13;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_code(), target);
  }

  // bool is_witness = 14;
  if (this->_internal_is_witness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_witness(), target);
  }

  // bool is_committee = 15;
  if (this->_internal_is_committee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_committee(), target);
  }

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozen_supply_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_frozen_supply(i), target, stream);
  }

  // bytes asset_issued_name = 17;
  if (!this->_internal_asset_issued_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_asset_issued_name(), target);
  }

  // map<string, int64> latest_asset_operation_time = 18;
  if (!this->_internal_latest_asset_operation_time().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latest_asset_operation_time().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latest_asset_operation_time().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_time().begin();
          it != this->_internal_latest_asset_operation_time().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::InternalSerialize(18, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_time().begin();
          it != this->_internal_latest_asset_operation_time().end(); ++it) {
        target = Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::InternalSerialize(18, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 free_net_usage = 19;
  if (this->_internal_free_net_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_free_net_usage(), target);
  }

  // map<string, int64> free_asset_net_usage = 20;
  if (!this->_internal_free_asset_net_usage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_free_asset_net_usage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_free_asset_net_usage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usage().begin();
          it != this->_internal_free_asset_net_usage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::InternalSerialize(20, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usage().begin();
          it != this->_internal_free_asset_net_usage().end(); ++it) {
        target = Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::InternalSerialize(20, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 latest_consume_time = 21;
  if (this->_internal_latest_consume_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_latest_consume_time(), target);
  }

  // int64 latest_consume_free_time = 22;
  if (this->_internal_latest_consume_free_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_latest_consume_free_time(), target);
  }

  // bytes account_id = 23;
  if (!this->_internal_account_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_account_id(), target);
  }

  // .protocol.Account.AccountResource account_resource = 26;
  if (this->_internal_has_account_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::account_resource(this), target, stream);
  }

  // bytes codeHash = 30;
  if (!this->_internal_codehash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_codehash(), target);
  }

  // .protocol.Permission owner_permission = 31;
  if (this->_internal_has_owner_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::owner_permission(this), target, stream);
  }

  // .protocol.Permission witness_permission = 32;
  if (this->_internal_has_witness_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::witness_permission(this), target, stream);
  }

  // repeated .protocol.Permission active_permission = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_permission_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_active_permission(i), target, stream);
  }

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  if (this->_internal_acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(41, this->_internal_acquired_delegated_frozen_balance_for_bandwidth(), target);
  }

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  if (this->_internal_delegated_frozen_balance_for_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(42, this->_internal_delegated_frozen_balance_for_bandwidth(), target);
  }

  // int64 old_tron_power = 46;
  if (this->_internal_old_tron_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->_internal_old_tron_power(), target);
  }

  // .protocol.Account.Frozen tron_power = 47;
  if (this->_internal_has_tron_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::tron_power(this), target, stream);
  }

  // map<string, int64> assetV2 = 56;
  if (!this->_internal_assetv2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetv2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetv2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetv2().begin();
          it != this->_internal_assetv2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_AssetV2Entry_DoNotUse::Funcs::InternalSerialize(56, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetv2().begin();
          it != this->_internal_assetv2().end(); ++it) {
        target = Account_AssetV2Entry_DoNotUse::Funcs::InternalSerialize(56, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes asset_issued_ID = 57;
  if (!this->_internal_asset_issued_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        57, this->_internal_asset_issued_id(), target);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  if (!this->_internal_latest_asset_operation_timev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latest_asset_operation_timev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latest_asset_operation_timev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_timev2().begin();
          it != this->_internal_latest_asset_operation_timev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::InternalSerialize(58, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_timev2().begin();
          it != this->_internal_latest_asset_operation_timev2().end(); ++it) {
        target = Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::InternalSerialize(58, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> free_asset_net_usageV2 = 59;
  if (!this->_internal_free_asset_net_usagev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_free_asset_net_usagev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_free_asset_net_usagev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usagev2().begin();
          it != this->_internal_free_asset_net_usagev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::InternalSerialize(59, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usagev2().begin();
          it != this->_internal_free_asset_net_usagev2().end(); ++it) {
        target = Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::InternalSerialize(59, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Vote votes = 5;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int64> asset = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_asset_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_asset().begin();
      it != this->_internal_asset().end(); ++it) {
    total_size += Account_AssetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protocol.Account.Frozen frozen = 7;
  total_size += 1UL * this->_internal_frozen_size();
  for (const auto& msg : this->frozen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  total_size += 2UL * this->_internal_frozen_supply_size();
  for (const auto& msg : this->frozen_supply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int64> latest_asset_operation_time = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latest_asset_operation_time_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_latest_asset_operation_time().begin();
      it != this->_internal_latest_asset_operation_time().end(); ++it) {
    total_size += Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usage = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_free_asset_net_usage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_free_asset_net_usage().begin();
      it != this->_internal_free_asset_net_usage().end(); ++it) {
    total_size += Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protocol.Permission active_permission = 33;
  total_size += 2UL * this->_internal_active_permission_size();
  for (const auto& msg : this->active_permission_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int64> assetV2 = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetv2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetv2().begin();
      it != this->_internal_assetv2().end(); ++it) {
    total_size += Account_AssetV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latest_asset_operation_timev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_latest_asset_operation_timev2().begin();
      it != this->_internal_latest_asset_operation_timev2().end(); ++it) {
    total_size += Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usageV2 = 59;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_free_asset_net_usagev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_free_asset_net_usagev2().begin();
      it != this->_internal_free_asset_net_usagev2().end(); ++it) {
    total_size += Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes account_name = 1;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_name());
  }

  // bytes address = 3;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes code = 13;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // bytes asset_issued_name = 17;
  if (!this->_internal_asset_issued_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_issued_name());
  }

  // bytes account_id = 23;
  if (!this->_internal_account_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_id());
  }

  // bytes codeHash = 30;
  if (!this->_internal_codehash().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_codehash());
  }

  // bytes asset_issued_ID = 57;
  if (!this->_internal_asset_issued_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_issued_id());
  }

  // .protocol.Account.AccountResource account_resource = 26;
  if (this->_internal_has_account_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_resource_);
  }

  // .protocol.Permission owner_permission = 31;
  if (this->_internal_has_owner_permission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_permission_);
  }

  // .protocol.Permission witness_permission = 32;
  if (this->_internal_has_witness_permission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *witness_permission_);
  }

  // .protocol.Account.Frozen tron_power = 47;
  if (this->_internal_has_tron_power()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tron_power_);
  }

  // int64 balance = 4;
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // int64 net_usage = 8;
  if (this->_internal_net_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_net_usage());
  }

  // int64 create_time = 9;
  if (this->_internal_create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int64 latest_opration_time = 10;
  if (this->_internal_latest_opration_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_opration_time());
  }

  // .protocol.AccountType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_witness = 14;
  if (this->_internal_is_witness() != 0) {
    total_size += 1 + 1;
  }

  // bool is_committee = 15;
  if (this->_internal_is_committee() != 0) {
    total_size += 1 + 1;
  }

  // int64 allowance = 11;
  if (this->_internal_allowance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allowance());
  }

  // int64 latest_withdraw_time = 12;
  if (this->_internal_latest_withdraw_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_withdraw_time());
  }

  // int64 free_net_usage = 19;
  if (this->_internal_free_net_usage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_free_net_usage());
  }

  // int64 latest_consume_time = 21;
  if (this->_internal_latest_consume_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_consume_time());
  }

  // int64 latest_consume_free_time = 22;
  if (this->_internal_latest_consume_free_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_consume_free_time());
  }

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  if (this->_internal_acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_acquired_delegated_frozen_balance_for_bandwidth());
  }

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  if (this->_internal_delegated_frozen_balance_for_bandwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delegated_frozen_balance_for_bandwidth());
  }

  // int64 old_tron_power = 46;
  if (this->_internal_old_tron_power() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_old_tron_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Account::GetClassData() const { return &_class_data_; }

void Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Account *>(to)->MergeFrom(
      static_cast<const Account &>(from));
}


void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  asset_.MergeFrom(from.asset_);
  frozen_.MergeFrom(from.frozen_);
  frozen_supply_.MergeFrom(from.frozen_supply_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  active_permission_.MergeFrom(from.active_permission_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  if (!from._internal_account_name().empty()) {
    _internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_asset_issued_name().empty()) {
    _internal_set_asset_issued_name(from._internal_asset_issued_name());
  }
  if (!from._internal_account_id().empty()) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_codehash().empty()) {
    _internal_set_codehash(from._internal_codehash());
  }
  if (!from._internal_asset_issued_id().empty()) {
    _internal_set_asset_issued_id(from._internal_asset_issued_id());
  }
  if (from._internal_has_account_resource()) {
    _internal_mutable_account_resource()->::protocol::Account_AccountResource::MergeFrom(from._internal_account_resource());
  }
  if (from._internal_has_owner_permission()) {
    _internal_mutable_owner_permission()->::protocol::Permission::MergeFrom(from._internal_owner_permission());
  }
  if (from._internal_has_witness_permission()) {
    _internal_mutable_witness_permission()->::protocol::Permission::MergeFrom(from._internal_witness_permission());
  }
  if (from._internal_has_tron_power()) {
    _internal_mutable_tron_power()->::protocol::Account_Frozen::MergeFrom(from._internal_tron_power());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from._internal_net_usage() != 0) {
    _internal_set_net_usage(from._internal_net_usage());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_latest_opration_time() != 0) {
    _internal_set_latest_opration_time(from._internal_latest_opration_time());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_is_witness() != 0) {
    _internal_set_is_witness(from._internal_is_witness());
  }
  if (from._internal_is_committee() != 0) {
    _internal_set_is_committee(from._internal_is_committee());
  }
  if (from._internal_allowance() != 0) {
    _internal_set_allowance(from._internal_allowance());
  }
  if (from._internal_latest_withdraw_time() != 0) {
    _internal_set_latest_withdraw_time(from._internal_latest_withdraw_time());
  }
  if (from._internal_free_net_usage() != 0) {
    _internal_set_free_net_usage(from._internal_free_net_usage());
  }
  if (from._internal_latest_consume_time() != 0) {
    _internal_set_latest_consume_time(from._internal_latest_consume_time());
  }
  if (from._internal_latest_consume_free_time() != 0) {
    _internal_set_latest_consume_free_time(from._internal_latest_consume_free_time());
  }
  if (from._internal_acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    _internal_set_acquired_delegated_frozen_balance_for_bandwidth(from._internal_acquired_delegated_frozen_balance_for_bandwidth());
  }
  if (from._internal_delegated_frozen_balance_for_bandwidth() != 0) {
    _internal_set_delegated_frozen_balance_for_bandwidth(from._internal_delegated_frozen_balance_for_bandwidth());
  }
  if (from._internal_old_tron_power() != 0) {
    _internal_set_old_tron_power(from._internal_old_tron_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  asset_.InternalSwap(&other->asset_);
  frozen_.InternalSwap(&other->frozen_);
  frozen_supply_.InternalSwap(&other->frozen_supply_);
  latest_asset_operation_time_.InternalSwap(&other->latest_asset_operation_time_);
  free_asset_net_usage_.InternalSwap(&other->free_asset_net_usage_);
  active_permission_.InternalSwap(&other->active_permission_);
  assetv2_.InternalSwap(&other->assetv2_);
  latest_asset_operation_timev2_.InternalSwap(&other->latest_asset_operation_timev2_);
  free_asset_net_usagev2_.InternalSwap(&other->free_asset_net_usagev2_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, GetArenaForAllocation(),
      &other->account_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_issued_name_, GetArenaForAllocation(),
      &other->asset_issued_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_id_, GetArenaForAllocation(),
      &other->account_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codehash_, GetArenaForAllocation(),
      &other->codehash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_issued_id_, GetArenaForAllocation(),
      &other->asset_issued_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, old_tron_power_)
      + sizeof(Account::old_tron_power_)
      - PROTOBUF_FIELD_OFFSET(Account, account_resource_)>(
          reinterpret_cast<char*>(&account_resource_),
          reinterpret_cast<char*>(&other->account_resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[23]);
}

// ===================================================================

class AccountAsset_Frozen::_Internal {
 public:
};

AccountAsset_Frozen::AccountAsset_Frozen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountAsset.Frozen)
}
AccountAsset_Frozen::AccountAsset_Frozen(const AccountAsset_Frozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountAsset.Frozen)
}

inline void AccountAsset_Frozen::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
}

AccountAsset_Frozen::~AccountAsset_Frozen() {
  // @@protoc_insertion_point(destructor:protocol.AccountAsset.Frozen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountAsset_Frozen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountAsset_Frozen::ArenaDtor(void* object) {
  AccountAsset_Frozen* _this = reinterpret_cast< AccountAsset_Frozen* >(object);
  (void)_this;
}
void AccountAsset_Frozen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountAsset_Frozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAsset_Frozen::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountAsset.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAsset_Frozen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 frozen_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountAsset_Frozen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountAsset.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->_internal_frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_frozen_balance(), target);
  }

  // int64 expire_time = 2;
  if (this->_internal_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountAsset.Frozen)
  return target;
}

size_t AccountAsset_Frozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountAsset.Frozen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->_internal_frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // int64 expire_time = 2;
  if (this->_internal_expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountAsset_Frozen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountAsset_Frozen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountAsset_Frozen::GetClassData() const { return &_class_data_; }

void AccountAsset_Frozen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountAsset_Frozen *>(to)->MergeFrom(
      static_cast<const AccountAsset_Frozen &>(from));
}


void AccountAsset_Frozen::MergeFrom(const AccountAsset_Frozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountAsset.Frozen)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from._internal_expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountAsset_Frozen::CopyFrom(const AccountAsset_Frozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountAsset.Frozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAsset_Frozen::IsInitialized() const {
  return true;
}

void AccountAsset_Frozen::InternalSwap(AccountAsset_Frozen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountAsset_Frozen, expire_time_)
      + sizeof(AccountAsset_Frozen::expire_time_)
      - PROTOBUF_FIELD_OFFSET(AccountAsset_Frozen, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_Frozen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[24]);
}

// ===================================================================

AccountAsset_AssetEntry_DoNotUse::AccountAsset_AssetEntry_DoNotUse() {}
AccountAsset_AssetEntry_DoNotUse::AccountAsset_AssetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_AssetEntry_DoNotUse::MergeFrom(const AccountAsset_AssetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_AssetEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[25]);
}

// ===================================================================

AccountAsset_AssetV2Entry_DoNotUse::AccountAsset_AssetV2Entry_DoNotUse() {}
AccountAsset_AssetV2Entry_DoNotUse::AccountAsset_AssetV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_AssetV2Entry_DoNotUse::MergeFrom(const AccountAsset_AssetV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_AssetV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[26]);
}

// ===================================================================

AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse() {}
AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::MergeFrom(const AccountAsset_LatestAssetOperationTimeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[27]);
}

// ===================================================================

AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse() {}
AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::MergeFrom(const AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[28]);
}

// ===================================================================

AccountAsset_FreeAssetNetUsageEntry_DoNotUse::AccountAsset_FreeAssetNetUsageEntry_DoNotUse() {}
AccountAsset_FreeAssetNetUsageEntry_DoNotUse::AccountAsset_FreeAssetNetUsageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_FreeAssetNetUsageEntry_DoNotUse::MergeFrom(const AccountAsset_FreeAssetNetUsageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_FreeAssetNetUsageEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[29]);
}

// ===================================================================

AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse() {}
AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::MergeFrom(const AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[30]);
}

// ===================================================================

class AccountAsset::_Internal {
 public:
};

AccountAsset::AccountAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  asset_(arena),
  assetv2_(arena),
  latest_asset_operation_time_(arena),
  latest_asset_operation_timev2_(arena),
  free_asset_net_usage_(arena),
  free_asset_net_usagev2_(arena),
  frozen_supply_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountAsset)
}
AccountAsset::AccountAsset(const AccountAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frozen_supply_(from.frozen_supply_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.MergeFrom(from.asset_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_issued_name().empty()) {
    asset_issued_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_issued_name(), 
      GetArenaForAllocation());
  }
  asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_issued_id().empty()) {
    asset_issued_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_issued_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountAsset)
}

inline void AccountAsset::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountAsset::~AccountAsset() {
  // @@protoc_insertion_point(destructor:protocol.AccountAsset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountAsset::ArenaDtor(void* object) {
  AccountAsset* _this = reinterpret_cast< AccountAsset* >(object);
  (void)_this;
  _this->asset_. ~MapField();
  _this->assetv2_. ~MapField();
  _this->latest_asset_operation_time_. ~MapField();
  _this->latest_asset_operation_timev2_. ~MapField();
  _this->free_asset_net_usage_. ~MapField();
  _this->free_asset_net_usagev2_. ~MapField();
}
inline void AccountAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AccountAsset::ArenaDtor);
  }
}
void AccountAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.Clear();
  assetv2_.Clear();
  latest_asset_operation_time_.Clear();
  latest_asset_operation_timev2_.Clear();
  free_asset_net_usage_.Clear();
  free_asset_net_usagev2_.Clear();
  frozen_supply_.Clear();
  address_.ClearToEmpty();
  asset_issued_name_.ClearToEmpty();
  asset_issued_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> asset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&asset_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetV2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assetv2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset_issued_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_ID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_asset_issued_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&latest_asset_operation_time_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_timeV2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&latest_asset_operation_timev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&free_asset_net_usage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usageV2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&free_asset_net_usagev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.AccountAsset.Frozen frozen_supply = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frozen_supply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // map<string, int64> asset = 2;
  if (!this->_internal_asset().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.AssetEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_asset().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_asset().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_asset().begin();
          it != this->_internal_asset().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_AssetEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_asset().begin();
          it != this->_internal_asset().end(); ++it) {
        target = AccountAsset_AssetEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> assetV2 = 3;
  if (!this->_internal_assetv2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.AssetV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assetv2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assetv2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetv2().begin();
          it != this->_internal_assetv2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_AssetV2Entry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_assetv2().begin();
          it != this->_internal_assetv2().end(); ++it) {
        target = AccountAsset_AssetV2Entry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes asset_issued_name = 4;
  if (!this->_internal_asset_issued_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_asset_issued_name(), target);
  }

  // bytes asset_issued_ID = 5;
  if (!this->_internal_asset_issued_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_asset_issued_id(), target);
  }

  // map<string, int64> latest_asset_operation_time = 6;
  if (!this->_internal_latest_asset_operation_time().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.LatestAssetOperationTimeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latest_asset_operation_time().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latest_asset_operation_time().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_time().begin();
          it != this->_internal_latest_asset_operation_time().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_time().begin();
          it != this->_internal_latest_asset_operation_time().end(); ++it) {
        target = AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> latest_asset_operation_timeV2 = 7;
  if (!this->_internal_latest_asset_operation_timev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.LatestAssetOperationTimeV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latest_asset_operation_timev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latest_asset_operation_timev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_timev2().begin();
          it != this->_internal_latest_asset_operation_timev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_latest_asset_operation_timev2().begin();
          it != this->_internal_latest_asset_operation_timev2().end(); ++it) {
        target = AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> free_asset_net_usage = 8;
  if (!this->_internal_free_asset_net_usage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.FreeAssetNetUsageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_free_asset_net_usage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_free_asset_net_usage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usage().begin();
          it != this->_internal_free_asset_net_usage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_FreeAssetNetUsageEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usage().begin();
          it != this->_internal_free_asset_net_usage().end(); ++it) {
        target = AccountAsset_FreeAssetNetUsageEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> free_asset_net_usageV2 = 9;
  if (!this->_internal_free_asset_net_usagev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.AccountAsset.FreeAssetNetUsageV2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_free_asset_net_usagev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_free_asset_net_usagev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usagev2().begin();
          it != this->_internal_free_asset_net_usagev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_free_asset_net_usagev2().begin();
          it != this->_internal_free_asset_net_usagev2().end(); ++it) {
        target = AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .protocol.AccountAsset.Frozen frozen_supply = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozen_supply_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_frozen_supply(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountAsset)
  return target;
}

size_t AccountAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> asset = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_asset_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_asset().begin();
      it != this->_internal_asset().end(); ++it) {
    total_size += AccountAsset_AssetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> assetV2 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetv2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_assetv2().begin();
      it != this->_internal_assetv2().end(); ++it) {
    total_size += AccountAsset_AssetV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> latest_asset_operation_time = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latest_asset_operation_time_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_latest_asset_operation_time().begin();
      it != this->_internal_latest_asset_operation_time().end(); ++it) {
    total_size += AccountAsset_LatestAssetOperationTimeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latest_asset_operation_timev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_latest_asset_operation_timev2().begin();
      it != this->_internal_latest_asset_operation_timev2().end(); ++it) {
    total_size += AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usage = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_free_asset_net_usage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_free_asset_net_usage().begin();
      it != this->_internal_free_asset_net_usage().end(); ++it) {
    total_size += AccountAsset_FreeAssetNetUsageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usageV2 = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_free_asset_net_usagev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_free_asset_net_usagev2().begin();
      it != this->_internal_free_asset_net_usagev2().end(); ++it) {
    total_size += AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protocol.AccountAsset.Frozen frozen_supply = 10;
  total_size += 1UL * this->_internal_frozen_supply_size();
  for (const auto& msg : this->frozen_supply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes asset_issued_name = 4;
  if (!this->_internal_asset_issued_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_issued_name());
  }

  // bytes asset_issued_ID = 5;
  if (!this->_internal_asset_issued_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_asset_issued_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountAsset::GetClassData() const { return &_class_data_; }

void AccountAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountAsset *>(to)->MergeFrom(
      static_cast<const AccountAsset &>(from));
}


void AccountAsset::MergeFrom(const AccountAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountAsset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asset_.MergeFrom(from.asset_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  frozen_supply_.MergeFrom(from.frozen_supply_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_asset_issued_name().empty()) {
    _internal_set_asset_issued_name(from._internal_asset_issued_name());
  }
  if (!from._internal_asset_issued_id().empty()) {
    _internal_set_asset_issued_id(from._internal_asset_issued_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountAsset::CopyFrom(const AccountAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAsset::IsInitialized() const {
  return true;
}

void AccountAsset::InternalSwap(AccountAsset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  asset_.InternalSwap(&other->asset_);
  assetv2_.InternalSwap(&other->assetv2_);
  latest_asset_operation_time_.InternalSwap(&other->latest_asset_operation_time_);
  latest_asset_operation_timev2_.InternalSwap(&other->latest_asset_operation_timev2_);
  free_asset_net_usage_.InternalSwap(&other->free_asset_net_usage_);
  free_asset_net_usagev2_.InternalSwap(&other->free_asset_net_usagev2_);
  frozen_supply_.InternalSwap(&other->frozen_supply_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_issued_name_, GetArenaForAllocation(),
      &other->asset_issued_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_issued_id_, GetArenaForAllocation(),
      &other->asset_issued_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[31]);
}

// ===================================================================

class Key::_Internal {
 public:
};

Key::Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:protocol.Key)
}

inline void Key::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
weight_ = int64_t{0};
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:protocol.Key)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Key::ArenaDtor(void* object) {
  Key* _this = reinterpret_cast< Key* >(object);
  (void)_this;
}
void Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  weight_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 weight = 2;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 weight = 2;
  if (this->_internal_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Key::GetClassData() const { return &_class_data_; }

void Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Key *>(to)->MergeFrom(
      static_cast<const Key &>(from));
}


void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Key)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[32]);
}

// ===================================================================

class DelegatedResource::_Internal {
 public:
};

DelegatedResource::DelegatedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DelegatedResource)
}
DelegatedResource::DelegatedResource(const DelegatedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  ::memcpy(&frozen_balance_for_bandwidth_, &from.frozen_balance_for_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_for_energy_) -
    reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResource)
}

inline void DelegatedResource::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frozen_balance_for_bandwidth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_time_for_energy_) -
    reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
}

DelegatedResource::~DelegatedResource() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegatedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegatedResource::ArenaDtor(void* object) {
  DelegatedResource* _this = reinterpret_cast< DelegatedResource* >(object);
  (void)_this;
}
void DelegatedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegatedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  ::memset(&frozen_balance_for_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_for_energy_) -
      reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance_for_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance_for_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time_for_bandwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expire_time_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time_for_energy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expire_time_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // int64 frozen_balance_for_bandwidth = 3;
  if (this->_internal_frozen_balance_for_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_frozen_balance_for_bandwidth(), target);
  }

  // int64 frozen_balance_for_energy = 4;
  if (this->_internal_frozen_balance_for_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_frozen_balance_for_energy(), target);
  }

  // int64 expire_time_for_bandwidth = 5;
  if (this->_internal_expire_time_for_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expire_time_for_bandwidth(), target);
  }

  // int64 expire_time_for_energy = 6;
  if (this->_internal_expire_time_for_energy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_expire_time_for_energy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResource)
  return target;
}

size_t DelegatedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // int64 frozen_balance_for_bandwidth = 3;
  if (this->_internal_frozen_balance_for_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance_for_bandwidth());
  }

  // int64 frozen_balance_for_energy = 4;
  if (this->_internal_frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance_for_energy());
  }

  // int64 expire_time_for_bandwidth = 5;
  if (this->_internal_expire_time_for_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time_for_bandwidth());
  }

  // int64 expire_time_for_energy = 6;
  if (this->_internal_expire_time_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time_for_energy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatedResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegatedResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatedResource::GetClassData() const { return &_class_data_; }

void DelegatedResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DelegatedResource *>(to)->MergeFrom(
      static_cast<const DelegatedResource &>(from));
}


void DelegatedResource::MergeFrom(const DelegatedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_frozen_balance_for_bandwidth() != 0) {
    _internal_set_frozen_balance_for_bandwidth(from._internal_frozen_balance_for_bandwidth());
  }
  if (from._internal_frozen_balance_for_energy() != 0) {
    _internal_set_frozen_balance_for_energy(from._internal_frozen_balance_for_energy());
  }
  if (from._internal_expire_time_for_bandwidth() != 0) {
    _internal_set_expire_time_for_bandwidth(from._internal_expire_time_for_bandwidth());
  }
  if (from._internal_expire_time_for_energy() != 0) {
    _internal_set_expire_time_for_energy(from._internal_expire_time_for_energy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatedResource::CopyFrom(const DelegatedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResource::IsInitialized() const {
  return true;
}

void DelegatedResource::InternalSwap(DelegatedResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelegatedResource, expire_time_for_energy_)
      + sizeof(DelegatedResource::expire_time_for_energy_)
      - PROTOBUF_FIELD_OFFSET(DelegatedResource, frozen_balance_for_bandwidth_)>(
          reinterpret_cast<char*>(&frozen_balance_for_bandwidth_),
          reinterpret_cast<char*>(&other->frozen_balance_for_bandwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[33]);
}

// ===================================================================

class authority::_Internal {
 public:
  static const ::protocol::AccountId& account(const authority* msg);
};

const ::protocol::AccountId&
authority::_Internal::account(const authority* msg) {
  return *msg->account_;
}
authority::authority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.authority)
}
authority::authority(const authority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permission_name().empty()) {
    permission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_permission_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_account()) {
    account_ = new ::protocol::AccountId(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.authority)
}

inline void authority::SharedCtor() {
permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_ = nullptr;
}

authority::~authority() {
  // @@protoc_insertion_point(destructor:protocol.authority)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void authority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  permission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
}

void authority::ArenaDtor(void* object) {
  authority* _this = reinterpret_cast< authority* >(object);
  (void)_this;
}
void authority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void authority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void authority::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.authority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* authority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.AccountId account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes permission_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_permission_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* authority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.authority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.AccountId account = 1;
  if (this->_internal_has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // bytes permission_name = 2;
  if (!this->_internal_permission_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_permission_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.authority)
  return target;
}

size_t authority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.authority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes permission_name = 2;
  if (!this->_internal_permission_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_permission_name());
  }

  // .protocol.AccountId account = 1;
  if (this->_internal_has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData authority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    authority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*authority::GetClassData() const { return &_class_data_; }

void authority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<authority *>(to)->MergeFrom(
      static_cast<const authority &>(from));
}


void authority::MergeFrom(const authority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.authority)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_permission_name().empty()) {
    _internal_set_permission_name(from._internal_permission_name());
  }
  if (from._internal_has_account()) {
    _internal_mutable_account()->::protocol::AccountId::MergeFrom(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void authority::CopyFrom(const authority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authority::IsInitialized() const {
  return true;
}

void authority::InternalSwap(authority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &permission_name_, GetArenaForAllocation(),
      &other->permission_name_, other->GetArenaForAllocation()
  );
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata authority::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[34]);
}

// ===================================================================

class Permission::_Internal {
 public:
};

Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permission_name().empty()) {
    permission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_permission_name(), 
      GetArenaForAllocation());
  }
  operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operations().empty()) {
    operations_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operations(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.Permission)
}

inline void Permission::SharedCtor() {
permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:protocol.Permission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  permission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  permission_name_.ClearToEmpty();
  operations_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Permission.PermissionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::Permission_PermissionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permission_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_permission_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Permission.permission_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_operations();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Key keys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Permission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Permission.PermissionType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // string permission_name = 3;
  if (!this->_internal_permission_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission_name().data(), static_cast<int>(this->_internal_permission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Permission.permission_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_permission_name(), target);
  }

  // int64 threshold = 4;
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_threshold(), target);
  }

  // int32 parent_id = 5;
  if (this->_internal_parent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_parent_id(), target);
  }

  // bytes operations = 6;
  if (!this->_internal_operations().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_operations(), target);
  }

  // repeated .protocol.Key keys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Permission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Key keys = 7;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string permission_name = 3;
  if (!this->_internal_permission_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission_name());
  }

  // bytes operations = 6;
  if (!this->_internal_operations().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operations());
  }

  // .protocol.Permission.PermissionType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int64 threshold = 4;
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_threshold());
  }

  // int32 parent_id = 5;
  if (this->_internal_parent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }

void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Permission *>(to)->MergeFrom(
      static_cast<const Permission &>(from));
}


void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (!from._internal_permission_name().empty()) {
    _internal_set_permission_name(from._internal_permission_name());
  }
  if (!from._internal_operations().empty()) {
    _internal_set_operations(from._internal_operations());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_parent_id() != 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &permission_name_, GetArenaForAllocation(),
      &other->permission_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operations_, GetArenaForAllocation(),
      &other->operations_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Permission, parent_id_)
      + sizeof(Permission::parent_id_)
      - PROTOBUF_FIELD_OFFSET(Permission, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[35]);
}

// ===================================================================

class Witness::_Internal {
 public:
};

Witness::Witness(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Witness)
}
Witness::Witness(const Witness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&votecount_, &from.votecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&isjobs_) -
    reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
  // @@protoc_insertion_point(copy_constructor:protocol.Witness)
}

inline void Witness::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&votecount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isjobs_) -
    reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
}

Witness::~Witness() {
  // @@protoc_insertion_point(destructor:protocol.Witness)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Witness::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Witness::ArenaDtor(void* object) {
  Witness* _this = reinterpret_cast< Witness* >(object);
  (void)_this;
}
void Witness::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Witness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Witness::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  pubkey_.ClearToEmpty();
  url_.ClearToEmpty();
  ::memset(&votecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isjobs_) -
      reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Witness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 voteCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          votecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Witness.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalProduced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalproduced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalMissed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          totalmissed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latestBlockNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          latestblocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latestSlotNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          latestslotnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isJobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isjobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Witness::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 voteCount = 2;
  if (this->_internal_votecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_votecount(), target);
  }

  // bytes pubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Witness.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // int64 totalProduced = 5;
  if (this->_internal_totalproduced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_totalproduced(), target);
  }

  // int64 totalMissed = 6;
  if (this->_internal_totalmissed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_totalmissed(), target);
  }

  // int64 latestBlockNum = 7;
  if (this->_internal_latestblocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_latestblocknum(), target);
  }

  // int64 latestSlotNum = 8;
  if (this->_internal_latestslotnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_latestslotnum(), target);
  }

  // bool isJobs = 9;
  if (this->_internal_isjobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isjobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Witness)
  return target;
}

size_t Witness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Witness)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes pubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 voteCount = 2;
  if (this->_internal_votecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_votecount());
  }

  // int64 totalProduced = 5;
  if (this->_internal_totalproduced() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalproduced());
  }

  // int64 totalMissed = 6;
  if (this->_internal_totalmissed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalmissed());
  }

  // int64 latestBlockNum = 7;
  if (this->_internal_latestblocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latestblocknum());
  }

  // int64 latestSlotNum = 8;
  if (this->_internal_latestslotnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latestslotnum());
  }

  // bool isJobs = 9;
  if (this->_internal_isjobs() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Witness::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Witness::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Witness::GetClassData() const { return &_class_data_; }

void Witness::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Witness *>(to)->MergeFrom(
      static_cast<const Witness &>(from));
}


void Witness::MergeFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Witness)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_pubkey().empty()) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_votecount() != 0) {
    _internal_set_votecount(from._internal_votecount());
  }
  if (from._internal_totalproduced() != 0) {
    _internal_set_totalproduced(from._internal_totalproduced());
  }
  if (from._internal_totalmissed() != 0) {
    _internal_set_totalmissed(from._internal_totalmissed());
  }
  if (from._internal_latestblocknum() != 0) {
    _internal_set_latestblocknum(from._internal_latestblocknum());
  }
  if (from._internal_latestslotnum() != 0) {
    _internal_set_latestslotnum(from._internal_latestslotnum());
  }
  if (from._internal_isjobs() != 0) {
    _internal_set_isjobs(from._internal_isjobs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Witness::CopyFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Witness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Witness::IsInitialized() const {
  return true;
}

void Witness::InternalSwap(Witness* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pubkey_, GetArenaForAllocation(),
      &other->pubkey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Witness, isjobs_)
      + sizeof(Witness::isjobs_)
      - PROTOBUF_FIELD_OFFSET(Witness, votecount_)>(
          reinterpret_cast<char*>(&votecount_),
          reinterpret_cast<char*>(&other->votecount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Witness::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[36]);
}

// ===================================================================

class Votes::_Internal {
 public:
};

Votes::Votes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  old_votes_(arena),
  new_votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Votes)
}
Votes::Votes(const Votes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      old_votes_(from.old_votes_),
      new_votes_(from.new_votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Votes)
}

inline void Votes::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Votes::~Votes() {
  // @@protoc_insertion_point(destructor:protocol.Votes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Votes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Votes::ArenaDtor(void* object) {
  Votes* _this = reinterpret_cast< Votes* >(object);
  (void)_this;
}
void Votes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Votes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Votes::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_votes_.Clear();
  new_votes_.Clear();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Votes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote old_votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote new_votes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Votes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .protocol.Vote old_votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_old_votes(i), target, stream);
  }

  // repeated .protocol.Vote new_votes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_new_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Votes)
  return target;
}

size_t Votes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Votes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Vote old_votes = 2;
  total_size += 1UL * this->_internal_old_votes_size();
  for (const auto& msg : this->old_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.Vote new_votes = 3;
  total_size += 1UL * this->_internal_new_votes_size();
  for (const auto& msg : this->new_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Votes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Votes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Votes::GetClassData() const { return &_class_data_; }

void Votes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Votes *>(to)->MergeFrom(
      static_cast<const Votes &>(from));
}


void Votes::MergeFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Votes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_votes_.MergeFrom(from.old_votes_);
  new_votes_.MergeFrom(from.new_votes_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Votes::CopyFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Votes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Votes::IsInitialized() const {
  return true;
}

void Votes::InternalSwap(Votes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  old_votes_.InternalSwap(&other->old_votes_);
  new_votes_.InternalSwap(&other->new_votes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Votes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[37]);
}

// ===================================================================

class TXOutput::_Internal {
 public:
};

TXOutput::TXOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TXOutput)
}
TXOutput::TXOutput(const TXOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkeyhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkeyhash().empty()) {
    pubkeyhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkeyhash(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protocol.TXOutput)
}

inline void TXOutput::SharedCtor() {
pubkeyhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = int64_t{0};
}

TXOutput::~TXOutput() {
  // @@protoc_insertion_point(destructor:protocol.TXOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TXOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pubkeyhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TXOutput::ArenaDtor(void* object) {
  TXOutput* _this = reinterpret_cast< TXOutput* >(object);
  (void)_this;
}
void TXOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TXOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkeyhash_.ClearToEmpty();
  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKeyHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkeyhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // bytes pubKeyHash = 2;
  if (!this->_internal_pubkeyhash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pubkeyhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXOutput)
  return target;
}

size_t TXOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKeyHash = 2;
  if (!this->_internal_pubkeyhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkeyhash());
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TXOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TXOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TXOutput::GetClassData() const { return &_class_data_; }

void TXOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TXOutput *>(to)->MergeFrom(
      static_cast<const TXOutput &>(from));
}


void TXOutput::MergeFrom(const TXOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXOutput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pubkeyhash().empty()) {
    _internal_set_pubkeyhash(from._internal_pubkeyhash());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TXOutput::CopyFrom(const TXOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXOutput::IsInitialized() const {
  return true;
}

void TXOutput::InternalSwap(TXOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pubkeyhash_, GetArenaForAllocation(),
      &other->pubkeyhash_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[38]);
}

// ===================================================================

class TXInput_raw::_Internal {
 public:
};

TXInput_raw::TXInput_raw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TXInput.raw)
}
TXInput_raw::TXInput_raw(const TXInput_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txid(), 
      GetArenaForAllocation());
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArenaForAllocation());
  }
  vout_ = from.vout_;
  // @@protoc_insertion_point(copy_constructor:protocol.TXInput.raw)
}

inline void TXInput_raw::SharedCtor() {
txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vout_ = int64_t{0};
}

TXInput_raw::~TXInput_raw() {
  // @@protoc_insertion_point(destructor:protocol.TXInput.raw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TXInput_raw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TXInput_raw::ArenaDtor(void* object) {
  TXInput_raw* _this = reinterpret_cast< TXInput_raw* >(object);
  (void)_this;
}
void TXInput_raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXInput_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TXInput_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXInput.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmpty();
  pubkey_.ClearToEmpty();
  vout_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXInput_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes txID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXInput_raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXInput.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txID = 1;
  if (!this->_internal_txid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_txid(), target);
  }

  // int64 vout = 2;
  if (this->_internal_vout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_vout(), target);
  }

  // bytes pubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXInput.raw)
  return target;
}

size_t TXInput_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXInput.raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txID = 1;
  if (!this->_internal_txid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // bytes pubKey = 3;
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // int64 vout = 2;
  if (this->_internal_vout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TXInput_raw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TXInput_raw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TXInput_raw::GetClassData() const { return &_class_data_; }

void TXInput_raw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TXInput_raw *>(to)->MergeFrom(
      static_cast<const TXInput_raw &>(from));
}


void TXInput_raw::MergeFrom(const TXInput_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXInput.raw)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txid().empty()) {
    _internal_set_txid(from._internal_txid());
  }
  if (!from._internal_pubkey().empty()) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from._internal_vout() != 0) {
    _internal_set_vout(from._internal_vout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TXInput_raw::CopyFrom(const TXInput_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXInput.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXInput_raw::IsInitialized() const {
  return true;
}

void TXInput_raw::InternalSwap(TXInput_raw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txid_, GetArenaForAllocation(),
      &other->txid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pubkey_, GetArenaForAllocation(),
      &other->pubkey_, other->GetArenaForAllocation()
  );
  swap(vout_, other->vout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXInput_raw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[39]);
}

// ===================================================================

class TXInput::_Internal {
 public:
  static const ::protocol::TXInput_raw& raw_data(const TXInput* msg);
};

const ::protocol::TXInput_raw&
TXInput::_Internal::raw_data(const TXInput* msg) {
  return *msg->raw_data_;
}
TXInput::TXInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TXInput)
}
TXInput::TXInput(const TXInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::TXInput_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TXInput)
}

inline void TXInput::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
raw_data_ = nullptr;
}

TXInput::~TXInput() {
  // @@protoc_insertion_point(destructor:protocol.TXInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TXInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void TXInput::ArenaDtor(void* object) {
  TXInput* _this = reinterpret_cast< TXInput* >(object);
  (void)_this;
}
void TXInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TXInput::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.TXInput.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TXInput.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXInput)
  return target;
}

size_t TXInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .protocol.TXInput.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TXInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TXInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TXInput::GetClassData() const { return &_class_data_; }

void TXInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TXInput *>(to)->MergeFrom(
      static_cast<const TXInput &>(from));
}


void TXInput::MergeFrom(const TXInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXInput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::TXInput_raw::MergeFrom(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TXInput::CopyFrom(const TXInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXInput::IsInitialized() const {
  return true;
}

void TXInput::InternalSwap(TXInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[40]);
}

// ===================================================================

class TXOutputs::_Internal {
 public:
};

TXOutputs::TXOutputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TXOutputs)
}
TXOutputs::TXOutputs(const TXOutputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.TXOutputs)
}

inline void TXOutputs::SharedCtor() {
}

TXOutputs::~TXOutputs() {
  // @@protoc_insertion_point(destructor:protocol.TXOutputs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TXOutputs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TXOutputs::ArenaDtor(void* object) {
  TXOutputs* _this = reinterpret_cast< TXOutputs* >(object);
  (void)_this;
}
void TXOutputs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXOutputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TXOutputs::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXOutputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXOutputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.TXOutput outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXOutputs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXOutputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TXOutput outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXOutputs)
  return target;
}

size_t TXOutputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXOutputs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TXOutput outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TXOutputs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TXOutputs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TXOutputs::GetClassData() const { return &_class_data_; }

void TXOutputs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TXOutputs *>(to)->MergeFrom(
      static_cast<const TXOutputs &>(from));
}


void TXOutputs::MergeFrom(const TXOutputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXOutputs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TXOutputs::CopyFrom(const TXOutputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXOutputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXOutputs::IsInitialized() const {
  return true;
}

void TXOutputs::InternalSwap(TXOutputs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXOutputs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[41]);
}

// ===================================================================

class ResourceReceipt::_Internal {
 public:
};

ResourceReceipt::ResourceReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ResourceReceipt)
}
ResourceReceipt::ResourceReceipt(const ResourceReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&energy_usage_, &from.energy_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:protocol.ResourceReceipt)
}

inline void ResourceReceipt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&energy_usage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
}

ResourceReceipt::~ResourceReceipt() {
  // @@protoc_insertion_point(destructor:protocol.ResourceReceipt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceReceipt::ArenaDtor(void* object) {
  ResourceReceipt* _this = reinterpret_cast< ResourceReceipt* >(object);
  (void)_this;
}
void ResourceReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ResourceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&energy_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 energy_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 energy_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          energy_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 origin_energy_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          origin_energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 energy_usage_total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          energy_usage_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 net_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 net_fee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          net_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.contractResult result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::protocol::Transaction_Result_contractResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ResourceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->_internal_energy_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_energy_usage(), target);
  }

  // int64 energy_fee = 2;
  if (this->_internal_energy_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_energy_fee(), target);
  }

  // int64 origin_energy_usage = 3;
  if (this->_internal_origin_energy_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_origin_energy_usage(), target);
  }

  // int64 energy_usage_total = 4;
  if (this->_internal_energy_usage_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_energy_usage_total(), target);
  }

  // int64 net_usage = 5;
  if (this->_internal_net_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_net_usage(), target);
  }

  // int64 net_fee = 6;
  if (this->_internal_net_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_net_fee(), target);
  }

  // .protocol.Transaction.Result.contractResult result = 7;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ResourceReceipt)
  return target;
}

size_t ResourceReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ResourceReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->_internal_energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energy_usage());
  }

  // int64 energy_fee = 2;
  if (this->_internal_energy_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energy_fee());
  }

  // int64 origin_energy_usage = 3;
  if (this->_internal_origin_energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_origin_energy_usage());
  }

  // int64 energy_usage_total = 4;
  if (this->_internal_energy_usage_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_energy_usage_total());
  }

  // int64 net_usage = 5;
  if (this->_internal_net_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_net_usage());
  }

  // int64 net_fee = 6;
  if (this->_internal_net_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_net_fee());
  }

  // .protocol.Transaction.Result.contractResult result = 7;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceReceipt::GetClassData() const { return &_class_data_; }

void ResourceReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceReceipt *>(to)->MergeFrom(
      static_cast<const ResourceReceipt &>(from));
}


void ResourceReceipt::MergeFrom(const ResourceReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ResourceReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_energy_usage() != 0) {
    _internal_set_energy_usage(from._internal_energy_usage());
  }
  if (from._internal_energy_fee() != 0) {
    _internal_set_energy_fee(from._internal_energy_fee());
  }
  if (from._internal_origin_energy_usage() != 0) {
    _internal_set_origin_energy_usage(from._internal_origin_energy_usage());
  }
  if (from._internal_energy_usage_total() != 0) {
    _internal_set_energy_usage_total(from._internal_energy_usage_total());
  }
  if (from._internal_net_usage() != 0) {
    _internal_set_net_usage(from._internal_net_usage());
  }
  if (from._internal_net_fee() != 0) {
    _internal_set_net_fee(from._internal_net_fee());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceReceipt::CopyFrom(const ResourceReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ResourceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceReceipt::IsInitialized() const {
  return true;
}

void ResourceReceipt::InternalSwap(ResourceReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceReceipt, result_)
      + sizeof(ResourceReceipt::result_)
      - PROTOBUF_FIELD_OFFSET(ResourceReceipt, energy_usage_)>(
          reinterpret_cast<char*>(&energy_usage_),
          reinterpret_cast<char*>(&other->energy_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceReceipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[42]);
}

// ===================================================================

class MarketOrderDetail::_Internal {
 public:
};

MarketOrderDetail::MarketOrderDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketOrderDetail)
}
MarketOrderDetail::MarketOrderDetail(const MarketOrderDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  makerorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_makerorderid().empty()) {
    makerorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_makerorderid(), 
      GetArenaForAllocation());
  }
  takerorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_takerorderid().empty()) {
    takerorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_takerorderid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fillsellquantity_, &from.fillsellquantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillbuyquantity_) -
    reinterpret_cast<char*>(&fillsellquantity_)) + sizeof(fillbuyquantity_));
  // @@protoc_insertion_point(copy_constructor:protocol.MarketOrderDetail)
}

inline void MarketOrderDetail::SharedCtor() {
makerorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
takerorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fillsellquantity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fillbuyquantity_) -
    reinterpret_cast<char*>(&fillsellquantity_)) + sizeof(fillbuyquantity_));
}

MarketOrderDetail::~MarketOrderDetail() {
  // @@protoc_insertion_point(destructor:protocol.MarketOrderDetail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketOrderDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  makerorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketOrderDetail::ArenaDtor(void* object) {
  MarketOrderDetail* _this = reinterpret_cast< MarketOrderDetail* >(object);
  (void)_this;
}
void MarketOrderDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOrderDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketOrderDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketOrderDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  makerorderid_.ClearToEmpty();
  takerorderid_.ClearToEmpty();
  ::memset(&fillsellquantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fillbuyquantity_) -
      reinterpret_cast<char*>(&fillsellquantity_)) + sizeof(fillbuyquantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOrderDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes makerOrderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_makerorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes takerOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_takerorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fillSellQuantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fillsellquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fillBuyQuantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fillbuyquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOrderDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketOrderDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes makerOrderId = 1;
  if (!this->_internal_makerorderid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_makerorderid(), target);
  }

  // bytes takerOrderId = 2;
  if (!this->_internal_takerorderid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_takerorderid(), target);
  }

  // int64 fillSellQuantity = 3;
  if (this->_internal_fillsellquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fillsellquantity(), target);
  }

  // int64 fillBuyQuantity = 4;
  if (this->_internal_fillbuyquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fillbuyquantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketOrderDetail)
  return target;
}

size_t MarketOrderDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketOrderDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes makerOrderId = 1;
  if (!this->_internal_makerorderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_makerorderid());
  }

  // bytes takerOrderId = 2;
  if (!this->_internal_takerorderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_takerorderid());
  }

  // int64 fillSellQuantity = 3;
  if (this->_internal_fillsellquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fillsellquantity());
  }

  // int64 fillBuyQuantity = 4;
  if (this->_internal_fillbuyquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fillbuyquantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketOrderDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketOrderDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketOrderDetail::GetClassData() const { return &_class_data_; }

void MarketOrderDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MarketOrderDetail *>(to)->MergeFrom(
      static_cast<const MarketOrderDetail &>(from));
}


void MarketOrderDetail::MergeFrom(const MarketOrderDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketOrderDetail)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_makerorderid().empty()) {
    _internal_set_makerorderid(from._internal_makerorderid());
  }
  if (!from._internal_takerorderid().empty()) {
    _internal_set_takerorderid(from._internal_takerorderid());
  }
  if (from._internal_fillsellquantity() != 0) {
    _internal_set_fillsellquantity(from._internal_fillsellquantity());
  }
  if (from._internal_fillbuyquantity() != 0) {
    _internal_set_fillbuyquantity(from._internal_fillbuyquantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketOrderDetail::CopyFrom(const MarketOrderDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketOrderDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOrderDetail::IsInitialized() const {
  return true;
}

void MarketOrderDetail::InternalSwap(MarketOrderDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &makerorderid_, GetArenaForAllocation(),
      &other->makerorderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &takerorderid_, GetArenaForAllocation(),
      &other->takerorderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketOrderDetail, fillbuyquantity_)
      + sizeof(MarketOrderDetail::fillbuyquantity_)
      - PROTOBUF_FIELD_OFFSET(MarketOrderDetail, fillsellquantity_)>(
          reinterpret_cast<char*>(&fillsellquantity_),
          reinterpret_cast<char*>(&other->fillsellquantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOrderDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[43]);
}

// ===================================================================

class Transaction_Contract::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& parameter(const Transaction_Contract* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Transaction_Contract::_Internal::parameter(const Transaction_Contract* msg) {
  return *msg->parameter_;
}
void Transaction_Contract::clear_parameter() {
  if (GetArenaForAllocation() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
}
Transaction_Contract::Transaction_Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction.Contract)
}
Transaction_Contract::Transaction_Contract(const Transaction_Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArenaForAllocation());
  }
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractname().empty()) {
    contractname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contractname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parameter()) {
    parameter_ = new PROTOBUF_NAMESPACE_ID::Any(*from.parameter_);
  } else {
    parameter_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(permission_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.Contract)
}

inline void Transaction_Contract::SharedCtor() {
provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_id_) -
    reinterpret_cast<char*>(&parameter_)) + sizeof(permission_id_));
}

Transaction_Contract::~Transaction_Contract() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.Contract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameter_;
}

void Transaction_Contract::ArenaDtor(void* object) {
  Transaction_Contract* _this = reinterpret_cast< Transaction_Contract* >(object);
  (void)_this;
}
void Transaction_Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_.ClearToEmpty();
  contractname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(permission_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Transaction.Contract.ContractType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::Transaction_Contract_ContractType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes provider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ContractName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_contractname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Permission_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any parameter = 2;
  if (this->_internal_has_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parameter(this), target, stream);
  }

  // bytes provider = 3;
  if (!this->_internal_provider().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_provider(), target);
  }

  // bytes ContractName = 4;
  if (!this->_internal_contractname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_contractname(), target);
  }

  // int32 Permission_id = 5;
  if (this->_internal_permission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_permission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.Contract)
  return target;
}

size_t Transaction_Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes provider = 3;
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_provider());
  }

  // bytes ContractName = 4;
  if (!this->_internal_contractname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractname());
  }

  // .google.protobuf.Any parameter = 2;
  if (this->_internal_has_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameter_);
  }

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Permission_id = 5;
  if (this->_internal_permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_permission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Contract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Contract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Contract::GetClassData() const { return &_class_data_; }

void Transaction_Contract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transaction_Contract *>(to)->MergeFrom(
      static_cast<const Transaction_Contract &>(from));
}


void Transaction_Contract::MergeFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_provider().empty()) {
    _internal_set_provider(from._internal_provider());
  }
  if (!from._internal_contractname().empty()) {
    _internal_set_contractname(from._internal_contractname());
  }
  if (from._internal_has_parameter()) {
    _internal_mutable_parameter()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_parameter());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_permission_id() != 0) {
    _internal_set_permission_id(from._internal_permission_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Contract::CopyFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Contract::IsInitialized() const {
  return true;
}

void Transaction_Contract::InternalSwap(Transaction_Contract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_, GetArenaForAllocation(),
      &other->provider_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contractname_, GetArenaForAllocation(),
      &other->contractname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Contract, permission_id_)
      + sizeof(Transaction_Contract::permission_id_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Contract, parameter_)>(
          reinterpret_cast<char*>(&parameter_),
          reinterpret_cast<char*>(&other->parameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Contract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[44]);
}

// ===================================================================

class Transaction_Result::_Internal {
 public:
};

Transaction_Result::Transaction_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orderdetails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction.Result)
}
Transaction_Result::Transaction_Result(const Transaction_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orderdetails_(from.orderdetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetissueid().empty()) {
    assetissueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assetissueid(), 
      GetArenaForAllocation());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&shielded_transaction_fee_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.Result)
}

inline void Transaction_Result::SharedCtor() {
assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shielded_transaction_fee_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
}

Transaction_Result::~Transaction_Result() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assetissueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Result::ArenaDtor(void* object) {
  Transaction_Result* _this = reinterpret_cast< Transaction_Result* >(object);
  (void)_this;
}
void Transaction_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderdetails_.Clear();
  assetissueid_.ClearToEmpty();
  orderid_.ClearToEmpty();
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shielded_transaction_fee_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.code ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ret(static_cast<::protocol::Transaction_Result_code>(val));
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.contractResult contractRet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contractret(static_cast<::protocol::Transaction_Result_contractResult>(val));
        } else goto handle_unusual;
        continue;
      // string assetIssueID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_assetissueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Transaction.Result.assetIssueID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdraw_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          withdraw_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_amount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfreeze_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_received_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          exchange_received_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_inject_another_amount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exchange_inject_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_withdraw_another_amount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          exchange_withdraw_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shielded_transaction_fee = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          shielded_transaction_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes orderId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MarketOrderDetail orderDetails = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_orderdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fee(), target);
  }

  // .protocol.Transaction.Result.code ret = 2;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ret(), target);
  }

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  if (this->_internal_contractret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_contractret(), target);
  }

  // string assetIssueID = 14;
  if (!this->_internal_assetissueid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetissueid().data(), static_cast<int>(this->_internal_assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Transaction.Result.assetIssueID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_assetissueid(), target);
  }

  // int64 withdraw_amount = 15;
  if (this->_internal_withdraw_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_withdraw_amount(), target);
  }

  // int64 unfreeze_amount = 16;
  if (this->_internal_unfreeze_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_unfreeze_amount(), target);
  }

  // int64 exchange_received_amount = 18;
  if (this->_internal_exchange_received_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_exchange_received_amount(), target);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->_internal_exchange_inject_another_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_exchange_inject_another_amount(), target);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->_internal_exchange_withdraw_another_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_exchange_withdraw_another_amount(), target);
  }

  // int64 exchange_id = 21;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_exchange_id(), target);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->_internal_shielded_transaction_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_shielded_transaction_fee(), target);
  }

  // bytes orderId = 25;
  if (!this->_internal_orderid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_orderid(), target);
  }

  // repeated .protocol.MarketOrderDetail orderDetails = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orderdetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_orderdetails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.Result)
  return target;
}

size_t Transaction_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MarketOrderDetail orderDetails = 26;
  total_size += 2UL * this->_internal_orderdetails_size();
  for (const auto& msg : this->orderdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string assetIssueID = 14;
  if (!this->_internal_assetissueid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetissueid());
  }

  // bytes orderId = 25;
  if (!this->_internal_orderid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_orderid());
  }

  // int64 fee = 1;
  if (this->_internal_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // .protocol.Transaction.Result.code ret = 2;
  if (this->_internal_ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ret());
  }

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  if (this->_internal_contractret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contractret());
  }

  // int64 withdraw_amount = 15;
  if (this->_internal_withdraw_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_withdraw_amount());
  }

  // int64 unfreeze_amount = 16;
  if (this->_internal_unfreeze_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unfreeze_amount());
  }

  // int64 exchange_received_amount = 18;
  if (this->_internal_exchange_received_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_received_amount());
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->_internal_exchange_inject_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_inject_another_amount());
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->_internal_exchange_withdraw_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_withdraw_another_amount());
  }

  // int64 exchange_id = 21;
  if (this->_internal_exchange_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_id());
  }

  // int64 shielded_transaction_fee = 22;
  if (this->_internal_shielded_transaction_fee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shielded_transaction_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_Result::GetClassData() const { return &_class_data_; }

void Transaction_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transaction_Result *>(to)->MergeFrom(
      static_cast<const Transaction_Result &>(from));
}


void Transaction_Result::MergeFrom(const Transaction_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orderdetails_.MergeFrom(from.orderdetails_);
  if (!from._internal_assetissueid().empty()) {
    _internal_set_assetissueid(from._internal_assetissueid());
  }
  if (!from._internal_orderid().empty()) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  if (from._internal_contractret() != 0) {
    _internal_set_contractret(from._internal_contractret());
  }
  if (from._internal_withdraw_amount() != 0) {
    _internal_set_withdraw_amount(from._internal_withdraw_amount());
  }
  if (from._internal_unfreeze_amount() != 0) {
    _internal_set_unfreeze_amount(from._internal_unfreeze_amount());
  }
  if (from._internal_exchange_received_amount() != 0) {
    _internal_set_exchange_received_amount(from._internal_exchange_received_amount());
  }
  if (from._internal_exchange_inject_another_amount() != 0) {
    _internal_set_exchange_inject_another_amount(from._internal_exchange_inject_another_amount());
  }
  if (from._internal_exchange_withdraw_another_amount() != 0) {
    _internal_set_exchange_withdraw_another_amount(from._internal_exchange_withdraw_another_amount());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_shielded_transaction_fee() != 0) {
    _internal_set_shielded_transaction_fee(from._internal_shielded_transaction_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_Result::CopyFrom(const Transaction_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Result::IsInitialized() const {
  return true;
}

void Transaction_Result::InternalSwap(Transaction_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orderdetails_.InternalSwap(&other->orderdetails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assetissueid_, GetArenaForAllocation(),
      &other->assetissueid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &orderid_, GetArenaForAllocation(),
      &other->orderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Result, shielded_transaction_fee_)
      + sizeof(Transaction_Result::shielded_transaction_fee_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Result, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[45]);
}

// ===================================================================

class Transaction_raw::_Internal {
 public:
};

Transaction_raw::Transaction_raw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  auths_(arena),
  contract_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction.raw)
}
Transaction_raw::Transaction_raw(const Transaction_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      auths_(from.auths_),
      contract_(from.contract_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_bytes().empty()) {
    ref_block_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_bytes(), 
      GetArenaForAllocation());
  }
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref_block_hash().empty()) {
    ref_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref_block_hash(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  scripts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scripts().empty()) {
    scripts_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scripts(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ref_block_num_, &from.ref_block_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
    reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.raw)
}

inline void Transaction_raw::SharedCtor() {
ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scripts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_block_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
    reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
}

Transaction_raw::~Transaction_raw() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.raw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction_raw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ref_block_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_raw::ArenaDtor(void* object) {
  Transaction_raw* _this = reinterpret_cast< Transaction_raw* >(object);
  (void)_this;
}
void Transaction_raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auths_.Clear();
  contract_.Clear();
  ref_block_bytes_.ClearToEmpty();
  ref_block_hash_.ClearToEmpty();
  data_.ClearToEmpty();
  scripts_.ClearToEmpty();
  ::memset(&ref_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ref_block_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ref_block_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ref_block_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ref_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ref_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ref_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.authority auths = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction.Contract contract = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes scripts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_scripts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          fee_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_block_bytes = 1;
  if (!this->_internal_ref_block_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ref_block_bytes(), target);
  }

  // int64 ref_block_num = 3;
  if (this->_internal_ref_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ref_block_num(), target);
  }

  // bytes ref_block_hash = 4;
  if (!this->_internal_ref_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ref_block_hash(), target);
  }

  // int64 expiration = 8;
  if (this->_internal_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_expiration(), target);
  }

  // repeated .protocol.authority auths = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_auths(i), target, stream);
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_data(), target);
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_contract(i), target, stream);
  }

  // bytes scripts = 12;
  if (!this->_internal_scripts().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_scripts(), target);
  }

  // int64 timestamp = 14;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // int64 fee_limit = 18;
  if (this->_internal_fee_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_fee_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.raw)
  return target;
}

size_t Transaction_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.authority auths = 9;
  total_size += 1UL * this->_internal_auths_size();
  for (const auto& msg : this->auths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  total_size += 1UL * this->_internal_contract_size();
  for (const auto& msg : this->contract_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ref_block_bytes = 1;
  if (!this->_internal_ref_block_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_bytes());
  }

  // bytes ref_block_hash = 4;
  if (!this->_internal_ref_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ref_block_hash());
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes scripts = 12;
  if (!this->_internal_scripts().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scripts());
  }

  // int64 ref_block_num = 3;
  if (this->_internal_ref_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ref_block_num());
  }

  // int64 expiration = 8;
  if (this->_internal_expiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration());
  }

  // int64 timestamp = 14;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 fee_limit = 18;
  if (this->_internal_fee_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction_raw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction_raw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction_raw::GetClassData() const { return &_class_data_; }

void Transaction_raw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transaction_raw *>(to)->MergeFrom(
      static_cast<const Transaction_raw &>(from));
}


void Transaction_raw::MergeFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.raw)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auths_.MergeFrom(from.auths_);
  contract_.MergeFrom(from.contract_);
  if (!from._internal_ref_block_bytes().empty()) {
    _internal_set_ref_block_bytes(from._internal_ref_block_bytes());
  }
  if (!from._internal_ref_block_hash().empty()) {
    _internal_set_ref_block_hash(from._internal_ref_block_hash());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_scripts().empty()) {
    _internal_set_scripts(from._internal_scripts());
  }
  if (from._internal_ref_block_num() != 0) {
    _internal_set_ref_block_num(from._internal_ref_block_num());
  }
  if (from._internal_expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_fee_limit() != 0) {
    _internal_set_fee_limit(from._internal_fee_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction_raw::CopyFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_raw::IsInitialized() const {
  return true;
}

void Transaction_raw::InternalSwap(Transaction_raw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  auths_.InternalSwap(&other->auths_);
  contract_.InternalSwap(&other->contract_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ref_block_bytes_, GetArenaForAllocation(),
      &other->ref_block_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ref_block_hash_, GetArenaForAllocation(),
      &other->ref_block_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scripts_, GetArenaForAllocation(),
      &other->scripts_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_raw, fee_limit_)
      + sizeof(Transaction_raw::fee_limit_)
      - PROTOBUF_FIELD_OFFSET(Transaction_raw, ref_block_num_)>(
          reinterpret_cast<char*>(&ref_block_num_),
          reinterpret_cast<char*>(&other->ref_block_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_raw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[46]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::protocol::Transaction_raw& raw_data(const Transaction* msg);
};

const ::protocol::Transaction_raw&
Transaction::_Internal::raw_data(const Transaction* msg) {
  return *msg->raw_data_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signature_(arena),
  ret_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signature_(from.signature_),
      ret_(from.ret_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::Transaction_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction)
}

inline void Transaction::SharedCtor() {
raw_data_ = nullptr;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:protocol.Transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete raw_data_;
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  ret_.Clear();
  if (GetArenaForAllocation() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Transaction.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signature();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction.Result ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ret(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  // repeated bytes signature = 2;
  for (int i = 0, n = this->_internal_signature_size(); i < n; i++) {
    const auto& s = this->_internal_signature(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .protocol.Transaction.Result ret = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ret_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ret(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signature = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signature_.size());
  for (int i = 0, n = signature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signature_.Get(i));
  }

  // repeated .protocol.Transaction.Result ret = 5;
  total_size += 1UL * this->_internal_ret_size();
  for (const auto& msg : this->ret_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.Transaction.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  ret_.MergeFrom(from.ret_);
  if (from._internal_has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::Transaction_raw::MergeFrom(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signature_.InternalSwap(&other->signature_);
  ret_.InternalSwap(&other->ret_);
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[47]);
}

// ===================================================================

class TransactionInfo_Log::_Internal {
 public:
};

TransactionInfo_Log::TransactionInfo_Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  topics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionInfo.Log)
}
TransactionInfo_Log::TransactionInfo_Log(const TransactionInfo_Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionInfo.Log)
}

inline void TransactionInfo_Log::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionInfo_Log::~TransactionInfo_Log() {
  // @@protoc_insertion_point(destructor:protocol.TransactionInfo.Log)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInfo_Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionInfo_Log::ArenaDtor(void* object) {
  TransactionInfo_Log* _this = reinterpret_cast< TransactionInfo_Log* >(object);
  (void)_this;
}
void TransactionInfo_Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInfo_Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInfo_Log::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionInfo.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInfo_Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInfo_Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionInfo.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionInfo.Log)
  return target;
}

size_t TransactionInfo_Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionInfo.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      topics_.Get(i));
  }

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInfo_Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInfo_Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInfo_Log::GetClassData() const { return &_class_data_; }

void TransactionInfo_Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionInfo_Log *>(to)->MergeFrom(
      static_cast<const TransactionInfo_Log &>(from));
}


void TransactionInfo_Log::MergeFrom(const TransactionInfo_Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionInfo.Log)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInfo_Log::CopyFrom(const TransactionInfo_Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionInfo.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo_Log::IsInitialized() const {
  return true;
}

void TransactionInfo_Log::InternalSwap(TransactionInfo_Log* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfo_Log::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[48]);
}

// ===================================================================

class TransactionInfo::_Internal {
 public:
  static const ::protocol::ResourceReceipt& receipt(const TransactionInfo* msg);
};

const ::protocol::ResourceReceipt&
TransactionInfo::_Internal::receipt(const TransactionInfo* msg) {
  return *msg->receipt_;
}
TransactionInfo::TransactionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  contractresult_(arena),
  log_(arena),
  internal_transactions_(arena),
  orderdetails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionInfo)
}
TransactionInfo::TransactionInfo(const TransactionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contractresult_(from.contractresult_),
      log_(from.log_),
      internal_transactions_(from.internal_transactions_),
      orderdetails_(from.orderdetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_address().empty()) {
    contract_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_address(), 
      GetArenaForAllocation());
  }
  resmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resmessage().empty()) {
    resmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resmessage(), 
      GetArenaForAllocation());
  }
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetissueid().empty()) {
    assetissueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assetissueid(), 
      GetArenaForAllocation());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::protocol::ResourceReceipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&packingfee_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(packingfee_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionInfo)
}

inline void TransactionInfo::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&receipt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packingfee_) -
    reinterpret_cast<char*>(&receipt_)) + sizeof(packingfee_));
}

TransactionInfo::~TransactionInfo() {
  // @@protoc_insertion_point(destructor:protocol.TransactionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetissueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete receipt_;
}

void TransactionInfo::ArenaDtor(void* object) {
  TransactionInfo* _this = reinterpret_cast< TransactionInfo* >(object);
  (void)_this;
}
void TransactionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contractresult_.Clear();
  log_.Clear();
  internal_transactions_.Clear();
  orderdetails_.Clear();
  id_.ClearToEmpty();
  contract_address_.ClearToEmpty();
  resmessage_.ClearToEmpty();
  assetissueid_.ClearToEmpty();
  orderid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packingfee_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(packingfee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTimeStamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes contractResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contractresult();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes contract_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceReceipt receipt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionInfo.Log log = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionInfo.code result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::protocol::TransactionInfo_code>(val));
        } else goto handle_unusual;
        continue;
      // bytes resMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_resmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetIssueID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_assetissueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.TransactionInfo.assetIssueID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdraw_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          withdraw_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_amount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfreeze_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.InternalTransaction internal_transactions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_internal_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 exchange_received_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          exchange_received_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_inject_another_amount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exchange_inject_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_withdraw_another_amount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          exchange_withdraw_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shielded_transaction_fee = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          shielded_transaction_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes orderId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MarketOrderDetail orderDetails = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_orderdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 packingFee = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          packingfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 fee = 2;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_fee(), target);
  }

  // int64 blockNumber = 3;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_blocknumber(), target);
  }

  // int64 blockTimeStamp = 4;
  if (this->_internal_blocktimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_blocktimestamp(), target);
  }

  // repeated bytes contractResult = 5;
  for (int i = 0, n = this->_internal_contractresult_size(); i < n; i++) {
    const auto& s = this->_internal_contractresult(i);
    target = stream->WriteBytes(5, s, target);
  }

  // bytes contract_address = 6;
  if (!this->_internal_contract_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_contract_address(), target);
  }

  // .protocol.ResourceReceipt receipt = 7;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::receipt(this), target, stream);
  }

  // repeated .protocol.TransactionInfo.Log log = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_log(i), target, stream);
  }

  // .protocol.TransactionInfo.code result = 9;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_result(), target);
  }

  // bytes resMessage = 10;
  if (!this->_internal_resmessage().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_resmessage(), target);
  }

  // string assetIssueID = 14;
  if (!this->_internal_assetissueid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetissueid().data(), static_cast<int>(this->_internal_assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionInfo.assetIssueID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_assetissueid(), target);
  }

  // int64 withdraw_amount = 15;
  if (this->_internal_withdraw_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_withdraw_amount(), target);
  }

  // int64 unfreeze_amount = 16;
  if (this->_internal_unfreeze_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_unfreeze_amount(), target);
  }

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_internal_transactions(i), target, stream);
  }

  // int64 exchange_received_amount = 18;
  if (this->_internal_exchange_received_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_exchange_received_amount(), target);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->_internal_exchange_inject_another_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_exchange_inject_another_amount(), target);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->_internal_exchange_withdraw_another_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_exchange_withdraw_another_amount(), target);
  }

  // int64 exchange_id = 21;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_exchange_id(), target);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->_internal_shielded_transaction_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_shielded_transaction_fee(), target);
  }

  // bytes orderId = 25;
  if (!this->_internal_orderid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_orderid(), target);
  }

  // repeated .protocol.MarketOrderDetail orderDetails = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orderdetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_orderdetails(i), target, stream);
  }

  // int64 packingFee = 27;
  if (this->_internal_packingfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_packingfee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionInfo)
  return target;
}

size_t TransactionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes contractResult = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(contractresult_.size());
  for (int i = 0, n = contractresult_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      contractresult_.Get(i));
  }

  // repeated .protocol.TransactionInfo.Log log = 8;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  total_size += 2UL * this->_internal_internal_transactions_size();
  for (const auto& msg : this->internal_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.MarketOrderDetail orderDetails = 26;
  total_size += 2UL * this->_internal_orderdetails_size();
  for (const auto& msg : this->orderdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes contract_address = 6;
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_address());
  }

  // bytes resMessage = 10;
  if (!this->_internal_resmessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_resmessage());
  }

  // string assetIssueID = 14;
  if (!this->_internal_assetissueid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetissueid());
  }

  // bytes orderId = 25;
  if (!this->_internal_orderid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_orderid());
  }

  // .protocol.ResourceReceipt receipt = 7;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // int64 fee = 2;
  if (this->_internal_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 blockNumber = 3;
  if (this->_internal_blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocknumber());
  }

  // int64 blockTimeStamp = 4;
  if (this->_internal_blocktimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocktimestamp());
  }

  // int64 withdraw_amount = 15;
  if (this->_internal_withdraw_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_withdraw_amount());
  }

  // int64 unfreeze_amount = 16;
  if (this->_internal_unfreeze_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unfreeze_amount());
  }

  // int64 exchange_received_amount = 18;
  if (this->_internal_exchange_received_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_received_amount());
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->_internal_exchange_inject_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_inject_another_amount());
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->_internal_exchange_withdraw_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_withdraw_another_amount());
  }

  // int64 exchange_id = 21;
  if (this->_internal_exchange_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exchange_id());
  }

  // int64 shielded_transaction_fee = 22;
  if (this->_internal_shielded_transaction_fee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shielded_transaction_fee());
  }

  // .protocol.TransactionInfo.code result = 9;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int64 packingFee = 27;
  if (this->_internal_packingfee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_packingfee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInfo::GetClassData() const { return &_class_data_; }

void TransactionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionInfo *>(to)->MergeFrom(
      static_cast<const TransactionInfo &>(from));
}


void TransactionInfo::MergeFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contractresult_.MergeFrom(from.contractresult_);
  log_.MergeFrom(from.log_);
  internal_transactions_.MergeFrom(from.internal_transactions_);
  orderdetails_.MergeFrom(from.orderdetails_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_contract_address().empty()) {
    _internal_set_contract_address(from._internal_contract_address());
  }
  if (!from._internal_resmessage().empty()) {
    _internal_set_resmessage(from._internal_resmessage());
  }
  if (!from._internal_assetissueid().empty()) {
    _internal_set_assetissueid(from._internal_assetissueid());
  }
  if (!from._internal_orderid().empty()) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::protocol::ResourceReceipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_blocktimestamp() != 0) {
    _internal_set_blocktimestamp(from._internal_blocktimestamp());
  }
  if (from._internal_withdraw_amount() != 0) {
    _internal_set_withdraw_amount(from._internal_withdraw_amount());
  }
  if (from._internal_unfreeze_amount() != 0) {
    _internal_set_unfreeze_amount(from._internal_unfreeze_amount());
  }
  if (from._internal_exchange_received_amount() != 0) {
    _internal_set_exchange_received_amount(from._internal_exchange_received_amount());
  }
  if (from._internal_exchange_inject_another_amount() != 0) {
    _internal_set_exchange_inject_another_amount(from._internal_exchange_inject_another_amount());
  }
  if (from._internal_exchange_withdraw_another_amount() != 0) {
    _internal_set_exchange_withdraw_another_amount(from._internal_exchange_withdraw_another_amount());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_shielded_transaction_fee() != 0) {
    _internal_set_shielded_transaction_fee(from._internal_shielded_transaction_fee());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_packingfee() != 0) {
    _internal_set_packingfee(from._internal_packingfee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInfo::CopyFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo::IsInitialized() const {
  return true;
}

void TransactionInfo::InternalSwap(TransactionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  contractresult_.InternalSwap(&other->contractresult_);
  log_.InternalSwap(&other->log_);
  internal_transactions_.InternalSwap(&other->internal_transactions_);
  orderdetails_.InternalSwap(&other->orderdetails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_address_, GetArenaForAllocation(),
      &other->contract_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resmessage_, GetArenaForAllocation(),
      &other->resmessage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assetissueid_, GetArenaForAllocation(),
      &other->assetissueid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &orderid_, GetArenaForAllocation(),
      &other->orderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInfo, packingfee_)
      + sizeof(TransactionInfo::packingfee_)
      - PROTOBUF_FIELD_OFFSET(TransactionInfo, receipt_)>(
          reinterpret_cast<char*>(&receipt_),
          reinterpret_cast<char*>(&other->receipt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[49]);
}

// ===================================================================

class TransactionRet::_Internal {
 public:
};

TransactionRet::TransactionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactioninfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionRet)
}
TransactionRet::TransactionRet(const TransactionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactioninfo_(from.transactioninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blocknumber_, &from.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktimestamp_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionRet)
}

inline void TransactionRet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocknumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blocktimestamp_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
}

TransactionRet::~TransactionRet() {
  // @@protoc_insertion_point(destructor:protocol.TransactionRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionRet::ArenaDtor(void* object) {
  TransactionRet* _this = reinterpret_cast< TransactionRet* >(object);
  (void)_this;
}
void TransactionRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactioninfo_.Clear();
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktimestamp_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTimeStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionInfo transactioninfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionRet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  // int64 blockTimeStamp = 2;
  if (this->_internal_blocktimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_blocktimestamp(), target);
  }

  // repeated .protocol.TransactionInfo transactioninfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactioninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transactioninfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionRet)
  return target;
}

size_t TransactionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionRet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionInfo transactioninfo = 3;
  total_size += 1UL * this->_internal_transactioninfo_size();
  for (const auto& msg : this->transactioninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocknumber());
  }

  // int64 blockTimeStamp = 2;
  if (this->_internal_blocktimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocktimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionRet::GetClassData() const { return &_class_data_; }

void TransactionRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionRet *>(to)->MergeFrom(
      static_cast<const TransactionRet &>(from));
}


void TransactionRet::MergeFrom(const TransactionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionRet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactioninfo_.MergeFrom(from.transactioninfo_);
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_blocktimestamp() != 0) {
    _internal_set_blocktimestamp(from._internal_blocktimestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionRet::CopyFrom(const TransactionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRet::IsInitialized() const {
  return true;
}

void TransactionRet::InternalSwap(TransactionRet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactioninfo_.InternalSwap(&other->transactioninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionRet, blocktimestamp_)
      + sizeof(TransactionRet::blocktimestamp_)
      - PROTOBUF_FIELD_OFFSET(TransactionRet, blocknumber_)>(
          reinterpret_cast<char*>(&blocknumber_),
          reinterpret_cast<char*>(&other->blocknumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[50]);
}

// ===================================================================

class Transactions::_Internal {
 public:
};

Transactions::Transactions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Transactions)
}
Transactions::Transactions(const Transactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.Transactions)
}

inline void Transactions::SharedCtor() {
}

Transactions::~Transactions() {
  // @@protoc_insertion_point(destructor:protocol.Transactions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transactions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Transactions::ArenaDtor(void* object) {
  Transactions* _this = reinterpret_cast< Transactions* >(object);
  (void)_this;
}
void Transactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transactions::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transactions)
  return target;
}

size_t Transactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transactions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transactions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transactions::GetClassData() const { return &_class_data_; }

void Transactions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transactions *>(to)->MergeFrom(
      static_cast<const Transactions &>(from));
}


void Transactions::MergeFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transactions::CopyFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transactions::IsInitialized() const {
  return true;
}

void Transactions::InternalSwap(Transactions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transactions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[51]);
}

// ===================================================================

class TransactionSign::_Internal {
 public:
  static const ::protocol::Transaction& transaction(const TransactionSign* msg);
};

const ::protocol::Transaction&
TransactionSign::_Internal::transaction(const TransactionSign* msg) {
  return *msg->transaction_;
}
TransactionSign::TransactionSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionSign)
}
TransactionSign::TransactionSign(const TransactionSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekey(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::protocol::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionSign)
}

inline void TransactionSign::SharedCtor() {
privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_ = nullptr;
}

TransactionSign::~TransactionSign() {
  // @@protoc_insertion_point(destructor:protocol.TransactionSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionSign::ArenaDtor(void* object) {
  TransactionSign* _this = reinterpret_cast< TransactionSign* >(object);
  (void)_this;
}
void TransactionSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionSign::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privatekey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes privateKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bytes privateKey = 2;
  if (!this->_internal_privatekey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_privatekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionSign)
  return target;
}

size_t TransactionSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes privateKey = 2;
  if (!this->_internal_privatekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // .protocol.Transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionSign::GetClassData() const { return &_class_data_; }

void TransactionSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionSign *>(to)->MergeFrom(
      static_cast<const TransactionSign &>(from));
}


void TransactionSign::MergeFrom(const TransactionSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_privatekey().empty()) {
    _internal_set_privatekey(from._internal_privatekey());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::protocol::Transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionSign::CopyFrom(const TransactionSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionSign::IsInitialized() const {
  return true;
}

void TransactionSign::InternalSwap(TransactionSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privatekey_, GetArenaForAllocation(),
      &other->privatekey_, other->GetArenaForAllocation()
  );
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[52]);
}

// ===================================================================

class BlockHeader_raw::_Internal {
 public:
};

BlockHeader_raw::BlockHeader_raw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockHeader.raw)
}
BlockHeader_raw::BlockHeader_raw(const BlockHeader_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txtrieroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txtrieroot().empty()) {
    txtrieroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txtrieroot(), 
      GetArenaForAllocation());
  }
  parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parenthash().empty()) {
    parenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parenthash(), 
      GetArenaForAllocation());
  }
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness_address().empty()) {
    witness_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness_address(), 
      GetArenaForAllocation());
  }
  accountstateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accountstateroot().empty()) {
    accountstateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accountstateroot(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader.raw)
}

inline void BlockHeader_raw::SharedCtor() {
txtrieroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accountstateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

BlockHeader_raw::~BlockHeader_raw() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader.raw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeader_raw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txtrieroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountstateroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader_raw::ArenaDtor(void* object) {
  BlockHeader_raw* _this = reinterpret_cast< BlockHeader_raw* >(object);
  (void)_this;
}
void BlockHeader_raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeader_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txtrieroot_.ClearToEmpty();
  parenthash_.ClearToEmpty();
  witness_address_.ClearToEmpty();
  accountstateroot_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txTrieRoot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txtrieroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parentHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 witness_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witness_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_witness_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes accountStateRoot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_accountstateroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader_raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bytes txTrieRoot = 2;
  if (!this->_internal_txtrieroot().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txtrieroot(), target);
  }

  // bytes parentHash = 3;
  if (!this->_internal_parenthash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_parenthash(), target);
  }

  // int64 number = 7;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_number(), target);
  }

  // int64 witness_id = 8;
  if (this->_internal_witness_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_witness_id(), target);
  }

  // bytes witness_address = 9;
  if (!this->_internal_witness_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_witness_address(), target);
  }

  // int32 version = 10;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_version(), target);
  }

  // bytes accountStateRoot = 11;
  if (!this->_internal_accountstateroot().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_accountstateroot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader.raw)
  return target;
}

size_t BlockHeader_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader.raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txTrieRoot = 2;
  if (!this->_internal_txtrieroot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txtrieroot());
  }

  // bytes parentHash = 3;
  if (!this->_internal_parenthash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parenthash());
  }

  // bytes witness_address = 9;
  if (!this->_internal_witness_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness_address());
  }

  // bytes accountStateRoot = 11;
  if (!this->_internal_accountstateroot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_accountstateroot());
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 number = 7;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // int64 witness_id = 8;
  if (this->_internal_witness_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_witness_id());
  }

  // int32 version = 10;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeader_raw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeader_raw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeader_raw::GetClassData() const { return &_class_data_; }

void BlockHeader_raw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockHeader_raw *>(to)->MergeFrom(
      static_cast<const BlockHeader_raw &>(from));
}


void BlockHeader_raw::MergeFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader.raw)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txtrieroot().empty()) {
    _internal_set_txtrieroot(from._internal_txtrieroot());
  }
  if (!from._internal_parenthash().empty()) {
    _internal_set_parenthash(from._internal_parenthash());
  }
  if (!from._internal_witness_address().empty()) {
    _internal_set_witness_address(from._internal_witness_address());
  }
  if (!from._internal_accountstateroot().empty()) {
    _internal_set_accountstateroot(from._internal_accountstateroot());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_witness_id() != 0) {
    _internal_set_witness_id(from._internal_witness_id());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeader_raw::CopyFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader_raw::IsInitialized() const {
  return true;
}

void BlockHeader_raw::InternalSwap(BlockHeader_raw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txtrieroot_, GetArenaForAllocation(),
      &other->txtrieroot_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parenthash_, GetArenaForAllocation(),
      &other->parenthash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witness_address_, GetArenaForAllocation(),
      &other->witness_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &accountstateroot_, GetArenaForAllocation(),
      &other->accountstateroot_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader_raw, version_)
      + sizeof(BlockHeader_raw::version_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader_raw, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader_raw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[53]);
}

// ===================================================================

class BlockHeader::_Internal {
 public:
  static const ::protocol::BlockHeader_raw& raw_data(const BlockHeader* msg);
};

const ::protocol::BlockHeader_raw&
BlockHeader::_Internal::raw_data(const BlockHeader* msg) {
  return *msg->raw_data_;
}
BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness_signature().empty()) {
    witness_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::BlockHeader_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader)
}

inline void BlockHeader::SharedCtor() {
witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
raw_data_ = nullptr;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witness_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witness_signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.BlockHeader.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witness_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  // bytes witness_signature = 2;
  if (!this->_internal_witness_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witness_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witness_signature = 2;
  if (!this->_internal_witness_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness_signature());
  }

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeader::GetClassData() const { return &_class_data_; }

void BlockHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockHeader *>(to)->MergeFrom(
      static_cast<const BlockHeader &>(from));
}


void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_witness_signature().empty()) {
    _internal_set_witness_signature(from._internal_witness_signature());
  }
  if (from._internal_has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::BlockHeader_raw::MergeFrom(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witness_signature_, GetArenaForAllocation(),
      &other->witness_signature_, other->GetArenaForAllocation()
  );
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[54]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::protocol::BlockHeader& block_header(const Block* msg);
};

const ::protocol::BlockHeader&
Block::_Internal::block_header(const Block* msg) {
  return *msg->block_header_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_header()) {
    block_header_ = new ::protocol::BlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Block)
}

inline void Block::SharedCtor() {
block_header_ = nullptr;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:protocol.Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_header_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.BlockHeader block_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->_internal_has_block_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->_internal_has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Block)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from._internal_has_block_header()) {
    _internal_mutable_block_header()->::protocol::BlockHeader::MergeFrom(from._internal_block_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  swap(block_header_, other->block_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[55]);
}

// ===================================================================

class ChainInventory_BlockId::_Internal {
 public:
};

ChainInventory_BlockId::ChainInventory_BlockId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ChainInventory.BlockId)
}
ChainInventory_BlockId::ChainInventory_BlockId(const ChainInventory_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainInventory.BlockId)
}

inline void ChainInventory_BlockId::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_ = int64_t{0};
}

ChainInventory_BlockId::~ChainInventory_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.ChainInventory.BlockId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChainInventory_BlockId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChainInventory_BlockId::ArenaDtor(void* object) {
  ChainInventory_BlockId* _this = reinterpret_cast< ChainInventory_BlockId* >(object);
  (void)_this;
}
void ChainInventory_BlockId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainInventory_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChainInventory_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainInventory_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainInventory_BlockId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainInventory.BlockId)
  return target;
}

size_t ChainInventory_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainInventory.BlockId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainInventory_BlockId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChainInventory_BlockId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainInventory_BlockId::GetClassData() const { return &_class_data_; }

void ChainInventory_BlockId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChainInventory_BlockId *>(to)->MergeFrom(
      static_cast<const ChainInventory_BlockId &>(from));
}


void ChainInventory_BlockId::MergeFrom(const ChainInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainInventory_BlockId::CopyFrom(const ChainInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainInventory_BlockId::IsInitialized() const {
  return true;
}

void ChainInventory_BlockId::InternalSwap(ChainInventory_BlockId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainInventory_BlockId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[56]);
}

// ===================================================================

class ChainInventory::_Internal {
 public:
};

ChainInventory::ChainInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ChainInventory)
}
ChainInventory::ChainInventory(const ChainInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remain_num_ = from.remain_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainInventory)
}

inline void ChainInventory::SharedCtor() {
remain_num_ = int64_t{0};
}

ChainInventory::~ChainInventory() {
  // @@protoc_insertion_point(destructor:protocol.ChainInventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChainInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChainInventory::ArenaDtor(void* object) {
  ChainInventory* _this = reinterpret_cast< ChainInventory* >(object);
  (void)_this;
}
void ChainInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChainInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChainInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  remain_num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.ChainInventory.BlockId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 remain_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ids(i), target, stream);
  }

  // int64 remain_num = 2;
  if (this->_internal_remain_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_remain_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainInventory)
  return target;
}

size_t ChainInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ChainInventory.BlockId ids = 1;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 remain_num = 2;
  if (this->_internal_remain_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remain_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChainInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainInventory::GetClassData() const { return &_class_data_; }

void ChainInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChainInventory *>(to)->MergeFrom(
      static_cast<const ChainInventory &>(from));
}


void ChainInventory::MergeFrom(const ChainInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainInventory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_remain_num() != 0) {
    _internal_set_remain_num(from._internal_remain_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainInventory::CopyFrom(const ChainInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainInventory::IsInitialized() const {
  return true;
}

void ChainInventory::InternalSwap(ChainInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(remain_num_, other->remain_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[57]);
}

// ===================================================================

class BlockInventory_BlockId::_Internal {
 public:
};

BlockInventory_BlockId::BlockInventory_BlockId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockInventory.BlockId)
}
BlockInventory_BlockId::BlockInventory_BlockId(const BlockInventory_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockInventory.BlockId)
}

inline void BlockInventory_BlockId::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_ = int64_t{0};
}

BlockInventory_BlockId::~BlockInventory_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.BlockInventory.BlockId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockInventory_BlockId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockInventory_BlockId::ArenaDtor(void* object) {
  BlockInventory_BlockId* _this = reinterpret_cast< BlockInventory_BlockId* >(object);
  (void)_this;
}
void BlockInventory_BlockId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockInventory_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockInventory_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInventory_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInventory_BlockId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockInventory.BlockId)
  return target;
}

size_t BlockInventory_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockInventory.BlockId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockInventory_BlockId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockInventory_BlockId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockInventory_BlockId::GetClassData() const { return &_class_data_; }

void BlockInventory_BlockId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockInventory_BlockId *>(to)->MergeFrom(
      static_cast<const BlockInventory_BlockId &>(from));
}


void BlockInventory_BlockId::MergeFrom(const BlockInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockInventory_BlockId::CopyFrom(const BlockInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInventory_BlockId::IsInitialized() const {
  return true;
}

void BlockInventory_BlockId::InternalSwap(BlockInventory_BlockId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInventory_BlockId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[58]);
}

// ===================================================================

class BlockInventory::_Internal {
 public:
};

BlockInventory::BlockInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockInventory)
}
BlockInventory::BlockInventory(const BlockInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockInventory)
}

inline void BlockInventory::SharedCtor() {
type_ = 0;
}

BlockInventory::~BlockInventory() {
  // @@protoc_insertion_point(destructor:protocol.BlockInventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockInventory::ArenaDtor(void* object) {
  BlockInventory* _this = reinterpret_cast< BlockInventory* >(object);
  (void)_this;
}
void BlockInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.BlockInventory.BlockId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.BlockInventory.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::BlockInventory_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.BlockInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ids(i), target, stream);
  }

  // .protocol.BlockInventory.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockInventory)
  return target;
}

size_t BlockInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.BlockInventory.BlockId ids = 1;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.BlockInventory.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockInventory::GetClassData() const { return &_class_data_; }

void BlockInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockInventory *>(to)->MergeFrom(
      static_cast<const BlockInventory &>(from));
}


void BlockInventory::MergeFrom(const BlockInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockInventory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockInventory::CopyFrom(const BlockInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInventory::IsInitialized() const {
  return true;
}

void BlockInventory::InternalSwap(BlockInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[59]);
}

// ===================================================================

class Inventory::_Internal {
 public:
};

Inventory::Inventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Inventory)
}

inline void Inventory::SharedCtor() {
type_ = 0;
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:protocol.Inventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Inventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Inventory::ArenaDtor(void* object) {
  Inventory* _this = reinterpret_cast< Inventory* >(object);
  (void)_this;
}
void Inventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Inventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Inventory.InventoryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::Inventory_InventoryType>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Inventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Inventory.InventoryType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated bytes ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Inventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ids_.Get(i));
  }

  // .protocol.Inventory.InventoryType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Inventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inventory::GetClassData() const { return &_class_data_; }

void Inventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Inventory *>(to)->MergeFrom(
      static_cast<const Inventory &>(from));
}


void Inventory::MergeFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[60]);
}

// ===================================================================

class Items::_Internal {
 public:
};

Items::Items(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocks_(arena),
  block_headers_(arena),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Items)
}
Items::Items(const Items& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_),
      block_headers_(from.block_headers_),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Items)
}

inline void Items::SharedCtor() {
type_ = 0;
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:protocol.Items)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Items::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Items::ArenaDtor(void* object) {
  Items* _this = reinterpret_cast< Items* >(object);
  (void)_this;
}
void Items::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Items::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Items::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Items)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  block_headers_.Clear();
  transactions_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Items::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Items.ItemType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::Items_ItemType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Block blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.BlockHeader block_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Items::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Items)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Items.ItemType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .protocol.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  // repeated .protocol.BlockHeader block_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_block_headers(i), target, stream);
  }

  // repeated .protocol.Transaction transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Items)
  return target;
}

size_t Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Items)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Block blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.BlockHeader block_headers = 3;
  total_size += 1UL * this->_internal_block_headers_size();
  for (const auto& msg : this->block_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.Transaction transactions = 4;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.Items.ItemType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Items::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Items::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Items::GetClassData() const { return &_class_data_; }

void Items::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Items *>(to)->MergeFrom(
      static_cast<const Items &>(from));
}


void Items::MergeFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Items)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  block_headers_.MergeFrom(from.block_headers_);
  transactions_.MergeFrom(from.transactions_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Items::CopyFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {
  return true;
}

void Items::InternalSwap(Items* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  block_headers_.InternalSwap(&other->block_headers_);
  transactions_.InternalSwap(&other->transactions_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Items::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[61]);
}

// ===================================================================

class DynamicProperties::_Internal {
 public:
};

DynamicProperties::DynamicProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DynamicProperties)
}
DynamicProperties::DynamicProperties(const DynamicProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_solidity_block_num_ = from.last_solidity_block_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.DynamicProperties)
}

inline void DynamicProperties::SharedCtor() {
last_solidity_block_num_ = int64_t{0};
}

DynamicProperties::~DynamicProperties() {
  // @@protoc_insertion_point(destructor:protocol.DynamicProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicProperties::ArenaDtor(void* object) {
  DynamicProperties* _this = reinterpret_cast< DynamicProperties* >(object);
  (void)_this;
}
void DynamicProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DynamicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_solidity_block_num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_solidity_block_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_solidity_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DynamicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_solidity_block_num = 1;
  if (this->_internal_last_solidity_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_solidity_block_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DynamicProperties)
  return target;
}

size_t DynamicProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DynamicProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_solidity_block_num = 1;
  if (this->_internal_last_solidity_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_solidity_block_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DynamicProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicProperties::GetClassData() const { return &_class_data_; }

void DynamicProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DynamicProperties *>(to)->MergeFrom(
      static_cast<const DynamicProperties &>(from));
}


void DynamicProperties::MergeFrom(const DynamicProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DynamicProperties)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_solidity_block_num() != 0) {
    _internal_set_last_solidity_block_num(from._internal_last_solidity_block_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicProperties::CopyFrom(const DynamicProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DynamicProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicProperties::IsInitialized() const {
  return true;
}

void DynamicProperties::InternalSwap(DynamicProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(last_solidity_block_num_, other->last_solidity_block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[62]);
}

// ===================================================================

class DisconnectMessage::_Internal {
 public:
};

DisconnectMessage::DisconnectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DisconnectMessage)
}
DisconnectMessage::DisconnectMessage(const DisconnectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:protocol.DisconnectMessage)
}

inline void DisconnectMessage::SharedCtor() {
reason_ = 0;
}

DisconnectMessage::~DisconnectMessage() {
  // @@protoc_insertion_point(destructor:protocol.DisconnectMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DisconnectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisconnectMessage::ArenaDtor(void* object) {
  DisconnectMessage* _this = reinterpret_cast< DisconnectMessage* >(object);
  (void)_this;
}
void DisconnectMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisconnectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DisconnectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DisconnectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.ReasonCode reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::protocol::ReasonCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DisconnectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.ReasonCode reason = 1;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DisconnectMessage)
  return target;
}

size_t DisconnectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DisconnectMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.ReasonCode reason = 1;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DisconnectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectMessage::GetClassData() const { return &_class_data_; }

void DisconnectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DisconnectMessage *>(to)->MergeFrom(
      static_cast<const DisconnectMessage &>(from));
}


void DisconnectMessage::MergeFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectMessage::CopyFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectMessage::IsInitialized() const {
  return true;
}

void DisconnectMessage::InternalSwap(DisconnectMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[63]);
}

// ===================================================================

class HelloMessage_BlockId::_Internal {
 public:
};

HelloMessage_BlockId::HelloMessage_BlockId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.HelloMessage.BlockId)
}
HelloMessage_BlockId::HelloMessage_BlockId(const HelloMessage_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.HelloMessage.BlockId)
}

inline void HelloMessage_BlockId::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_ = int64_t{0};
}

HelloMessage_BlockId::~HelloMessage_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.HelloMessage.BlockId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HelloMessage_BlockId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloMessage_BlockId::ArenaDtor(void* object) {
  HelloMessage_BlockId* _this = reinterpret_cast< HelloMessage_BlockId* >(object);
  (void)_this;
}
void HelloMessage_BlockId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloMessage_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HelloMessage_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.HelloMessage.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloMessage_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloMessage_BlockId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.HelloMessage.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.HelloMessage.BlockId)
  return target;
}

size_t HelloMessage_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.HelloMessage.BlockId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloMessage_BlockId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HelloMessage_BlockId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloMessage_BlockId::GetClassData() const { return &_class_data_; }

void HelloMessage_BlockId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HelloMessage_BlockId *>(to)->MergeFrom(
      static_cast<const HelloMessage_BlockId &>(from));
}


void HelloMessage_BlockId::MergeFrom(const HelloMessage_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.HelloMessage.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloMessage_BlockId::CopyFrom(const HelloMessage_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.HelloMessage.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage_BlockId::IsInitialized() const {
  return true;
}

void HelloMessage_BlockId::InternalSwap(HelloMessage_BlockId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage_BlockId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[64]);
}

// ===================================================================

class HelloMessage::_Internal {
 public:
  static const ::protocol::Endpoint& from(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& genesisblockid(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& solidblockid(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& headblockid(const HelloMessage* msg);
};

const ::protocol::Endpoint&
HelloMessage::_Internal::from(const HelloMessage* msg) {
  return *msg->from_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::genesisblockid(const HelloMessage* msg) {
  return *msg->genesisblockid_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::solidblockid(const HelloMessage* msg) {
  return *msg->solidblockid_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::headblockid(const HelloMessage* msg) {
  return *msg->headblockid_;
}
void HelloMessage::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
HelloMessage::HelloMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_genesisblockid()) {
    genesisblockid_ = new ::protocol::HelloMessage_BlockId(*from.genesisblockid_);
  } else {
    genesisblockid_ = nullptr;
  }
  if (from._internal_has_solidblockid()) {
    solidblockid_ = new ::protocol::HelloMessage_BlockId(*from.solidblockid_);
  } else {
    solidblockid_ = nullptr;
  }
  if (from._internal_has_headblockid()) {
    headblockid_ = new ::protocol::HelloMessage_BlockId(*from.headblockid_);
  } else {
    headblockid_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.HelloMessage)
}

inline void HelloMessage::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&from_)) + sizeof(version_));
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:protocol.HelloMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HelloMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete genesisblockid_;
  if (this != internal_default_instance()) delete solidblockid_;
  if (this != internal_default_instance()) delete headblockid_;
}

void HelloMessage::ArenaDtor(void* object) {
  HelloMessage* _this = reinterpret_cast< HelloMessage* >(object);
  (void)_this;
}
void HelloMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.HelloMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && genesisblockid_ != nullptr) {
    delete genesisblockid_;
  }
  genesisblockid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && solidblockid_ != nullptr) {
    delete solidblockid_;
  }
  solidblockid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && headblockid_ != nullptr) {
    delete headblockid_;
  }
  headblockid_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Endpoint from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId genesisBlockId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesisblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId solidBlockId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId headBlockId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_headblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.HelloMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  if (this->_internal_has_genesisblockid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::genesisblockid(this), target, stream);
  }

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  if (this->_internal_has_solidblockid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::solidblockid(this), target, stream);
  }

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  if (this->_internal_has_headblockid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::headblockid(this), target, stream);
  }

  // bytes address = 7;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_address(), target);
  }

  // bytes signature = 8;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.HelloMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 7;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes signature = 8;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .protocol.Endpoint from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  if (this->_internal_has_genesisblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genesisblockid_);
  }

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  if (this->_internal_has_solidblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidblockid_);
  }

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  if (this->_internal_has_headblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headblockid_);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HelloMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloMessage::GetClassData() const { return &_class_data_; }

void HelloMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HelloMessage *>(to)->MergeFrom(
      static_cast<const HelloMessage &>(from));
}


void HelloMessage::MergeFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::protocol::Endpoint::MergeFrom(from._internal_from());
  }
  if (from._internal_has_genesisblockid()) {
    _internal_mutable_genesisblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from._internal_genesisblockid());
  }
  if (from._internal_has_solidblockid()) {
    _internal_mutable_solidblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from._internal_solidblockid());
  }
  if (from._internal_has_headblockid()) {
    _internal_mutable_headblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from._internal_headblockid());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::InternalSwap(HelloMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HelloMessage, version_)
      + sizeof(HelloMessage::version_)
      - PROTOBUF_FIELD_OFFSET(HelloMessage, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[65]);
}

// ===================================================================

class InternalTransaction_CallValueInfo::_Internal {
 public:
};

InternalTransaction_CallValueInfo::InternalTransaction_CallValueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.InternalTransaction.CallValueInfo)
}
InternalTransaction_CallValueInfo::InternalTransaction_CallValueInfo(const InternalTransaction_CallValueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tokenid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokenid().empty()) {
    tokenid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokenid(), 
      GetArenaForAllocation());
  }
  callvalue_ = from.callvalue_;
  // @@protoc_insertion_point(copy_constructor:protocol.InternalTransaction.CallValueInfo)
}

inline void InternalTransaction_CallValueInfo::SharedCtor() {
tokenid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
callvalue_ = int64_t{0};
}

InternalTransaction_CallValueInfo::~InternalTransaction_CallValueInfo() {
  // @@protoc_insertion_point(destructor:protocol.InternalTransaction.CallValueInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InternalTransaction_CallValueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tokenid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InternalTransaction_CallValueInfo::ArenaDtor(void* object) {
  InternalTransaction_CallValueInfo* _this = reinterpret_cast< InternalTransaction_CallValueInfo* >(object);
  (void)_this;
}
void InternalTransaction_CallValueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalTransaction_CallValueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalTransaction_CallValueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.InternalTransaction.CallValueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokenid_.ClearToEmpty();
  callvalue_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalTransaction_CallValueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 callValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          callvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tokenid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.InternalTransaction.CallValueInfo.tokenId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalTransaction_CallValueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.InternalTransaction.CallValueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 callValue = 1;
  if (this->_internal_callvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_callvalue(), target);
  }

  // string tokenId = 2;
  if (!this->_internal_tokenid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokenid().data(), static_cast<int>(this->_internal_tokenid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.InternalTransaction.CallValueInfo.tokenId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tokenid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.InternalTransaction.CallValueInfo)
  return target;
}

size_t InternalTransaction_CallValueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.InternalTransaction.CallValueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tokenId = 2;
  if (!this->_internal_tokenid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokenid());
  }

  // int64 callValue = 1;
  if (this->_internal_callvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_callvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalTransaction_CallValueInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InternalTransaction_CallValueInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalTransaction_CallValueInfo::GetClassData() const { return &_class_data_; }

void InternalTransaction_CallValueInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InternalTransaction_CallValueInfo *>(to)->MergeFrom(
      static_cast<const InternalTransaction_CallValueInfo &>(from));
}


void InternalTransaction_CallValueInfo::MergeFrom(const InternalTransaction_CallValueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.InternalTransaction.CallValueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tokenid().empty()) {
    _internal_set_tokenid(from._internal_tokenid());
  }
  if (from._internal_callvalue() != 0) {
    _internal_set_callvalue(from._internal_callvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalTransaction_CallValueInfo::CopyFrom(const InternalTransaction_CallValueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.InternalTransaction.CallValueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTransaction_CallValueInfo::IsInitialized() const {
  return true;
}

void InternalTransaction_CallValueInfo::InternalSwap(InternalTransaction_CallValueInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tokenid_, GetArenaForAllocation(),
      &other->tokenid_, other->GetArenaForAllocation()
  );
  swap(callvalue_, other->callvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalTransaction_CallValueInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[66]);
}

// ===================================================================

class InternalTransaction::_Internal {
 public:
};

InternalTransaction::InternalTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  callvalueinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.InternalTransaction)
}
InternalTransaction::InternalTransaction(const InternalTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      callvalueinfo_(from.callvalueinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  caller_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller_address().empty()) {
    caller_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller_address(), 
      GetArenaForAllocation());
  }
  transferto_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transferto_address().empty()) {
    transferto_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transferto_address(), 
      GetArenaForAllocation());
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_note(), 
      GetArenaForAllocation());
  }
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra().empty()) {
    extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra(), 
      GetArenaForAllocation());
  }
  rejected_ = from.rejected_;
  // @@protoc_insertion_point(copy_constructor:protocol.InternalTransaction)
}

inline void InternalTransaction::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caller_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transferto_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rejected_ = false;
}

InternalTransaction::~InternalTransaction() {
  // @@protoc_insertion_point(destructor:protocol.InternalTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InternalTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transferto_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InternalTransaction::ArenaDtor(void* object) {
  InternalTransaction* _this = reinterpret_cast< InternalTransaction* >(object);
  (void)_this;
}
void InternalTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.InternalTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callvalueinfo_.Clear();
  hash_.ClearToEmpty();
  caller_address_.ClearToEmpty();
  transferto_address_.ClearToEmpty();
  note_.ClearToEmpty();
  extra_.ClearToEmpty();
  rejected_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes caller_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transferTo_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transferto_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callvalueinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes note = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rejected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rejected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extra = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.InternalTransaction.extra"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.InternalTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // bytes caller_address = 2;
  if (!this->_internal_caller_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_caller_address(), target);
  }

  // bytes transferTo_address = 3;
  if (!this->_internal_transferto_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transferto_address(), target);
  }

  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_callvalueinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_callvalueinfo(i), target, stream);
  }

  // bytes note = 5;
  if (!this->_internal_note().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_note(), target);
  }

  // bool rejected = 6;
  if (this->_internal_rejected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rejected(), target);
  }

  // string extra = 7;
  if (!this->_internal_extra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.InternalTransaction.extra");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.InternalTransaction)
  return target;
}

size_t InternalTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.InternalTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  total_size += 1UL * this->_internal_callvalueinfo_size();
  for (const auto& msg : this->callvalueinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes caller_address = 2;
  if (!this->_internal_caller_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_caller_address());
  }

  // bytes transferTo_address = 3;
  if (!this->_internal_transferto_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transferto_address());
  }

  // bytes note = 5;
  if (!this->_internal_note().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_note());
  }

  // string extra = 7;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // bool rejected = 6;
  if (this->_internal_rejected() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InternalTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalTransaction::GetClassData() const { return &_class_data_; }

void InternalTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InternalTransaction *>(to)->MergeFrom(
      static_cast<const InternalTransaction &>(from));
}


void InternalTransaction::MergeFrom(const InternalTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.InternalTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callvalueinfo_.MergeFrom(from.callvalueinfo_);
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_caller_address().empty()) {
    _internal_set_caller_address(from._internal_caller_address());
  }
  if (!from._internal_transferto_address().empty()) {
    _internal_set_transferto_address(from._internal_transferto_address());
  }
  if (!from._internal_note().empty()) {
    _internal_set_note(from._internal_note());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (from._internal_rejected() != 0) {
    _internal_set_rejected(from._internal_rejected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalTransaction::CopyFrom(const InternalTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.InternalTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTransaction::IsInitialized() const {
  return true;
}

void InternalTransaction::InternalSwap(InternalTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  callvalueinfo_.InternalSwap(&other->callvalueinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &caller_address_, GetArenaForAllocation(),
      &other->caller_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transferto_address_, GetArenaForAllocation(),
      &other->transferto_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &note_, GetArenaForAllocation(),
      &other->note_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_, GetArenaForAllocation(),
      &other->extra_, other->GetArenaForAllocation()
  );
  swap(rejected_, other->rejected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[67]);
}

// ===================================================================

class DelegatedResourceAccountIndex::_Internal {
 public:
};

DelegatedResourceAccountIndex::DelegatedResourceAccountIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fromaccounts_(arena),
  toaccounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DelegatedResourceAccountIndex)
}
DelegatedResourceAccountIndex::DelegatedResourceAccountIndex(const DelegatedResourceAccountIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fromaccounts_(from.fromaccounts_),
      toaccounts_(from.toaccounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResourceAccountIndex)
}

inline void DelegatedResourceAccountIndex::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegatedResourceAccountIndex::~DelegatedResourceAccountIndex() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResourceAccountIndex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegatedResourceAccountIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegatedResourceAccountIndex::ArenaDtor(void* object) {
  DelegatedResourceAccountIndex* _this = reinterpret_cast< DelegatedResourceAccountIndex* >(object);
  (void)_this;
}
void DelegatedResourceAccountIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedResourceAccountIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegatedResourceAccountIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResourceAccountIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccounts_.Clear();
  toaccounts_.Clear();
  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedResourceAccountIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes fromAccounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fromaccounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes toAccounts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_toaccounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResourceAccountIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResourceAccountIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // repeated bytes fromAccounts = 2;
  for (int i = 0, n = this->_internal_fromaccounts_size(); i < n; i++) {
    const auto& s = this->_internal_fromaccounts(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes toAccounts = 3;
  for (int i = 0, n = this->_internal_toaccounts_size(); i < n; i++) {
    const auto& s = this->_internal_toaccounts(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResourceAccountIndex)
  return target;
}

size_t DelegatedResourceAccountIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResourceAccountIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes fromAccounts = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fromaccounts_.size());
  for (int i = 0, n = fromaccounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      fromaccounts_.Get(i));
  }

  // repeated bytes toAccounts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toaccounts_.size());
  for (int i = 0, n = toaccounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      toaccounts_.Get(i));
  }

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatedResourceAccountIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegatedResourceAccountIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatedResourceAccountIndex::GetClassData() const { return &_class_data_; }

void DelegatedResourceAccountIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DelegatedResourceAccountIndex *>(to)->MergeFrom(
      static_cast<const DelegatedResourceAccountIndex &>(from));
}


void DelegatedResourceAccountIndex::MergeFrom(const DelegatedResourceAccountIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResourceAccountIndex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fromaccounts_.MergeFrom(from.fromaccounts_);
  toaccounts_.MergeFrom(from.toaccounts_);
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatedResourceAccountIndex::CopyFrom(const DelegatedResourceAccountIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResourceAccountIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResourceAccountIndex::IsInitialized() const {
  return true;
}

void DelegatedResourceAccountIndex::InternalSwap(DelegatedResourceAccountIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fromaccounts_.InternalSwap(&other->fromaccounts_);
  toaccounts_.InternalSwap(&other->toaccounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResourceAccountIndex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[68]);
}

// ===================================================================

NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse() {}
NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::MergeFrom(const NodeInfo_CheatWitnessInfoMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[69]);
}

// ===================================================================

class NodeInfo_PeerInfo::_Internal {
 public:
};

NodeInfo_PeerInfo::NodeInfo_PeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo.PeerInfo)
}
NodeInfo_PeerInfo::NodeInfo_PeerInfo(const NodeInfo_PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lastsyncblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastsyncblock().empty()) {
    lastsyncblock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lastsyncblock(), 
      GetArenaForAllocation());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeid().empty()) {
    nodeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodeid(), 
      GetArenaForAllocation());
  }
  headblockwebothhave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headblockwebothhave().empty()) {
    headblockwebothhave_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headblockwebothhave(), 
      GetArenaForAllocation());
  }
  localdisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_localdisconnectreason().empty()) {
    localdisconnectreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localdisconnectreason(), 
      GetArenaForAllocation());
  }
  remotedisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotedisconnectreason().empty()) {
    remotedisconnectreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remotedisconnectreason(), 
      GetArenaForAllocation());
  }
  ::memcpy(&remainnum_, &from.remainnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnecttimes_) -
    reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.PeerInfo)
}

inline void NodeInfo_PeerInfo::SharedCtor() {
lastsyncblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headblockwebothhave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localdisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remotedisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&remainnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnecttimes_) -
    reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
}

NodeInfo_PeerInfo::~NodeInfo_PeerInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.PeerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_PeerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lastsyncblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headblockwebothhave_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localdisconnectreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotedisconnectreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_PeerInfo::ArenaDtor(void* object) {
  NodeInfo_PeerInfo* _this = reinterpret_cast< NodeInfo_PeerInfo* >(object);
  (void)_this;
}
void NodeInfo_PeerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastsyncblock_.ClearToEmpty();
  host_.ClearToEmpty();
  nodeid_.ClearToEmpty();
  headblockwebothhave_.ClearToEmpty();
  localdisconnectreason_.ClearToEmpty();
  remotedisconnectreason_.ClearToEmpty();
  ::memset(&remainnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnecttimes_) -
      reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lastSyncBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lastsyncblock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.lastSyncBlock"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remainNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remainnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastBlockUpdateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastblockupdatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool syncFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syncflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 headBlockTimeWeBothHave = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          headblocktimewebothhave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needSyncFromPeer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          needsyncfrompeer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needSyncFromUs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          needsyncfromus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.nodeId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 connectTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          connecttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avgLatency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          avglatency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 syncToFetchSize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          synctofetchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 syncToFetchSizePeekNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          synctofetchsizepeeknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 syncBlockRequestedSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          syncblockrequestedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unFetchSynNum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfetchsynnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockInPorcSize = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          blockinporcsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headBlockWeBothHave = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_headblockwebothhave();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.headBlockWeBothHave"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isActive = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeCount = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          nodecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inFlow = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          inflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnectTimes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          disconnecttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string localDisconnectReason = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_localdisconnectreason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.localDisconnectReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remoteDisconnectReason = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_remotedisconnectreason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.PeerInfo.remoteDisconnectReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_PeerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lastSyncBlock = 1;
  if (!this->_internal_lastsyncblock().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastsyncblock().data(), static_cast<int>(this->_internal_lastsyncblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.lastSyncBlock");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lastsyncblock(), target);
  }

  // int64 remainNum = 2;
  if (this->_internal_remainnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_remainnum(), target);
  }

  // int64 lastBlockUpdateTime = 3;
  if (this->_internal_lastblockupdatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lastblockupdatetime(), target);
  }

  // bool syncFlag = 4;
  if (this->_internal_syncflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_syncflag(), target);
  }

  // int64 headBlockTimeWeBothHave = 5;
  if (this->_internal_headblocktimewebothhave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_headblocktimewebothhave(), target);
  }

  // bool needSyncFromPeer = 6;
  if (this->_internal_needsyncfrompeer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_needsyncfrompeer(), target);
  }

  // bool needSyncFromUs = 7;
  if (this->_internal_needsyncfromus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_needsyncfromus(), target);
  }

  // string host = 8;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.host");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_host(), target);
  }

  // int32 port = 9;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_port(), target);
  }

  // string nodeId = 10;
  if (!this->_internal_nodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.nodeId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nodeid(), target);
  }

  // int64 connectTime = 11;
  if (this->_internal_connecttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_connecttime(), target);
  }

  // double avgLatency = 12;
  if (!(this->_internal_avglatency() <= 0 && this->_internal_avglatency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_avglatency(), target);
  }

  // int32 syncToFetchSize = 13;
  if (this->_internal_synctofetchsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_synctofetchsize(), target);
  }

  // int64 syncToFetchSizePeekNum = 14;
  if (this->_internal_synctofetchsizepeeknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_synctofetchsizepeeknum(), target);
  }

  // int32 syncBlockRequestedSize = 15;
  if (this->_internal_syncblockrequestedsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_syncblockrequestedsize(), target);
  }

  // int64 unFetchSynNum = 16;
  if (this->_internal_unfetchsynnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_unfetchsynnum(), target);
  }

  // int32 blockInPorcSize = 17;
  if (this->_internal_blockinporcsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_blockinporcsize(), target);
  }

  // string headBlockWeBothHave = 18;
  if (!this->_internal_headblockwebothhave().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headblockwebothhave().data(), static_cast<int>(this->_internal_headblockwebothhave().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.headBlockWeBothHave");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_headblockwebothhave(), target);
  }

  // bool isActive = 19;
  if (this->_internal_isactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_isactive(), target);
  }

  // int32 score = 20;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_score(), target);
  }

  // int32 nodeCount = 21;
  if (this->_internal_nodecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_nodecount(), target);
  }

  // int64 inFlow = 22;
  if (this->_internal_inflow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_inflow(), target);
  }

  // int32 disconnectTimes = 23;
  if (this->_internal_disconnecttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_disconnecttimes(), target);
  }

  // string localDisconnectReason = 24;
  if (!this->_internal_localdisconnectreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localdisconnectreason().data(), static_cast<int>(this->_internal_localdisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.localDisconnectReason");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_localdisconnectreason(), target);
  }

  // string remoteDisconnectReason = 25;
  if (!this->_internal_remotedisconnectreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remotedisconnectreason().data(), static_cast<int>(this->_internal_remotedisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.remoteDisconnectReason");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_remotedisconnectreason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.PeerInfo)
  return target;
}

size_t NodeInfo_PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.PeerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lastSyncBlock = 1;
  if (!this->_internal_lastsyncblock().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastsyncblock());
  }

  // string host = 8;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string nodeId = 10;
  if (!this->_internal_nodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string headBlockWeBothHave = 18;
  if (!this->_internal_headblockwebothhave().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headblockwebothhave());
  }

  // string localDisconnectReason = 24;
  if (!this->_internal_localdisconnectreason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localdisconnectreason());
  }

  // string remoteDisconnectReason = 25;
  if (!this->_internal_remotedisconnectreason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remotedisconnectreason());
  }

  // int64 remainNum = 2;
  if (this->_internal_remainnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remainnum());
  }

  // int64 lastBlockUpdateTime = 3;
  if (this->_internal_lastblockupdatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastblockupdatetime());
  }

  // int64 headBlockTimeWeBothHave = 5;
  if (this->_internal_headblocktimewebothhave() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_headblocktimewebothhave());
  }

  // int32 port = 9;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool syncFlag = 4;
  if (this->_internal_syncflag() != 0) {
    total_size += 1 + 1;
  }

  // bool needSyncFromPeer = 6;
  if (this->_internal_needsyncfrompeer() != 0) {
    total_size += 1 + 1;
  }

  // bool needSyncFromUs = 7;
  if (this->_internal_needsyncfromus() != 0) {
    total_size += 1 + 1;
  }

  // bool isActive = 19;
  if (this->_internal_isactive() != 0) {
    total_size += 2 + 1;
  }

  // int64 connectTime = 11;
  if (this->_internal_connecttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_connecttime());
  }

  // double avgLatency = 12;
  if (!(this->_internal_avglatency() <= 0 && this->_internal_avglatency() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 syncToFetchSizePeekNum = 14;
  if (this->_internal_synctofetchsizepeeknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_synctofetchsizepeeknum());
  }

  // int32 syncToFetchSize = 13;
  if (this->_internal_synctofetchsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_synctofetchsize());
  }

  // int32 syncBlockRequestedSize = 15;
  if (this->_internal_syncblockrequestedsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_syncblockrequestedsize());
  }

  // int64 unFetchSynNum = 16;
  if (this->_internal_unfetchsynnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unfetchsynnum());
  }

  // int32 blockInPorcSize = 17;
  if (this->_internal_blockinporcsize() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockinporcsize());
  }

  // int32 score = 20;
  if (this->_internal_score() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int64 inFlow = 22;
  if (this->_internal_inflow() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inflow());
  }

  // int32 nodeCount = 21;
  if (this->_internal_nodecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodecount());
  }

  // int32 disconnectTimes = 23;
  if (this->_internal_disconnecttimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disconnecttimes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_PeerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_PeerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_PeerInfo::GetClassData() const { return &_class_data_; }

void NodeInfo_PeerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_PeerInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo_PeerInfo &>(from));
}


void NodeInfo_PeerInfo::MergeFrom(const NodeInfo_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lastsyncblock().empty()) {
    _internal_set_lastsyncblock(from._internal_lastsyncblock());
  }
  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from._internal_nodeid().empty()) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (!from._internal_headblockwebothhave().empty()) {
    _internal_set_headblockwebothhave(from._internal_headblockwebothhave());
  }
  if (!from._internal_localdisconnectreason().empty()) {
    _internal_set_localdisconnectreason(from._internal_localdisconnectreason());
  }
  if (!from._internal_remotedisconnectreason().empty()) {
    _internal_set_remotedisconnectreason(from._internal_remotedisconnectreason());
  }
  if (from._internal_remainnum() != 0) {
    _internal_set_remainnum(from._internal_remainnum());
  }
  if (from._internal_lastblockupdatetime() != 0) {
    _internal_set_lastblockupdatetime(from._internal_lastblockupdatetime());
  }
  if (from._internal_headblocktimewebothhave() != 0) {
    _internal_set_headblocktimewebothhave(from._internal_headblocktimewebothhave());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_syncflag() != 0) {
    _internal_set_syncflag(from._internal_syncflag());
  }
  if (from._internal_needsyncfrompeer() != 0) {
    _internal_set_needsyncfrompeer(from._internal_needsyncfrompeer());
  }
  if (from._internal_needsyncfromus() != 0) {
    _internal_set_needsyncfromus(from._internal_needsyncfromus());
  }
  if (from._internal_isactive() != 0) {
    _internal_set_isactive(from._internal_isactive());
  }
  if (from._internal_connecttime() != 0) {
    _internal_set_connecttime(from._internal_connecttime());
  }
  if (!(from._internal_avglatency() <= 0 && from._internal_avglatency() >= 0)) {
    _internal_set_avglatency(from._internal_avglatency());
  }
  if (from._internal_synctofetchsizepeeknum() != 0) {
    _internal_set_synctofetchsizepeeknum(from._internal_synctofetchsizepeeknum());
  }
  if (from._internal_synctofetchsize() != 0) {
    _internal_set_synctofetchsize(from._internal_synctofetchsize());
  }
  if (from._internal_syncblockrequestedsize() != 0) {
    _internal_set_syncblockrequestedsize(from._internal_syncblockrequestedsize());
  }
  if (from._internal_unfetchsynnum() != 0) {
    _internal_set_unfetchsynnum(from._internal_unfetchsynnum());
  }
  if (from._internal_blockinporcsize() != 0) {
    _internal_set_blockinporcsize(from._internal_blockinporcsize());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_inflow() != 0) {
    _internal_set_inflow(from._internal_inflow());
  }
  if (from._internal_nodecount() != 0) {
    _internal_set_nodecount(from._internal_nodecount());
  }
  if (from._internal_disconnecttimes() != 0) {
    _internal_set_disconnecttimes(from._internal_disconnecttimes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_PeerInfo::CopyFrom(const NodeInfo_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_PeerInfo::IsInitialized() const {
  return true;
}

void NodeInfo_PeerInfo::InternalSwap(NodeInfo_PeerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lastsyncblock_, GetArenaForAllocation(),
      &other->lastsyncblock_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, GetArenaForAllocation(),
      &other->host_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodeid_, GetArenaForAllocation(),
      &other->nodeid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headblockwebothhave_, GetArenaForAllocation(),
      &other->headblockwebothhave_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localdisconnectreason_, GetArenaForAllocation(),
      &other->localdisconnectreason_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remotedisconnectreason_, GetArenaForAllocation(),
      &other->remotedisconnectreason_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_PeerInfo, disconnecttimes_)
      + sizeof(NodeInfo_PeerInfo::disconnecttimes_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_PeerInfo, remainnum_)>(
          reinterpret_cast<char*>(&remainnum_),
          reinterpret_cast<char*>(&other->remainnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_PeerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[70]);
}

// ===================================================================

class NodeInfo_ConfigNodeInfo::_Internal {
 public:
};

NodeInfo_ConfigNodeInfo::NodeInfo_ConfigNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo.ConfigNodeInfo)
}
NodeInfo_ConfigNodeInfo::NodeInfo_ConfigNodeInfo(const NodeInfo_ConfigNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codeversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codeversion().empty()) {
    codeversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codeversion(), 
      GetArenaForAllocation());
  }
  p2pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_p2pversion().empty()) {
    p2pversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_p2pversion(), 
      GetArenaForAllocation());
  }
  ::memcpy(&listenport_, &from.listenport_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowadaptiveenergy_) -
    reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.ConfigNodeInfo)
}

inline void NodeInfo_ConfigNodeInfo::SharedCtor() {
codeversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
p2pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&listenport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allowadaptiveenergy_) -
    reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
}

NodeInfo_ConfigNodeInfo::~NodeInfo_ConfigNodeInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.ConfigNodeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_ConfigNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codeversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p2pversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_ConfigNodeInfo::ArenaDtor(void* object) {
  NodeInfo_ConfigNodeInfo* _this = reinterpret_cast< NodeInfo_ConfigNodeInfo* >(object);
  (void)_this;
}
void NodeInfo_ConfigNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_ConfigNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_ConfigNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.ConfigNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codeversion_.ClearToEmpty();
  p2pversion_.ClearToEmpty();
  ::memset(&listenport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowadaptiveenergy_) -
      reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_ConfigNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codeVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_codeversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.ConfigNodeInfo.codeVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string p2pVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_p2pversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.ConfigNodeInfo.p2pVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 listenPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          listenport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool discoverEnable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          discoverenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeNodeSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activenodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passiveNodeSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          passivenodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sendNodeSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sendnodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxConnectCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sameIpMaxConnectCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sameipmaxconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupListenPort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          backuplistenport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupMemberSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          backupmembersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupPriority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          backuppriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dbVersion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          dbversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minParticipationRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          minparticipationrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supportConstant = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          supportconstant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minTimeRatio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          mintimeratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxTimeRatio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          maxtimeratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 allowCreationOfContracts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          allowcreationofcontracts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allowAdaptiveEnergy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          allowadaptiveenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_ConfigNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.ConfigNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string codeVersion = 1;
  if (!this->_internal_codeversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codeversion().data(), static_cast<int>(this->_internal_codeversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.codeVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codeversion(), target);
  }

  // string p2pVersion = 2;
  if (!this->_internal_p2pversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p2pversion().data(), static_cast<int>(this->_internal_p2pversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.p2pVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_p2pversion(), target);
  }

  // int32 listenPort = 3;
  if (this->_internal_listenport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_listenport(), target);
  }

  // bool discoverEnable = 4;
  if (this->_internal_discoverenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_discoverenable(), target);
  }

  // int32 activeNodeSize = 5;
  if (this->_internal_activenodesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activenodesize(), target);
  }

  // int32 passiveNodeSize = 6;
  if (this->_internal_passivenodesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_passivenodesize(), target);
  }

  // int32 sendNodeSize = 7;
  if (this->_internal_sendnodesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sendnodesize(), target);
  }

  // int32 maxConnectCount = 8;
  if (this->_internal_maxconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxconnectcount(), target);
  }

  // int32 sameIpMaxConnectCount = 9;
  if (this->_internal_sameipmaxconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_sameipmaxconnectcount(), target);
  }

  // int32 backupListenPort = 10;
  if (this->_internal_backuplistenport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_backuplistenport(), target);
  }

  // int32 backupMemberSize = 11;
  if (this->_internal_backupmembersize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_backupmembersize(), target);
  }

  // int32 backupPriority = 12;
  if (this->_internal_backuppriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_backuppriority(), target);
  }

  // int32 dbVersion = 13;
  if (this->_internal_dbversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_dbversion(), target);
  }

  // int32 minParticipationRate = 14;
  if (this->_internal_minparticipationrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_minparticipationrate(), target);
  }

  // bool supportConstant = 15;
  if (this->_internal_supportconstant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_supportconstant(), target);
  }

  // double minTimeRatio = 16;
  if (!(this->_internal_mintimeratio() <= 0 && this->_internal_mintimeratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_mintimeratio(), target);
  }

  // double maxTimeRatio = 17;
  if (!(this->_internal_maxtimeratio() <= 0 && this->_internal_maxtimeratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_maxtimeratio(), target);
  }

  // int64 allowCreationOfContracts = 18;
  if (this->_internal_allowcreationofcontracts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_allowcreationofcontracts(), target);
  }

  // int64 allowAdaptiveEnergy = 19;
  if (this->_internal_allowadaptiveenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_allowadaptiveenergy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.ConfigNodeInfo)
  return target;
}

size_t NodeInfo_ConfigNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.ConfigNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codeVersion = 1;
  if (!this->_internal_codeversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codeversion());
  }

  // string p2pVersion = 2;
  if (!this->_internal_p2pversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p2pversion());
  }

  // int32 listenPort = 3;
  if (this->_internal_listenport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_listenport());
  }

  // int32 activeNodeSize = 5;
  if (this->_internal_activenodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activenodesize());
  }

  // int32 passiveNodeSize = 6;
  if (this->_internal_passivenodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passivenodesize());
  }

  // int32 sendNodeSize = 7;
  if (this->_internal_sendnodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sendnodesize());
  }

  // int32 maxConnectCount = 8;
  if (this->_internal_maxconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxconnectcount());
  }

  // int32 sameIpMaxConnectCount = 9;
  if (this->_internal_sameipmaxconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sameipmaxconnectcount());
  }

  // bool discoverEnable = 4;
  if (this->_internal_discoverenable() != 0) {
    total_size += 1 + 1;
  }

  // bool supportConstant = 15;
  if (this->_internal_supportconstant() != 0) {
    total_size += 1 + 1;
  }

  // int32 backupListenPort = 10;
  if (this->_internal_backuplistenport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backuplistenport());
  }

  // int32 backupMemberSize = 11;
  if (this->_internal_backupmembersize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backupmembersize());
  }

  // int32 backupPriority = 12;
  if (this->_internal_backuppriority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backuppriority());
  }

  // int32 dbVersion = 13;
  if (this->_internal_dbversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dbversion());
  }

  // int32 minParticipationRate = 14;
  if (this->_internal_minparticipationrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minparticipationrate());
  }

  // double minTimeRatio = 16;
  if (!(this->_internal_mintimeratio() <= 0 && this->_internal_mintimeratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double maxTimeRatio = 17;
  if (!(this->_internal_maxtimeratio() <= 0 && this->_internal_maxtimeratio() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 allowCreationOfContracts = 18;
  if (this->_internal_allowcreationofcontracts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allowcreationofcontracts());
  }

  // int64 allowAdaptiveEnergy = 19;
  if (this->_internal_allowadaptiveenergy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allowadaptiveenergy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_ConfigNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_ConfigNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_ConfigNodeInfo::GetClassData() const { return &_class_data_; }

void NodeInfo_ConfigNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_ConfigNodeInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo_ConfigNodeInfo &>(from));
}


void NodeInfo_ConfigNodeInfo::MergeFrom(const NodeInfo_ConfigNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.ConfigNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codeversion().empty()) {
    _internal_set_codeversion(from._internal_codeversion());
  }
  if (!from._internal_p2pversion().empty()) {
    _internal_set_p2pversion(from._internal_p2pversion());
  }
  if (from._internal_listenport() != 0) {
    _internal_set_listenport(from._internal_listenport());
  }
  if (from._internal_activenodesize() != 0) {
    _internal_set_activenodesize(from._internal_activenodesize());
  }
  if (from._internal_passivenodesize() != 0) {
    _internal_set_passivenodesize(from._internal_passivenodesize());
  }
  if (from._internal_sendnodesize() != 0) {
    _internal_set_sendnodesize(from._internal_sendnodesize());
  }
  if (from._internal_maxconnectcount() != 0) {
    _internal_set_maxconnectcount(from._internal_maxconnectcount());
  }
  if (from._internal_sameipmaxconnectcount() != 0) {
    _internal_set_sameipmaxconnectcount(from._internal_sameipmaxconnectcount());
  }
  if (from._internal_discoverenable() != 0) {
    _internal_set_discoverenable(from._internal_discoverenable());
  }
  if (from._internal_supportconstant() != 0) {
    _internal_set_supportconstant(from._internal_supportconstant());
  }
  if (from._internal_backuplistenport() != 0) {
    _internal_set_backuplistenport(from._internal_backuplistenport());
  }
  if (from._internal_backupmembersize() != 0) {
    _internal_set_backupmembersize(from._internal_backupmembersize());
  }
  if (from._internal_backuppriority() != 0) {
    _internal_set_backuppriority(from._internal_backuppriority());
  }
  if (from._internal_dbversion() != 0) {
    _internal_set_dbversion(from._internal_dbversion());
  }
  if (from._internal_minparticipationrate() != 0) {
    _internal_set_minparticipationrate(from._internal_minparticipationrate());
  }
  if (!(from._internal_mintimeratio() <= 0 && from._internal_mintimeratio() >= 0)) {
    _internal_set_mintimeratio(from._internal_mintimeratio());
  }
  if (!(from._internal_maxtimeratio() <= 0 && from._internal_maxtimeratio() >= 0)) {
    _internal_set_maxtimeratio(from._internal_maxtimeratio());
  }
  if (from._internal_allowcreationofcontracts() != 0) {
    _internal_set_allowcreationofcontracts(from._internal_allowcreationofcontracts());
  }
  if (from._internal_allowadaptiveenergy() != 0) {
    _internal_set_allowadaptiveenergy(from._internal_allowadaptiveenergy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_ConfigNodeInfo::CopyFrom(const NodeInfo_ConfigNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.ConfigNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_ConfigNodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo_ConfigNodeInfo::InternalSwap(NodeInfo_ConfigNodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codeversion_, GetArenaForAllocation(),
      &other->codeversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &p2pversion_, GetArenaForAllocation(),
      &other->p2pversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_ConfigNodeInfo, allowadaptiveenergy_)
      + sizeof(NodeInfo_ConfigNodeInfo::allowadaptiveenergy_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_ConfigNodeInfo, listenport_)>(
          reinterpret_cast<char*>(&listenport_),
          reinterpret_cast<char*>(&other->listenport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_ConfigNodeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[71]);
}

// ===================================================================

class NodeInfo_MachineInfo_MemoryDescInfo::_Internal {
 public:
};

NodeInfo_MachineInfo_MemoryDescInfo::NodeInfo_MachineInfo_MemoryDescInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
}
NodeInfo_MachineInfo_MemoryDescInfo::NodeInfo_MachineInfo_MemoryDescInfo(const NodeInfo_MachineInfo_MemoryDescInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&initsize_, &from.initsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&userate_) -
    reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
}

inline void NodeInfo_MachineInfo_MemoryDescInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initsize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userate_) -
    reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
}

NodeInfo_MachineInfo_MemoryDescInfo::~NodeInfo_MachineInfo_MemoryDescInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_MachineInfo_MemoryDescInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo_MemoryDescInfo::ArenaDtor(void* object) {
  NodeInfo_MachineInfo_MemoryDescInfo* _this = reinterpret_cast< NodeInfo_MachineInfo_MemoryDescInfo* >(object);
  (void)_this;
}
void NodeInfo_MachineInfo_MemoryDescInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_MachineInfo_MemoryDescInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_MachineInfo_MemoryDescInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&initsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userate_) -
      reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_MachineInfo_MemoryDescInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 initSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          initsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 useSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double useRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          userate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo_MemoryDescInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 initSize = 2;
  if (this->_internal_initsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_initsize(), target);
  }

  // int64 useSize = 3;
  if (this->_internal_usesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_usesize(), target);
  }

  // int64 maxSize = 4;
  if (this->_internal_maxsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_maxsize(), target);
  }

  // double useRate = 5;
  if (!(this->_internal_userate() <= 0 && this->_internal_userate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_userate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  return target;
}

size_t NodeInfo_MachineInfo_MemoryDescInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 initSize = 2;
  if (this->_internal_initsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_initsize());
  }

  // int64 useSize = 3;
  if (this->_internal_usesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_usesize());
  }

  // int64 maxSize = 4;
  if (this->_internal_maxsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxsize());
  }

  // double useRate = 5;
  if (!(this->_internal_userate() <= 0 && this->_internal_userate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_MachineInfo_MemoryDescInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_MachineInfo_MemoryDescInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_MachineInfo_MemoryDescInfo::GetClassData() const { return &_class_data_; }

void NodeInfo_MachineInfo_MemoryDescInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_MachineInfo_MemoryDescInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo_MachineInfo_MemoryDescInfo &>(from));
}


void NodeInfo_MachineInfo_MemoryDescInfo::MergeFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_initsize() != 0) {
    _internal_set_initsize(from._internal_initsize());
  }
  if (from._internal_usesize() != 0) {
    _internal_set_usesize(from._internal_usesize());
  }
  if (from._internal_maxsize() != 0) {
    _internal_set_maxsize(from._internal_maxsize());
  }
  if (!(from._internal_userate() <= 0 && from._internal_userate() >= 0)) {
    _internal_set_userate(from._internal_userate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_MachineInfo_MemoryDescInfo::CopyFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo_MemoryDescInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo_MemoryDescInfo::InternalSwap(NodeInfo_MachineInfo_MemoryDescInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo_MemoryDescInfo, userate_)
      + sizeof(NodeInfo_MachineInfo_MemoryDescInfo::userate_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo_MemoryDescInfo, initsize_)>(
          reinterpret_cast<char*>(&initsize_),
          reinterpret_cast<char*>(&other->initsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo_MemoryDescInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[72]);
}

// ===================================================================

class NodeInfo_MachineInfo_DeadLockThreadInfo::_Internal {
 public:
};

NodeInfo_MachineInfo_DeadLockThreadInfo::NodeInfo_MachineInfo_DeadLockThreadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
}
NodeInfo_MachineInfo_DeadLockThreadInfo::NodeInfo_MachineInfo_DeadLockThreadInfo(const NodeInfo_MachineInfo_DeadLockThreadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  lockname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lockname().empty()) {
    lockname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lockname(), 
      GetArenaForAllocation());
  }
  lockowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lockowner().empty()) {
    lockowner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lockowner(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  stacktrace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stacktrace().empty()) {
    stacktrace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stacktrace(), 
      GetArenaForAllocation());
  }
  ::memcpy(&blocktime_, &from.blocktime_,
    static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
}

inline void NodeInfo_MachineInfo_DeadLockThreadInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lockname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lockowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stacktrace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocktime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
}

NodeInfo_MachineInfo_DeadLockThreadInfo::~NodeInfo_MachineInfo_DeadLockThreadInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_MachineInfo_DeadLockThreadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockowner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stacktrace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::ArenaDtor(void* object) {
  NodeInfo_MachineInfo_DeadLockThreadInfo* _this = reinterpret_cast< NodeInfo_MachineInfo_DeadLockThreadInfo* >(object);
  (void)_this;
}
void NodeInfo_MachineInfo_DeadLockThreadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_MachineInfo_DeadLockThreadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  lockname_.ClearToEmpty();
  lockowner_.ClearToEmpty();
  state_.ClearToEmpty();
  stacktrace_.ClearToEmpty();
  ::memset(&blocktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_MachineInfo_DeadLockThreadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lockName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lockname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lockOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lockowner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blocktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 waitTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          waittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stackTrace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_stacktrace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo_DeadLockThreadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string lockName = 2;
  if (!this->_internal_lockname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lockname().data(), static_cast<int>(this->_internal_lockname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lockname(), target);
  }

  // string lockOwner = 3;
  if (!this->_internal_lockowner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lockowner().data(), static_cast<int>(this->_internal_lockowner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lockowner(), target);
  }

  // string state = 4;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_state(), target);
  }

  // int64 blockTime = 5;
  if (this->_internal_blocktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_blocktime(), target);
  }

  // int64 waitTime = 6;
  if (this->_internal_waittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_waittime(), target);
  }

  // string stackTrace = 7;
  if (!this->_internal_stacktrace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stacktrace().data(), static_cast<int>(this->_internal_stacktrace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_stacktrace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  return target;
}

size_t NodeInfo_MachineInfo_DeadLockThreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string lockName = 2;
  if (!this->_internal_lockname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockname());
  }

  // string lockOwner = 3;
  if (!this->_internal_lockowner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockowner());
  }

  // string state = 4;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string stackTrace = 7;
  if (!this->_internal_stacktrace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stacktrace());
  }

  // int64 blockTime = 5;
  if (this->_internal_blocktime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocktime());
  }

  // int64 waitTime = 6;
  if (this->_internal_waittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_waittime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_MachineInfo_DeadLockThreadInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_MachineInfo_DeadLockThreadInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_MachineInfo_DeadLockThreadInfo::GetClassData() const { return &_class_data_; }

void NodeInfo_MachineInfo_DeadLockThreadInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_MachineInfo_DeadLockThreadInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo_MachineInfo_DeadLockThreadInfo &>(from));
}


void NodeInfo_MachineInfo_DeadLockThreadInfo::MergeFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_lockname().empty()) {
    _internal_set_lockname(from._internal_lockname());
  }
  if (!from._internal_lockowner().empty()) {
    _internal_set_lockowner(from._internal_lockowner());
  }
  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_stacktrace().empty()) {
    _internal_set_stacktrace(from._internal_stacktrace());
  }
  if (from._internal_blocktime() != 0) {
    _internal_set_blocktime(from._internal_blocktime());
  }
  if (from._internal_waittime() != 0) {
    _internal_set_waittime(from._internal_waittime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::CopyFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo_DeadLockThreadInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::InternalSwap(NodeInfo_MachineInfo_DeadLockThreadInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lockname_, GetArenaForAllocation(),
      &other->lockname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lockowner_, GetArenaForAllocation(),
      &other->lockowner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stacktrace_, GetArenaForAllocation(),
      &other->stacktrace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo_DeadLockThreadInfo, waittime_)
      + sizeof(NodeInfo_MachineInfo_DeadLockThreadInfo::waittime_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo_DeadLockThreadInfo, blocktime_)>(
          reinterpret_cast<char*>(&blocktime_),
          reinterpret_cast<char*>(&other->blocktime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo_DeadLockThreadInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[73]);
}

// ===================================================================

class NodeInfo_MachineInfo::_Internal {
 public:
};

NodeInfo_MachineInfo::NodeInfo_MachineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  memorydescinfolist_(arena),
  deadlockthreadinfolist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo.MachineInfo)
}
NodeInfo_MachineInfo::NodeInfo_MachineInfo(const NodeInfo_MachineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      memorydescinfolist_(from.memorydescinfolist_),
      deadlockthreadinfolist_(from.deadlockthreadinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  javaversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_javaversion().empty()) {
    javaversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_javaversion(), 
      GetArenaForAllocation());
  }
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_osname().empty()) {
    osname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_osname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&threadcount_, &from.threadcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpucount_) -
    reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo)
}

inline void NodeInfo_MachineInfo::SharedCtor() {
javaversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&threadcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpucount_) -
    reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
}

NodeInfo_MachineInfo::~NodeInfo_MachineInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_MachineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  javaversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo::ArenaDtor(void* object) {
  NodeInfo_MachineInfo* _this = reinterpret_cast< NodeInfo_MachineInfo* >(object);
  (void)_this;
}
void NodeInfo_MachineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_MachineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_MachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memorydescinfolist_.Clear();
  deadlockthreadinfolist_.Clear();
  javaversion_.ClearToEmpty();
  osname_.ClearToEmpty();
  ::memset(&threadcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpucount_) -
      reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_MachineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 threadCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deadLockThreadCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deadlockthreadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cpuCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cpucount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalMemory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 freeMemory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          freememory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpuRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cpurate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string javaVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_javaversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.javaVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string osName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_osname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.MachineInfo.osName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jvmTotalMemory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          jvmtotalmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jvmFreeMemory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          jvmfreememory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double processCpuRate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          processcpurate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memorydescinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deadlockthreadinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadCount = 1;
  if (this->_internal_threadcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_threadcount(), target);
  }

  // int32 deadLockThreadCount = 2;
  if (this->_internal_deadlockthreadcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deadlockthreadcount(), target);
  }

  // int32 cpuCount = 3;
  if (this->_internal_cpucount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cpucount(), target);
  }

  // int64 totalMemory = 4;
  if (this->_internal_totalmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_totalmemory(), target);
  }

  // int64 freeMemory = 5;
  if (this->_internal_freememory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_freememory(), target);
  }

  // double cpuRate = 6;
  if (!(this->_internal_cpurate() <= 0 && this->_internal_cpurate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cpurate(), target);
  }

  // string javaVersion = 7;
  if (!this->_internal_javaversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_javaversion().data(), static_cast<int>(this->_internal_javaversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.javaVersion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_javaversion(), target);
  }

  // string osName = 8;
  if (!this->_internal_osname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_osname().data(), static_cast<int>(this->_internal_osname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.osName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_osname(), target);
  }

  // int64 jvmTotalMemory = 9;
  if (this->_internal_jvmtotalmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_jvmtotalmemory(), target);
  }

  // int64 jvmFreeMemory = 10;
  if (this->_internal_jvmfreememory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_jvmfreememory(), target);
  }

  // double processCpuRate = 11;
  if (!(this->_internal_processcpurate() <= 0 && this->_internal_processcpurate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_processcpurate(), target);
  }

  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memorydescinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_memorydescinfolist(i), target, stream);
  }

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deadlockthreadinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_deadlockthreadinfolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo)
  return target;
}

size_t NodeInfo_MachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  total_size += 1UL * this->_internal_memorydescinfolist_size();
  for (const auto& msg : this->memorydescinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  total_size += 1UL * this->_internal_deadlockthreadinfolist_size();
  for (const auto& msg : this->deadlockthreadinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string javaVersion = 7;
  if (!this->_internal_javaversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_javaversion());
  }

  // string osName = 8;
  if (!this->_internal_osname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_osname());
  }

  // int32 threadCount = 1;
  if (this->_internal_threadcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threadcount());
  }

  // int32 deadLockThreadCount = 2;
  if (this->_internal_deadlockthreadcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deadlockthreadcount());
  }

  // int64 totalMemory = 4;
  if (this->_internal_totalmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalmemory());
  }

  // int64 freeMemory = 5;
  if (this->_internal_freememory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_freememory());
  }

  // double cpuRate = 6;
  if (!(this->_internal_cpurate() <= 0 && this->_internal_cpurate() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 jvmTotalMemory = 9;
  if (this->_internal_jvmtotalmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_jvmtotalmemory());
  }

  // int64 jvmFreeMemory = 10;
  if (this->_internal_jvmfreememory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_jvmfreememory());
  }

  // double processCpuRate = 11;
  if (!(this->_internal_processcpurate() <= 0 && this->_internal_processcpurate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 cpuCount = 3;
  if (this->_internal_cpucount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cpucount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_MachineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_MachineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_MachineInfo::GetClassData() const { return &_class_data_; }

void NodeInfo_MachineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_MachineInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo_MachineInfo &>(from));
}


void NodeInfo_MachineInfo::MergeFrom(const NodeInfo_MachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memorydescinfolist_.MergeFrom(from.memorydescinfolist_);
  deadlockthreadinfolist_.MergeFrom(from.deadlockthreadinfolist_);
  if (!from._internal_javaversion().empty()) {
    _internal_set_javaversion(from._internal_javaversion());
  }
  if (!from._internal_osname().empty()) {
    _internal_set_osname(from._internal_osname());
  }
  if (from._internal_threadcount() != 0) {
    _internal_set_threadcount(from._internal_threadcount());
  }
  if (from._internal_deadlockthreadcount() != 0) {
    _internal_set_deadlockthreadcount(from._internal_deadlockthreadcount());
  }
  if (from._internal_totalmemory() != 0) {
    _internal_set_totalmemory(from._internal_totalmemory());
  }
  if (from._internal_freememory() != 0) {
    _internal_set_freememory(from._internal_freememory());
  }
  if (!(from._internal_cpurate() <= 0 && from._internal_cpurate() >= 0)) {
    _internal_set_cpurate(from._internal_cpurate());
  }
  if (from._internal_jvmtotalmemory() != 0) {
    _internal_set_jvmtotalmemory(from._internal_jvmtotalmemory());
  }
  if (from._internal_jvmfreememory() != 0) {
    _internal_set_jvmfreememory(from._internal_jvmfreememory());
  }
  if (!(from._internal_processcpurate() <= 0 && from._internal_processcpurate() >= 0)) {
    _internal_set_processcpurate(from._internal_processcpurate());
  }
  if (from._internal_cpucount() != 0) {
    _internal_set_cpucount(from._internal_cpucount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_MachineInfo::CopyFrom(const NodeInfo_MachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo::InternalSwap(NodeInfo_MachineInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  memorydescinfolist_.InternalSwap(&other->memorydescinfolist_);
  deadlockthreadinfolist_.InternalSwap(&other->deadlockthreadinfolist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &javaversion_, GetArenaForAllocation(),
      &other->javaversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &osname_, GetArenaForAllocation(),
      &other->osname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo, cpucount_)
      + sizeof(NodeInfo_MachineInfo::cpucount_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_MachineInfo, threadcount_)>(
          reinterpret_cast<char*>(&threadcount_),
          reinterpret_cast<char*>(&other->threadcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[74]);
}

// ===================================================================

class NodeInfo::_Internal {
 public:
  static const ::protocol::NodeInfo_ConfigNodeInfo& confignodeinfo(const NodeInfo* msg);
  static const ::protocol::NodeInfo_MachineInfo& machineinfo(const NodeInfo* msg);
};

const ::protocol::NodeInfo_ConfigNodeInfo&
NodeInfo::_Internal::confignodeinfo(const NodeInfo* msg) {
  return *msg->confignodeinfo_;
}
const ::protocol::NodeInfo_MachineInfo&
NodeInfo::_Internal::machineinfo(const NodeInfo* msg) {
  return *msg->machineinfo_;
}
NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peerinfolist_(arena),
  cheatwitnessinfomap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peerinfolist_(from.peerinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cheatwitnessinfomap_.MergeFrom(from.cheatwitnessinfomap_);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block().empty()) {
    block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block(), 
      GetArenaForAllocation());
  }
  solidityblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solidityblock().empty()) {
    solidityblock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_solidityblock(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_confignodeinfo()) {
    confignodeinfo_ = new ::protocol::NodeInfo_ConfigNodeInfo(*from.confignodeinfo_);
  } else {
    confignodeinfo_ = nullptr;
  }
  if (from._internal_has_machineinfo()) {
    machineinfo_ = new ::protocol::NodeInfo_MachineInfo(*from.machineinfo_);
  } else {
    machineinfo_ = nullptr;
  }
  ::memcpy(&beginsyncnum_, &from.beginsyncnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&passiveconnectcount_) -
    reinterpret_cast<char*>(&beginsyncnum_)) + sizeof(passiveconnectcount_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo)
}

inline void NodeInfo::SharedCtor() {
block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
solidityblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&confignodeinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&passiveconnectcount_) -
    reinterpret_cast<char*>(&confignodeinfo_)) + sizeof(passiveconnectcount_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solidityblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete confignodeinfo_;
  if (this != internal_default_instance()) delete machineinfo_;
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
  _this->cheatwitnessinfomap_. ~MapField();
}
inline void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &NodeInfo::ArenaDtor);
  }
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerinfolist_.Clear();
  cheatwitnessinfomap_.Clear();
  block_.ClearToEmpty();
  solidityblock_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && confignodeinfo_ != nullptr) {
    delete confignodeinfo_;
  }
  confignodeinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && machineinfo_ != nullptr) {
    delete machineinfo_;
  }
  machineinfo_ = nullptr;
  ::memset(&beginsyncnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passiveconnectcount_) -
      reinterpret_cast<char*>(&beginsyncnum_)) + sizeof(passiveconnectcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 beginSyncNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          beginsyncnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string solidityBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_solidityblock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.NodeInfo.solidityBlock"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentConnectCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currentconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeConnectCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activeconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passiveConnectCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          passiveconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalFlow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peerinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_confignodeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.NodeInfo.MachineInfo machineInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_machineinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> cheatWitnessInfoMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cheatwitnessinfomap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 beginSyncNum = 1;
  if (this->_internal_beginsyncnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_beginsyncnum(), target);
  }

  // string block = 2;
  if (!this->_internal_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block().data(), static_cast<int>(this->_internal_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.block");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block(), target);
  }

  // string solidityBlock = 3;
  if (!this->_internal_solidityblock().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_solidityblock().data(), static_cast<int>(this->_internal_solidityblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.solidityBlock");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_solidityblock(), target);
  }

  // int32 currentConnectCount = 4;
  if (this->_internal_currentconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentconnectcount(), target);
  }

  // int32 activeConnectCount = 5;
  if (this->_internal_activeconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activeconnectcount(), target);
  }

  // int32 passiveConnectCount = 6;
  if (this->_internal_passiveconnectcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_passiveconnectcount(), target);
  }

  // int64 totalFlow = 7;
  if (this->_internal_totalflow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_totalflow(), target);
  }

  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peerinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_peerinfolist(i), target, stream);
  }

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  if (this->_internal_has_confignodeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::confignodeinfo(this), target, stream);
  }

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  if (this->_internal_has_machineinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::machineinfo(this), target, stream);
  }

  // map<string, string> cheatWitnessInfoMap = 11;
  if (!this->_internal_cheatwitnessinfomap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cheatwitnessinfomap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cheatwitnessinfomap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_cheatwitnessinfomap().begin();
          it != this->_internal_cheatwitnessinfomap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_cheatwitnessinfomap().begin();
          it != this->_internal_cheatwitnessinfomap().end(); ++it) {
        target = NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  total_size += 1UL * this->_internal_peerinfolist_size();
  for (const auto& msg : this->peerinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> cheatWitnessInfoMap = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cheatwitnessinfomap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_cheatwitnessinfomap().begin();
      it != this->_internal_cheatwitnessinfomap().end(); ++it) {
    total_size += NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string block = 2;
  if (!this->_internal_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block());
  }

  // string solidityBlock = 3;
  if (!this->_internal_solidityblock().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_solidityblock());
  }

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  if (this->_internal_has_confignodeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confignodeinfo_);
  }

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  if (this->_internal_has_machineinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machineinfo_);
  }

  // int64 beginSyncNum = 1;
  if (this->_internal_beginsyncnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_beginsyncnum());
  }

  // int32 currentConnectCount = 4;
  if (this->_internal_currentconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentconnectcount());
  }

  // int32 activeConnectCount = 5;
  if (this->_internal_activeconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activeconnectcount());
  }

  // int64 totalFlow = 7;
  if (this->_internal_totalflow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalflow());
  }

  // int32 passiveConnectCount = 6;
  if (this->_internal_passiveconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passiveconnectcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_class_data_; }

void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo &>(from));
}


void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerinfolist_.MergeFrom(from.peerinfolist_);
  cheatwitnessinfomap_.MergeFrom(from.cheatwitnessinfomap_);
  if (!from._internal_block().empty()) {
    _internal_set_block(from._internal_block());
  }
  if (!from._internal_solidityblock().empty()) {
    _internal_set_solidityblock(from._internal_solidityblock());
  }
  if (from._internal_has_confignodeinfo()) {
    _internal_mutable_confignodeinfo()->::protocol::NodeInfo_ConfigNodeInfo::MergeFrom(from._internal_confignodeinfo());
  }
  if (from._internal_has_machineinfo()) {
    _internal_mutable_machineinfo()->::protocol::NodeInfo_MachineInfo::MergeFrom(from._internal_machineinfo());
  }
  if (from._internal_beginsyncnum() != 0) {
    _internal_set_beginsyncnum(from._internal_beginsyncnum());
  }
  if (from._internal_currentconnectcount() != 0) {
    _internal_set_currentconnectcount(from._internal_currentconnectcount());
  }
  if (from._internal_activeconnectcount() != 0) {
    _internal_set_activeconnectcount(from._internal_activeconnectcount());
  }
  if (from._internal_totalflow() != 0) {
    _internal_set_totalflow(from._internal_totalflow());
  }
  if (from._internal_passiveconnectcount() != 0) {
    _internal_set_passiveconnectcount(from._internal_passiveconnectcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peerinfolist_.InternalSwap(&other->peerinfolist_);
  cheatwitnessinfomap_.InternalSwap(&other->cheatwitnessinfomap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_, GetArenaForAllocation(),
      &other->block_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &solidityblock_, GetArenaForAllocation(),
      &other->solidityblock_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, passiveconnectcount_)
      + sizeof(NodeInfo::passiveconnectcount_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, confignodeinfo_)>(
          reinterpret_cast<char*>(&confignodeinfo_),
          reinterpret_cast<char*>(&other->confignodeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[75]);
}

// ===================================================================

class MetricsInfo_NodeInfo::_Internal {
 public:
};

MetricsInfo_NodeInfo::MetricsInfo_NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NodeInfo)
}
MetricsInfo_NodeInfo::MetricsInfo_NodeInfo(const MetricsInfo_NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&nodetype_, &from.nodetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&backupstatus_) -
    reinterpret_cast<char*>(&nodetype_)) + sizeof(backupstatus_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NodeInfo)
}

inline void MetricsInfo_NodeInfo::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodetype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&backupstatus_) -
    reinterpret_cast<char*>(&nodetype_)) + sizeof(backupstatus_));
}

MetricsInfo_NodeInfo::~MetricsInfo_NodeInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NodeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricsInfo_NodeInfo::ArenaDtor(void* object) {
  MetricsInfo_NodeInfo* _this = reinterpret_cast< MetricsInfo_NodeInfo* >(object);
  (void)_this;
}
void MetricsInfo_NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  version_.ClearToEmpty();
  ::memset(&nodetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backupstatus_) -
      reinterpret_cast<char*>(&nodetype_)) + sizeof(backupstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.NodeInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.NodeInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          backupstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.NodeInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 nodeType = 2;
  if (this->_internal_nodetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodetype(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.NodeInfo.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // int32 backupStatus = 4;
  if (this->_internal_backupstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_backupstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NodeInfo)
  return target;
}

size_t MetricsInfo_NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int32 nodeType = 2;
  if (this->_internal_nodetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodetype());
  }

  // int32 backupStatus = 4;
  if (this->_internal_backupstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backupstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NodeInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NodeInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NodeInfo &>(from));
}


void MetricsInfo_NodeInfo::MergeFrom(const MetricsInfo_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_nodetype() != 0) {
    _internal_set_nodetype(from._internal_nodetype());
  }
  if (from._internal_backupstatus() != 0) {
    _internal_set_backupstatus(from._internal_backupstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NodeInfo::CopyFrom(const MetricsInfo_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NodeInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NodeInfo::InternalSwap(MetricsInfo_NodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NodeInfo, backupstatus_)
      + sizeof(MetricsInfo_NodeInfo::backupstatus_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NodeInfo, nodetype_)>(
          reinterpret_cast<char*>(&nodetype_),
          reinterpret_cast<char*>(&other->nodetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NodeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[76]);
}

// ===================================================================

class MetricsInfo_BlockChainInfo_Witness::_Internal {
 public:
};

MetricsInfo_BlockChainInfo_Witness::MetricsInfo_BlockChainInfo_Witness(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.BlockChainInfo.Witness)
}
MetricsInfo_BlockChainInfo_Witness::MetricsInfo_BlockChainInfo_Witness(const MetricsInfo_BlockChainInfo_Witness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.BlockChainInfo.Witness)
}

inline void MetricsInfo_BlockChainInfo_Witness::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

MetricsInfo_BlockChainInfo_Witness::~MetricsInfo_BlockChainInfo_Witness() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.BlockChainInfo.Witness)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_BlockChainInfo_Witness::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricsInfo_BlockChainInfo_Witness::ArenaDtor(void* object) {
  MetricsInfo_BlockChainInfo_Witness* _this = reinterpret_cast< MetricsInfo_BlockChainInfo_Witness* >(object);
  (void)_this;
}
void MetricsInfo_BlockChainInfo_Witness::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_BlockChainInfo_Witness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_BlockChainInfo_Witness::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.BlockChainInfo.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_BlockChainInfo_Witness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.BlockChainInfo.Witness.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_BlockChainInfo_Witness::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.BlockChainInfo.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.BlockChainInfo.Witness.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.BlockChainInfo.Witness)
  return target;
}

size_t MetricsInfo_BlockChainInfo_Witness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.BlockChainInfo.Witness)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_BlockChainInfo_Witness::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_BlockChainInfo_Witness::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_BlockChainInfo_Witness::GetClassData() const { return &_class_data_; }

void MetricsInfo_BlockChainInfo_Witness::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_BlockChainInfo_Witness *>(to)->MergeFrom(
      static_cast<const MetricsInfo_BlockChainInfo_Witness &>(from));
}


void MetricsInfo_BlockChainInfo_Witness::MergeFrom(const MetricsInfo_BlockChainInfo_Witness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.BlockChainInfo.Witness)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_BlockChainInfo_Witness::CopyFrom(const MetricsInfo_BlockChainInfo_Witness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.BlockChainInfo.Witness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_BlockChainInfo_Witness::IsInitialized() const {
  return true;
}

void MetricsInfo_BlockChainInfo_Witness::InternalSwap(MetricsInfo_BlockChainInfo_Witness* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_BlockChainInfo_Witness::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[77]);
}

// ===================================================================

class MetricsInfo_BlockChainInfo_DupWitness::_Internal {
 public:
};

MetricsInfo_BlockChainInfo_DupWitness::MetricsInfo_BlockChainInfo_DupWitness(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.BlockChainInfo.DupWitness)
}
MetricsInfo_BlockChainInfo_DupWitness::MetricsInfo_BlockChainInfo_DupWitness(const MetricsInfo_BlockChainInfo_DupWitness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&blocknum_, &from.blocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&blocknum_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.BlockChainInfo.DupWitness)
}

inline void MetricsInfo_BlockChainInfo_DupWitness::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocknum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&blocknum_)) + sizeof(count_));
}

MetricsInfo_BlockChainInfo_DupWitness::~MetricsInfo_BlockChainInfo_DupWitness() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_BlockChainInfo_DupWitness::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricsInfo_BlockChainInfo_DupWitness::ArenaDtor(void* object) {
  MetricsInfo_BlockChainInfo_DupWitness* _this = reinterpret_cast< MetricsInfo_BlockChainInfo_DupWitness* >(object);
  (void)_this;
}
void MetricsInfo_BlockChainInfo_DupWitness::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_BlockChainInfo_DupWitness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_BlockChainInfo_DupWitness::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_BlockChainInfo_DupWitness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.BlockChainInfo.DupWitness.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_BlockChainInfo_DupWitness::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.BlockChainInfo.DupWitness.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 blockNum = 2;
  if (this->_internal_blocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_blocknum(), target);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  return target;
}

size_t MetricsInfo_BlockChainInfo_DupWitness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 blockNum = 2;
  if (this->_internal_blocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocknum());
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_BlockChainInfo_DupWitness::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_BlockChainInfo_DupWitness::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_BlockChainInfo_DupWitness::GetClassData() const { return &_class_data_; }

void MetricsInfo_BlockChainInfo_DupWitness::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_BlockChainInfo_DupWitness *>(to)->MergeFrom(
      static_cast<const MetricsInfo_BlockChainInfo_DupWitness &>(from));
}


void MetricsInfo_BlockChainInfo_DupWitness::MergeFrom(const MetricsInfo_BlockChainInfo_DupWitness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_blocknum() != 0) {
    _internal_set_blocknum(from._internal_blocknum());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_BlockChainInfo_DupWitness::CopyFrom(const MetricsInfo_BlockChainInfo_DupWitness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.BlockChainInfo.DupWitness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_BlockChainInfo_DupWitness::IsInitialized() const {
  return true;
}

void MetricsInfo_BlockChainInfo_DupWitness::InternalSwap(MetricsInfo_BlockChainInfo_DupWitness* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_BlockChainInfo_DupWitness, count_)
      + sizeof(MetricsInfo_BlockChainInfo_DupWitness::count_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_BlockChainInfo_DupWitness, blocknum_)>(
          reinterpret_cast<char*>(&blocknum_),
          reinterpret_cast<char*>(&other->blocknum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_BlockChainInfo_DupWitness::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[78]);
}

// ===================================================================

class MetricsInfo_BlockChainInfo::_Internal {
 public:
  static const ::protocol::MetricsInfo_RateInfo& blockprocesstime(const MetricsInfo_BlockChainInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& tps(const MetricsInfo_BlockChainInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& missedtransaction(const MetricsInfo_BlockChainInfo* msg);
};

const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_BlockChainInfo::_Internal::blockprocesstime(const MetricsInfo_BlockChainInfo* msg) {
  return *msg->blockprocesstime_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_BlockChainInfo::_Internal::tps(const MetricsInfo_BlockChainInfo* msg) {
  return *msg->tps_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_BlockChainInfo::_Internal::missedtransaction(const MetricsInfo_BlockChainInfo* msg) {
  return *msg->missedtransaction_;
}
MetricsInfo_BlockChainInfo::MetricsInfo_BlockChainInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  witnesses_(arena),
  dupwitness_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.BlockChainInfo)
}
MetricsInfo_BlockChainInfo::MetricsInfo_BlockChainInfo(const MetricsInfo_BlockChainInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witnesses_(from.witnesses_),
      dupwitness_(from.dupwitness_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headblockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headblockhash().empty()) {
    headblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headblockhash(), 
      GetArenaForAllocation());
  }
  failprocessblockreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failprocessblockreason().empty()) {
    failprocessblockreason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failprocessblockreason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_blockprocesstime()) {
    blockprocesstime_ = new ::protocol::MetricsInfo_RateInfo(*from.blockprocesstime_);
  } else {
    blockprocesstime_ = nullptr;
  }
  if (from._internal_has_tps()) {
    tps_ = new ::protocol::MetricsInfo_RateInfo(*from.tps_);
  } else {
    tps_ = nullptr;
  }
  if (from._internal_has_missedtransaction()) {
    missedtransaction_ = new ::protocol::MetricsInfo_RateInfo(*from.missedtransaction_);
  } else {
    missedtransaction_ = nullptr;
  }
  ::memcpy(&headblocknum_, &from.headblocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&transactioncachesize_) -
    reinterpret_cast<char*>(&headblocknum_)) + sizeof(transactioncachesize_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.BlockChainInfo)
}

inline void MetricsInfo_BlockChainInfo::SharedCtor() {
headblockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failprocessblockreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blockprocesstime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transactioncachesize_) -
    reinterpret_cast<char*>(&blockprocesstime_)) + sizeof(transactioncachesize_));
}

MetricsInfo_BlockChainInfo::~MetricsInfo_BlockChainInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.BlockChainInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_BlockChainInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  headblockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failprocessblockreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete blockprocesstime_;
  if (this != internal_default_instance()) delete tps_;
  if (this != internal_default_instance()) delete missedtransaction_;
}

void MetricsInfo_BlockChainInfo::ArenaDtor(void* object) {
  MetricsInfo_BlockChainInfo* _this = reinterpret_cast< MetricsInfo_BlockChainInfo* >(object);
  (void)_this;
}
void MetricsInfo_BlockChainInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_BlockChainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_BlockChainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.BlockChainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witnesses_.Clear();
  dupwitness_.Clear();
  headblockhash_.ClearToEmpty();
  failprocessblockreason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && blockprocesstime_ != nullptr) {
    delete blockprocesstime_;
  }
  blockprocesstime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tps_ != nullptr) {
    delete tps_;
  }
  tps_ = nullptr;
  if (GetArenaForAllocation() == nullptr && missedtransaction_ != nullptr) {
    delete missedtransaction_;
  }
  missedtransaction_ = nullptr;
  ::memset(&headblocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transactioncachesize_) -
      reinterpret_cast<char*>(&headblocknum_)) + sizeof(transactioncachesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_BlockChainInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 headBlockNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          headblocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 headBlockTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          headblocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headBlockHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headblockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.BlockChainInfo.headBlockHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 forkCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          forkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 failForkCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          failforkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo blockProcessTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockprocesstime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo tps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transactionCacheSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          transactioncachesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo missedTransaction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_missedtransaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MetricsInfo.BlockChainInfo.Witness witnesses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_witnesses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 failProcessBlockNum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          failprocessblocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failProcessBlockReason = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_failprocessblockreason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.BlockChainInfo.failProcessBlockReason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MetricsInfo.BlockChainInfo.DupWitness dupWitness = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dupwitness(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_BlockChainInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.BlockChainInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 headBlockNum = 1;
  if (this->_internal_headblocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_headblocknum(), target);
  }

  // int64 headBlockTimestamp = 2;
  if (this->_internal_headblocktimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_headblocktimestamp(), target);
  }

  // string headBlockHash = 3;
  if (!this->_internal_headblockhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headblockhash().data(), static_cast<int>(this->_internal_headblockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.BlockChainInfo.headBlockHash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headblockhash(), target);
  }

  // int32 forkCount = 4;
  if (this->_internal_forkcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_forkcount(), target);
  }

  // int32 failForkCount = 5;
  if (this->_internal_failforkcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_failforkcount(), target);
  }

  // .protocol.MetricsInfo.RateInfo blockProcessTime = 6;
  if (this->_internal_has_blockprocesstime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::blockprocesstime(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo tps = 7;
  if (this->_internal_has_tps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tps(this), target, stream);
  }

  // int32 transactionCacheSize = 8;
  if (this->_internal_transactioncachesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_transactioncachesize(), target);
  }

  // .protocol.MetricsInfo.RateInfo missedTransaction = 9;
  if (this->_internal_has_missedtransaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::missedtransaction(this), target, stream);
  }

  // repeated .protocol.MetricsInfo.BlockChainInfo.Witness witnesses = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_witnesses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_witnesses(i), target, stream);
  }

  // int64 failProcessBlockNum = 11;
  if (this->_internal_failprocessblocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_failprocessblocknum(), target);
  }

  // string failProcessBlockReason = 12;
  if (!this->_internal_failprocessblockreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failprocessblockreason().data(), static_cast<int>(this->_internal_failprocessblockreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.BlockChainInfo.failProcessBlockReason");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_failprocessblockreason(), target);
  }

  // repeated .protocol.MetricsInfo.BlockChainInfo.DupWitness dupWitness = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dupwitness_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_dupwitness(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.BlockChainInfo)
  return target;
}

size_t MetricsInfo_BlockChainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.BlockChainInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MetricsInfo.BlockChainInfo.Witness witnesses = 10;
  total_size += 1UL * this->_internal_witnesses_size();
  for (const auto& msg : this->witnesses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.MetricsInfo.BlockChainInfo.DupWitness dupWitness = 13;
  total_size += 1UL * this->_internal_dupwitness_size();
  for (const auto& msg : this->dupwitness_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string headBlockHash = 3;
  if (!this->_internal_headblockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headblockhash());
  }

  // string failProcessBlockReason = 12;
  if (!this->_internal_failprocessblockreason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failprocessblockreason());
  }

  // .protocol.MetricsInfo.RateInfo blockProcessTime = 6;
  if (this->_internal_has_blockprocesstime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockprocesstime_);
  }

  // .protocol.MetricsInfo.RateInfo tps = 7;
  if (this->_internal_has_tps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tps_);
  }

  // .protocol.MetricsInfo.RateInfo missedTransaction = 9;
  if (this->_internal_has_missedtransaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *missedtransaction_);
  }

  // int64 headBlockNum = 1;
  if (this->_internal_headblocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_headblocknum());
  }

  // int64 headBlockTimestamp = 2;
  if (this->_internal_headblocktimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_headblocktimestamp());
  }

  // int32 forkCount = 4;
  if (this->_internal_forkcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forkcount());
  }

  // int32 failForkCount = 5;
  if (this->_internal_failforkcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_failforkcount());
  }

  // int64 failProcessBlockNum = 11;
  if (this->_internal_failprocessblocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_failprocessblocknum());
  }

  // int32 transactionCacheSize = 8;
  if (this->_internal_transactioncachesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transactioncachesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_BlockChainInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_BlockChainInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_BlockChainInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_BlockChainInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_BlockChainInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_BlockChainInfo &>(from));
}


void MetricsInfo_BlockChainInfo::MergeFrom(const MetricsInfo_BlockChainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.BlockChainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witnesses_.MergeFrom(from.witnesses_);
  dupwitness_.MergeFrom(from.dupwitness_);
  if (!from._internal_headblockhash().empty()) {
    _internal_set_headblockhash(from._internal_headblockhash());
  }
  if (!from._internal_failprocessblockreason().empty()) {
    _internal_set_failprocessblockreason(from._internal_failprocessblockreason());
  }
  if (from._internal_has_blockprocesstime()) {
    _internal_mutable_blockprocesstime()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_blockprocesstime());
  }
  if (from._internal_has_tps()) {
    _internal_mutable_tps()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_tps());
  }
  if (from._internal_has_missedtransaction()) {
    _internal_mutable_missedtransaction()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_missedtransaction());
  }
  if (from._internal_headblocknum() != 0) {
    _internal_set_headblocknum(from._internal_headblocknum());
  }
  if (from._internal_headblocktimestamp() != 0) {
    _internal_set_headblocktimestamp(from._internal_headblocktimestamp());
  }
  if (from._internal_forkcount() != 0) {
    _internal_set_forkcount(from._internal_forkcount());
  }
  if (from._internal_failforkcount() != 0) {
    _internal_set_failforkcount(from._internal_failforkcount());
  }
  if (from._internal_failprocessblocknum() != 0) {
    _internal_set_failprocessblocknum(from._internal_failprocessblocknum());
  }
  if (from._internal_transactioncachesize() != 0) {
    _internal_set_transactioncachesize(from._internal_transactioncachesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_BlockChainInfo::CopyFrom(const MetricsInfo_BlockChainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.BlockChainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_BlockChainInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_BlockChainInfo::InternalSwap(MetricsInfo_BlockChainInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witnesses_.InternalSwap(&other->witnesses_);
  dupwitness_.InternalSwap(&other->dupwitness_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headblockhash_, GetArenaForAllocation(),
      &other->headblockhash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &failprocessblockreason_, GetArenaForAllocation(),
      &other->failprocessblockreason_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_BlockChainInfo, transactioncachesize_)
      + sizeof(MetricsInfo_BlockChainInfo::transactioncachesize_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_BlockChainInfo, blockprocesstime_)>(
          reinterpret_cast<char*>(&blockprocesstime_),
          reinterpret_cast<char*>(&other->blockprocesstime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_BlockChainInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[79]);
}

// ===================================================================

class MetricsInfo_RateInfo::_Internal {
 public:
};

MetricsInfo_RateInfo::MetricsInfo_RateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.RateInfo)
}
MetricsInfo_RateInfo::MetricsInfo_RateInfo(const MetricsInfo_RateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&fifteenminuterate_) -
    reinterpret_cast<char*>(&count_)) + sizeof(fifteenminuterate_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.RateInfo)
}

inline void MetricsInfo_RateInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fifteenminuterate_) -
    reinterpret_cast<char*>(&count_)) + sizeof(fifteenminuterate_));
}

MetricsInfo_RateInfo::~MetricsInfo_RateInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.RateInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_RateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsInfo_RateInfo::ArenaDtor(void* object) {
  MetricsInfo_RateInfo* _this = reinterpret_cast< MetricsInfo_RateInfo* >(object);
  (void)_this;
}
void MetricsInfo_RateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_RateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_RateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.RateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fifteenminuterate_) -
      reinterpret_cast<char*>(&count_)) + sizeof(fifteenminuterate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_RateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double meanRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          meanrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double oneMinuteRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          oneminuterate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fiveMinuteRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fiveminuterate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fifteenMinuteRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          fifteenminuterate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_RateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.RateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  // double meanRate = 2;
  if (!(this->_internal_meanrate() <= 0 && this->_internal_meanrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_meanrate(), target);
  }

  // double oneMinuteRate = 3;
  if (!(this->_internal_oneminuterate() <= 0 && this->_internal_oneminuterate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_oneminuterate(), target);
  }

  // double fiveMinuteRate = 4;
  if (!(this->_internal_fiveminuterate() <= 0 && this->_internal_fiveminuterate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fiveminuterate(), target);
  }

  // double fifteenMinuteRate = 5;
  if (!(this->_internal_fifteenminuterate() <= 0 && this->_internal_fifteenminuterate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fifteenminuterate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.RateInfo)
  return target;
}

size_t MetricsInfo_RateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.RateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // double meanRate = 2;
  if (!(this->_internal_meanrate() <= 0 && this->_internal_meanrate() >= 0)) {
    total_size += 1 + 8;
  }

  // double oneMinuteRate = 3;
  if (!(this->_internal_oneminuterate() <= 0 && this->_internal_oneminuterate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fiveMinuteRate = 4;
  if (!(this->_internal_fiveminuterate() <= 0 && this->_internal_fiveminuterate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fifteenMinuteRate = 5;
  if (!(this->_internal_fifteenminuterate() <= 0 && this->_internal_fifteenminuterate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_RateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_RateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_RateInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_RateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_RateInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_RateInfo &>(from));
}


void MetricsInfo_RateInfo::MergeFrom(const MetricsInfo_RateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.RateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from._internal_meanrate() <= 0 && from._internal_meanrate() >= 0)) {
    _internal_set_meanrate(from._internal_meanrate());
  }
  if (!(from._internal_oneminuterate() <= 0 && from._internal_oneminuterate() >= 0)) {
    _internal_set_oneminuterate(from._internal_oneminuterate());
  }
  if (!(from._internal_fiveminuterate() <= 0 && from._internal_fiveminuterate() >= 0)) {
    _internal_set_fiveminuterate(from._internal_fiveminuterate());
  }
  if (!(from._internal_fifteenminuterate() <= 0 && from._internal_fifteenminuterate() >= 0)) {
    _internal_set_fifteenminuterate(from._internal_fifteenminuterate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_RateInfo::CopyFrom(const MetricsInfo_RateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.RateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_RateInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_RateInfo::InternalSwap(MetricsInfo_RateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_RateInfo, fifteenminuterate_)
      + sizeof(MetricsInfo_RateInfo::fifteenminuterate_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_RateInfo, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_RateInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[80]);
}

// ===================================================================

class MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_Internal {
 public:
  static const ::protocol::MetricsInfo_RateInfo& qps(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& failqps(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& outtraffic(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg);
};

const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_Internal::qps(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg) {
  return *msg->qps_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_Internal::failqps(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg) {
  return *msg->failqps_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_Internal::outtraffic(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* msg) {
  return *msg->outtraffic_;
}
MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
}
MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_qps()) {
    qps_ = new ::protocol::MetricsInfo_RateInfo(*from.qps_);
  } else {
    qps_ = nullptr;
  }
  if (from._internal_has_failqps()) {
    failqps_ = new ::protocol::MetricsInfo_RateInfo(*from.failqps_);
  } else {
    failqps_ = nullptr;
  }
  if (from._internal_has_outtraffic()) {
    outtraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.outtraffic_);
  } else {
    outtraffic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
}

inline void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&qps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outtraffic_) -
    reinterpret_cast<char*>(&qps_)) + sizeof(outtraffic_));
}

MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::~MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete qps_;
  if (this != internal_default_instance()) delete failqps_;
  if (this != internal_default_instance()) delete outtraffic_;
}

void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* _this = reinterpret_cast< MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && qps_ != nullptr) {
    delete qps_;
  }
  qps_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failqps_ != nullptr) {
    delete failqps_;
  }
  failqps_ = nullptr;
  if (GetArenaForAllocation() == nullptr && outtraffic_ != nullptr) {
    delete outtraffic_;
  }
  outtraffic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo qps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_qps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo failQps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failqps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo outTraffic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_outtraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .protocol.MetricsInfo.RateInfo qps = 2;
  if (this->_internal_has_qps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::qps(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo failQps = 3;
  if (this->_internal_has_failqps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failqps(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo outTraffic = 4;
  if (this->_internal_has_outtraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::outtraffic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  return target;
}

size_t MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protocol.MetricsInfo.RateInfo qps = 2;
  if (this->_internal_has_qps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qps_);
  }

  // .protocol.MetricsInfo.RateInfo failQps = 3;
  if (this->_internal_has_failqps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failqps_);
  }

  // .protocol.MetricsInfo.RateInfo outTraffic = 4;
  if (this->_internal_has_outtraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outtraffic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo &>(from));
}


void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::MergeFrom(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_qps()) {
    _internal_mutable_qps()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_qps());
  }
  if (from._internal_has_failqps()) {
    _internal_mutable_failqps()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_failqps());
  }
  if (from._internal_has_outtraffic()) {
    _internal_mutable_outtraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_outtraffic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::CopyFrom(const MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::InternalSwap(MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, outtraffic_)
      + sizeof(MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::outtraffic_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo, qps_)>(
          reinterpret_cast<char*>(&qps_),
          reinterpret_cast<char*>(&other->qps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[81]);
}

// ===================================================================

class MetricsInfo_NetInfo_ApiInfo::_Internal {
 public:
  static const ::protocol::MetricsInfo_RateInfo& qps(const MetricsInfo_NetInfo_ApiInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& failqps(const MetricsInfo_NetInfo_ApiInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& outtraffic(const MetricsInfo_NetInfo_ApiInfo* msg);
};

const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo::_Internal::qps(const MetricsInfo_NetInfo_ApiInfo* msg) {
  return *msg->qps_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo::_Internal::failqps(const MetricsInfo_NetInfo_ApiInfo* msg) {
  return *msg->failqps_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo_ApiInfo::_Internal::outtraffic(const MetricsInfo_NetInfo_ApiInfo* msg) {
  return *msg->outtraffic_;
}
MetricsInfo_NetInfo_ApiInfo::MetricsInfo_NetInfo_ApiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detail_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo.ApiInfo)
}
MetricsInfo_NetInfo_ApiInfo::MetricsInfo_NetInfo_ApiInfo(const MetricsInfo_NetInfo_ApiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qps()) {
    qps_ = new ::protocol::MetricsInfo_RateInfo(*from.qps_);
  } else {
    qps_ = nullptr;
  }
  if (from._internal_has_failqps()) {
    failqps_ = new ::protocol::MetricsInfo_RateInfo(*from.failqps_);
  } else {
    failqps_ = nullptr;
  }
  if (from._internal_has_outtraffic()) {
    outtraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.outtraffic_);
  } else {
    outtraffic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo.ApiInfo)
}

inline void MetricsInfo_NetInfo_ApiInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&qps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outtraffic_) -
    reinterpret_cast<char*>(&qps_)) + sizeof(outtraffic_));
}

MetricsInfo_NetInfo_ApiInfo::~MetricsInfo_NetInfo_ApiInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo.ApiInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo_ApiInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete qps_;
  if (this != internal_default_instance()) delete failqps_;
  if (this != internal_default_instance()) delete outtraffic_;
}

void MetricsInfo_NetInfo_ApiInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo_ApiInfo* _this = reinterpret_cast< MetricsInfo_NetInfo_ApiInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo_ApiInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo_ApiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo_ApiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo.ApiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  if (GetArenaForAllocation() == nullptr && qps_ != nullptr) {
    delete qps_;
  }
  qps_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failqps_ != nullptr) {
    delete failqps_;
  }
  failqps_ = nullptr;
  if (GetArenaForAllocation() == nullptr && outtraffic_ != nullptr) {
    delete outtraffic_;
  }
  outtraffic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo_ApiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.MetricsInfo.RateInfo qps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo failQps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_failqps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo outTraffic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outtraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo detail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo_ApiInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo.ApiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.MetricsInfo.RateInfo qps = 1;
  if (this->_internal_has_qps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::qps(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo failQps = 2;
  if (this->_internal_has_failqps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::failqps(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo outTraffic = 3;
  if (this->_internal_has_outtraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::outtraffic(this), target, stream);
  }

  // repeated .protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo detail = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo.ApiInfo)
  return target;
}

size_t MetricsInfo_NetInfo_ApiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo.ApiInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo detail = 4;
  total_size += 1UL * this->_internal_detail_size();
  for (const auto& msg : this->detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.MetricsInfo.RateInfo qps = 1;
  if (this->_internal_has_qps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qps_);
  }

  // .protocol.MetricsInfo.RateInfo failQps = 2;
  if (this->_internal_has_failqps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failqps_);
  }

  // .protocol.MetricsInfo.RateInfo outTraffic = 3;
  if (this->_internal_has_outtraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outtraffic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo_ApiInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo_ApiInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo_ApiInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo_ApiInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo_ApiInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo_ApiInfo &>(from));
}


void MetricsInfo_NetInfo_ApiInfo::MergeFrom(const MetricsInfo_NetInfo_ApiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo.ApiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from._internal_has_qps()) {
    _internal_mutable_qps()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_qps());
  }
  if (from._internal_has_failqps()) {
    _internal_mutable_failqps()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_failqps());
  }
  if (from._internal_has_outtraffic()) {
    _internal_mutable_outtraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_outtraffic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo_ApiInfo::CopyFrom(const MetricsInfo_NetInfo_ApiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo.ApiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo_ApiInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo_ApiInfo::InternalSwap(MetricsInfo_NetInfo_ApiInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_ApiInfo, outtraffic_)
      + sizeof(MetricsInfo_NetInfo_ApiInfo::outtraffic_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_ApiInfo, qps_)>(
          reinterpret_cast<char*>(&qps_),
          reinterpret_cast<char*>(&other->qps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo_ApiInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[82]);
}

// ===================================================================

class MetricsInfo_NetInfo_DisconnectionDetailInfo::_Internal {
 public:
};

MetricsInfo_NetInfo_DisconnectionDetailInfo::MetricsInfo_NetInfo_DisconnectionDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
}
MetricsInfo_NetInfo_DisconnectionDetailInfo::MetricsInfo_NetInfo_DisconnectionDetailInfo(const MetricsInfo_NetInfo_DisconnectionDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
}

inline void MetricsInfo_NetInfo_DisconnectionDetailInfo::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
count_ = 0;
}

MetricsInfo_NetInfo_DisconnectionDetailInfo::~MetricsInfo_NetInfo_DisconnectionDetailInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo_DisconnectionDetailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricsInfo_NetInfo_DisconnectionDetailInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo_DisconnectionDetailInfo* _this = reinterpret_cast< MetricsInfo_NetInfo_DisconnectionDetailInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo_DisconnectionDetailInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo_DisconnectionDetailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo_DisconnectionDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty();
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo_DisconnectionDetailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo_DisconnectionDetailInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  return target;
}

size_t MetricsInfo_NetInfo_DisconnectionDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo_DisconnectionDetailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo_DisconnectionDetailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo_DisconnectionDetailInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo_DisconnectionDetailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo_DisconnectionDetailInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo_DisconnectionDetailInfo &>(from));
}


void MetricsInfo_NetInfo_DisconnectionDetailInfo::MergeFrom(const MetricsInfo_NetInfo_DisconnectionDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo_DisconnectionDetailInfo::CopyFrom(const MetricsInfo_NetInfo_DisconnectionDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo_DisconnectionDetailInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo_DisconnectionDetailInfo::InternalSwap(MetricsInfo_NetInfo_DisconnectionDetailInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reason_, GetArenaForAllocation(),
      &other->reason_, other->GetArenaForAllocation()
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo_DisconnectionDetailInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[83]);
}

// ===================================================================

class MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::_Internal {
 public:
};

MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
}
MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo(const MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness().empty()) {
    witness_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witness(), 
      GetArenaForAllocation());
  }
  ::memcpy(&top99_, &from.top99_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay3s_) -
    reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
}

inline void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::SharedCtor() {
witness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top99_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delay3s_) -
    reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
}

MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::~MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witness_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo* _this = reinterpret_cast< MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witness_.ClearToEmpty();
  ::memset(&top99_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay3s_) -
      reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string witness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_witness();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.witness"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top99 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          top99_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top95 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          top95_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top75 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          top75_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay1S = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          delay1s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay2S = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delay2s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay3S = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          delay3s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string witness = 1;
  if (!this->_internal_witness().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_witness().data(), static_cast<int>(this->_internal_witness().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.witness");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_witness(), target);
  }

  // int32 top99 = 2;
  if (this->_internal_top99() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top99(), target);
  }

  // int32 top95 = 3;
  if (this->_internal_top95() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_top95(), target);
  }

  // int32 top75 = 4;
  if (this->_internal_top75() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_top75(), target);
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // int32 delay1S = 6;
  if (this->_internal_delay1s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_delay1s(), target);
  }

  // int32 delay2S = 7;
  if (this->_internal_delay2s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_delay2s(), target);
  }

  // int32 delay3S = 8;
  if (this->_internal_delay3s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_delay3s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  return target;
}

size_t MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string witness = 1;
  if (!this->_internal_witness().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_witness());
  }

  // int32 top99 = 2;
  if (this->_internal_top99() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top99());
  }

  // int32 top95 = 3;
  if (this->_internal_top95() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top95());
  }

  // int32 top75 = 4;
  if (this->_internal_top75() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top75());
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 delay1S = 6;
  if (this->_internal_delay1s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay1s());
  }

  // int32 delay2S = 7;
  if (this->_internal_delay2s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay2s());
  }

  // int32 delay3S = 8;
  if (this->_internal_delay3s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay3s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo &>(from));
}


void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::MergeFrom(const MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_witness().empty()) {
    _internal_set_witness(from._internal_witness());
  }
  if (from._internal_top99() != 0) {
    _internal_set_top99(from._internal_top99());
  }
  if (from._internal_top95() != 0) {
    _internal_set_top95(from._internal_top95());
  }
  if (from._internal_top75() != 0) {
    _internal_set_top75(from._internal_top75());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_delay1s() != 0) {
    _internal_set_delay1s(from._internal_delay1s());
  }
  if (from._internal_delay2s() != 0) {
    _internal_set_delay2s(from._internal_delay2s());
  }
  if (from._internal_delay3s() != 0) {
    _internal_set_delay3s(from._internal_delay3s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::CopyFrom(const MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::InternalSwap(MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witness_, GetArenaForAllocation(),
      &other->witness_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, delay3s_)
      + sizeof(MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::delay3s_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo, top99_)>(
          reinterpret_cast<char*>(&top99_),
          reinterpret_cast<char*>(&other->top99_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[84]);
}

// ===================================================================

class MetricsInfo_NetInfo_LatencyInfo::_Internal {
 public:
};

MetricsInfo_NetInfo_LatencyInfo::MetricsInfo_NetInfo_LatencyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detail_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo.LatencyInfo)
}
MetricsInfo_NetInfo_LatencyInfo::MetricsInfo_NetInfo_LatencyInfo(const MetricsInfo_NetInfo_LatencyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top99_, &from.top99_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay3s_) -
    reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo.LatencyInfo)
}

inline void MetricsInfo_NetInfo_LatencyInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top99_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delay3s_) -
    reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
}

MetricsInfo_NetInfo_LatencyInfo::~MetricsInfo_NetInfo_LatencyInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo.LatencyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo_LatencyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsInfo_NetInfo_LatencyInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo_LatencyInfo* _this = reinterpret_cast< MetricsInfo_NetInfo_LatencyInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo_LatencyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo_LatencyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo_LatencyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo.LatencyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  ::memset(&top99_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay3s_) -
      reinterpret_cast<char*>(&top99_)) + sizeof(delay3s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo_LatencyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 top99 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          top99_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top95 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          top95_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top75 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          top75_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay1S = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delay1s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay2S = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          delay2s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay3S = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delay3s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo_LatencyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo.LatencyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top99 = 1;
  if (this->_internal_top99() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_top99(), target);
  }

  // int32 top95 = 2;
  if (this->_internal_top95() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top95(), target);
  }

  // int32 top75 = 3;
  if (this->_internal_top75() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_top75(), target);
  }

  // int32 totalCount = 4;
  if (this->_internal_totalcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_totalcount(), target);
  }

  // int32 delay1S = 5;
  if (this->_internal_delay1s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_delay1s(), target);
  }

  // int32 delay2S = 6;
  if (this->_internal_delay2s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_delay2s(), target);
  }

  // int32 delay3S = 7;
  if (this->_internal_delay3s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_delay3s(), target);
  }

  // repeated .protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo detail = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo.LatencyInfo)
  return target;
}

size_t MetricsInfo_NetInfo_LatencyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo.LatencyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo detail = 8;
  total_size += 1UL * this->_internal_detail_size();
  for (const auto& msg : this->detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 top99 = 1;
  if (this->_internal_top99() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top99());
  }

  // int32 top95 = 2;
  if (this->_internal_top95() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top95());
  }

  // int32 top75 = 3;
  if (this->_internal_top75() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_top75());
  }

  // int32 totalCount = 4;
  if (this->_internal_totalcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalcount());
  }

  // int32 delay1S = 5;
  if (this->_internal_delay1s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay1s());
  }

  // int32 delay2S = 6;
  if (this->_internal_delay2s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay2s());
  }

  // int32 delay3S = 7;
  if (this->_internal_delay3s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay3s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo_LatencyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo_LatencyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo_LatencyInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo_LatencyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo_LatencyInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo_LatencyInfo &>(from));
}


void MetricsInfo_NetInfo_LatencyInfo::MergeFrom(const MetricsInfo_NetInfo_LatencyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo.LatencyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from._internal_top99() != 0) {
    _internal_set_top99(from._internal_top99());
  }
  if (from._internal_top95() != 0) {
    _internal_set_top95(from._internal_top95());
  }
  if (from._internal_top75() != 0) {
    _internal_set_top75(from._internal_top75());
  }
  if (from._internal_totalcount() != 0) {
    _internal_set_totalcount(from._internal_totalcount());
  }
  if (from._internal_delay1s() != 0) {
    _internal_set_delay1s(from._internal_delay1s());
  }
  if (from._internal_delay2s() != 0) {
    _internal_set_delay2s(from._internal_delay2s());
  }
  if (from._internal_delay3s() != 0) {
    _internal_set_delay3s(from._internal_delay3s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo_LatencyInfo::CopyFrom(const MetricsInfo_NetInfo_LatencyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo.LatencyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo_LatencyInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo_LatencyInfo::InternalSwap(MetricsInfo_NetInfo_LatencyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_LatencyInfo, delay3s_)
      + sizeof(MetricsInfo_NetInfo_LatencyInfo::delay3s_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo_LatencyInfo, top99_)>(
          reinterpret_cast<char*>(&top99_),
          reinterpret_cast<char*>(&other->top99_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo_LatencyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[85]);
}

// ===================================================================

class MetricsInfo_NetInfo::_Internal {
 public:
  static const ::protocol::MetricsInfo_NetInfo_ApiInfo& api(const MetricsInfo_NetInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& tcpintraffic(const MetricsInfo_NetInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& tcpouttraffic(const MetricsInfo_NetInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& udpintraffic(const MetricsInfo_NetInfo* msg);
  static const ::protocol::MetricsInfo_RateInfo& udpouttraffic(const MetricsInfo_NetInfo* msg);
  static const ::protocol::MetricsInfo_NetInfo_LatencyInfo& latency(const MetricsInfo_NetInfo* msg);
};

const ::protocol::MetricsInfo_NetInfo_ApiInfo&
MetricsInfo_NetInfo::_Internal::api(const MetricsInfo_NetInfo* msg) {
  return *msg->api_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo::_Internal::tcpintraffic(const MetricsInfo_NetInfo* msg) {
  return *msg->tcpintraffic_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo::_Internal::tcpouttraffic(const MetricsInfo_NetInfo* msg) {
  return *msg->tcpouttraffic_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo::_Internal::udpintraffic(const MetricsInfo_NetInfo* msg) {
  return *msg->udpintraffic_;
}
const ::protocol::MetricsInfo_RateInfo&
MetricsInfo_NetInfo::_Internal::udpouttraffic(const MetricsInfo_NetInfo* msg) {
  return *msg->udpouttraffic_;
}
const ::protocol::MetricsInfo_NetInfo_LatencyInfo&
MetricsInfo_NetInfo::_Internal::latency(const MetricsInfo_NetInfo* msg) {
  return *msg->latency_;
}
MetricsInfo_NetInfo::MetricsInfo_NetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  disconnectiondetail_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo.NetInfo)
}
MetricsInfo_NetInfo::MetricsInfo_NetInfo(const MetricsInfo_NetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      disconnectiondetail_(from.disconnectiondetail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_api()) {
    api_ = new ::protocol::MetricsInfo_NetInfo_ApiInfo(*from.api_);
  } else {
    api_ = nullptr;
  }
  if (from._internal_has_tcpintraffic()) {
    tcpintraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.tcpintraffic_);
  } else {
    tcpintraffic_ = nullptr;
  }
  if (from._internal_has_tcpouttraffic()) {
    tcpouttraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.tcpouttraffic_);
  } else {
    tcpouttraffic_ = nullptr;
  }
  if (from._internal_has_udpintraffic()) {
    udpintraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.udpintraffic_);
  } else {
    udpintraffic_ = nullptr;
  }
  if (from._internal_has_udpouttraffic()) {
    udpouttraffic_ = new ::protocol::MetricsInfo_RateInfo(*from.udpouttraffic_);
  } else {
    udpouttraffic_ = nullptr;
  }
  if (from._internal_has_latency()) {
    latency_ = new ::protocol::MetricsInfo_NetInfo_LatencyInfo(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  ::memcpy(&errorprotocount_, &from.errorprotocount_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnectioncount_) -
    reinterpret_cast<char*>(&errorprotocount_)) + sizeof(disconnectioncount_));
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo.NetInfo)
}

inline void MetricsInfo_NetInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&api_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disconnectioncount_) -
    reinterpret_cast<char*>(&api_)) + sizeof(disconnectioncount_));
}

MetricsInfo_NetInfo::~MetricsInfo_NetInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo.NetInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo_NetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete api_;
  if (this != internal_default_instance()) delete tcpintraffic_;
  if (this != internal_default_instance()) delete tcpouttraffic_;
  if (this != internal_default_instance()) delete udpintraffic_;
  if (this != internal_default_instance()) delete udpouttraffic_;
  if (this != internal_default_instance()) delete latency_;
}

void MetricsInfo_NetInfo::ArenaDtor(void* object) {
  MetricsInfo_NetInfo* _this = reinterpret_cast< MetricsInfo_NetInfo* >(object);
  (void)_this;
}
void MetricsInfo_NetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo_NetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo_NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo.NetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disconnectiondetail_.Clear();
  if (GetArenaForAllocation() == nullptr && api_ != nullptr) {
    delete api_;
  }
  api_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tcpintraffic_ != nullptr) {
    delete tcpintraffic_;
  }
  tcpintraffic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tcpouttraffic_ != nullptr) {
    delete tcpouttraffic_;
  }
  tcpouttraffic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && udpintraffic_ != nullptr) {
    delete udpintraffic_;
  }
  udpintraffic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && udpouttraffic_ != nullptr) {
    delete udpouttraffic_;
  }
  udpouttraffic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  ::memset(&errorprotocount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnectioncount_) -
      reinterpret_cast<char*>(&errorprotocount_)) + sizeof(disconnectioncount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo_NetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 errorProtoCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorprotocount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.NetInfo.ApiInfo api = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_api(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 connectionCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connectioncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 validConnectionCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          validconnectioncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo tcpInTraffic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcpintraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo tcpOutTraffic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcpouttraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnectionCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disconnectioncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo disconnectionDetail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disconnectiondetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo udpInTraffic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_udpintraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.RateInfo udpOutTraffic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_udpouttraffic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.NetInfo.LatencyInfo latency = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo_NetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo.NetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorProtoCount = 1;
  if (this->_internal_errorprotocount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorprotocount(), target);
  }

  // .protocol.MetricsInfo.NetInfo.ApiInfo api = 2;
  if (this->_internal_has_api()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::api(this), target, stream);
  }

  // int32 connectionCount = 3;
  if (this->_internal_connectioncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_connectioncount(), target);
  }

  // int32 validConnectionCount = 4;
  if (this->_internal_validconnectioncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_validconnectioncount(), target);
  }

  // .protocol.MetricsInfo.RateInfo tcpInTraffic = 5;
  if (this->_internal_has_tcpintraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tcpintraffic(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo tcpOutTraffic = 6;
  if (this->_internal_has_tcpouttraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tcpouttraffic(this), target, stream);
  }

  // int32 disconnectionCount = 7;
  if (this->_internal_disconnectioncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_disconnectioncount(), target);
  }

  // repeated .protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo disconnectionDetail = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disconnectiondetail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_disconnectiondetail(i), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo udpInTraffic = 9;
  if (this->_internal_has_udpintraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::udpintraffic(this), target, stream);
  }

  // .protocol.MetricsInfo.RateInfo udpOutTraffic = 10;
  if (this->_internal_has_udpouttraffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::udpouttraffic(this), target, stream);
  }

  // .protocol.MetricsInfo.NetInfo.LatencyInfo latency = 11;
  if (this->_internal_has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo.NetInfo)
  return target;
}

size_t MetricsInfo_NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo.NetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo disconnectionDetail = 8;
  total_size += 1UL * this->_internal_disconnectiondetail_size();
  for (const auto& msg : this->disconnectiondetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.MetricsInfo.NetInfo.ApiInfo api = 2;
  if (this->_internal_has_api()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *api_);
  }

  // .protocol.MetricsInfo.RateInfo tcpInTraffic = 5;
  if (this->_internal_has_tcpintraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcpintraffic_);
  }

  // .protocol.MetricsInfo.RateInfo tcpOutTraffic = 6;
  if (this->_internal_has_tcpouttraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcpouttraffic_);
  }

  // .protocol.MetricsInfo.RateInfo udpInTraffic = 9;
  if (this->_internal_has_udpintraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udpintraffic_);
  }

  // .protocol.MetricsInfo.RateInfo udpOutTraffic = 10;
  if (this->_internal_has_udpouttraffic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udpouttraffic_);
  }

  // .protocol.MetricsInfo.NetInfo.LatencyInfo latency = 11;
  if (this->_internal_has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // int32 errorProtoCount = 1;
  if (this->_internal_errorprotocount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorprotocount());
  }

  // int32 connectionCount = 3;
  if (this->_internal_connectioncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connectioncount());
  }

  // int32 validConnectionCount = 4;
  if (this->_internal_validconnectioncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_validconnectioncount());
  }

  // int32 disconnectionCount = 7;
  if (this->_internal_disconnectioncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disconnectioncount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo_NetInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo_NetInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo_NetInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo_NetInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo_NetInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo_NetInfo &>(from));
}


void MetricsInfo_NetInfo::MergeFrom(const MetricsInfo_NetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo.NetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disconnectiondetail_.MergeFrom(from.disconnectiondetail_);
  if (from._internal_has_api()) {
    _internal_mutable_api()->::protocol::MetricsInfo_NetInfo_ApiInfo::MergeFrom(from._internal_api());
  }
  if (from._internal_has_tcpintraffic()) {
    _internal_mutable_tcpintraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_tcpintraffic());
  }
  if (from._internal_has_tcpouttraffic()) {
    _internal_mutable_tcpouttraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_tcpouttraffic());
  }
  if (from._internal_has_udpintraffic()) {
    _internal_mutable_udpintraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_udpintraffic());
  }
  if (from._internal_has_udpouttraffic()) {
    _internal_mutable_udpouttraffic()->::protocol::MetricsInfo_RateInfo::MergeFrom(from._internal_udpouttraffic());
  }
  if (from._internal_has_latency()) {
    _internal_mutable_latency()->::protocol::MetricsInfo_NetInfo_LatencyInfo::MergeFrom(from._internal_latency());
  }
  if (from._internal_errorprotocount() != 0) {
    _internal_set_errorprotocount(from._internal_errorprotocount());
  }
  if (from._internal_connectioncount() != 0) {
    _internal_set_connectioncount(from._internal_connectioncount());
  }
  if (from._internal_validconnectioncount() != 0) {
    _internal_set_validconnectioncount(from._internal_validconnectioncount());
  }
  if (from._internal_disconnectioncount() != 0) {
    _internal_set_disconnectioncount(from._internal_disconnectioncount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo_NetInfo::CopyFrom(const MetricsInfo_NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo_NetInfo::IsInitialized() const {
  return true;
}

void MetricsInfo_NetInfo::InternalSwap(MetricsInfo_NetInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  disconnectiondetail_.InternalSwap(&other->disconnectiondetail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo, disconnectioncount_)
      + sizeof(MetricsInfo_NetInfo::disconnectioncount_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo_NetInfo, api_)>(
          reinterpret_cast<char*>(&api_),
          reinterpret_cast<char*>(&other->api_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo_NetInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[86]);
}

// ===================================================================

class MetricsInfo::_Internal {
 public:
  static const ::protocol::MetricsInfo_NodeInfo& node(const MetricsInfo* msg);
  static const ::protocol::MetricsInfo_BlockChainInfo& blockchain(const MetricsInfo* msg);
  static const ::protocol::MetricsInfo_NetInfo& net(const MetricsInfo* msg);
};

const ::protocol::MetricsInfo_NodeInfo&
MetricsInfo::_Internal::node(const MetricsInfo* msg) {
  return *msg->node_;
}
const ::protocol::MetricsInfo_BlockChainInfo&
MetricsInfo::_Internal::blockchain(const MetricsInfo* msg) {
  return *msg->blockchain_;
}
const ::protocol::MetricsInfo_NetInfo&
MetricsInfo::_Internal::net(const MetricsInfo* msg) {
  return *msg->net_;
}
MetricsInfo::MetricsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MetricsInfo)
}
MetricsInfo::MetricsInfo(const MetricsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::protocol::MetricsInfo_NodeInfo(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from._internal_has_blockchain()) {
    blockchain_ = new ::protocol::MetricsInfo_BlockChainInfo(*from.blockchain_);
  } else {
    blockchain_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::protocol::MetricsInfo_NetInfo(*from.net_);
  } else {
    net_ = nullptr;
  }
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:protocol.MetricsInfo)
}

inline void MetricsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&node_)) + sizeof(interval_));
}

MetricsInfo::~MetricsInfo() {
  // @@protoc_insertion_point(destructor:protocol.MetricsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete blockchain_;
  if (this != internal_default_instance()) delete net_;
}

void MetricsInfo::ArenaDtor(void* object) {
  MetricsInfo* _this = reinterpret_cast< MetricsInfo* >(object);
  (void)_this;
}
void MetricsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MetricsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && blockchain_ != nullptr) {
    delete blockchain_;
  }
  blockchain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  interval_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.NodeInfo node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.BlockChainInfo blockchain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockchain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MetricsInfo.NetInfo net = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MetricsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 interval = 1;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_interval(), target);
  }

  // .protocol.MetricsInfo.NodeInfo node = 2;
  if (this->_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node(this), target, stream);
  }

  // .protocol.MetricsInfo.BlockChainInfo blockchain = 3;
  if (this->_internal_has_blockchain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::blockchain(this), target, stream);
  }

  // .protocol.MetricsInfo.NetInfo net = 4;
  if (this->_internal_has_net()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::net(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MetricsInfo)
  return target;
}

size_t MetricsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MetricsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.MetricsInfo.NodeInfo node = 2;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .protocol.MetricsInfo.BlockChainInfo blockchain = 3;
  if (this->_internal_has_blockchain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockchain_);
  }

  // .protocol.MetricsInfo.NetInfo net = 4;
  if (this->_internal_has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // int64 interval = 1;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsInfo::GetClassData() const { return &_class_data_; }

void MetricsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricsInfo *>(to)->MergeFrom(
      static_cast<const MetricsInfo &>(from));
}


void MetricsInfo::MergeFrom(const MetricsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MetricsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node()) {
    _internal_mutable_node()->::protocol::MetricsInfo_NodeInfo::MergeFrom(from._internal_node());
  }
  if (from._internal_has_blockchain()) {
    _internal_mutable_blockchain()->::protocol::MetricsInfo_BlockChainInfo::MergeFrom(from._internal_blockchain());
  }
  if (from._internal_has_net()) {
    _internal_mutable_net()->::protocol::MetricsInfo_NetInfo::MergeFrom(from._internal_net());
  }
  if (from._internal_interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsInfo::CopyFrom(const MetricsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MetricsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsInfo::IsInitialized() const {
  return true;
}

void MetricsInfo::InternalSwap(MetricsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsInfo, interval_)
      + sizeof(MetricsInfo::interval_)
      - PROTOBUF_FIELD_OFFSET(MetricsInfo, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[87]);
}

// ===================================================================

class PBFTMessage_Raw::_Internal {
 public:
};

PBFTMessage_Raw::PBFTMessage_Raw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PBFTMessage.Raw)
}
PBFTMessage_Raw::PBFTMessage_Raw(const PBFTMessage_Raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:protocol.PBFTMessage.Raw)
}

inline void PBFTMessage_Raw::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(epoch_));
}

PBFTMessage_Raw::~PBFTMessage_Raw() {
  // @@protoc_insertion_point(destructor:protocol.PBFTMessage.Raw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBFTMessage_Raw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PBFTMessage_Raw::ArenaDtor(void* object) {
  PBFTMessage_Raw* _this = reinterpret_cast< PBFTMessage_Raw* >(object);
  (void)_this;
}
void PBFTMessage_Raw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFTMessage_Raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBFTMessage_Raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PBFTMessage.Raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFTMessage_Raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.PBFTMessage.MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::protocol::PBFTMessage_MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .protocol.PBFTMessage.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::protocol::PBFTMessage_DataType>(val));
        } else goto handle_unusual;
        continue;
      // int64 view_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          view_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFTMessage_Raw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PBFTMessage.Raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.PBFTMessage.MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // .protocol.PBFTMessage.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // int64 view_n = 3;
  if (this->_internal_view_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_view_n(), target);
  }

  // int64 epoch = 4;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_epoch(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PBFTMessage.Raw)
  return target;
}

size_t PBFTMessage_Raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PBFTMessage.Raw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .protocol.PBFTMessage.MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // .protocol.PBFTMessage.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // int64 view_n = 3;
  if (this->_internal_view_n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_view_n());
  }

  // int64 epoch = 4;
  if (this->_internal_epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBFTMessage_Raw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBFTMessage_Raw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBFTMessage_Raw::GetClassData() const { return &_class_data_; }

void PBFTMessage_Raw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBFTMessage_Raw *>(to)->MergeFrom(
      static_cast<const PBFTMessage_Raw &>(from));
}


void PBFTMessage_Raw::MergeFrom(const PBFTMessage_Raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PBFTMessage.Raw)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_view_n() != 0) {
    _internal_set_view_n(from._internal_view_n());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBFTMessage_Raw::CopyFrom(const PBFTMessage_Raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PBFTMessage.Raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFTMessage_Raw::IsInitialized() const {
  return true;
}

void PBFTMessage_Raw::InternalSwap(PBFTMessage_Raw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBFTMessage_Raw, epoch_)
      + sizeof(PBFTMessage_Raw::epoch_)
      - PROTOBUF_FIELD_OFFSET(PBFTMessage_Raw, msg_type_)>(
          reinterpret_cast<char*>(&msg_type_),
          reinterpret_cast<char*>(&other->msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFTMessage_Raw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[88]);
}

// ===================================================================

class PBFTMessage::_Internal {
 public:
  static const ::protocol::PBFTMessage_Raw& raw_data(const PBFTMessage* msg);
};

const ::protocol::PBFTMessage_Raw&
PBFTMessage::_Internal::raw_data(const PBFTMessage* msg) {
  return *msg->raw_data_;
}
PBFTMessage::PBFTMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PBFTMessage)
}
PBFTMessage::PBFTMessage(const PBFTMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_raw_data()) {
    raw_data_ = new ::protocol::PBFTMessage_Raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PBFTMessage)
}

inline void PBFTMessage::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
raw_data_ = nullptr;
}

PBFTMessage::~PBFTMessage() {
  // @@protoc_insertion_point(destructor:protocol.PBFTMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBFTMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void PBFTMessage::ArenaDtor(void* object) {
  PBFTMessage* _this = reinterpret_cast< PBFTMessage* >(object);
  (void)_this;
}
void PBFTMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFTMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBFTMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PBFTMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFTMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.PBFTMessage.Raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFTMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PBFTMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.PBFTMessage.Raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_data(this), target, stream);
  }

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PBFTMessage)
  return target;
}

size_t PBFTMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PBFTMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .protocol.PBFTMessage.Raw raw_data = 1;
  if (this->_internal_has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBFTMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBFTMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBFTMessage::GetClassData() const { return &_class_data_; }

void PBFTMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBFTMessage *>(to)->MergeFrom(
      static_cast<const PBFTMessage &>(from));
}


void PBFTMessage::MergeFrom(const PBFTMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PBFTMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_raw_data()) {
    _internal_mutable_raw_data()->::protocol::PBFTMessage_Raw::MergeFrom(from._internal_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBFTMessage::CopyFrom(const PBFTMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PBFTMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFTMessage::IsInitialized() const {
  return true;
}

void PBFTMessage::InternalSwap(PBFTMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFTMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[89]);
}

// ===================================================================

class PBFTCommitResult::_Internal {
 public:
};

PBFTCommitResult::PBFTCommitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PBFTCommitResult)
}
PBFTCommitResult::PBFTCommitResult(const PBFTCommitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signature_(from.signature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PBFTCommitResult)
}

inline void PBFTCommitResult::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PBFTCommitResult::~PBFTCommitResult() {
  // @@protoc_insertion_point(destructor:protocol.PBFTCommitResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBFTCommitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PBFTCommitResult::ArenaDtor(void* object) {
  PBFTCommitResult* _this = reinterpret_cast< PBFTCommitResult* >(object);
  (void)_this;
}
void PBFTCommitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBFTCommitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBFTCommitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PBFTCommitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBFTCommitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signature();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBFTCommitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PBFTCommitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated bytes signature = 2;
  for (int i = 0, n = this->_internal_signature_size(); i < n; i++) {
    const auto& s = this->_internal_signature(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PBFTCommitResult)
  return target;
}

size_t PBFTCommitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PBFTCommitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signature = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signature_.size());
  for (int i = 0, n = signature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signature_.Get(i));
  }

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBFTCommitResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBFTCommitResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBFTCommitResult::GetClassData() const { return &_class_data_; }

void PBFTCommitResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBFTCommitResult *>(to)->MergeFrom(
      static_cast<const PBFTCommitResult &>(from));
}


void PBFTCommitResult::MergeFrom(const PBFTCommitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PBFTCommitResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBFTCommitResult::CopyFrom(const PBFTCommitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PBFTCommitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFTCommitResult::IsInitialized() const {
  return true;
}

void PBFTCommitResult::InternalSwap(PBFTCommitResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signature_.InternalSwap(&other->signature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PBFTCommitResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[90]);
}

// ===================================================================

class SRL::_Internal {
 public:
};

SRL::SRL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sraddress_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SRL)
}
SRL::SRL(const SRL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sraddress_(from.sraddress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.SRL)
}

inline void SRL::SharedCtor() {
}

SRL::~SRL() {
  // @@protoc_insertion_point(destructor:protocol.SRL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SRL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SRL::ArenaDtor(void* object) {
  SRL* _this = reinterpret_cast< SRL* >(object);
  (void)_this;
}
void SRL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SRL::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sraddress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes srAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sraddress();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SRL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes srAddress = 1;
  for (int i = 0, n = this->_internal_sraddress_size(); i < n; i++) {
    const auto& s = this->_internal_sraddress(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SRL)
  return target;
}

size_t SRL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SRL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes srAddress = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sraddress_.size());
  for (int i = 0, n = sraddress_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      sraddress_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SRL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SRL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SRL::GetClassData() const { return &_class_data_; }

void SRL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SRL *>(to)->MergeFrom(
      static_cast<const SRL &>(from));
}


void SRL::MergeFrom(const SRL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SRL)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sraddress_.MergeFrom(from.sraddress_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SRL::CopyFrom(const SRL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SRL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL::IsInitialized() const {
  return true;
}

void SRL::InternalSwap(SRL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sraddress_.InternalSwap(&other->sraddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTron_2eproto_getter, &descriptor_table_core_2fTron_2eproto_once,
      file_level_metadata_core_2fTron_2eproto[91]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AccountId* Arena::CreateMaybeMessage< ::protocol::AccountId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Vote* Arena::CreateMaybeMessage< ::protocol::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Proposal_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Proposal_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Proposal_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Proposal* Arena::CreateMaybeMessage< ::protocol::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Exchange* Arena::CreateMaybeMessage< ::protocol::Exchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrder* Arena::CreateMaybeMessage< ::protocol::MarketOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrderList* Arena::CreateMaybeMessage< ::protocol::MarketOrderList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrderPairList* Arena::CreateMaybeMessage< ::protocol::MarketOrderPairList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrderPairList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrderPair* Arena::CreateMaybeMessage< ::protocol::MarketOrderPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrderPair >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketAccountOrder* Arena::CreateMaybeMessage< ::protocol::MarketAccountOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketAccountOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketPrice* Arena::CreateMaybeMessage< ::protocol::MarketPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketPriceList* Arena::CreateMaybeMessage< ::protocol::MarketPriceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketPriceList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrderIdList* Arena::CreateMaybeMessage< ::protocol::MarketOrderIdList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrderIdList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainParameters_ChainParameter* Arena::CreateMaybeMessage< ::protocol::ChainParameters_ChainParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ChainParameters_ChainParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainParameters* Arena::CreateMaybeMessage< ::protocol::ChainParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ChainParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_Frozen* Arena::CreateMaybeMessage< ::protocol::Account_Frozen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_Frozen >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AssetEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_AssetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_AssetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AssetV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_AssetV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_AssetV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AccountResource* Arena::CreateMaybeMessage< ::protocol::Account_AccountResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account_AccountResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account* Arena::CreateMaybeMessage< ::protocol::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_Frozen* Arena::CreateMaybeMessage< ::protocol::AccountAsset_Frozen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_Frozen >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_AssetEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_AssetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_AssetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_AssetV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_AssetV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_AssetV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_LatestAssetOperationTimeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_LatestAssetOperationTimeV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_FreeAssetNetUsageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset_FreeAssetNetUsageV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountAsset* Arena::CreateMaybeMessage< ::protocol::AccountAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Key* Arena::CreateMaybeMessage< ::protocol::Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResource* Arena::CreateMaybeMessage< ::protocol::DelegatedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DelegatedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::authority* Arena::CreateMaybeMessage< ::protocol::authority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::authority >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Permission* Arena::CreateMaybeMessage< ::protocol::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Witness* Arena::CreateMaybeMessage< ::protocol::Witness >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Witness >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Votes* Arena::CreateMaybeMessage< ::protocol::Votes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Votes >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXOutput* Arena::CreateMaybeMessage< ::protocol::TXOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TXOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXInput_raw* Arena::CreateMaybeMessage< ::protocol::TXInput_raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TXInput_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXInput* Arena::CreateMaybeMessage< ::protocol::TXInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TXInput >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXOutputs* Arena::CreateMaybeMessage< ::protocol::TXOutputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TXOutputs >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ResourceReceipt* Arena::CreateMaybeMessage< ::protocol::ResourceReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ResourceReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketOrderDetail* Arena::CreateMaybeMessage< ::protocol::MarketOrderDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketOrderDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_Contract* Arena::CreateMaybeMessage< ::protocol::Transaction_Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction_Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_Result* Arena::CreateMaybeMessage< ::protocol::Transaction_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_raw* Arena::CreateMaybeMessage< ::protocol::Transaction_raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction* Arena::CreateMaybeMessage< ::protocol::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionInfo_Log* Arena::CreateMaybeMessage< ::protocol::TransactionInfo_Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionInfo_Log >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionInfo* Arena::CreateMaybeMessage< ::protocol::TransactionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionRet* Arena::CreateMaybeMessage< ::protocol::TransactionRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transactions* Arena::CreateMaybeMessage< ::protocol::Transactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Transactions >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionSign* Arena::CreateMaybeMessage< ::protocol::TransactionSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionSign >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader_raw* Arena::CreateMaybeMessage< ::protocol::BlockHeader_raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockHeader_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader* Arena::CreateMaybeMessage< ::protocol::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Block* Arena::CreateMaybeMessage< ::protocol::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainInventory_BlockId* Arena::CreateMaybeMessage< ::protocol::ChainInventory_BlockId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ChainInventory_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainInventory* Arena::CreateMaybeMessage< ::protocol::ChainInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ChainInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockInventory_BlockId* Arena::CreateMaybeMessage< ::protocol::BlockInventory_BlockId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockInventory_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockInventory* Arena::CreateMaybeMessage< ::protocol::BlockInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Inventory* Arena::CreateMaybeMessage< ::protocol::Inventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Items* Arena::CreateMaybeMessage< ::protocol::Items >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Items >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DynamicProperties* Arena::CreateMaybeMessage< ::protocol::DynamicProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DynamicProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DisconnectMessage* Arena::CreateMaybeMessage< ::protocol::DisconnectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DisconnectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::HelloMessage_BlockId* Arena::CreateMaybeMessage< ::protocol::HelloMessage_BlockId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::HelloMessage_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::HelloMessage* Arena::CreateMaybeMessage< ::protocol::HelloMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::HelloMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::InternalTransaction_CallValueInfo* Arena::CreateMaybeMessage< ::protocol::InternalTransaction_CallValueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::InternalTransaction_CallValueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::InternalTransaction* Arena::CreateMaybeMessage< ::protocol::InternalTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::InternalTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResourceAccountIndex* Arena::CreateMaybeMessage< ::protocol::DelegatedResourceAccountIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DelegatedResourceAccountIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_PeerInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_PeerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_ConfigNodeInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_ConfigNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_ConfigNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo_MachineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NodeInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_BlockChainInfo_Witness* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_BlockChainInfo_Witness >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_BlockChainInfo_Witness >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_BlockChainInfo_DupWitness* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_BlockChainInfo_DupWitness >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_BlockChainInfo_DupWitness >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_BlockChainInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_BlockChainInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_BlockChainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_RateInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_RateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_RateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo_ApiInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo_ApiInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo_ApiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo_DisconnectionDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo_LatencyInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo_LatencyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo_LatencyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo_NetInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo_NetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo_NetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MetricsInfo* Arena::CreateMaybeMessage< ::protocol::MetricsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MetricsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PBFTMessage_Raw* Arena::CreateMaybeMessage< ::protocol::PBFTMessage_Raw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PBFTMessage_Raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PBFTMessage* Arena::CreateMaybeMessage< ::protocol::PBFTMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PBFTMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PBFTCommitResult* Arena::CreateMaybeMessage< ::protocol::PBFTCommitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PBFTCommitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SRL* Arena::CreateMaybeMessage< ::protocol::SRL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SRL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
