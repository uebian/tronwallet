// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/market_contract.proto

#include "core/contract/market_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr MarketSellAssetContract::MarketSellAssetContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_token_quantity_(int64_t{0})
  , buy_token_quantity_(int64_t{0}){}
struct MarketSellAssetContractDefaultTypeInternal {
  constexpr MarketSellAssetContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketSellAssetContractDefaultTypeInternal() {}
  union {
    MarketSellAssetContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketSellAssetContractDefaultTypeInternal _MarketSellAssetContract_default_instance_;
constexpr MarketCancelOrderContract::MarketCancelOrderContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MarketCancelOrderContractDefaultTypeInternal {
  constexpr MarketCancelOrderContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketCancelOrderContractDefaultTypeInternal() {}
  union {
    MarketCancelOrderContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketCancelOrderContractDefaultTypeInternal _MarketCancelOrderContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fmarket_5fcontract_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fmarket_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fmarket_5fcontract_2eproto = nullptr;

const uint32_t TableStruct_core_2fcontract_2fmarket_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, sell_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, sell_token_quantity_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, buy_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketSellAssetContract, buy_token_quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketCancelOrderContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::MarketCancelOrderContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::MarketCancelOrderContract, order_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::MarketSellAssetContract)},
  { 11, -1, -1, sizeof(::protocol::MarketCancelOrderContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketSellAssetContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MarketCancelOrderContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fmarket_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#core/contract/market_contract.proto\022\010p"
  "rotocol\"\226\001\n\027MarketSellAssetContract\022\025\n\ro"
  "wner_address\030\001 \001(\014\022\025\n\rsell_token_id\030\002 \001("
  "\014\022\033\n\023sell_token_quantity\030\003 \001(\003\022\024\n\014buy_to"
  "ken_id\030\004 \001(\014\022\032\n\022buy_token_quantity\030\005 \001(\003"
  "\"D\n\031MarketCancelOrderContract\022\025\n\rowner_a"
  "ddress\030\001 \001(\014\022\020\n\010order_id\030\002 \001(\014BE\n\030org.tr"
  "on.protos.contractZ)github.com/tronproto"
  "col/grpc-gateway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto = {
  false, false, 349, descriptor_table_protodef_core_2fcontract_2fmarket_5fcontract_2eproto, "core/contract/market_contract.proto", 
  &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fmarket_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fmarket_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fmarket_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fmarket_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fmarket_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class MarketSellAssetContract::_Internal {
 public:
};

MarketSellAssetContract::MarketSellAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketSellAssetContract)
}
MarketSellAssetContract::MarketSellAssetContract(const MarketSellAssetContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sell_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_token_id().empty()) {
    sell_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_token_id(), 
      GetArenaForAllocation());
  }
  buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buy_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buy_token_id().empty()) {
    buy_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sell_token_quantity_, &from.sell_token_quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_token_quantity_) -
    reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
  // @@protoc_insertion_point(copy_constructor:protocol.MarketSellAssetContract)
}

inline void MarketSellAssetContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sell_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sell_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buy_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buy_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sell_token_quantity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buy_token_quantity_) -
    reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
}

MarketSellAssetContract::~MarketSellAssetContract() {
  // @@protoc_insertion_point(destructor:protocol.MarketSellAssetContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketSellAssetContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketSellAssetContract::ArenaDtor(void* object) {
  MarketSellAssetContract* _this = reinterpret_cast< MarketSellAssetContract* >(object);
  (void)_this;
}
void MarketSellAssetContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketSellAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketSellAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketSellAssetContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  sell_token_id_.ClearToEmpty();
  buy_token_id_.ClearToEmpty();
  ::memset(&sell_token_quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_token_quantity_) -
      reinterpret_cast<char*>(&sell_token_quantity_)) + sizeof(buy_token_quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketSellAssetContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sell_token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sell_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sell_token_quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sell_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buy_token_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buy_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_token_quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          buy_token_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketSellAssetContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketSellAssetContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes sell_token_id = 2;
  if (!this->_internal_sell_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sell_token_id(), target);
  }

  // int64 sell_token_quantity = 3;
  if (this->_internal_sell_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sell_token_quantity(), target);
  }

  // bytes buy_token_id = 4;
  if (!this->_internal_buy_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buy_token_id(), target);
  }

  // int64 buy_token_quantity = 5;
  if (this->_internal_buy_token_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_buy_token_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketSellAssetContract)
  return target;
}

size_t MarketSellAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketSellAssetContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes sell_token_id = 2;
  if (!this->_internal_sell_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_token_id());
  }

  // bytes buy_token_id = 4;
  if (!this->_internal_buy_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_token_id());
  }

  // int64 sell_token_quantity = 3;
  if (this->_internal_sell_token_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sell_token_quantity());
  }

  // int64 buy_token_quantity = 5;
  if (this->_internal_buy_token_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buy_token_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketSellAssetContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketSellAssetContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketSellAssetContract::GetClassData() const { return &_class_data_; }

void MarketSellAssetContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MarketSellAssetContract *>(to)->MergeFrom(
      static_cast<const MarketSellAssetContract &>(from));
}


void MarketSellAssetContract::MergeFrom(const MarketSellAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketSellAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_sell_token_id().empty()) {
    _internal_set_sell_token_id(from._internal_sell_token_id());
  }
  if (!from._internal_buy_token_id().empty()) {
    _internal_set_buy_token_id(from._internal_buy_token_id());
  }
  if (from._internal_sell_token_quantity() != 0) {
    _internal_set_sell_token_quantity(from._internal_sell_token_quantity());
  }
  if (from._internal_buy_token_quantity() != 0) {
    _internal_set_buy_token_quantity(from._internal_buy_token_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSellAssetContract::CopyFrom(const MarketSellAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketSellAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSellAssetContract::IsInitialized() const {
  return true;
}

void MarketSellAssetContract::InternalSwap(MarketSellAssetContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_token_id_, lhs_arena,
      &other->sell_token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_token_id_, lhs_arena,
      &other->buy_token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSellAssetContract, buy_token_quantity_)
      + sizeof(MarketSellAssetContract::buy_token_quantity_)
      - PROTOBUF_FIELD_OFFSET(MarketSellAssetContract, sell_token_quantity_)>(
          reinterpret_cast<char*>(&sell_token_quantity_),
          reinterpret_cast<char*>(&other->sell_token_quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketSellAssetContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fmarket_5fcontract_2eproto[0]);
}

// ===================================================================

class MarketCancelOrderContract::_Internal {
 public:
};

MarketCancelOrderContract::MarketCancelOrderContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MarketCancelOrderContract)
}
MarketCancelOrderContract::MarketCancelOrderContract(const MarketCancelOrderContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MarketCancelOrderContract)
}

inline void MarketCancelOrderContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketCancelOrderContract::~MarketCancelOrderContract() {
  // @@protoc_insertion_point(destructor:protocol.MarketCancelOrderContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MarketCancelOrderContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketCancelOrderContract::ArenaDtor(void* object) {
  MarketCancelOrderContract* _this = reinterpret_cast< MarketCancelOrderContract* >(object);
  (void)_this;
}
void MarketCancelOrderContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketCancelOrderContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketCancelOrderContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MarketCancelOrderContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketCancelOrderContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketCancelOrderContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MarketCancelOrderContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes order_id = 2;
  if (!this->_internal_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MarketCancelOrderContract)
  return target;
}

size_t MarketCancelOrderContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MarketCancelOrderContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes order_id = 2;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_order_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketCancelOrderContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MarketCancelOrderContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketCancelOrderContract::GetClassData() const { return &_class_data_; }

void MarketCancelOrderContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MarketCancelOrderContract *>(to)->MergeFrom(
      static_cast<const MarketCancelOrderContract &>(from));
}


void MarketCancelOrderContract::MergeFrom(const MarketCancelOrderContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MarketCancelOrderContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_order_id().empty()) {
    _internal_set_order_id(from._internal_order_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketCancelOrderContract::CopyFrom(const MarketCancelOrderContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MarketCancelOrderContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketCancelOrderContract::IsInitialized() const {
  return true;
}

void MarketCancelOrderContract::InternalSwap(MarketCancelOrderContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_id_, lhs_arena,
      &other->order_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketCancelOrderContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fmarket_5fcontract_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::MarketSellAssetContract* Arena::CreateMaybeMessage< ::protocol::MarketSellAssetContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketSellAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MarketCancelOrderContract* Arena::CreateMaybeMessage< ::protocol::MarketCancelOrderContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MarketCancelOrderContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
