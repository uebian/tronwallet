// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/proposal_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fproposal_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fproposal_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fproposal_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fproposal_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fproposal_5fcontract_2eproto;
namespace protocol {
class ProposalApproveContract;
struct ProposalApproveContractDefaultTypeInternal;
extern ProposalApproveContractDefaultTypeInternal _ProposalApproveContract_default_instance_;
class ProposalCreateContract;
struct ProposalCreateContractDefaultTypeInternal;
extern ProposalCreateContractDefaultTypeInternal _ProposalCreateContract_default_instance_;
class ProposalCreateContract_ParametersEntry_DoNotUse;
struct ProposalCreateContract_ParametersEntry_DoNotUseDefaultTypeInternal;
extern ProposalCreateContract_ParametersEntry_DoNotUseDefaultTypeInternal _ProposalCreateContract_ParametersEntry_DoNotUse_default_instance_;
class ProposalDeleteContract;
struct ProposalDeleteContractDefaultTypeInternal;
extern ProposalDeleteContractDefaultTypeInternal _ProposalDeleteContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::ProposalApproveContract* Arena::CreateMaybeMessage<::protocol::ProposalApproveContract>(Arena*);
template<> ::protocol::ProposalCreateContract* Arena::CreateMaybeMessage<::protocol::ProposalCreateContract>(Arena*);
template<> ::protocol::ProposalCreateContract_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::ProposalCreateContract_ParametersEntry_DoNotUse>(Arena*);
template<> ::protocol::ProposalDeleteContract* Arena::CreateMaybeMessage<::protocol::ProposalDeleteContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class ProposalApproveContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ProposalApproveContract) */ {
 public:
  inline ProposalApproveContract() : ProposalApproveContract(nullptr) {}
  ~ProposalApproveContract() override;
  explicit constexpr ProposalApproveContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalApproveContract(const ProposalApproveContract& from);
  ProposalApproveContract(ProposalApproveContract&& from) noexcept
    : ProposalApproveContract() {
    *this = ::std::move(from);
  }

  inline ProposalApproveContract& operator=(const ProposalApproveContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalApproveContract& operator=(ProposalApproveContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalApproveContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalApproveContract* internal_default_instance() {
    return reinterpret_cast<const ProposalApproveContract*>(
               &_ProposalApproveContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProposalApproveContract& a, ProposalApproveContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalApproveContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalApproveContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalApproveContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalApproveContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalApproveContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalApproveContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalApproveContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ProposalApproveContract";
  }
  protected:
  explicit ProposalApproveContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kProposalIdFieldNumber = 2,
    kIsAddApprovalFieldNumber = 3,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int64 proposal_id = 2;
  void clear_proposal_id();
  int64_t proposal_id() const;
  void set_proposal_id(int64_t value);
  private:
  int64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(int64_t value);
  public:

  // bool is_add_approval = 3;
  void clear_is_add_approval();
  bool is_add_approval() const;
  void set_is_add_approval(bool value);
  private:
  bool _internal_is_add_approval() const;
  void _internal_set_is_add_approval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ProposalApproveContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int64_t proposal_id_;
  bool is_add_approval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fproposal_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ProposalCreateContract_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProposalCreateContract_ParametersEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProposalCreateContract_ParametersEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  ProposalCreateContract_ParametersEntry_DoNotUse();
  explicit constexpr ProposalCreateContract_ParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ProposalCreateContract_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProposalCreateContract_ParametersEntry_DoNotUse& other);
  static const ProposalCreateContract_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProposalCreateContract_ParametersEntry_DoNotUse*>(&_ProposalCreateContract_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ProposalCreateContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ProposalCreateContract) */ {
 public:
  inline ProposalCreateContract() : ProposalCreateContract(nullptr) {}
  ~ProposalCreateContract() override;
  explicit constexpr ProposalCreateContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalCreateContract(const ProposalCreateContract& from);
  ProposalCreateContract(ProposalCreateContract&& from) noexcept
    : ProposalCreateContract() {
    *this = ::std::move(from);
  }

  inline ProposalCreateContract& operator=(const ProposalCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalCreateContract& operator=(ProposalCreateContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalCreateContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalCreateContract* internal_default_instance() {
    return reinterpret_cast<const ProposalCreateContract*>(
               &_ProposalCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProposalCreateContract& a, ProposalCreateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalCreateContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalCreateContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalCreateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalCreateContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalCreateContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalCreateContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalCreateContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ProposalCreateContract";
  }
  protected:
  explicit ProposalCreateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kOwnerAddressFieldNumber = 1,
  };
  // map<int64, int64> parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_parameters();

  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // @@protoc_insertion_point(class_scope:protocol.ProposalCreateContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProposalCreateContract_ParametersEntry_DoNotUse,
      int64_t, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fproposal_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ProposalDeleteContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ProposalDeleteContract) */ {
 public:
  inline ProposalDeleteContract() : ProposalDeleteContract(nullptr) {}
  ~ProposalDeleteContract() override;
  explicit constexpr ProposalDeleteContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalDeleteContract(const ProposalDeleteContract& from);
  ProposalDeleteContract(ProposalDeleteContract&& from) noexcept
    : ProposalDeleteContract() {
    *this = ::std::move(from);
  }

  inline ProposalDeleteContract& operator=(const ProposalDeleteContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalDeleteContract& operator=(ProposalDeleteContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalDeleteContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalDeleteContract* internal_default_instance() {
    return reinterpret_cast<const ProposalDeleteContract*>(
               &_ProposalDeleteContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProposalDeleteContract& a, ProposalDeleteContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalDeleteContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalDeleteContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalDeleteContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalDeleteContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalDeleteContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalDeleteContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalDeleteContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ProposalDeleteContract";
  }
  protected:
  explicit ProposalDeleteContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kProposalIdFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int64 proposal_id = 2;
  void clear_proposal_id();
  int64_t proposal_id() const;
  void set_proposal_id(int64_t value);
  private:
  int64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ProposalDeleteContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int64_t proposal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fproposal_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProposalApproveContract

// bytes owner_address = 1;
inline void ProposalApproveContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ProposalApproveContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalApproveContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProposalApproveContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ProposalApproveContract.owner_address)
}
inline std::string* ProposalApproveContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ProposalApproveContract.owner_address)
  return _s;
}
inline const std::string& ProposalApproveContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ProposalApproveContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProposalApproveContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProposalApproveContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ProposalApproveContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProposalApproveContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ProposalApproveContract.owner_address)
}

// int64 proposal_id = 2;
inline void ProposalApproveContract::clear_proposal_id() {
  proposal_id_ = int64_t{0};
}
inline int64_t ProposalApproveContract::_internal_proposal_id() const {
  return proposal_id_;
}
inline int64_t ProposalApproveContract::proposal_id() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalApproveContract.proposal_id)
  return _internal_proposal_id();
}
inline void ProposalApproveContract::_internal_set_proposal_id(int64_t value) {
  
  proposal_id_ = value;
}
inline void ProposalApproveContract::set_proposal_id(int64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:protocol.ProposalApproveContract.proposal_id)
}

// bool is_add_approval = 3;
inline void ProposalApproveContract::clear_is_add_approval() {
  is_add_approval_ = false;
}
inline bool ProposalApproveContract::_internal_is_add_approval() const {
  return is_add_approval_;
}
inline bool ProposalApproveContract::is_add_approval() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalApproveContract.is_add_approval)
  return _internal_is_add_approval();
}
inline void ProposalApproveContract::_internal_set_is_add_approval(bool value) {
  
  is_add_approval_ = value;
}
inline void ProposalApproveContract::set_is_add_approval(bool value) {
  _internal_set_is_add_approval(value);
  // @@protoc_insertion_point(field_set:protocol.ProposalApproveContract.is_add_approval)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProposalCreateContract

// bytes owner_address = 1;
inline void ProposalCreateContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ProposalCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalCreateContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProposalCreateContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ProposalCreateContract.owner_address)
}
inline std::string* ProposalCreateContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ProposalCreateContract.owner_address)
  return _s;
}
inline const std::string& ProposalCreateContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ProposalCreateContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProposalCreateContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProposalCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ProposalCreateContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProposalCreateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ProposalCreateContract.owner_address)
}

// map<int64, int64> parameters = 2;
inline int ProposalCreateContract::_internal_parameters_size() const {
  return parameters_.size();
}
inline int ProposalCreateContract::parameters_size() const {
  return _internal_parameters_size();
}
inline void ProposalCreateContract::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
ProposalCreateContract::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
ProposalCreateContract::parameters() const {
  // @@protoc_insertion_point(field_map:protocol.ProposalCreateContract.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
ProposalCreateContract::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
ProposalCreateContract::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:protocol.ProposalCreateContract.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// ProposalDeleteContract

// bytes owner_address = 1;
inline void ProposalDeleteContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ProposalDeleteContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalDeleteContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProposalDeleteContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ProposalDeleteContract.owner_address)
}
inline std::string* ProposalDeleteContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ProposalDeleteContract.owner_address)
  return _s;
}
inline const std::string& ProposalDeleteContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ProposalDeleteContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProposalDeleteContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProposalDeleteContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ProposalDeleteContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProposalDeleteContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ProposalDeleteContract.owner_address)
}

// int64 proposal_id = 2;
inline void ProposalDeleteContract::clear_proposal_id() {
  proposal_id_ = int64_t{0};
}
inline int64_t ProposalDeleteContract::_internal_proposal_id() const {
  return proposal_id_;
}
inline int64_t ProposalDeleteContract::proposal_id() const {
  // @@protoc_insertion_point(field_get:protocol.ProposalDeleteContract.proposal_id)
  return _internal_proposal_id();
}
inline void ProposalDeleteContract::_internal_set_proposal_id(int64_t value) {
  
  proposal_id_ = value;
}
inline void ProposalDeleteContract::set_proposal_id(int64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:protocol.ProposalDeleteContract.proposal_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fproposal_5fcontract_2eproto
