// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/shield_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fshield_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fshield_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fshield_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto;
namespace protocol {
class AuthenticationPath;
struct AuthenticationPathDefaultTypeInternal;
extern AuthenticationPathDefaultTypeInternal _AuthenticationPath_default_instance_;
class IncrementalMerkleTree;
struct IncrementalMerkleTreeDefaultTypeInternal;
extern IncrementalMerkleTreeDefaultTypeInternal _IncrementalMerkleTree_default_instance_;
class IncrementalMerkleVoucher;
struct IncrementalMerkleVoucherDefaultTypeInternal;
extern IncrementalMerkleVoucherDefaultTypeInternal _IncrementalMerkleVoucher_default_instance_;
class IncrementalMerkleVoucherInfo;
struct IncrementalMerkleVoucherInfoDefaultTypeInternal;
extern IncrementalMerkleVoucherInfoDefaultTypeInternal _IncrementalMerkleVoucherInfo_default_instance_;
class MerklePath;
struct MerklePathDefaultTypeInternal;
extern MerklePathDefaultTypeInternal _MerklePath_default_instance_;
class OutputPoint;
struct OutputPointDefaultTypeInternal;
extern OutputPointDefaultTypeInternal _OutputPoint_default_instance_;
class OutputPointInfo;
struct OutputPointInfoDefaultTypeInternal;
extern OutputPointInfoDefaultTypeInternal _OutputPointInfo_default_instance_;
class PedersenHash;
struct PedersenHashDefaultTypeInternal;
extern PedersenHashDefaultTypeInternal _PedersenHash_default_instance_;
class ReceiveDescription;
struct ReceiveDescriptionDefaultTypeInternal;
extern ReceiveDescriptionDefaultTypeInternal _ReceiveDescription_default_instance_;
class ShieldedTransferContract;
struct ShieldedTransferContractDefaultTypeInternal;
extern ShieldedTransferContractDefaultTypeInternal _ShieldedTransferContract_default_instance_;
class SpendDescription;
struct SpendDescriptionDefaultTypeInternal;
extern SpendDescriptionDefaultTypeInternal _SpendDescription_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::AuthenticationPath* Arena::CreateMaybeMessage<::protocol::AuthenticationPath>(Arena*);
template<> ::protocol::IncrementalMerkleTree* Arena::CreateMaybeMessage<::protocol::IncrementalMerkleTree>(Arena*);
template<> ::protocol::IncrementalMerkleVoucher* Arena::CreateMaybeMessage<::protocol::IncrementalMerkleVoucher>(Arena*);
template<> ::protocol::IncrementalMerkleVoucherInfo* Arena::CreateMaybeMessage<::protocol::IncrementalMerkleVoucherInfo>(Arena*);
template<> ::protocol::MerklePath* Arena::CreateMaybeMessage<::protocol::MerklePath>(Arena*);
template<> ::protocol::OutputPoint* Arena::CreateMaybeMessage<::protocol::OutputPoint>(Arena*);
template<> ::protocol::OutputPointInfo* Arena::CreateMaybeMessage<::protocol::OutputPointInfo>(Arena*);
template<> ::protocol::PedersenHash* Arena::CreateMaybeMessage<::protocol::PedersenHash>(Arena*);
template<> ::protocol::ReceiveDescription* Arena::CreateMaybeMessage<::protocol::ReceiveDescription>(Arena*);
template<> ::protocol::ShieldedTransferContract* Arena::CreateMaybeMessage<::protocol::ShieldedTransferContract>(Arena*);
template<> ::protocol::SpendDescription* Arena::CreateMaybeMessage<::protocol::SpendDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class AuthenticationPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AuthenticationPath) */ {
 public:
  inline AuthenticationPath() : AuthenticationPath(nullptr) {}
  ~AuthenticationPath() override;
  explicit constexpr AuthenticationPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationPath(const AuthenticationPath& from);
  AuthenticationPath(AuthenticationPath&& from) noexcept
    : AuthenticationPath() {
    *this = ::std::move(from);
  }

  inline AuthenticationPath& operator=(const AuthenticationPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationPath& operator=(AuthenticationPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationPath* internal_default_instance() {
    return reinterpret_cast<const AuthenticationPath*>(
               &_AuthenticationPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationPath& a, AuthenticationPath& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AuthenticationPath";
  }
  protected:
  explicit AuthenticationPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bool value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  bool _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_value() const;
  void _internal_add_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_value();
  public:
  bool value(int index) const;
  void set_value(int index, bool value);
  void add_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:protocol.AuthenticationPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class MerklePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MerklePath) */ {
 public:
  inline MerklePath() : MerklePath(nullptr) {}
  ~MerklePath() override;
  explicit constexpr MerklePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MerklePath(const MerklePath& from);
  MerklePath(MerklePath&& from) noexcept
    : MerklePath() {
    *this = ::std::move(from);
  }

  inline MerklePath& operator=(const MerklePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerklePath& operator=(MerklePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MerklePath& default_instance() {
    return *internal_default_instance();
  }
  static inline const MerklePath* internal_default_instance() {
    return reinterpret_cast<const MerklePath*>(
               &_MerklePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MerklePath& a, MerklePath& b) {
    a.Swap(&b);
  }
  inline void Swap(MerklePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerklePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MerklePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MerklePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MerklePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MerklePath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerklePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MerklePath";
  }
  protected:
  explicit MerklePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationPathsFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRtFieldNumber = 3,
  };
  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  int authentication_paths_size() const;
  private:
  int _internal_authentication_paths_size() const;
  public:
  void clear_authentication_paths();
  ::protocol::AuthenticationPath* mutable_authentication_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AuthenticationPath >*
      mutable_authentication_paths();
  private:
  const ::protocol::AuthenticationPath& _internal_authentication_paths(int index) const;
  ::protocol::AuthenticationPath* _internal_add_authentication_paths();
  public:
  const ::protocol::AuthenticationPath& authentication_paths(int index) const;
  ::protocol::AuthenticationPath* add_authentication_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AuthenticationPath >&
      authentication_paths() const;

  // repeated bool index = 2;
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  bool _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_index() const;
  void _internal_add_index(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_index();
  public:
  bool index(int index) const;
  void set_index(int index, bool value);
  void add_index(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_index();

  // bytes rt = 3;
  void clear_rt();
  const std::string& rt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rt();
  PROTOBUF_NODISCARD std::string* release_rt();
  void set_allocated_rt(std::string* rt);
  private:
  const std::string& _internal_rt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rt(const std::string& value);
  std::string* _internal_mutable_rt();
  public:

  // @@protoc_insertion_point(class_scope:protocol.MerklePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AuthenticationPath > authentication_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class OutputPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.OutputPoint) */ {
 public:
  inline OutputPoint() : OutputPoint(nullptr) {}
  ~OutputPoint() override;
  explicit constexpr OutputPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputPoint(const OutputPoint& from);
  OutputPoint(OutputPoint&& from) noexcept
    : OutputPoint() {
    *this = ::std::move(from);
  }

  inline OutputPoint& operator=(const OutputPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputPoint& operator=(OutputPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputPoint* internal_default_instance() {
    return reinterpret_cast<const OutputPoint*>(
               &_OutputPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutputPoint& a, OutputPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.OutputPoint";
  }
  protected:
  explicit OutputPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 index = 2;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.OutputPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class OutputPointInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.OutputPointInfo) */ {
 public:
  inline OutputPointInfo() : OutputPointInfo(nullptr) {}
  ~OutputPointInfo() override;
  explicit constexpr OutputPointInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputPointInfo(const OutputPointInfo& from);
  OutputPointInfo(OutputPointInfo&& from) noexcept
    : OutputPointInfo() {
    *this = ::std::move(from);
  }

  inline OutputPointInfo& operator=(const OutputPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputPointInfo& operator=(OutputPointInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputPointInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputPointInfo* internal_default_instance() {
    return reinterpret_cast<const OutputPointInfo*>(
               &_OutputPointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OutputPointInfo& a, OutputPointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputPointInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputPointInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputPointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputPointInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputPointInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutputPointInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputPointInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.OutputPointInfo";
  }
  protected:
  explicit OutputPointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutPointsFieldNumber = 1,
    kBlockNumFieldNumber = 2,
  };
  // repeated .protocol.OutputPoint out_points = 1;
  int out_points_size() const;
  private:
  int _internal_out_points_size() const;
  public:
  void clear_out_points();
  ::protocol::OutputPoint* mutable_out_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OutputPoint >*
      mutable_out_points();
  private:
  const ::protocol::OutputPoint& _internal_out_points(int index) const;
  ::protocol::OutputPoint* _internal_add_out_points();
  public:
  const ::protocol::OutputPoint& out_points(int index) const;
  ::protocol::OutputPoint* add_out_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OutputPoint >&
      out_points() const;

  // int32 block_num = 2;
  void clear_block_num();
  int32_t block_num() const;
  void set_block_num(int32_t value);
  private:
  int32_t _internal_block_num() const;
  void _internal_set_block_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.OutputPointInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OutputPoint > out_points_;
  int32_t block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class PedersenHash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.PedersenHash) */ {
 public:
  inline PedersenHash() : PedersenHash(nullptr) {}
  ~PedersenHash() override;
  explicit constexpr PedersenHash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PedersenHash(const PedersenHash& from);
  PedersenHash(PedersenHash&& from) noexcept
    : PedersenHash() {
    *this = ::std::move(from);
  }

  inline PedersenHash& operator=(const PedersenHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline PedersenHash& operator=(PedersenHash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PedersenHash& default_instance() {
    return *internal_default_instance();
  }
  static inline const PedersenHash* internal_default_instance() {
    return reinterpret_cast<const PedersenHash*>(
               &_PedersenHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PedersenHash& a, PedersenHash& b) {
    a.Swap(&b);
  }
  inline void Swap(PedersenHash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PedersenHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PedersenHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PedersenHash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PedersenHash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PedersenHash& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PedersenHash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.PedersenHash";
  }
  protected:
  explicit PedersenHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:protocol.PedersenHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class IncrementalMerkleTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.IncrementalMerkleTree) */ {
 public:
  inline IncrementalMerkleTree() : IncrementalMerkleTree(nullptr) {}
  ~IncrementalMerkleTree() override;
  explicit constexpr IncrementalMerkleTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalMerkleTree(const IncrementalMerkleTree& from);
  IncrementalMerkleTree(IncrementalMerkleTree&& from) noexcept
    : IncrementalMerkleTree() {
    *this = ::std::move(from);
  }

  inline IncrementalMerkleTree& operator=(const IncrementalMerkleTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalMerkleTree& operator=(IncrementalMerkleTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalMerkleTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalMerkleTree* internal_default_instance() {
    return reinterpret_cast<const IncrementalMerkleTree*>(
               &_IncrementalMerkleTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IncrementalMerkleTree& a, IncrementalMerkleTree& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalMerkleTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalMerkleTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncrementalMerkleTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncrementalMerkleTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalMerkleTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalMerkleTree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalMerkleTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.IncrementalMerkleTree";
  }
  protected:
  explicit IncrementalMerkleTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 3,
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // repeated .protocol.PedersenHash parents = 3;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  ::protocol::PedersenHash* mutable_parents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >*
      mutable_parents();
  private:
  const ::protocol::PedersenHash& _internal_parents(int index) const;
  ::protocol::PedersenHash* _internal_add_parents();
  public:
  const ::protocol::PedersenHash& parents(int index) const;
  ::protocol::PedersenHash* add_parents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >&
      parents() const;

  // .protocol.PedersenHash left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::protocol::PedersenHash& left() const;
  PROTOBUF_NODISCARD ::protocol::PedersenHash* release_left();
  ::protocol::PedersenHash* mutable_left();
  void set_allocated_left(::protocol::PedersenHash* left);
  private:
  const ::protocol::PedersenHash& _internal_left() const;
  ::protocol::PedersenHash* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::protocol::PedersenHash* left);
  ::protocol::PedersenHash* unsafe_arena_release_left();

  // .protocol.PedersenHash right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::protocol::PedersenHash& right() const;
  PROTOBUF_NODISCARD ::protocol::PedersenHash* release_right();
  ::protocol::PedersenHash* mutable_right();
  void set_allocated_right(::protocol::PedersenHash* right);
  private:
  const ::protocol::PedersenHash& _internal_right() const;
  ::protocol::PedersenHash* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::protocol::PedersenHash* right);
  ::protocol::PedersenHash* unsafe_arena_release_right();

  // @@protoc_insertion_point(class_scope:protocol.IncrementalMerkleTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash > parents_;
  ::protocol::PedersenHash* left_;
  ::protocol::PedersenHash* right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class IncrementalMerkleVoucher final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.IncrementalMerkleVoucher) */ {
 public:
  inline IncrementalMerkleVoucher() : IncrementalMerkleVoucher(nullptr) {}
  ~IncrementalMerkleVoucher() override;
  explicit constexpr IncrementalMerkleVoucher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalMerkleVoucher(const IncrementalMerkleVoucher& from);
  IncrementalMerkleVoucher(IncrementalMerkleVoucher&& from) noexcept
    : IncrementalMerkleVoucher() {
    *this = ::std::move(from);
  }

  inline IncrementalMerkleVoucher& operator=(const IncrementalMerkleVoucher& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalMerkleVoucher& operator=(IncrementalMerkleVoucher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalMerkleVoucher& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalMerkleVoucher* internal_default_instance() {
    return reinterpret_cast<const IncrementalMerkleVoucher*>(
               &_IncrementalMerkleVoucher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IncrementalMerkleVoucher& a, IncrementalMerkleVoucher& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalMerkleVoucher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalMerkleVoucher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncrementalMerkleVoucher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncrementalMerkleVoucher>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalMerkleVoucher& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalMerkleVoucher& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalMerkleVoucher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.IncrementalMerkleVoucher";
  }
  protected:
  explicit IncrementalMerkleVoucher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilledFieldNumber = 2,
    kRtFieldNumber = 5,
    kTreeFieldNumber = 1,
    kCursorFieldNumber = 3,
    kOutputPointFieldNumber = 10,
    kCursorDepthFieldNumber = 4,
  };
  // repeated .protocol.PedersenHash filled = 2;
  int filled_size() const;
  private:
  int _internal_filled_size() const;
  public:
  void clear_filled();
  ::protocol::PedersenHash* mutable_filled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >*
      mutable_filled();
  private:
  const ::protocol::PedersenHash& _internal_filled(int index) const;
  ::protocol::PedersenHash* _internal_add_filled();
  public:
  const ::protocol::PedersenHash& filled(int index) const;
  ::protocol::PedersenHash* add_filled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >&
      filled() const;

  // bytes rt = 5;
  void clear_rt();
  const std::string& rt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rt();
  PROTOBUF_NODISCARD std::string* release_rt();
  void set_allocated_rt(std::string* rt);
  private:
  const std::string& _internal_rt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rt(const std::string& value);
  std::string* _internal_mutable_rt();
  public:

  // .protocol.IncrementalMerkleTree tree = 1;
  bool has_tree() const;
  private:
  bool _internal_has_tree() const;
  public:
  void clear_tree();
  const ::protocol::IncrementalMerkleTree& tree() const;
  PROTOBUF_NODISCARD ::protocol::IncrementalMerkleTree* release_tree();
  ::protocol::IncrementalMerkleTree* mutable_tree();
  void set_allocated_tree(::protocol::IncrementalMerkleTree* tree);
  private:
  const ::protocol::IncrementalMerkleTree& _internal_tree() const;
  ::protocol::IncrementalMerkleTree* _internal_mutable_tree();
  public:
  void unsafe_arena_set_allocated_tree(
      ::protocol::IncrementalMerkleTree* tree);
  ::protocol::IncrementalMerkleTree* unsafe_arena_release_tree();

  // .protocol.IncrementalMerkleTree cursor = 3;
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  const ::protocol::IncrementalMerkleTree& cursor() const;
  PROTOBUF_NODISCARD ::protocol::IncrementalMerkleTree* release_cursor();
  ::protocol::IncrementalMerkleTree* mutable_cursor();
  void set_allocated_cursor(::protocol::IncrementalMerkleTree* cursor);
  private:
  const ::protocol::IncrementalMerkleTree& _internal_cursor() const;
  ::protocol::IncrementalMerkleTree* _internal_mutable_cursor();
  public:
  void unsafe_arena_set_allocated_cursor(
      ::protocol::IncrementalMerkleTree* cursor);
  ::protocol::IncrementalMerkleTree* unsafe_arena_release_cursor();

  // .protocol.OutputPoint output_point = 10;
  bool has_output_point() const;
  private:
  bool _internal_has_output_point() const;
  public:
  void clear_output_point();
  const ::protocol::OutputPoint& output_point() const;
  PROTOBUF_NODISCARD ::protocol::OutputPoint* release_output_point();
  ::protocol::OutputPoint* mutable_output_point();
  void set_allocated_output_point(::protocol::OutputPoint* output_point);
  private:
  const ::protocol::OutputPoint& _internal_output_point() const;
  ::protocol::OutputPoint* _internal_mutable_output_point();
  public:
  void unsafe_arena_set_allocated_output_point(
      ::protocol::OutputPoint* output_point);
  ::protocol::OutputPoint* unsafe_arena_release_output_point();

  // int64 cursor_depth = 4;
  void clear_cursor_depth();
  int64_t cursor_depth() const;
  void set_cursor_depth(int64_t value);
  private:
  int64_t _internal_cursor_depth() const;
  void _internal_set_cursor_depth(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.IncrementalMerkleVoucher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash > filled_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rt_;
  ::protocol::IncrementalMerkleTree* tree_;
  ::protocol::IncrementalMerkleTree* cursor_;
  ::protocol::OutputPoint* output_point_;
  int64_t cursor_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class IncrementalMerkleVoucherInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.IncrementalMerkleVoucherInfo) */ {
 public:
  inline IncrementalMerkleVoucherInfo() : IncrementalMerkleVoucherInfo(nullptr) {}
  ~IncrementalMerkleVoucherInfo() override;
  explicit constexpr IncrementalMerkleVoucherInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalMerkleVoucherInfo(const IncrementalMerkleVoucherInfo& from);
  IncrementalMerkleVoucherInfo(IncrementalMerkleVoucherInfo&& from) noexcept
    : IncrementalMerkleVoucherInfo() {
    *this = ::std::move(from);
  }

  inline IncrementalMerkleVoucherInfo& operator=(const IncrementalMerkleVoucherInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalMerkleVoucherInfo& operator=(IncrementalMerkleVoucherInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalMerkleVoucherInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalMerkleVoucherInfo* internal_default_instance() {
    return reinterpret_cast<const IncrementalMerkleVoucherInfo*>(
               &_IncrementalMerkleVoucherInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IncrementalMerkleVoucherInfo& a, IncrementalMerkleVoucherInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalMerkleVoucherInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalMerkleVoucherInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncrementalMerkleVoucherInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncrementalMerkleVoucherInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalMerkleVoucherInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalMerkleVoucherInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalMerkleVoucherInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.IncrementalMerkleVoucherInfo";
  }
  protected:
  explicit IncrementalMerkleVoucherInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVouchersFieldNumber = 1,
    kPathsFieldNumber = 2,
  };
  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  int vouchers_size() const;
  private:
  int _internal_vouchers_size() const;
  public:
  void clear_vouchers();
  ::protocol::IncrementalMerkleVoucher* mutable_vouchers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::IncrementalMerkleVoucher >*
      mutable_vouchers();
  private:
  const ::protocol::IncrementalMerkleVoucher& _internal_vouchers(int index) const;
  ::protocol::IncrementalMerkleVoucher* _internal_add_vouchers();
  public:
  const ::protocol::IncrementalMerkleVoucher& vouchers(int index) const;
  ::protocol::IncrementalMerkleVoucher* add_vouchers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::IncrementalMerkleVoucher >&
      vouchers() const;

  // repeated bytes paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const void* value, size_t size);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_paths();
  private:
  const std::string& _internal_paths(int index) const;
  std::string* _internal_add_paths();
  public:

  // @@protoc_insertion_point(class_scope:protocol.IncrementalMerkleVoucherInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::IncrementalMerkleVoucher > vouchers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SpendDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SpendDescription) */ {
 public:
  inline SpendDescription() : SpendDescription(nullptr) {}
  ~SpendDescription() override;
  explicit constexpr SpendDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpendDescription(const SpendDescription& from);
  SpendDescription(SpendDescription&& from) noexcept
    : SpendDescription() {
    *this = ::std::move(from);
  }

  inline SpendDescription& operator=(const SpendDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpendDescription& operator=(SpendDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpendDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpendDescription* internal_default_instance() {
    return reinterpret_cast<const SpendDescription*>(
               &_SpendDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpendDescription& a, SpendDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SpendDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpendDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpendDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpendDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpendDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpendDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpendDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SpendDescription";
  }
  protected:
  explicit SpendDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueCommitmentFieldNumber = 1,
    kAnchorFieldNumber = 2,
    kNullifierFieldNumber = 3,
    kRkFieldNumber = 4,
    kZkproofFieldNumber = 5,
    kSpendAuthoritySignatureFieldNumber = 6,
  };
  // bytes value_commitment = 1;
  void clear_value_commitment();
  const std::string& value_commitment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_commitment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_commitment();
  PROTOBUF_NODISCARD std::string* release_value_commitment();
  void set_allocated_value_commitment(std::string* value_commitment);
  private:
  const std::string& _internal_value_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_commitment(const std::string& value);
  std::string* _internal_mutable_value_commitment();
  public:

  // bytes anchor = 2;
  void clear_anchor();
  const std::string& anchor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anchor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anchor();
  PROTOBUF_NODISCARD std::string* release_anchor();
  void set_allocated_anchor(std::string* anchor);
  private:
  const std::string& _internal_anchor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anchor(const std::string& value);
  std::string* _internal_mutable_anchor();
  public:

  // bytes nullifier = 3;
  void clear_nullifier();
  const std::string& nullifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nullifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nullifier();
  PROTOBUF_NODISCARD std::string* release_nullifier();
  void set_allocated_nullifier(std::string* nullifier);
  private:
  const std::string& _internal_nullifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nullifier(const std::string& value);
  std::string* _internal_mutable_nullifier();
  public:

  // bytes rk = 4;
  void clear_rk();
  const std::string& rk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rk();
  PROTOBUF_NODISCARD std::string* release_rk();
  void set_allocated_rk(std::string* rk);
  private:
  const std::string& _internal_rk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rk(const std::string& value);
  std::string* _internal_mutable_rk();
  public:

  // bytes zkproof = 5;
  void clear_zkproof();
  const std::string& zkproof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zkproof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* zkproof);
  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(const std::string& value);
  std::string* _internal_mutable_zkproof();
  public:

  // bytes spend_authority_signature = 6;
  void clear_spend_authority_signature();
  const std::string& spend_authority_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spend_authority_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spend_authority_signature();
  PROTOBUF_NODISCARD std::string* release_spend_authority_signature();
  void set_allocated_spend_authority_signature(std::string* spend_authority_signature);
  private:
  const std::string& _internal_spend_authority_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spend_authority_signature(const std::string& value);
  std::string* _internal_mutable_spend_authority_signature();
  public:

  // @@protoc_insertion_point(class_scope:protocol.SpendDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nullifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zkproof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spend_authority_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ReceiveDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ReceiveDescription) */ {
 public:
  inline ReceiveDescription() : ReceiveDescription(nullptr) {}
  ~ReceiveDescription() override;
  explicit constexpr ReceiveDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveDescription(const ReceiveDescription& from);
  ReceiveDescription(ReceiveDescription&& from) noexcept
    : ReceiveDescription() {
    *this = ::std::move(from);
  }

  inline ReceiveDescription& operator=(const ReceiveDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveDescription& operator=(ReceiveDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveDescription* internal_default_instance() {
    return reinterpret_cast<const ReceiveDescription*>(
               &_ReceiveDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReceiveDescription& a, ReceiveDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReceiveDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ReceiveDescription";
  }
  protected:
  explicit ReceiveDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueCommitmentFieldNumber = 1,
    kNoteCommitmentFieldNumber = 2,
    kEpkFieldNumber = 3,
    kCEncFieldNumber = 4,
    kCOutFieldNumber = 5,
    kZkproofFieldNumber = 6,
  };
  // bytes value_commitment = 1;
  void clear_value_commitment();
  const std::string& value_commitment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_commitment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_commitment();
  PROTOBUF_NODISCARD std::string* release_value_commitment();
  void set_allocated_value_commitment(std::string* value_commitment);
  private:
  const std::string& _internal_value_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_commitment(const std::string& value);
  std::string* _internal_mutable_value_commitment();
  public:

  // bytes note_commitment = 2;
  void clear_note_commitment();
  const std::string& note_commitment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note_commitment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note_commitment();
  PROTOBUF_NODISCARD std::string* release_note_commitment();
  void set_allocated_note_commitment(std::string* note_commitment);
  private:
  const std::string& _internal_note_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note_commitment(const std::string& value);
  std::string* _internal_mutable_note_commitment();
  public:

  // bytes epk = 3;
  void clear_epk();
  const std::string& epk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_epk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_epk();
  PROTOBUF_NODISCARD std::string* release_epk();
  void set_allocated_epk(std::string* epk);
  private:
  const std::string& _internal_epk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epk(const std::string& value);
  std::string* _internal_mutable_epk();
  public:

  // bytes c_enc = 4;
  void clear_c_enc();
  const std::string& c_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c_enc();
  PROTOBUF_NODISCARD std::string* release_c_enc();
  void set_allocated_c_enc(std::string* c_enc);
  private:
  const std::string& _internal_c_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c_enc(const std::string& value);
  std::string* _internal_mutable_c_enc();
  public:

  // bytes c_out = 5;
  void clear_c_out();
  const std::string& c_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c_out();
  PROTOBUF_NODISCARD std::string* release_c_out();
  void set_allocated_c_out(std::string* c_out);
  private:
  const std::string& _internal_c_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c_out(const std::string& value);
  std::string* _internal_mutable_c_out();
  public:

  // bytes zkproof = 6;
  void clear_zkproof();
  const std::string& zkproof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zkproof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* zkproof);
  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(const std::string& value);
  std::string* _internal_mutable_zkproof();
  public:

  // @@protoc_insertion_point(class_scope:protocol.ReceiveDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_enc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zkproof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ShieldedTransferContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ShieldedTransferContract) */ {
 public:
  inline ShieldedTransferContract() : ShieldedTransferContract(nullptr) {}
  ~ShieldedTransferContract() override;
  explicit constexpr ShieldedTransferContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShieldedTransferContract(const ShieldedTransferContract& from);
  ShieldedTransferContract(ShieldedTransferContract&& from) noexcept
    : ShieldedTransferContract() {
    *this = ::std::move(from);
  }

  inline ShieldedTransferContract& operator=(const ShieldedTransferContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShieldedTransferContract& operator=(ShieldedTransferContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShieldedTransferContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShieldedTransferContract* internal_default_instance() {
    return reinterpret_cast<const ShieldedTransferContract*>(
               &_ShieldedTransferContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ShieldedTransferContract& a, ShieldedTransferContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ShieldedTransferContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShieldedTransferContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShieldedTransferContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShieldedTransferContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShieldedTransferContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShieldedTransferContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShieldedTransferContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ShieldedTransferContract";
  }
  protected:
  explicit ShieldedTransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpendDescriptionFieldNumber = 3,
    kReceiveDescriptionFieldNumber = 4,
    kTransparentFromAddressFieldNumber = 1,
    kBindingSignatureFieldNumber = 5,
    kTransparentToAddressFieldNumber = 6,
    kFromAmountFieldNumber = 2,
    kToAmountFieldNumber = 7,
  };
  // repeated .protocol.SpendDescription spend_description = 3;
  int spend_description_size() const;
  private:
  int _internal_spend_description_size() const;
  public:
  void clear_spend_description();
  ::protocol::SpendDescription* mutable_spend_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SpendDescription >*
      mutable_spend_description();
  private:
  const ::protocol::SpendDescription& _internal_spend_description(int index) const;
  ::protocol::SpendDescription* _internal_add_spend_description();
  public:
  const ::protocol::SpendDescription& spend_description(int index) const;
  ::protocol::SpendDescription* add_spend_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SpendDescription >&
      spend_description() const;

  // repeated .protocol.ReceiveDescription receive_description = 4;
  int receive_description_size() const;
  private:
  int _internal_receive_description_size() const;
  public:
  void clear_receive_description();
  ::protocol::ReceiveDescription* mutable_receive_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ReceiveDescription >*
      mutable_receive_description();
  private:
  const ::protocol::ReceiveDescription& _internal_receive_description(int index) const;
  ::protocol::ReceiveDescription* _internal_add_receive_description();
  public:
  const ::protocol::ReceiveDescription& receive_description(int index) const;
  ::protocol::ReceiveDescription* add_receive_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ReceiveDescription >&
      receive_description() const;

  // bytes transparent_from_address = 1;
  void clear_transparent_from_address();
  const std::string& transparent_from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transparent_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transparent_from_address();
  PROTOBUF_NODISCARD std::string* release_transparent_from_address();
  void set_allocated_transparent_from_address(std::string* transparent_from_address);
  private:
  const std::string& _internal_transparent_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transparent_from_address(const std::string& value);
  std::string* _internal_mutable_transparent_from_address();
  public:

  // bytes binding_signature = 5;
  void clear_binding_signature();
  const std::string& binding_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binding_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binding_signature();
  PROTOBUF_NODISCARD std::string* release_binding_signature();
  void set_allocated_binding_signature(std::string* binding_signature);
  private:
  const std::string& _internal_binding_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binding_signature(const std::string& value);
  std::string* _internal_mutable_binding_signature();
  public:

  // bytes transparent_to_address = 6;
  void clear_transparent_to_address();
  const std::string& transparent_to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transparent_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transparent_to_address();
  PROTOBUF_NODISCARD std::string* release_transparent_to_address();
  void set_allocated_transparent_to_address(std::string* transparent_to_address);
  private:
  const std::string& _internal_transparent_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transparent_to_address(const std::string& value);
  std::string* _internal_mutable_transparent_to_address();
  public:

  // int64 from_amount = 2;
  void clear_from_amount();
  int64_t from_amount() const;
  void set_from_amount(int64_t value);
  private:
  int64_t _internal_from_amount() const;
  void _internal_set_from_amount(int64_t value);
  public:

  // int64 to_amount = 7;
  void clear_to_amount();
  int64_t to_amount() const;
  void set_to_amount(int64_t value);
  private:
  int64_t _internal_to_amount() const;
  void _internal_set_to_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ShieldedTransferContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SpendDescription > spend_description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ReceiveDescription > receive_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transparent_from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binding_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transparent_to_address_;
  int64_t from_amount_;
  int64_t to_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fshield_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationPath

// repeated bool value = 1;
inline int AuthenticationPath::_internal_value_size() const {
  return value_.size();
}
inline int AuthenticationPath::value_size() const {
  return _internal_value_size();
}
inline void AuthenticationPath::clear_value() {
  value_.Clear();
}
inline bool AuthenticationPath::_internal_value(int index) const {
  return value_.Get(index);
}
inline bool AuthenticationPath::value(int index) const {
  // @@protoc_insertion_point(field_get:protocol.AuthenticationPath.value)
  return _internal_value(index);
}
inline void AuthenticationPath::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.AuthenticationPath.value)
}
inline void AuthenticationPath::_internal_add_value(bool value) {
  value_.Add(value);
}
inline void AuthenticationPath::add_value(bool value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:protocol.AuthenticationPath.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AuthenticationPath::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
AuthenticationPath::value() const {
  // @@protoc_insertion_point(field_list:protocol.AuthenticationPath.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AuthenticationPath::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
AuthenticationPath::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:protocol.AuthenticationPath.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// MerklePath

// repeated .protocol.AuthenticationPath authentication_paths = 1;
inline int MerklePath::_internal_authentication_paths_size() const {
  return authentication_paths_.size();
}
inline int MerklePath::authentication_paths_size() const {
  return _internal_authentication_paths_size();
}
inline void MerklePath::clear_authentication_paths() {
  authentication_paths_.Clear();
}
inline ::protocol::AuthenticationPath* MerklePath::mutable_authentication_paths(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.MerklePath.authentication_paths)
  return authentication_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AuthenticationPath >*
MerklePath::mutable_authentication_paths() {
  // @@protoc_insertion_point(field_mutable_list:protocol.MerklePath.authentication_paths)
  return &authentication_paths_;
}
inline const ::protocol::AuthenticationPath& MerklePath::_internal_authentication_paths(int index) const {
  return authentication_paths_.Get(index);
}
inline const ::protocol::AuthenticationPath& MerklePath::authentication_paths(int index) const {
  // @@protoc_insertion_point(field_get:protocol.MerklePath.authentication_paths)
  return _internal_authentication_paths(index);
}
inline ::protocol::AuthenticationPath* MerklePath::_internal_add_authentication_paths() {
  return authentication_paths_.Add();
}
inline ::protocol::AuthenticationPath* MerklePath::add_authentication_paths() {
  ::protocol::AuthenticationPath* _add = _internal_add_authentication_paths();
  // @@protoc_insertion_point(field_add:protocol.MerklePath.authentication_paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AuthenticationPath >&
MerklePath::authentication_paths() const {
  // @@protoc_insertion_point(field_list:protocol.MerklePath.authentication_paths)
  return authentication_paths_;
}

// repeated bool index = 2;
inline int MerklePath::_internal_index_size() const {
  return index_.size();
}
inline int MerklePath::index_size() const {
  return _internal_index_size();
}
inline void MerklePath::clear_index() {
  index_.Clear();
}
inline bool MerklePath::_internal_index(int index) const {
  return index_.Get(index);
}
inline bool MerklePath::index(int index) const {
  // @@protoc_insertion_point(field_get:protocol.MerklePath.index)
  return _internal_index(index);
}
inline void MerklePath::set_index(int index, bool value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.MerklePath.index)
}
inline void MerklePath::_internal_add_index(bool value) {
  index_.Add(value);
}
inline void MerklePath::add_index(bool value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:protocol.MerklePath.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
MerklePath::_internal_index() const {
  return index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
MerklePath::index() const {
  // @@protoc_insertion_point(field_list:protocol.MerklePath.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
MerklePath::_internal_mutable_index() {
  return &index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
MerklePath::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:protocol.MerklePath.index)
  return _internal_mutable_index();
}

// bytes rt = 3;
inline void MerklePath::clear_rt() {
  rt_.ClearToEmpty();
}
inline const std::string& MerklePath::rt() const {
  // @@protoc_insertion_point(field_get:protocol.MerklePath.rt)
  return _internal_rt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MerklePath::set_rt(ArgT0&& arg0, ArgT... args) {
 
 rt_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MerklePath.rt)
}
inline std::string* MerklePath::mutable_rt() {
  std::string* _s = _internal_mutable_rt();
  // @@protoc_insertion_point(field_mutable:protocol.MerklePath.rt)
  return _s;
}
inline const std::string& MerklePath::_internal_rt() const {
  return rt_.Get();
}
inline void MerklePath::_internal_set_rt(const std::string& value) {
  
  rt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MerklePath::_internal_mutable_rt() {
  
  return rt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MerklePath::release_rt() {
  // @@protoc_insertion_point(field_release:protocol.MerklePath.rt)
  return rt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MerklePath::set_allocated_rt(std::string* rt) {
  if (rt != nullptr) {
    
  } else {
    
  }
  rt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MerklePath.rt)
}

// -------------------------------------------------------------------

// OutputPoint

// bytes hash = 1;
inline void OutputPoint::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& OutputPoint::hash() const {
  // @@protoc_insertion_point(field_get:protocol.OutputPoint.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputPoint::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.OutputPoint.hash)
}
inline std::string* OutputPoint::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protocol.OutputPoint.hash)
  return _s;
}
inline const std::string& OutputPoint::_internal_hash() const {
  return hash_.Get();
}
inline void OutputPoint::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OutputPoint::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OutputPoint::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.OutputPoint.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OutputPoint::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.OutputPoint.hash)
}

// int32 index = 2;
inline void OutputPoint::clear_index() {
  index_ = 0;
}
inline int32_t OutputPoint::_internal_index() const {
  return index_;
}
inline int32_t OutputPoint::index() const {
  // @@protoc_insertion_point(field_get:protocol.OutputPoint.index)
  return _internal_index();
}
inline void OutputPoint::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void OutputPoint::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:protocol.OutputPoint.index)
}

// -------------------------------------------------------------------

// OutputPointInfo

// repeated .protocol.OutputPoint out_points = 1;
inline int OutputPointInfo::_internal_out_points_size() const {
  return out_points_.size();
}
inline int OutputPointInfo::out_points_size() const {
  return _internal_out_points_size();
}
inline void OutputPointInfo::clear_out_points() {
  out_points_.Clear();
}
inline ::protocol::OutputPoint* OutputPointInfo::mutable_out_points(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.OutputPointInfo.out_points)
  return out_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OutputPoint >*
OutputPointInfo::mutable_out_points() {
  // @@protoc_insertion_point(field_mutable_list:protocol.OutputPointInfo.out_points)
  return &out_points_;
}
inline const ::protocol::OutputPoint& OutputPointInfo::_internal_out_points(int index) const {
  return out_points_.Get(index);
}
inline const ::protocol::OutputPoint& OutputPointInfo::out_points(int index) const {
  // @@protoc_insertion_point(field_get:protocol.OutputPointInfo.out_points)
  return _internal_out_points(index);
}
inline ::protocol::OutputPoint* OutputPointInfo::_internal_add_out_points() {
  return out_points_.Add();
}
inline ::protocol::OutputPoint* OutputPointInfo::add_out_points() {
  ::protocol::OutputPoint* _add = _internal_add_out_points();
  // @@protoc_insertion_point(field_add:protocol.OutputPointInfo.out_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OutputPoint >&
OutputPointInfo::out_points() const {
  // @@protoc_insertion_point(field_list:protocol.OutputPointInfo.out_points)
  return out_points_;
}

// int32 block_num = 2;
inline void OutputPointInfo::clear_block_num() {
  block_num_ = 0;
}
inline int32_t OutputPointInfo::_internal_block_num() const {
  return block_num_;
}
inline int32_t OutputPointInfo::block_num() const {
  // @@protoc_insertion_point(field_get:protocol.OutputPointInfo.block_num)
  return _internal_block_num();
}
inline void OutputPointInfo::_internal_set_block_num(int32_t value) {
  
  block_num_ = value;
}
inline void OutputPointInfo::set_block_num(int32_t value) {
  _internal_set_block_num(value);
  // @@protoc_insertion_point(field_set:protocol.OutputPointInfo.block_num)
}

// -------------------------------------------------------------------

// PedersenHash

// bytes content = 1;
inline void PedersenHash::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& PedersenHash::content() const {
  // @@protoc_insertion_point(field_get:protocol.PedersenHash.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PedersenHash::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.PedersenHash.content)
}
inline std::string* PedersenHash::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:protocol.PedersenHash.content)
  return _s;
}
inline const std::string& PedersenHash::_internal_content() const {
  return content_.Get();
}
inline void PedersenHash::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PedersenHash::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PedersenHash::release_content() {
  // @@protoc_insertion_point(field_release:protocol.PedersenHash.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PedersenHash::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.PedersenHash.content)
}

// -------------------------------------------------------------------

// IncrementalMerkleTree

// .protocol.PedersenHash left = 1;
inline bool IncrementalMerkleTree::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool IncrementalMerkleTree::has_left() const {
  return _internal_has_left();
}
inline void IncrementalMerkleTree::clear_left() {
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::_internal_left() const {
  const ::protocol::PedersenHash* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PedersenHash&>(
      ::protocol::_PedersenHash_default_instance_);
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::left() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleTree.left)
  return _internal_left();
}
inline void IncrementalMerkleTree::unsafe_arena_set_allocated_left(
    ::protocol::PedersenHash* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.IncrementalMerkleTree.left)
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::release_left() {
  
  ::protocol::PedersenHash* temp = left_;
  left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleTree.left)
  
  ::protocol::PedersenHash* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PedersenHash>(GetArenaForAllocation());
    left_ = p;
  }
  return left_;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::mutable_left() {
  ::protocol::PedersenHash* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleTree.left)
  return _msg;
}
inline void IncrementalMerkleTree::set_allocated_left(::protocol::PedersenHash* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PedersenHash>::GetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleTree.left)
}

// .protocol.PedersenHash right = 2;
inline bool IncrementalMerkleTree::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool IncrementalMerkleTree::has_right() const {
  return _internal_has_right();
}
inline void IncrementalMerkleTree::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::_internal_right() const {
  const ::protocol::PedersenHash* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PedersenHash&>(
      ::protocol::_PedersenHash_default_instance_);
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::right() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleTree.right)
  return _internal_right();
}
inline void IncrementalMerkleTree::unsafe_arena_set_allocated_right(
    ::protocol::PedersenHash* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.IncrementalMerkleTree.right)
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::release_right() {
  
  ::protocol::PedersenHash* temp = right_;
  right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleTree.right)
  
  ::protocol::PedersenHash* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PedersenHash>(GetArenaForAllocation());
    right_ = p;
  }
  return right_;
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::mutable_right() {
  ::protocol::PedersenHash* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleTree.right)
  return _msg;
}
inline void IncrementalMerkleTree::set_allocated_right(::protocol::PedersenHash* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::PedersenHash>::GetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleTree.right)
}

// repeated .protocol.PedersenHash parents = 3;
inline int IncrementalMerkleTree::_internal_parents_size() const {
  return parents_.size();
}
inline int IncrementalMerkleTree::parents_size() const {
  return _internal_parents_size();
}
inline void IncrementalMerkleTree::clear_parents() {
  parents_.Clear();
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleTree.parents)
  return parents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >*
IncrementalMerkleTree::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:protocol.IncrementalMerkleTree.parents)
  return &parents_;
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const ::protocol::PedersenHash& IncrementalMerkleTree::parents(int index) const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleTree.parents)
  return _internal_parents(index);
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::_internal_add_parents() {
  return parents_.Add();
}
inline ::protocol::PedersenHash* IncrementalMerkleTree::add_parents() {
  ::protocol::PedersenHash* _add = _internal_add_parents();
  // @@protoc_insertion_point(field_add:protocol.IncrementalMerkleTree.parents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >&
IncrementalMerkleTree::parents() const {
  // @@protoc_insertion_point(field_list:protocol.IncrementalMerkleTree.parents)
  return parents_;
}

// -------------------------------------------------------------------

// IncrementalMerkleVoucher

// .protocol.IncrementalMerkleTree tree = 1;
inline bool IncrementalMerkleVoucher::_internal_has_tree() const {
  return this != internal_default_instance() && tree_ != nullptr;
}
inline bool IncrementalMerkleVoucher::has_tree() const {
  return _internal_has_tree();
}
inline void IncrementalMerkleVoucher::clear_tree() {
  if (GetArenaForAllocation() == nullptr && tree_ != nullptr) {
    delete tree_;
  }
  tree_ = nullptr;
}
inline const ::protocol::IncrementalMerkleTree& IncrementalMerkleVoucher::_internal_tree() const {
  const ::protocol::IncrementalMerkleTree* p = tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::IncrementalMerkleTree&>(
      ::protocol::_IncrementalMerkleTree_default_instance_);
}
inline const ::protocol::IncrementalMerkleTree& IncrementalMerkleVoucher::tree() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.tree)
  return _internal_tree();
}
inline void IncrementalMerkleVoucher::unsafe_arena_set_allocated_tree(
    ::protocol::IncrementalMerkleTree* tree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tree_);
  }
  tree_ = tree;
  if (tree) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.IncrementalMerkleVoucher.tree)
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::release_tree() {
  
  ::protocol::IncrementalMerkleTree* temp = tree_;
  tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::unsafe_arena_release_tree() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleVoucher.tree)
  
  ::protocol::IncrementalMerkleTree* temp = tree_;
  tree_ = nullptr;
  return temp;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::_internal_mutable_tree() {
  
  if (tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::IncrementalMerkleTree>(GetArenaForAllocation());
    tree_ = p;
  }
  return tree_;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::mutable_tree() {
  ::protocol::IncrementalMerkleTree* _msg = _internal_mutable_tree();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucher.tree)
  return _msg;
}
inline void IncrementalMerkleVoucher::set_allocated_tree(::protocol::IncrementalMerkleTree* tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tree_;
  }
  if (tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::IncrementalMerkleTree>::GetOwningArena(tree);
    if (message_arena != submessage_arena) {
      tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tree, submessage_arena);
    }
    
  } else {
    
  }
  tree_ = tree;
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleVoucher.tree)
}

// repeated .protocol.PedersenHash filled = 2;
inline int IncrementalMerkleVoucher::_internal_filled_size() const {
  return filled_.size();
}
inline int IncrementalMerkleVoucher::filled_size() const {
  return _internal_filled_size();
}
inline void IncrementalMerkleVoucher::clear_filled() {
  filled_.Clear();
}
inline ::protocol::PedersenHash* IncrementalMerkleVoucher::mutable_filled(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucher.filled)
  return filled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >*
IncrementalMerkleVoucher::mutable_filled() {
  // @@protoc_insertion_point(field_mutable_list:protocol.IncrementalMerkleVoucher.filled)
  return &filled_;
}
inline const ::protocol::PedersenHash& IncrementalMerkleVoucher::_internal_filled(int index) const {
  return filled_.Get(index);
}
inline const ::protocol::PedersenHash& IncrementalMerkleVoucher::filled(int index) const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.filled)
  return _internal_filled(index);
}
inline ::protocol::PedersenHash* IncrementalMerkleVoucher::_internal_add_filled() {
  return filled_.Add();
}
inline ::protocol::PedersenHash* IncrementalMerkleVoucher::add_filled() {
  ::protocol::PedersenHash* _add = _internal_add_filled();
  // @@protoc_insertion_point(field_add:protocol.IncrementalMerkleVoucher.filled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::PedersenHash >&
IncrementalMerkleVoucher::filled() const {
  // @@protoc_insertion_point(field_list:protocol.IncrementalMerkleVoucher.filled)
  return filled_;
}

// .protocol.IncrementalMerkleTree cursor = 3;
inline bool IncrementalMerkleVoucher::_internal_has_cursor() const {
  return this != internal_default_instance() && cursor_ != nullptr;
}
inline bool IncrementalMerkleVoucher::has_cursor() const {
  return _internal_has_cursor();
}
inline void IncrementalMerkleVoucher::clear_cursor() {
  if (GetArenaForAllocation() == nullptr && cursor_ != nullptr) {
    delete cursor_;
  }
  cursor_ = nullptr;
}
inline const ::protocol::IncrementalMerkleTree& IncrementalMerkleVoucher::_internal_cursor() const {
  const ::protocol::IncrementalMerkleTree* p = cursor_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::IncrementalMerkleTree&>(
      ::protocol::_IncrementalMerkleTree_default_instance_);
}
inline const ::protocol::IncrementalMerkleTree& IncrementalMerkleVoucher::cursor() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.cursor)
  return _internal_cursor();
}
inline void IncrementalMerkleVoucher::unsafe_arena_set_allocated_cursor(
    ::protocol::IncrementalMerkleTree* cursor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_);
  }
  cursor_ = cursor;
  if (cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.IncrementalMerkleVoucher.cursor)
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::release_cursor() {
  
  ::protocol::IncrementalMerkleTree* temp = cursor_;
  cursor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::unsafe_arena_release_cursor() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleVoucher.cursor)
  
  ::protocol::IncrementalMerkleTree* temp = cursor_;
  cursor_ = nullptr;
  return temp;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::_internal_mutable_cursor() {
  
  if (cursor_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::IncrementalMerkleTree>(GetArenaForAllocation());
    cursor_ = p;
  }
  return cursor_;
}
inline ::protocol::IncrementalMerkleTree* IncrementalMerkleVoucher::mutable_cursor() {
  ::protocol::IncrementalMerkleTree* _msg = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucher.cursor)
  return _msg;
}
inline void IncrementalMerkleVoucher::set_allocated_cursor(::protocol::IncrementalMerkleTree* cursor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cursor_;
  }
  if (cursor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::IncrementalMerkleTree>::GetOwningArena(cursor);
    if (message_arena != submessage_arena) {
      cursor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor, submessage_arena);
    }
    
  } else {
    
  }
  cursor_ = cursor;
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleVoucher.cursor)
}

// int64 cursor_depth = 4;
inline void IncrementalMerkleVoucher::clear_cursor_depth() {
  cursor_depth_ = int64_t{0};
}
inline int64_t IncrementalMerkleVoucher::_internal_cursor_depth() const {
  return cursor_depth_;
}
inline int64_t IncrementalMerkleVoucher::cursor_depth() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.cursor_depth)
  return _internal_cursor_depth();
}
inline void IncrementalMerkleVoucher::_internal_set_cursor_depth(int64_t value) {
  
  cursor_depth_ = value;
}
inline void IncrementalMerkleVoucher::set_cursor_depth(int64_t value) {
  _internal_set_cursor_depth(value);
  // @@protoc_insertion_point(field_set:protocol.IncrementalMerkleVoucher.cursor_depth)
}

// bytes rt = 5;
inline void IncrementalMerkleVoucher::clear_rt() {
  rt_.ClearToEmpty();
}
inline const std::string& IncrementalMerkleVoucher::rt() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.rt)
  return _internal_rt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalMerkleVoucher::set_rt(ArgT0&& arg0, ArgT... args) {
 
 rt_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.IncrementalMerkleVoucher.rt)
}
inline std::string* IncrementalMerkleVoucher::mutable_rt() {
  std::string* _s = _internal_mutable_rt();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucher.rt)
  return _s;
}
inline const std::string& IncrementalMerkleVoucher::_internal_rt() const {
  return rt_.Get();
}
inline void IncrementalMerkleVoucher::_internal_set_rt(const std::string& value) {
  
  rt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalMerkleVoucher::_internal_mutable_rt() {
  
  return rt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalMerkleVoucher::release_rt() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleVoucher.rt)
  return rt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalMerkleVoucher::set_allocated_rt(std::string* rt) {
  if (rt != nullptr) {
    
  } else {
    
  }
  rt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleVoucher.rt)
}

// .protocol.OutputPoint output_point = 10;
inline bool IncrementalMerkleVoucher::_internal_has_output_point() const {
  return this != internal_default_instance() && output_point_ != nullptr;
}
inline bool IncrementalMerkleVoucher::has_output_point() const {
  return _internal_has_output_point();
}
inline void IncrementalMerkleVoucher::clear_output_point() {
  if (GetArenaForAllocation() == nullptr && output_point_ != nullptr) {
    delete output_point_;
  }
  output_point_ = nullptr;
}
inline const ::protocol::OutputPoint& IncrementalMerkleVoucher::_internal_output_point() const {
  const ::protocol::OutputPoint* p = output_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::OutputPoint&>(
      ::protocol::_OutputPoint_default_instance_);
}
inline const ::protocol::OutputPoint& IncrementalMerkleVoucher::output_point() const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucher.output_point)
  return _internal_output_point();
}
inline void IncrementalMerkleVoucher::unsafe_arena_set_allocated_output_point(
    ::protocol::OutputPoint* output_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_point_);
  }
  output_point_ = output_point;
  if (output_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.IncrementalMerkleVoucher.output_point)
}
inline ::protocol::OutputPoint* IncrementalMerkleVoucher::release_output_point() {
  
  ::protocol::OutputPoint* temp = output_point_;
  output_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::OutputPoint* IncrementalMerkleVoucher::unsafe_arena_release_output_point() {
  // @@protoc_insertion_point(field_release:protocol.IncrementalMerkleVoucher.output_point)
  
  ::protocol::OutputPoint* temp = output_point_;
  output_point_ = nullptr;
  return temp;
}
inline ::protocol::OutputPoint* IncrementalMerkleVoucher::_internal_mutable_output_point() {
  
  if (output_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::OutputPoint>(GetArenaForAllocation());
    output_point_ = p;
  }
  return output_point_;
}
inline ::protocol::OutputPoint* IncrementalMerkleVoucher::mutable_output_point() {
  ::protocol::OutputPoint* _msg = _internal_mutable_output_point();
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucher.output_point)
  return _msg;
}
inline void IncrementalMerkleVoucher::set_allocated_output_point(::protocol::OutputPoint* output_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_point_;
  }
  if (output_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::OutputPoint>::GetOwningArena(output_point);
    if (message_arena != submessage_arena) {
      output_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_point, submessage_arena);
    }
    
  } else {
    
  }
  output_point_ = output_point;
  // @@protoc_insertion_point(field_set_allocated:protocol.IncrementalMerkleVoucher.output_point)
}

// -------------------------------------------------------------------

// IncrementalMerkleVoucherInfo

// repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
inline int IncrementalMerkleVoucherInfo::_internal_vouchers_size() const {
  return vouchers_.size();
}
inline int IncrementalMerkleVoucherInfo::vouchers_size() const {
  return _internal_vouchers_size();
}
inline void IncrementalMerkleVoucherInfo::clear_vouchers() {
  vouchers_.Clear();
}
inline ::protocol::IncrementalMerkleVoucher* IncrementalMerkleVoucherInfo::mutable_vouchers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucherInfo.vouchers)
  return vouchers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::IncrementalMerkleVoucher >*
IncrementalMerkleVoucherInfo::mutable_vouchers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.IncrementalMerkleVoucherInfo.vouchers)
  return &vouchers_;
}
inline const ::protocol::IncrementalMerkleVoucher& IncrementalMerkleVoucherInfo::_internal_vouchers(int index) const {
  return vouchers_.Get(index);
}
inline const ::protocol::IncrementalMerkleVoucher& IncrementalMerkleVoucherInfo::vouchers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucherInfo.vouchers)
  return _internal_vouchers(index);
}
inline ::protocol::IncrementalMerkleVoucher* IncrementalMerkleVoucherInfo::_internal_add_vouchers() {
  return vouchers_.Add();
}
inline ::protocol::IncrementalMerkleVoucher* IncrementalMerkleVoucherInfo::add_vouchers() {
  ::protocol::IncrementalMerkleVoucher* _add = _internal_add_vouchers();
  // @@protoc_insertion_point(field_add:protocol.IncrementalMerkleVoucherInfo.vouchers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::IncrementalMerkleVoucher >&
IncrementalMerkleVoucherInfo::vouchers() const {
  // @@protoc_insertion_point(field_list:protocol.IncrementalMerkleVoucherInfo.vouchers)
  return vouchers_;
}

// repeated bytes paths = 2;
inline int IncrementalMerkleVoucherInfo::_internal_paths_size() const {
  return paths_.size();
}
inline int IncrementalMerkleVoucherInfo::paths_size() const {
  return _internal_paths_size();
}
inline void IncrementalMerkleVoucherInfo::clear_paths() {
  paths_.Clear();
}
inline std::string* IncrementalMerkleVoucherInfo::add_paths() {
  std::string* _s = _internal_add_paths();
  // @@protoc_insertion_point(field_add_mutable:protocol.IncrementalMerkleVoucherInfo.paths)
  return _s;
}
inline const std::string& IncrementalMerkleVoucherInfo::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const std::string& IncrementalMerkleVoucherInfo::paths(int index) const {
  // @@protoc_insertion_point(field_get:protocol.IncrementalMerkleVoucherInfo.paths)
  return _internal_paths(index);
}
inline std::string* IncrementalMerkleVoucherInfo::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.IncrementalMerkleVoucherInfo.paths)
  return paths_.Mutable(index);
}
inline void IncrementalMerkleVoucherInfo::set_paths(int index, const std::string& value) {
  paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::set_paths(int index, std::string&& value) {
  paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::set_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::set_paths(int index, const void* value, size_t size) {
  paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline std::string* IncrementalMerkleVoucherInfo::_internal_add_paths() {
  return paths_.Add();
}
inline void IncrementalMerkleVoucherInfo::add_paths(const std::string& value) {
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::add_paths(std::string&& value) {
  paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::add_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline void IncrementalMerkleVoucherInfo::add_paths(const void* value, size_t size) {
  paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.IncrementalMerkleVoucherInfo.paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IncrementalMerkleVoucherInfo::paths() const {
  // @@protoc_insertion_point(field_list:protocol.IncrementalMerkleVoucherInfo.paths)
  return paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IncrementalMerkleVoucherInfo::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:protocol.IncrementalMerkleVoucherInfo.paths)
  return &paths_;
}

// -------------------------------------------------------------------

// SpendDescription

// bytes value_commitment = 1;
inline void SpendDescription::clear_value_commitment() {
  value_commitment_.ClearToEmpty();
}
inline const std::string& SpendDescription::value_commitment() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.value_commitment)
  return _internal_value_commitment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_value_commitment(ArgT0&& arg0, ArgT... args) {
 
 value_commitment_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.value_commitment)
}
inline std::string* SpendDescription::mutable_value_commitment() {
  std::string* _s = _internal_mutable_value_commitment();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.value_commitment)
  return _s;
}
inline const std::string& SpendDescription::_internal_value_commitment() const {
  return value_commitment_.Get();
}
inline void SpendDescription::_internal_set_value_commitment(const std::string& value) {
  
  value_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_value_commitment() {
  
  return value_commitment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_value_commitment() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.value_commitment)
  return value_commitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_value_commitment(std::string* value_commitment) {
  if (value_commitment != nullptr) {
    
  } else {
    
  }
  value_commitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_commitment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_commitment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.value_commitment)
}

// bytes anchor = 2;
inline void SpendDescription::clear_anchor() {
  anchor_.ClearToEmpty();
}
inline const std::string& SpendDescription::anchor() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.anchor)
  return _internal_anchor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_anchor(ArgT0&& arg0, ArgT... args) {
 
 anchor_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.anchor)
}
inline std::string* SpendDescription::mutable_anchor() {
  std::string* _s = _internal_mutable_anchor();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.anchor)
  return _s;
}
inline const std::string& SpendDescription::_internal_anchor() const {
  return anchor_.Get();
}
inline void SpendDescription::_internal_set_anchor(const std::string& value) {
  
  anchor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_anchor() {
  
  return anchor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_anchor() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.anchor)
  return anchor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_anchor(std::string* anchor) {
  if (anchor != nullptr) {
    
  } else {
    
  }
  anchor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anchor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (anchor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    anchor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.anchor)
}

// bytes nullifier = 3;
inline void SpendDescription::clear_nullifier() {
  nullifier_.ClearToEmpty();
}
inline const std::string& SpendDescription::nullifier() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.nullifier)
  return _internal_nullifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_nullifier(ArgT0&& arg0, ArgT... args) {
 
 nullifier_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.nullifier)
}
inline std::string* SpendDescription::mutable_nullifier() {
  std::string* _s = _internal_mutable_nullifier();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.nullifier)
  return _s;
}
inline const std::string& SpendDescription::_internal_nullifier() const {
  return nullifier_.Get();
}
inline void SpendDescription::_internal_set_nullifier(const std::string& value) {
  
  nullifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_nullifier() {
  
  return nullifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_nullifier() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.nullifier)
  return nullifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_nullifier(std::string* nullifier) {
  if (nullifier != nullptr) {
    
  } else {
    
  }
  nullifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nullifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nullifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nullifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.nullifier)
}

// bytes rk = 4;
inline void SpendDescription::clear_rk() {
  rk_.ClearToEmpty();
}
inline const std::string& SpendDescription::rk() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.rk)
  return _internal_rk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_rk(ArgT0&& arg0, ArgT... args) {
 
 rk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.rk)
}
inline std::string* SpendDescription::mutable_rk() {
  std::string* _s = _internal_mutable_rk();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.rk)
  return _s;
}
inline const std::string& SpendDescription::_internal_rk() const {
  return rk_.Get();
}
inline void SpendDescription::_internal_set_rk(const std::string& value) {
  
  rk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_rk() {
  
  return rk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_rk() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.rk)
  return rk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_rk(std::string* rk) {
  if (rk != nullptr) {
    
  } else {
    
  }
  rk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.rk)
}

// bytes zkproof = 5;
inline void SpendDescription::clear_zkproof() {
  zkproof_.ClearToEmpty();
}
inline const std::string& SpendDescription::zkproof() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.zkproof)
  return _internal_zkproof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_zkproof(ArgT0&& arg0, ArgT... args) {
 
 zkproof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.zkproof)
}
inline std::string* SpendDescription::mutable_zkproof() {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.zkproof)
  return _s;
}
inline const std::string& SpendDescription::_internal_zkproof() const {
  return zkproof_.Get();
}
inline void SpendDescription::_internal_set_zkproof(const std::string& value) {
  
  zkproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_zkproof() {
  
  return zkproof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_zkproof() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.zkproof)
  return zkproof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_zkproof(std::string* zkproof) {
  if (zkproof != nullptr) {
    
  } else {
    
  }
  zkproof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zkproof,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (zkproof_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    zkproof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.zkproof)
}

// bytes spend_authority_signature = 6;
inline void SpendDescription::clear_spend_authority_signature() {
  spend_authority_signature_.ClearToEmpty();
}
inline const std::string& SpendDescription::spend_authority_signature() const {
  // @@protoc_insertion_point(field_get:protocol.SpendDescription.spend_authority_signature)
  return _internal_spend_authority_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpendDescription::set_spend_authority_signature(ArgT0&& arg0, ArgT... args) {
 
 spend_authority_signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SpendDescription.spend_authority_signature)
}
inline std::string* SpendDescription::mutable_spend_authority_signature() {
  std::string* _s = _internal_mutable_spend_authority_signature();
  // @@protoc_insertion_point(field_mutable:protocol.SpendDescription.spend_authority_signature)
  return _s;
}
inline const std::string& SpendDescription::_internal_spend_authority_signature() const {
  return spend_authority_signature_.Get();
}
inline void SpendDescription::_internal_set_spend_authority_signature(const std::string& value) {
  
  spend_authority_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SpendDescription::_internal_mutable_spend_authority_signature() {
  
  return spend_authority_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SpendDescription::release_spend_authority_signature() {
  // @@protoc_insertion_point(field_release:protocol.SpendDescription.spend_authority_signature)
  return spend_authority_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SpendDescription::set_allocated_spend_authority_signature(std::string* spend_authority_signature) {
  if (spend_authority_signature != nullptr) {
    
  } else {
    
  }
  spend_authority_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spend_authority_signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spend_authority_signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spend_authority_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SpendDescription.spend_authority_signature)
}

// -------------------------------------------------------------------

// ReceiveDescription

// bytes value_commitment = 1;
inline void ReceiveDescription::clear_value_commitment() {
  value_commitment_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::value_commitment() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.value_commitment)
  return _internal_value_commitment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_value_commitment(ArgT0&& arg0, ArgT... args) {
 
 value_commitment_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.value_commitment)
}
inline std::string* ReceiveDescription::mutable_value_commitment() {
  std::string* _s = _internal_mutable_value_commitment();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.value_commitment)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_value_commitment() const {
  return value_commitment_.Get();
}
inline void ReceiveDescription::_internal_set_value_commitment(const std::string& value) {
  
  value_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_value_commitment() {
  
  return value_commitment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_value_commitment() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.value_commitment)
  return value_commitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_value_commitment(std::string* value_commitment) {
  if (value_commitment != nullptr) {
    
  } else {
    
  }
  value_commitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_commitment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_commitment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.value_commitment)
}

// bytes note_commitment = 2;
inline void ReceiveDescription::clear_note_commitment() {
  note_commitment_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::note_commitment() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.note_commitment)
  return _internal_note_commitment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_note_commitment(ArgT0&& arg0, ArgT... args) {
 
 note_commitment_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.note_commitment)
}
inline std::string* ReceiveDescription::mutable_note_commitment() {
  std::string* _s = _internal_mutable_note_commitment();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.note_commitment)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_note_commitment() const {
  return note_commitment_.Get();
}
inline void ReceiveDescription::_internal_set_note_commitment(const std::string& value) {
  
  note_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_note_commitment() {
  
  return note_commitment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_note_commitment() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.note_commitment)
  return note_commitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_note_commitment(std::string* note_commitment) {
  if (note_commitment != nullptr) {
    
  } else {
    
  }
  note_commitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note_commitment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (note_commitment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    note_commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.note_commitment)
}

// bytes epk = 3;
inline void ReceiveDescription::clear_epk() {
  epk_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::epk() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.epk)
  return _internal_epk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_epk(ArgT0&& arg0, ArgT... args) {
 
 epk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.epk)
}
inline std::string* ReceiveDescription::mutable_epk() {
  std::string* _s = _internal_mutable_epk();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.epk)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_epk() const {
  return epk_.Get();
}
inline void ReceiveDescription::_internal_set_epk(const std::string& value) {
  
  epk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_epk() {
  
  return epk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_epk() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.epk)
  return epk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_epk(std::string* epk) {
  if (epk != nullptr) {
    
  } else {
    
  }
  epk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (epk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    epk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.epk)
}

// bytes c_enc = 4;
inline void ReceiveDescription::clear_c_enc() {
  c_enc_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::c_enc() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.c_enc)
  return _internal_c_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_c_enc(ArgT0&& arg0, ArgT... args) {
 
 c_enc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.c_enc)
}
inline std::string* ReceiveDescription::mutable_c_enc() {
  std::string* _s = _internal_mutable_c_enc();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.c_enc)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_c_enc() const {
  return c_enc_.Get();
}
inline void ReceiveDescription::_internal_set_c_enc(const std::string& value) {
  
  c_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_c_enc() {
  
  return c_enc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_c_enc() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.c_enc)
  return c_enc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_c_enc(std::string* c_enc) {
  if (c_enc != nullptr) {
    
  } else {
    
  }
  c_enc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c_enc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_enc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_enc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.c_enc)
}

// bytes c_out = 5;
inline void ReceiveDescription::clear_c_out() {
  c_out_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::c_out() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.c_out)
  return _internal_c_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_c_out(ArgT0&& arg0, ArgT... args) {
 
 c_out_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.c_out)
}
inline std::string* ReceiveDescription::mutable_c_out() {
  std::string* _s = _internal_mutable_c_out();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.c_out)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_c_out() const {
  return c_out_.Get();
}
inline void ReceiveDescription::_internal_set_c_out(const std::string& value) {
  
  c_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_c_out() {
  
  return c_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_c_out() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.c_out)
  return c_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_c_out(std::string* c_out) {
  if (c_out != nullptr) {
    
  } else {
    
  }
  c_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.c_out)
}

// bytes zkproof = 6;
inline void ReceiveDescription::clear_zkproof() {
  zkproof_.ClearToEmpty();
}
inline const std::string& ReceiveDescription::zkproof() const {
  // @@protoc_insertion_point(field_get:protocol.ReceiveDescription.zkproof)
  return _internal_zkproof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDescription::set_zkproof(ArgT0&& arg0, ArgT... args) {
 
 zkproof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ReceiveDescription.zkproof)
}
inline std::string* ReceiveDescription::mutable_zkproof() {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:protocol.ReceiveDescription.zkproof)
  return _s;
}
inline const std::string& ReceiveDescription::_internal_zkproof() const {
  return zkproof_.Get();
}
inline void ReceiveDescription::_internal_set_zkproof(const std::string& value) {
  
  zkproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::_internal_mutable_zkproof() {
  
  return zkproof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReceiveDescription::release_zkproof() {
  // @@protoc_insertion_point(field_release:protocol.ReceiveDescription.zkproof)
  return zkproof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReceiveDescription::set_allocated_zkproof(std::string* zkproof) {
  if (zkproof != nullptr) {
    
  } else {
    
  }
  zkproof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zkproof,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (zkproof_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    zkproof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ReceiveDescription.zkproof)
}

// -------------------------------------------------------------------

// ShieldedTransferContract

// bytes transparent_from_address = 1;
inline void ShieldedTransferContract::clear_transparent_from_address() {
  transparent_from_address_.ClearToEmpty();
}
inline const std::string& ShieldedTransferContract::transparent_from_address() const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.transparent_from_address)
  return _internal_transparent_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShieldedTransferContract::set_transparent_from_address(ArgT0&& arg0, ArgT... args) {
 
 transparent_from_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ShieldedTransferContract.transparent_from_address)
}
inline std::string* ShieldedTransferContract::mutable_transparent_from_address() {
  std::string* _s = _internal_mutable_transparent_from_address();
  // @@protoc_insertion_point(field_mutable:protocol.ShieldedTransferContract.transparent_from_address)
  return _s;
}
inline const std::string& ShieldedTransferContract::_internal_transparent_from_address() const {
  return transparent_from_address_.Get();
}
inline void ShieldedTransferContract::_internal_set_transparent_from_address(const std::string& value) {
  
  transparent_from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::_internal_mutable_transparent_from_address() {
  
  return transparent_from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::release_transparent_from_address() {
  // @@protoc_insertion_point(field_release:protocol.ShieldedTransferContract.transparent_from_address)
  return transparent_from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShieldedTransferContract::set_allocated_transparent_from_address(std::string* transparent_from_address) {
  if (transparent_from_address != nullptr) {
    
  } else {
    
  }
  transparent_from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transparent_from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transparent_from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transparent_from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ShieldedTransferContract.transparent_from_address)
}

// int64 from_amount = 2;
inline void ShieldedTransferContract::clear_from_amount() {
  from_amount_ = int64_t{0};
}
inline int64_t ShieldedTransferContract::_internal_from_amount() const {
  return from_amount_;
}
inline int64_t ShieldedTransferContract::from_amount() const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.from_amount)
  return _internal_from_amount();
}
inline void ShieldedTransferContract::_internal_set_from_amount(int64_t value) {
  
  from_amount_ = value;
}
inline void ShieldedTransferContract::set_from_amount(int64_t value) {
  _internal_set_from_amount(value);
  // @@protoc_insertion_point(field_set:protocol.ShieldedTransferContract.from_amount)
}

// repeated .protocol.SpendDescription spend_description = 3;
inline int ShieldedTransferContract::_internal_spend_description_size() const {
  return spend_description_.size();
}
inline int ShieldedTransferContract::spend_description_size() const {
  return _internal_spend_description_size();
}
inline void ShieldedTransferContract::clear_spend_description() {
  spend_description_.Clear();
}
inline ::protocol::SpendDescription* ShieldedTransferContract::mutable_spend_description(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ShieldedTransferContract.spend_description)
  return spend_description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SpendDescription >*
ShieldedTransferContract::mutable_spend_description() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ShieldedTransferContract.spend_description)
  return &spend_description_;
}
inline const ::protocol::SpendDescription& ShieldedTransferContract::_internal_spend_description(int index) const {
  return spend_description_.Get(index);
}
inline const ::protocol::SpendDescription& ShieldedTransferContract::spend_description(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.spend_description)
  return _internal_spend_description(index);
}
inline ::protocol::SpendDescription* ShieldedTransferContract::_internal_add_spend_description() {
  return spend_description_.Add();
}
inline ::protocol::SpendDescription* ShieldedTransferContract::add_spend_description() {
  ::protocol::SpendDescription* _add = _internal_add_spend_description();
  // @@protoc_insertion_point(field_add:protocol.ShieldedTransferContract.spend_description)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SpendDescription >&
ShieldedTransferContract::spend_description() const {
  // @@protoc_insertion_point(field_list:protocol.ShieldedTransferContract.spend_description)
  return spend_description_;
}

// repeated .protocol.ReceiveDescription receive_description = 4;
inline int ShieldedTransferContract::_internal_receive_description_size() const {
  return receive_description_.size();
}
inline int ShieldedTransferContract::receive_description_size() const {
  return _internal_receive_description_size();
}
inline void ShieldedTransferContract::clear_receive_description() {
  receive_description_.Clear();
}
inline ::protocol::ReceiveDescription* ShieldedTransferContract::mutable_receive_description(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ShieldedTransferContract.receive_description)
  return receive_description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ReceiveDescription >*
ShieldedTransferContract::mutable_receive_description() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ShieldedTransferContract.receive_description)
  return &receive_description_;
}
inline const ::protocol::ReceiveDescription& ShieldedTransferContract::_internal_receive_description(int index) const {
  return receive_description_.Get(index);
}
inline const ::protocol::ReceiveDescription& ShieldedTransferContract::receive_description(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.receive_description)
  return _internal_receive_description(index);
}
inline ::protocol::ReceiveDescription* ShieldedTransferContract::_internal_add_receive_description() {
  return receive_description_.Add();
}
inline ::protocol::ReceiveDescription* ShieldedTransferContract::add_receive_description() {
  ::protocol::ReceiveDescription* _add = _internal_add_receive_description();
  // @@protoc_insertion_point(field_add:protocol.ShieldedTransferContract.receive_description)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ReceiveDescription >&
ShieldedTransferContract::receive_description() const {
  // @@protoc_insertion_point(field_list:protocol.ShieldedTransferContract.receive_description)
  return receive_description_;
}

// bytes binding_signature = 5;
inline void ShieldedTransferContract::clear_binding_signature() {
  binding_signature_.ClearToEmpty();
}
inline const std::string& ShieldedTransferContract::binding_signature() const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.binding_signature)
  return _internal_binding_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShieldedTransferContract::set_binding_signature(ArgT0&& arg0, ArgT... args) {
 
 binding_signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ShieldedTransferContract.binding_signature)
}
inline std::string* ShieldedTransferContract::mutable_binding_signature() {
  std::string* _s = _internal_mutable_binding_signature();
  // @@protoc_insertion_point(field_mutable:protocol.ShieldedTransferContract.binding_signature)
  return _s;
}
inline const std::string& ShieldedTransferContract::_internal_binding_signature() const {
  return binding_signature_.Get();
}
inline void ShieldedTransferContract::_internal_set_binding_signature(const std::string& value) {
  
  binding_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::_internal_mutable_binding_signature() {
  
  return binding_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::release_binding_signature() {
  // @@protoc_insertion_point(field_release:protocol.ShieldedTransferContract.binding_signature)
  return binding_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShieldedTransferContract::set_allocated_binding_signature(std::string* binding_signature) {
  if (binding_signature != nullptr) {
    
  } else {
    
  }
  binding_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binding_signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (binding_signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    binding_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ShieldedTransferContract.binding_signature)
}

// bytes transparent_to_address = 6;
inline void ShieldedTransferContract::clear_transparent_to_address() {
  transparent_to_address_.ClearToEmpty();
}
inline const std::string& ShieldedTransferContract::transparent_to_address() const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.transparent_to_address)
  return _internal_transparent_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShieldedTransferContract::set_transparent_to_address(ArgT0&& arg0, ArgT... args) {
 
 transparent_to_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ShieldedTransferContract.transparent_to_address)
}
inline std::string* ShieldedTransferContract::mutable_transparent_to_address() {
  std::string* _s = _internal_mutable_transparent_to_address();
  // @@protoc_insertion_point(field_mutable:protocol.ShieldedTransferContract.transparent_to_address)
  return _s;
}
inline const std::string& ShieldedTransferContract::_internal_transparent_to_address() const {
  return transparent_to_address_.Get();
}
inline void ShieldedTransferContract::_internal_set_transparent_to_address(const std::string& value) {
  
  transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::_internal_mutable_transparent_to_address() {
  
  return transparent_to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShieldedTransferContract::release_transparent_to_address() {
  // @@protoc_insertion_point(field_release:protocol.ShieldedTransferContract.transparent_to_address)
  return transparent_to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShieldedTransferContract::set_allocated_transparent_to_address(std::string* transparent_to_address) {
  if (transparent_to_address != nullptr) {
    
  } else {
    
  }
  transparent_to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transparent_to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transparent_to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transparent_to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ShieldedTransferContract.transparent_to_address)
}

// int64 to_amount = 7;
inline void ShieldedTransferContract::clear_to_amount() {
  to_amount_ = int64_t{0};
}
inline int64_t ShieldedTransferContract::_internal_to_amount() const {
  return to_amount_;
}
inline int64_t ShieldedTransferContract::to_amount() const {
  // @@protoc_insertion_point(field_get:protocol.ShieldedTransferContract.to_amount)
  return _internal_to_amount();
}
inline void ShieldedTransferContract::_internal_set_to_amount(int64_t value) {
  
  to_amount_ = value;
}
inline void ShieldedTransferContract::set_to_amount(int64_t value) {
  _internal_set_to_amount(value);
  // @@protoc_insertion_point(field_set:protocol.ShieldedTransferContract.to_amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fshield_5fcontract_2eproto
