// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/balance_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fbalance_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fbalance_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "core/contract/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fbalance_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto;
namespace protocol {
class AccountBalanceRequest;
struct AccountBalanceRequestDefaultTypeInternal;
extern AccountBalanceRequestDefaultTypeInternal _AccountBalanceRequest_default_instance_;
class AccountBalanceResponse;
struct AccountBalanceResponseDefaultTypeInternal;
extern AccountBalanceResponseDefaultTypeInternal _AccountBalanceResponse_default_instance_;
class AccountIdentifier;
struct AccountIdentifierDefaultTypeInternal;
extern AccountIdentifierDefaultTypeInternal _AccountIdentifier_default_instance_;
class AccountTrace;
struct AccountTraceDefaultTypeInternal;
extern AccountTraceDefaultTypeInternal _AccountTrace_default_instance_;
class BlockBalanceTrace;
struct BlockBalanceTraceDefaultTypeInternal;
extern BlockBalanceTraceDefaultTypeInternal _BlockBalanceTrace_default_instance_;
class BlockBalanceTrace_BlockIdentifier;
struct BlockBalanceTrace_BlockIdentifierDefaultTypeInternal;
extern BlockBalanceTrace_BlockIdentifierDefaultTypeInternal _BlockBalanceTrace_BlockIdentifier_default_instance_;
class FreezeBalanceContract;
struct FreezeBalanceContractDefaultTypeInternal;
extern FreezeBalanceContractDefaultTypeInternal _FreezeBalanceContract_default_instance_;
class TransactionBalanceTrace;
struct TransactionBalanceTraceDefaultTypeInternal;
extern TransactionBalanceTraceDefaultTypeInternal _TransactionBalanceTrace_default_instance_;
class TransactionBalanceTrace_Operation;
struct TransactionBalanceTrace_OperationDefaultTypeInternal;
extern TransactionBalanceTrace_OperationDefaultTypeInternal _TransactionBalanceTrace_Operation_default_instance_;
class TransferContract;
struct TransferContractDefaultTypeInternal;
extern TransferContractDefaultTypeInternal _TransferContract_default_instance_;
class UnfreezeBalanceContract;
struct UnfreezeBalanceContractDefaultTypeInternal;
extern UnfreezeBalanceContractDefaultTypeInternal _UnfreezeBalanceContract_default_instance_;
class WithdrawBalanceContract;
struct WithdrawBalanceContractDefaultTypeInternal;
extern WithdrawBalanceContractDefaultTypeInternal _WithdrawBalanceContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::AccountBalanceRequest* Arena::CreateMaybeMessage<::protocol::AccountBalanceRequest>(Arena*);
template<> ::protocol::AccountBalanceResponse* Arena::CreateMaybeMessage<::protocol::AccountBalanceResponse>(Arena*);
template<> ::protocol::AccountIdentifier* Arena::CreateMaybeMessage<::protocol::AccountIdentifier>(Arena*);
template<> ::protocol::AccountTrace* Arena::CreateMaybeMessage<::protocol::AccountTrace>(Arena*);
template<> ::protocol::BlockBalanceTrace* Arena::CreateMaybeMessage<::protocol::BlockBalanceTrace>(Arena*);
template<> ::protocol::BlockBalanceTrace_BlockIdentifier* Arena::CreateMaybeMessage<::protocol::BlockBalanceTrace_BlockIdentifier>(Arena*);
template<> ::protocol::FreezeBalanceContract* Arena::CreateMaybeMessage<::protocol::FreezeBalanceContract>(Arena*);
template<> ::protocol::TransactionBalanceTrace* Arena::CreateMaybeMessage<::protocol::TransactionBalanceTrace>(Arena*);
template<> ::protocol::TransactionBalanceTrace_Operation* Arena::CreateMaybeMessage<::protocol::TransactionBalanceTrace_Operation>(Arena*);
template<> ::protocol::TransferContract* Arena::CreateMaybeMessage<::protocol::TransferContract>(Arena*);
template<> ::protocol::UnfreezeBalanceContract* Arena::CreateMaybeMessage<::protocol::UnfreezeBalanceContract>(Arena*);
template<> ::protocol::WithdrawBalanceContract* Arena::CreateMaybeMessage<::protocol::WithdrawBalanceContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class FreezeBalanceContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.FreezeBalanceContract) */ {
 public:
  inline FreezeBalanceContract() : FreezeBalanceContract(nullptr) {}
  ~FreezeBalanceContract() override;
  explicit constexpr FreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FreezeBalanceContract(const FreezeBalanceContract& from);
  FreezeBalanceContract(FreezeBalanceContract&& from) noexcept
    : FreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline FreezeBalanceContract& operator=(const FreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreezeBalanceContract& operator=(FreezeBalanceContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FreezeBalanceContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const FreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const FreezeBalanceContract*>(
               &_FreezeBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FreezeBalanceContract& a, FreezeBalanceContract& b) {
    a.Swap(&b);
  }
  inline void Swap(FreezeBalanceContract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreezeBalanceContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreezeBalanceContract* New() const final {
    return new FreezeBalanceContract();
  }

  FreezeBalanceContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreezeBalanceContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FreezeBalanceContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FreezeBalanceContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreezeBalanceContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.FreezeBalanceContract";
  }
  protected:
  explicit FreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kReceiverAddressFieldNumber = 15,
    kFrozenBalanceFieldNumber = 2,
    kFrozenDurationFieldNumber = 3,
    kResourceFieldNumber = 10,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes receiver_address = 15;
  void clear_receiver_address();
  const std::string& receiver_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_receiver_address();
  void set_allocated_receiver_address(std::string* receiver_address);
  private:
  const std::string& _internal_receiver_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_address(const std::string& value);
  std::string* _internal_mutable_receiver_address();
  public:

  // int64 frozen_balance = 2;
  void clear_frozen_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance() const;
  void set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frozen_balance() const;
  void _internal_set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 frozen_duration = 3;
  void clear_frozen_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_duration() const;
  void set_frozen_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frozen_duration() const;
  void _internal_set_frozen_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .protocol.ResourceCode resource = 10;
  void clear_resource();
  ::protocol::ResourceCode resource() const;
  void set_resource(::protocol::ResourceCode value);
  private:
  ::protocol::ResourceCode _internal_resource() const;
  void _internal_set_resource(::protocol::ResourceCode value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.FreezeBalanceContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_duration_;
  int resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UnfreezeBalanceContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UnfreezeBalanceContract) */ {
 public:
  inline UnfreezeBalanceContract() : UnfreezeBalanceContract(nullptr) {}
  ~UnfreezeBalanceContract() override;
  explicit constexpr UnfreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfreezeBalanceContract(const UnfreezeBalanceContract& from);
  UnfreezeBalanceContract(UnfreezeBalanceContract&& from) noexcept
    : UnfreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline UnfreezeBalanceContract& operator=(const UnfreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfreezeBalanceContract& operator=(UnfreezeBalanceContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnfreezeBalanceContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const UnfreezeBalanceContract*>(
               &_UnfreezeBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnfreezeBalanceContract& a, UnfreezeBalanceContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfreezeBalanceContract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfreezeBalanceContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnfreezeBalanceContract* New() const final {
    return new UnfreezeBalanceContract();
  }

  UnfreezeBalanceContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnfreezeBalanceContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnfreezeBalanceContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnfreezeBalanceContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfreezeBalanceContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UnfreezeBalanceContract";
  }
  protected:
  explicit UnfreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kReceiverAddressFieldNumber = 15,
    kResourceFieldNumber = 10,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes receiver_address = 15;
  void clear_receiver_address();
  const std::string& receiver_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_receiver_address();
  void set_allocated_receiver_address(std::string* receiver_address);
  private:
  const std::string& _internal_receiver_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_address(const std::string& value);
  std::string* _internal_mutable_receiver_address();
  public:

  // .protocol.ResourceCode resource = 10;
  void clear_resource();
  ::protocol::ResourceCode resource() const;
  void set_resource(::protocol::ResourceCode value);
  private:
  ::protocol::ResourceCode _internal_resource() const;
  void _internal_set_resource(::protocol::ResourceCode value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.UnfreezeBalanceContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_address_;
  int resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class WithdrawBalanceContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.WithdrawBalanceContract) */ {
 public:
  inline WithdrawBalanceContract() : WithdrawBalanceContract(nullptr) {}
  ~WithdrawBalanceContract() override;
  explicit constexpr WithdrawBalanceContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WithdrawBalanceContract(const WithdrawBalanceContract& from);
  WithdrawBalanceContract(WithdrawBalanceContract&& from) noexcept
    : WithdrawBalanceContract() {
    *this = ::std::move(from);
  }

  inline WithdrawBalanceContract& operator=(const WithdrawBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawBalanceContract& operator=(WithdrawBalanceContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithdrawBalanceContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithdrawBalanceContract* internal_default_instance() {
    return reinterpret_cast<const WithdrawBalanceContract*>(
               &_WithdrawBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WithdrawBalanceContract& a, WithdrawBalanceContract& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawBalanceContract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawBalanceContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawBalanceContract* New() const final {
    return new WithdrawBalanceContract();
  }

  WithdrawBalanceContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawBalanceContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WithdrawBalanceContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WithdrawBalanceContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawBalanceContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.WithdrawBalanceContract";
  }
  protected:
  explicit WithdrawBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // @@protoc_insertion_point(class_scope:protocol.WithdrawBalanceContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class TransferContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransferContract) */ {
 public:
  inline TransferContract() : TransferContract(nullptr) {}
  ~TransferContract() override;
  explicit constexpr TransferContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferContract(const TransferContract& from);
  TransferContract(TransferContract&& from) noexcept
    : TransferContract() {
    *this = ::std::move(from);
  }

  inline TransferContract& operator=(const TransferContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferContract& operator=(TransferContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferContract* internal_default_instance() {
    return reinterpret_cast<const TransferContract*>(
               &_TransferContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransferContract& a, TransferContract& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferContract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferContract* New() const final {
    return new TransferContract();
  }

  TransferContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransferContract";
  }
  protected:
  explicit TransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.TransferContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class TransactionBalanceTrace_Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionBalanceTrace.Operation) */ {
 public:
  inline TransactionBalanceTrace_Operation() : TransactionBalanceTrace_Operation(nullptr) {}
  ~TransactionBalanceTrace_Operation() override;
  explicit constexpr TransactionBalanceTrace_Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionBalanceTrace_Operation(const TransactionBalanceTrace_Operation& from);
  TransactionBalanceTrace_Operation(TransactionBalanceTrace_Operation&& from) noexcept
    : TransactionBalanceTrace_Operation() {
    *this = ::std::move(from);
  }

  inline TransactionBalanceTrace_Operation& operator=(const TransactionBalanceTrace_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionBalanceTrace_Operation& operator=(TransactionBalanceTrace_Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionBalanceTrace_Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionBalanceTrace_Operation* internal_default_instance() {
    return reinterpret_cast<const TransactionBalanceTrace_Operation*>(
               &_TransactionBalanceTrace_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionBalanceTrace_Operation& a, TransactionBalanceTrace_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionBalanceTrace_Operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionBalanceTrace_Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionBalanceTrace_Operation* New() const final {
    return new TransactionBalanceTrace_Operation();
  }

  TransactionBalanceTrace_Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionBalanceTrace_Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionBalanceTrace_Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionBalanceTrace_Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBalanceTrace_Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionBalanceTrace.Operation";
  }
  protected:
  explicit TransactionBalanceTrace_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kOperationIdentifierFieldNumber = 1,
    kAmountFieldNumber = 3,
  };
  // bytes address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 operation_identifier = 1;
  void clear_operation_identifier();
  ::PROTOBUF_NAMESPACE_ID::int64 operation_identifier() const;
  void set_operation_identifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_operation_identifier() const;
  void _internal_set_operation_identifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.TransactionBalanceTrace.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 operation_identifier_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class TransactionBalanceTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionBalanceTrace) */ {
 public:
  inline TransactionBalanceTrace() : TransactionBalanceTrace(nullptr) {}
  ~TransactionBalanceTrace() override;
  explicit constexpr TransactionBalanceTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionBalanceTrace(const TransactionBalanceTrace& from);
  TransactionBalanceTrace(TransactionBalanceTrace&& from) noexcept
    : TransactionBalanceTrace() {
    *this = ::std::move(from);
  }

  inline TransactionBalanceTrace& operator=(const TransactionBalanceTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionBalanceTrace& operator=(TransactionBalanceTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionBalanceTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionBalanceTrace* internal_default_instance() {
    return reinterpret_cast<const TransactionBalanceTrace*>(
               &_TransactionBalanceTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionBalanceTrace& a, TransactionBalanceTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionBalanceTrace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionBalanceTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionBalanceTrace* New() const final {
    return new TransactionBalanceTrace();
  }

  TransactionBalanceTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionBalanceTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionBalanceTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionBalanceTrace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBalanceTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionBalanceTrace";
  }
  protected:
  explicit TransactionBalanceTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransactionBalanceTrace_Operation Operation;

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 2,
    kTransactionIdentifierFieldNumber = 1,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // repeated .protocol.TransactionBalanceTrace.Operation operation = 2;
  int operation_size() const;
  private:
  int _internal_operation_size() const;
  public:
  void clear_operation();
  ::protocol::TransactionBalanceTrace_Operation* mutable_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace_Operation >*
      mutable_operation();
  private:
  const ::protocol::TransactionBalanceTrace_Operation& _internal_operation(int index) const;
  ::protocol::TransactionBalanceTrace_Operation* _internal_add_operation();
  public:
  const ::protocol::TransactionBalanceTrace_Operation& operation(int index) const;
  ::protocol::TransactionBalanceTrace_Operation* add_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace_Operation >&
      operation() const;

  // bytes transaction_identifier = 1;
  void clear_transaction_identifier();
  const std::string& transaction_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_transaction_identifier();
  void set_allocated_transaction_identifier(std::string* transaction_identifier);
  private:
  const std::string& _internal_transaction_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_identifier(const std::string& value);
  std::string* _internal_mutable_transaction_identifier();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:protocol.TransactionBalanceTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace_Operation > operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class BlockBalanceTrace_BlockIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockBalanceTrace.BlockIdentifier) */ {
 public:
  inline BlockBalanceTrace_BlockIdentifier() : BlockBalanceTrace_BlockIdentifier(nullptr) {}
  ~BlockBalanceTrace_BlockIdentifier() override;
  explicit constexpr BlockBalanceTrace_BlockIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockBalanceTrace_BlockIdentifier(const BlockBalanceTrace_BlockIdentifier& from);
  BlockBalanceTrace_BlockIdentifier(BlockBalanceTrace_BlockIdentifier&& from) noexcept
    : BlockBalanceTrace_BlockIdentifier() {
    *this = ::std::move(from);
  }

  inline BlockBalanceTrace_BlockIdentifier& operator=(const BlockBalanceTrace_BlockIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBalanceTrace_BlockIdentifier& operator=(BlockBalanceTrace_BlockIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockBalanceTrace_BlockIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockBalanceTrace_BlockIdentifier* internal_default_instance() {
    return reinterpret_cast<const BlockBalanceTrace_BlockIdentifier*>(
               &_BlockBalanceTrace_BlockIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlockBalanceTrace_BlockIdentifier& a, BlockBalanceTrace_BlockIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBalanceTrace_BlockIdentifier* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockBalanceTrace_BlockIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBalanceTrace_BlockIdentifier* New() const final {
    return new BlockBalanceTrace_BlockIdentifier();
  }

  BlockBalanceTrace_BlockIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBalanceTrace_BlockIdentifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockBalanceTrace_BlockIdentifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockBalanceTrace_BlockIdentifier& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockBalanceTrace_BlockIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockBalanceTrace.BlockIdentifier";
  }
  protected:
  explicit BlockBalanceTrace_BlockIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int64 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.BlockBalanceTrace.BlockIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class BlockBalanceTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockBalanceTrace) */ {
 public:
  inline BlockBalanceTrace() : BlockBalanceTrace(nullptr) {}
  ~BlockBalanceTrace() override;
  explicit constexpr BlockBalanceTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockBalanceTrace(const BlockBalanceTrace& from);
  BlockBalanceTrace(BlockBalanceTrace&& from) noexcept
    : BlockBalanceTrace() {
    *this = ::std::move(from);
  }

  inline BlockBalanceTrace& operator=(const BlockBalanceTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBalanceTrace& operator=(BlockBalanceTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockBalanceTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockBalanceTrace* internal_default_instance() {
    return reinterpret_cast<const BlockBalanceTrace*>(
               &_BlockBalanceTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockBalanceTrace& a, BlockBalanceTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBalanceTrace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockBalanceTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockBalanceTrace* New() const final {
    return new BlockBalanceTrace();
  }

  BlockBalanceTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockBalanceTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockBalanceTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockBalanceTrace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockBalanceTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockBalanceTrace";
  }
  protected:
  explicit BlockBalanceTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlockBalanceTrace_BlockIdentifier BlockIdentifier;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionBalanceTraceFieldNumber = 3,
    kBlockIdentifierFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .protocol.TransactionBalanceTrace transaction_balance_trace = 3;
  int transaction_balance_trace_size() const;
  private:
  int _internal_transaction_balance_trace_size() const;
  public:
  void clear_transaction_balance_trace();
  ::protocol::TransactionBalanceTrace* mutable_transaction_balance_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace >*
      mutable_transaction_balance_trace();
  private:
  const ::protocol::TransactionBalanceTrace& _internal_transaction_balance_trace(int index) const;
  ::protocol::TransactionBalanceTrace* _internal_add_transaction_balance_trace();
  public:
  const ::protocol::TransactionBalanceTrace& transaction_balance_trace(int index) const;
  ::protocol::TransactionBalanceTrace* add_transaction_balance_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace >&
      transaction_balance_trace() const;

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 1;
  bool has_block_identifier() const;
  private:
  bool _internal_has_block_identifier() const;
  public:
  void clear_block_identifier();
  const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::BlockBalanceTrace_BlockIdentifier* release_block_identifier();
  ::protocol::BlockBalanceTrace_BlockIdentifier* mutable_block_identifier();
  void set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  private:
  const ::protocol::BlockBalanceTrace_BlockIdentifier& _internal_block_identifier() const;
  ::protocol::BlockBalanceTrace_BlockIdentifier* _internal_mutable_block_identifier();
  public:
  void unsafe_arena_set_allocated_block_identifier(
      ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  ::protocol::BlockBalanceTrace_BlockIdentifier* unsafe_arena_release_block_identifier();

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.BlockBalanceTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace > transaction_balance_trace_;
  ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountTrace) */ {
 public:
  inline AccountTrace() : AccountTrace(nullptr) {}
  ~AccountTrace() override;
  explicit constexpr AccountTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountTrace(const AccountTrace& from);
  AccountTrace(AccountTrace&& from) noexcept
    : AccountTrace() {
    *this = ::std::move(from);
  }

  inline AccountTrace& operator=(const AccountTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountTrace& operator=(AccountTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountTrace* internal_default_instance() {
    return reinterpret_cast<const AccountTrace*>(
               &_AccountTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AccountTrace& a, AccountTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountTrace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountTrace* New() const final {
    return new AccountTrace();
  }

  AccountTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountTrace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountTrace";
  }
  protected:
  explicit AccountTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
    kPlaceholderFieldNumber = 99,
  };
  // int64 balance = 1;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 placeholder = 99;
  void clear_placeholder();
  ::PROTOBUF_NAMESPACE_ID::int64 placeholder() const;
  void set_placeholder(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_placeholder() const;
  void _internal_set_placeholder(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.AccountTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 placeholder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountIdentifier) */ {
 public:
  inline AccountIdentifier() : AccountIdentifier(nullptr) {}
  ~AccountIdentifier() override;
  explicit constexpr AccountIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountIdentifier(const AccountIdentifier& from);
  AccountIdentifier(AccountIdentifier&& from) noexcept
    : AccountIdentifier() {
    *this = ::std::move(from);
  }

  inline AccountIdentifier& operator=(const AccountIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountIdentifier& operator=(AccountIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountIdentifier* internal_default_instance() {
    return reinterpret_cast<const AccountIdentifier*>(
               &_AccountIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AccountIdentifier& a, AccountIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountIdentifier* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountIdentifier* New() const final {
    return new AccountIdentifier();
  }

  AccountIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountIdentifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountIdentifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountIdentifier& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountIdentifier";
  }
  protected:
  explicit AccountIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:protocol.AccountIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountBalanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountBalanceRequest) */ {
 public:
  inline AccountBalanceRequest() : AccountBalanceRequest(nullptr) {}
  ~AccountBalanceRequest() override;
  explicit constexpr AccountBalanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountBalanceRequest(const AccountBalanceRequest& from);
  AccountBalanceRequest(AccountBalanceRequest&& from) noexcept
    : AccountBalanceRequest() {
    *this = ::std::move(from);
  }

  inline AccountBalanceRequest& operator=(const AccountBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountBalanceRequest& operator=(AccountBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const AccountBalanceRequest*>(
               &_AccountBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AccountBalanceRequest& a, AccountBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountBalanceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountBalanceRequest* New() const final {
    return new AccountBalanceRequest();
  }

  AccountBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountBalanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountBalanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountBalanceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountBalanceRequest";
  }
  protected:
  explicit AccountBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdentifierFieldNumber = 1,
    kBlockIdentifierFieldNumber = 2,
  };
  // .protocol.AccountIdentifier account_identifier = 1;
  bool has_account_identifier() const;
  private:
  bool _internal_has_account_identifier() const;
  public:
  void clear_account_identifier();
  const ::protocol::AccountIdentifier& account_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::AccountIdentifier* release_account_identifier();
  ::protocol::AccountIdentifier* mutable_account_identifier();
  void set_allocated_account_identifier(::protocol::AccountIdentifier* account_identifier);
  private:
  const ::protocol::AccountIdentifier& _internal_account_identifier() const;
  ::protocol::AccountIdentifier* _internal_mutable_account_identifier();
  public:
  void unsafe_arena_set_allocated_account_identifier(
      ::protocol::AccountIdentifier* account_identifier);
  ::protocol::AccountIdentifier* unsafe_arena_release_account_identifier();

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  bool has_block_identifier() const;
  private:
  bool _internal_has_block_identifier() const;
  public:
  void clear_block_identifier();
  const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::BlockBalanceTrace_BlockIdentifier* release_block_identifier();
  ::protocol::BlockBalanceTrace_BlockIdentifier* mutable_block_identifier();
  void set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  private:
  const ::protocol::BlockBalanceTrace_BlockIdentifier& _internal_block_identifier() const;
  ::protocol::BlockBalanceTrace_BlockIdentifier* _internal_mutable_block_identifier();
  public:
  void unsafe_arena_set_allocated_block_identifier(
      ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  ::protocol::BlockBalanceTrace_BlockIdentifier* unsafe_arena_release_block_identifier();

  // @@protoc_insertion_point(class_scope:protocol.AccountBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::AccountIdentifier* account_identifier_;
  ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountBalanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountBalanceResponse) */ {
 public:
  inline AccountBalanceResponse() : AccountBalanceResponse(nullptr) {}
  ~AccountBalanceResponse() override;
  explicit constexpr AccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountBalanceResponse(const AccountBalanceResponse& from);
  AccountBalanceResponse(AccountBalanceResponse&& from) noexcept
    : AccountBalanceResponse() {
    *this = ::std::move(from);
  }

  inline AccountBalanceResponse& operator=(const AccountBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountBalanceResponse& operator=(AccountBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const AccountBalanceResponse*>(
               &_AccountBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AccountBalanceResponse& a, AccountBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountBalanceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountBalanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountBalanceResponse* New() const final {
    return new AccountBalanceResponse();
  }

  AccountBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountBalanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountBalanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountBalanceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountBalanceResponse";
  }
  protected:
  explicit AccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdentifierFieldNumber = 2,
    kBalanceFieldNumber = 1,
  };
  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  bool has_block_identifier() const;
  private:
  bool _internal_has_block_identifier() const;
  public:
  void clear_block_identifier();
  const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::BlockBalanceTrace_BlockIdentifier* release_block_identifier();
  ::protocol::BlockBalanceTrace_BlockIdentifier* mutable_block_identifier();
  void set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  private:
  const ::protocol::BlockBalanceTrace_BlockIdentifier& _internal_block_identifier() const;
  ::protocol::BlockBalanceTrace_BlockIdentifier* _internal_mutable_block_identifier();
  public:
  void unsafe_arena_set_allocated_block_identifier(
      ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier);
  ::protocol::BlockBalanceTrace_BlockIdentifier* unsafe_arena_release_block_identifier();

  // int64 balance = 1;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.AccountBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier_;
  ::PROTOBUF_NAMESPACE_ID::int64 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FreezeBalanceContract

// bytes owner_address = 1;
inline void FreezeBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& FreezeBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FreezeBalanceContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.owner_address)
}
inline std::string* FreezeBalanceContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.FreezeBalanceContract.owner_address)
  return _s;
}
inline const std::string& FreezeBalanceContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void FreezeBalanceContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FreezeBalanceContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FreezeBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.FreezeBalanceContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FreezeBalanceContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.FreezeBalanceContract.owner_address)
}

// int64 frozen_balance = 2;
inline void FreezeBalanceContract::clear_frozen_balance() {
  frozen_balance_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FreezeBalanceContract::_internal_frozen_balance() const {
  return frozen_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FreezeBalanceContract::frozen_balance() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.frozen_balance)
  return _internal_frozen_balance();
}
inline void FreezeBalanceContract::_internal_set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frozen_balance_ = value;
}
inline void FreezeBalanceContract::set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frozen_balance(value);
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.frozen_balance)
}

// int64 frozen_duration = 3;
inline void FreezeBalanceContract::clear_frozen_duration() {
  frozen_duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FreezeBalanceContract::_internal_frozen_duration() const {
  return frozen_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FreezeBalanceContract::frozen_duration() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.frozen_duration)
  return _internal_frozen_duration();
}
inline void FreezeBalanceContract::_internal_set_frozen_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frozen_duration_ = value;
}
inline void FreezeBalanceContract::set_frozen_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frozen_duration(value);
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.frozen_duration)
}

// .protocol.ResourceCode resource = 10;
inline void FreezeBalanceContract::clear_resource() {
  resource_ = 0;
}
inline ::protocol::ResourceCode FreezeBalanceContract::_internal_resource() const {
  return static_cast< ::protocol::ResourceCode >(resource_);
}
inline ::protocol::ResourceCode FreezeBalanceContract::resource() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.resource)
  return _internal_resource();
}
inline void FreezeBalanceContract::_internal_set_resource(::protocol::ResourceCode value) {
  
  resource_ = value;
}
inline void FreezeBalanceContract::set_resource(::protocol::ResourceCode value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.resource)
}

// bytes receiver_address = 15;
inline void FreezeBalanceContract::clear_receiver_address() {
  receiver_address_.ClearToEmpty();
}
inline const std::string& FreezeBalanceContract::receiver_address() const {
  // @@protoc_insertion_point(field_get:protocol.FreezeBalanceContract.receiver_address)
  return _internal_receiver_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FreezeBalanceContract::set_receiver_address(ArgT0&& arg0, ArgT... args) {
 
 receiver_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.FreezeBalanceContract.receiver_address)
}
inline std::string* FreezeBalanceContract::mutable_receiver_address() {
  std::string* _s = _internal_mutable_receiver_address();
  // @@protoc_insertion_point(field_mutable:protocol.FreezeBalanceContract.receiver_address)
  return _s;
}
inline const std::string& FreezeBalanceContract::_internal_receiver_address() const {
  return receiver_address_.Get();
}
inline void FreezeBalanceContract::_internal_set_receiver_address(const std::string& value) {
  
  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FreezeBalanceContract::_internal_mutable_receiver_address() {
  
  return receiver_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FreezeBalanceContract::release_receiver_address() {
  // @@protoc_insertion_point(field_release:protocol.FreezeBalanceContract.receiver_address)
  return receiver_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FreezeBalanceContract::set_allocated_receiver_address(std::string* receiver_address) {
  if (receiver_address != nullptr) {
    
  } else {
    
  }
  receiver_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.FreezeBalanceContract.receiver_address)
}

// -------------------------------------------------------------------

// UnfreezeBalanceContract

// bytes owner_address = 1;
inline void UnfreezeBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& UnfreezeBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeBalanceContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfreezeBalanceContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UnfreezeBalanceContract.owner_address)
}
inline std::string* UnfreezeBalanceContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.UnfreezeBalanceContract.owner_address)
  return _s;
}
inline const std::string& UnfreezeBalanceContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void UnfreezeBalanceContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnfreezeBalanceContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnfreezeBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UnfreezeBalanceContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnfreezeBalanceContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.UnfreezeBalanceContract.owner_address)
}

// .protocol.ResourceCode resource = 10;
inline void UnfreezeBalanceContract::clear_resource() {
  resource_ = 0;
}
inline ::protocol::ResourceCode UnfreezeBalanceContract::_internal_resource() const {
  return static_cast< ::protocol::ResourceCode >(resource_);
}
inline ::protocol::ResourceCode UnfreezeBalanceContract::resource() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeBalanceContract.resource)
  return _internal_resource();
}
inline void UnfreezeBalanceContract::_internal_set_resource(::protocol::ResourceCode value) {
  
  resource_ = value;
}
inline void UnfreezeBalanceContract::set_resource(::protocol::ResourceCode value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:protocol.UnfreezeBalanceContract.resource)
}

// bytes receiver_address = 15;
inline void UnfreezeBalanceContract::clear_receiver_address() {
  receiver_address_.ClearToEmpty();
}
inline const std::string& UnfreezeBalanceContract::receiver_address() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeBalanceContract.receiver_address)
  return _internal_receiver_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfreezeBalanceContract::set_receiver_address(ArgT0&& arg0, ArgT... args) {
 
 receiver_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UnfreezeBalanceContract.receiver_address)
}
inline std::string* UnfreezeBalanceContract::mutable_receiver_address() {
  std::string* _s = _internal_mutable_receiver_address();
  // @@protoc_insertion_point(field_mutable:protocol.UnfreezeBalanceContract.receiver_address)
  return _s;
}
inline const std::string& UnfreezeBalanceContract::_internal_receiver_address() const {
  return receiver_address_.Get();
}
inline void UnfreezeBalanceContract::_internal_set_receiver_address(const std::string& value) {
  
  receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnfreezeBalanceContract::_internal_mutable_receiver_address() {
  
  return receiver_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnfreezeBalanceContract::release_receiver_address() {
  // @@protoc_insertion_point(field_release:protocol.UnfreezeBalanceContract.receiver_address)
  return receiver_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnfreezeBalanceContract::set_allocated_receiver_address(std::string* receiver_address) {
  if (receiver_address != nullptr) {
    
  } else {
    
  }
  receiver_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.UnfreezeBalanceContract.receiver_address)
}

// -------------------------------------------------------------------

// WithdrawBalanceContract

// bytes owner_address = 1;
inline void WithdrawBalanceContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& WithdrawBalanceContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WithdrawBalanceContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WithdrawBalanceContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.WithdrawBalanceContract.owner_address)
}
inline std::string* WithdrawBalanceContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.WithdrawBalanceContract.owner_address)
  return _s;
}
inline const std::string& WithdrawBalanceContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void WithdrawBalanceContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WithdrawBalanceContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WithdrawBalanceContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WithdrawBalanceContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WithdrawBalanceContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.WithdrawBalanceContract.owner_address)
}

// -------------------------------------------------------------------

// TransferContract

// bytes owner_address = 1;
inline void TransferContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& TransferContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransferContract.owner_address)
}
inline std::string* TransferContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.TransferContract.owner_address)
  return _s;
}
inline const std::string& TransferContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void TransferContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferContract.owner_address)
}

// bytes to_address = 2;
inline void TransferContract::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransferContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferContract::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransferContract.to_address)
}
inline std::string* TransferContract::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:protocol.TransferContract.to_address)
  return _s;
}
inline const std::string& TransferContract::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransferContract::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferContract::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferContract.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferContract::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferContract.to_address)
}

// int64 amount = 3;
inline void TransferContract::clear_amount() {
  amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferContract::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransferContract.amount)
  return _internal_amount();
}
inline void TransferContract::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TransferContract::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protocol.TransferContract.amount)
}

// -------------------------------------------------------------------

// TransactionBalanceTrace_Operation

// int64 operation_identifier = 1;
inline void TransactionBalanceTrace_Operation::clear_operation_identifier() {
  operation_identifier_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionBalanceTrace_Operation::_internal_operation_identifier() const {
  return operation_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionBalanceTrace_Operation::operation_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.Operation.operation_identifier)
  return _internal_operation_identifier();
}
inline void TransactionBalanceTrace_Operation::_internal_set_operation_identifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operation_identifier_ = value;
}
inline void TransactionBalanceTrace_Operation::set_operation_identifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_operation_identifier(value);
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.Operation.operation_identifier)
}

// bytes address = 2;
inline void TransactionBalanceTrace_Operation::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& TransactionBalanceTrace_Operation::address() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.Operation.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBalanceTrace_Operation::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.Operation.address)
}
inline std::string* TransactionBalanceTrace_Operation::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionBalanceTrace.Operation.address)
  return _s;
}
inline const std::string& TransactionBalanceTrace_Operation::_internal_address() const {
  return address_.Get();
}
inline void TransactionBalanceTrace_Operation::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace_Operation::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace_Operation::release_address() {
  // @@protoc_insertion_point(field_release:protocol.TransactionBalanceTrace.Operation.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBalanceTrace_Operation::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionBalanceTrace.Operation.address)
}

// int64 amount = 3;
inline void TransactionBalanceTrace_Operation::clear_amount() {
  amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionBalanceTrace_Operation::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionBalanceTrace_Operation::amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.Operation.amount)
  return _internal_amount();
}
inline void TransactionBalanceTrace_Operation::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void TransactionBalanceTrace_Operation::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.Operation.amount)
}

// -------------------------------------------------------------------

// TransactionBalanceTrace

// bytes transaction_identifier = 1;
inline void TransactionBalanceTrace::clear_transaction_identifier() {
  transaction_identifier_.ClearToEmpty();
}
inline const std::string& TransactionBalanceTrace::transaction_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.transaction_identifier)
  return _internal_transaction_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBalanceTrace::set_transaction_identifier(ArgT0&& arg0, ArgT... args) {
 
 transaction_identifier_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.transaction_identifier)
}
inline std::string* TransactionBalanceTrace::mutable_transaction_identifier() {
  std::string* _s = _internal_mutable_transaction_identifier();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionBalanceTrace.transaction_identifier)
  return _s;
}
inline const std::string& TransactionBalanceTrace::_internal_transaction_identifier() const {
  return transaction_identifier_.Get();
}
inline void TransactionBalanceTrace::_internal_set_transaction_identifier(const std::string& value) {
  
  transaction_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::_internal_mutable_transaction_identifier() {
  
  return transaction_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::release_transaction_identifier() {
  // @@protoc_insertion_point(field_release:protocol.TransactionBalanceTrace.transaction_identifier)
  return transaction_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBalanceTrace::set_allocated_transaction_identifier(std::string* transaction_identifier) {
  if (transaction_identifier != nullptr) {
    
  } else {
    
  }
  transaction_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionBalanceTrace.transaction_identifier)
}

// repeated .protocol.TransactionBalanceTrace.Operation operation = 2;
inline int TransactionBalanceTrace::_internal_operation_size() const {
  return operation_.size();
}
inline int TransactionBalanceTrace::operation_size() const {
  return _internal_operation_size();
}
inline void TransactionBalanceTrace::clear_operation() {
  operation_.Clear();
}
inline ::protocol::TransactionBalanceTrace_Operation* TransactionBalanceTrace::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionBalanceTrace.operation)
  return operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace_Operation >*
TransactionBalanceTrace::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionBalanceTrace.operation)
  return &operation_;
}
inline const ::protocol::TransactionBalanceTrace_Operation& TransactionBalanceTrace::_internal_operation(int index) const {
  return operation_.Get(index);
}
inline const ::protocol::TransactionBalanceTrace_Operation& TransactionBalanceTrace::operation(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.operation)
  return _internal_operation(index);
}
inline ::protocol::TransactionBalanceTrace_Operation* TransactionBalanceTrace::_internal_add_operation() {
  return operation_.Add();
}
inline ::protocol::TransactionBalanceTrace_Operation* TransactionBalanceTrace::add_operation() {
  ::protocol::TransactionBalanceTrace_Operation* _add = _internal_add_operation();
  // @@protoc_insertion_point(field_add:protocol.TransactionBalanceTrace.operation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace_Operation >&
TransactionBalanceTrace::operation() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionBalanceTrace.operation)
  return operation_;
}

// string type = 3;
inline void TransactionBalanceTrace::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& TransactionBalanceTrace::type() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBalanceTrace::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.type)
}
inline std::string* TransactionBalanceTrace::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionBalanceTrace.type)
  return _s;
}
inline const std::string& TransactionBalanceTrace::_internal_type() const {
  return type_.Get();
}
inline void TransactionBalanceTrace::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::release_type() {
  // @@protoc_insertion_point(field_release:protocol.TransactionBalanceTrace.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBalanceTrace::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionBalanceTrace.type)
}

// string status = 4;
inline void TransactionBalanceTrace::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& TransactionBalanceTrace::status() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionBalanceTrace.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionBalanceTrace::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransactionBalanceTrace.status)
}
inline std::string* TransactionBalanceTrace::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionBalanceTrace.status)
  return _s;
}
inline const std::string& TransactionBalanceTrace::_internal_status() const {
  return status_.Get();
}
inline void TransactionBalanceTrace::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionBalanceTrace::release_status() {
  // @@protoc_insertion_point(field_release:protocol.TransactionBalanceTrace.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionBalanceTrace::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionBalanceTrace.status)
}

// -------------------------------------------------------------------

// BlockBalanceTrace_BlockIdentifier

// bytes hash = 1;
inline void BlockBalanceTrace_BlockIdentifier::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& BlockBalanceTrace_BlockIdentifier::hash() const {
  // @@protoc_insertion_point(field_get:protocol.BlockBalanceTrace.BlockIdentifier.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockBalanceTrace_BlockIdentifier::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.BlockBalanceTrace.BlockIdentifier.hash)
}
inline std::string* BlockBalanceTrace_BlockIdentifier::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protocol.BlockBalanceTrace.BlockIdentifier.hash)
  return _s;
}
inline const std::string& BlockBalanceTrace_BlockIdentifier::_internal_hash() const {
  return hash_.Get();
}
inline void BlockBalanceTrace_BlockIdentifier::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockBalanceTrace_BlockIdentifier::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockBalanceTrace_BlockIdentifier::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.BlockBalanceTrace.BlockIdentifier.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockBalanceTrace_BlockIdentifier::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockBalanceTrace.BlockIdentifier.hash)
}

// int64 number = 2;
inline void BlockBalanceTrace_BlockIdentifier::clear_number() {
  number_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockBalanceTrace_BlockIdentifier::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockBalanceTrace_BlockIdentifier::number() const {
  // @@protoc_insertion_point(field_get:protocol.BlockBalanceTrace.BlockIdentifier.number)
  return _internal_number();
}
inline void BlockBalanceTrace_BlockIdentifier::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void BlockBalanceTrace_BlockIdentifier::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:protocol.BlockBalanceTrace.BlockIdentifier.number)
}

// -------------------------------------------------------------------

// BlockBalanceTrace

// .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 1;
inline bool BlockBalanceTrace::_internal_has_block_identifier() const {
  return this != internal_default_instance() && block_identifier_ != nullptr;
}
inline bool BlockBalanceTrace::has_block_identifier() const {
  return _internal_has_block_identifier();
}
inline void BlockBalanceTrace::clear_block_identifier() {
  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& BlockBalanceTrace::_internal_block_identifier() const {
  const ::protocol::BlockBalanceTrace_BlockIdentifier* p = block_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::BlockBalanceTrace_BlockIdentifier&>(
      ::protocol::_BlockBalanceTrace_BlockIdentifier_default_instance_);
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& BlockBalanceTrace::block_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.BlockBalanceTrace.block_identifier)
  return _internal_block_identifier();
}
inline void BlockBalanceTrace::unsafe_arena_set_allocated_block_identifier(
    ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_identifier_);
  }
  block_identifier_ = block_identifier;
  if (block_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.BlockBalanceTrace.block_identifier)
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* BlockBalanceTrace::release_block_identifier() {
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* BlockBalanceTrace::unsafe_arena_release_block_identifier() {
  // @@protoc_insertion_point(field_release:protocol.BlockBalanceTrace.block_identifier)
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* BlockBalanceTrace::_internal_mutable_block_identifier() {
  
  if (block_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::BlockBalanceTrace_BlockIdentifier>(GetArenaForAllocation());
    block_identifier_ = p;
  }
  return block_identifier_;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* BlockBalanceTrace::mutable_block_identifier() {
  ::protocol::BlockBalanceTrace_BlockIdentifier* _msg = _internal_mutable_block_identifier();
  // @@protoc_insertion_point(field_mutable:protocol.BlockBalanceTrace.block_identifier)
  return _msg;
}
inline void BlockBalanceTrace::set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_identifier_;
  }
  if (block_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::BlockBalanceTrace_BlockIdentifier>::GetOwningArena(block_identifier);
    if (message_arena != submessage_arena) {
      block_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_identifier, submessage_arena);
    }
    
  } else {
    
  }
  block_identifier_ = block_identifier;
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockBalanceTrace.block_identifier)
}

// int64 timestamp = 2;
inline void BlockBalanceTrace::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockBalanceTrace::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockBalanceTrace::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.BlockBalanceTrace.timestamp)
  return _internal_timestamp();
}
inline void BlockBalanceTrace::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BlockBalanceTrace::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protocol.BlockBalanceTrace.timestamp)
}

// repeated .protocol.TransactionBalanceTrace transaction_balance_trace = 3;
inline int BlockBalanceTrace::_internal_transaction_balance_trace_size() const {
  return transaction_balance_trace_.size();
}
inline int BlockBalanceTrace::transaction_balance_trace_size() const {
  return _internal_transaction_balance_trace_size();
}
inline void BlockBalanceTrace::clear_transaction_balance_trace() {
  transaction_balance_trace_.Clear();
}
inline ::protocol::TransactionBalanceTrace* BlockBalanceTrace::mutable_transaction_balance_trace(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.BlockBalanceTrace.transaction_balance_trace)
  return transaction_balance_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace >*
BlockBalanceTrace::mutable_transaction_balance_trace() {
  // @@protoc_insertion_point(field_mutable_list:protocol.BlockBalanceTrace.transaction_balance_trace)
  return &transaction_balance_trace_;
}
inline const ::protocol::TransactionBalanceTrace& BlockBalanceTrace::_internal_transaction_balance_trace(int index) const {
  return transaction_balance_trace_.Get(index);
}
inline const ::protocol::TransactionBalanceTrace& BlockBalanceTrace::transaction_balance_trace(int index) const {
  // @@protoc_insertion_point(field_get:protocol.BlockBalanceTrace.transaction_balance_trace)
  return _internal_transaction_balance_trace(index);
}
inline ::protocol::TransactionBalanceTrace* BlockBalanceTrace::_internal_add_transaction_balance_trace() {
  return transaction_balance_trace_.Add();
}
inline ::protocol::TransactionBalanceTrace* BlockBalanceTrace::add_transaction_balance_trace() {
  ::protocol::TransactionBalanceTrace* _add = _internal_add_transaction_balance_trace();
  // @@protoc_insertion_point(field_add:protocol.BlockBalanceTrace.transaction_balance_trace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionBalanceTrace >&
BlockBalanceTrace::transaction_balance_trace() const {
  // @@protoc_insertion_point(field_list:protocol.BlockBalanceTrace.transaction_balance_trace)
  return transaction_balance_trace_;
}

// -------------------------------------------------------------------

// AccountTrace

// int64 balance = 1;
inline void AccountTrace::clear_balance() {
  balance_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountTrace::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountTrace::balance() const {
  // @@protoc_insertion_point(field_get:protocol.AccountTrace.balance)
  return _internal_balance();
}
inline void AccountTrace::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  balance_ = value;
}
inline void AccountTrace::set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:protocol.AccountTrace.balance)
}

// int64 placeholder = 99;
inline void AccountTrace::clear_placeholder() {
  placeholder_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountTrace::_internal_placeholder() const {
  return placeholder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountTrace::placeholder() const {
  // @@protoc_insertion_point(field_get:protocol.AccountTrace.placeholder)
  return _internal_placeholder();
}
inline void AccountTrace::_internal_set_placeholder(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  placeholder_ = value;
}
inline void AccountTrace::set_placeholder(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_placeholder(value);
  // @@protoc_insertion_point(field_set:protocol.AccountTrace.placeholder)
}

// -------------------------------------------------------------------

// AccountIdentifier

// bytes address = 1;
inline void AccountIdentifier::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& AccountIdentifier::address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountIdentifier.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountIdentifier::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AccountIdentifier.address)
}
inline std::string* AccountIdentifier::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protocol.AccountIdentifier.address)
  return _s;
}
inline const std::string& AccountIdentifier::_internal_address() const {
  return address_.Get();
}
inline void AccountIdentifier::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountIdentifier::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountIdentifier::release_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountIdentifier.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountIdentifier::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountIdentifier.address)
}

// -------------------------------------------------------------------

// AccountBalanceRequest

// .protocol.AccountIdentifier account_identifier = 1;
inline bool AccountBalanceRequest::_internal_has_account_identifier() const {
  return this != internal_default_instance() && account_identifier_ != nullptr;
}
inline bool AccountBalanceRequest::has_account_identifier() const {
  return _internal_has_account_identifier();
}
inline void AccountBalanceRequest::clear_account_identifier() {
  if (GetArenaForAllocation() == nullptr && account_identifier_ != nullptr) {
    delete account_identifier_;
  }
  account_identifier_ = nullptr;
}
inline const ::protocol::AccountIdentifier& AccountBalanceRequest::_internal_account_identifier() const {
  const ::protocol::AccountIdentifier* p = account_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::AccountIdentifier&>(
      ::protocol::_AccountIdentifier_default_instance_);
}
inline const ::protocol::AccountIdentifier& AccountBalanceRequest::account_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.AccountBalanceRequest.account_identifier)
  return _internal_account_identifier();
}
inline void AccountBalanceRequest::unsafe_arena_set_allocated_account_identifier(
    ::protocol::AccountIdentifier* account_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_identifier_);
  }
  account_identifier_ = account_identifier;
  if (account_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.AccountBalanceRequest.account_identifier)
}
inline ::protocol::AccountIdentifier* AccountBalanceRequest::release_account_identifier() {
  
  ::protocol::AccountIdentifier* temp = account_identifier_;
  account_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::AccountIdentifier* AccountBalanceRequest::unsafe_arena_release_account_identifier() {
  // @@protoc_insertion_point(field_release:protocol.AccountBalanceRequest.account_identifier)
  
  ::protocol::AccountIdentifier* temp = account_identifier_;
  account_identifier_ = nullptr;
  return temp;
}
inline ::protocol::AccountIdentifier* AccountBalanceRequest::_internal_mutable_account_identifier() {
  
  if (account_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::AccountIdentifier>(GetArenaForAllocation());
    account_identifier_ = p;
  }
  return account_identifier_;
}
inline ::protocol::AccountIdentifier* AccountBalanceRequest::mutable_account_identifier() {
  ::protocol::AccountIdentifier* _msg = _internal_mutable_account_identifier();
  // @@protoc_insertion_point(field_mutable:protocol.AccountBalanceRequest.account_identifier)
  return _msg;
}
inline void AccountBalanceRequest::set_allocated_account_identifier(::protocol::AccountIdentifier* account_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete account_identifier_;
  }
  if (account_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::AccountIdentifier>::GetOwningArena(account_identifier);
    if (message_arena != submessage_arena) {
      account_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_identifier, submessage_arena);
    }
    
  } else {
    
  }
  account_identifier_ = account_identifier;
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountBalanceRequest.account_identifier)
}

// .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
inline bool AccountBalanceRequest::_internal_has_block_identifier() const {
  return this != internal_default_instance() && block_identifier_ != nullptr;
}
inline bool AccountBalanceRequest::has_block_identifier() const {
  return _internal_has_block_identifier();
}
inline void AccountBalanceRequest::clear_block_identifier() {
  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& AccountBalanceRequest::_internal_block_identifier() const {
  const ::protocol::BlockBalanceTrace_BlockIdentifier* p = block_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::BlockBalanceTrace_BlockIdentifier&>(
      ::protocol::_BlockBalanceTrace_BlockIdentifier_default_instance_);
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& AccountBalanceRequest::block_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.AccountBalanceRequest.block_identifier)
  return _internal_block_identifier();
}
inline void AccountBalanceRequest::unsafe_arena_set_allocated_block_identifier(
    ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_identifier_);
  }
  block_identifier_ = block_identifier;
  if (block_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.AccountBalanceRequest.block_identifier)
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceRequest::release_block_identifier() {
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceRequest::unsafe_arena_release_block_identifier() {
  // @@protoc_insertion_point(field_release:protocol.AccountBalanceRequest.block_identifier)
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceRequest::_internal_mutable_block_identifier() {
  
  if (block_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::BlockBalanceTrace_BlockIdentifier>(GetArenaForAllocation());
    block_identifier_ = p;
  }
  return block_identifier_;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceRequest::mutable_block_identifier() {
  ::protocol::BlockBalanceTrace_BlockIdentifier* _msg = _internal_mutable_block_identifier();
  // @@protoc_insertion_point(field_mutable:protocol.AccountBalanceRequest.block_identifier)
  return _msg;
}
inline void AccountBalanceRequest::set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_identifier_;
  }
  if (block_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::BlockBalanceTrace_BlockIdentifier>::GetOwningArena(block_identifier);
    if (message_arena != submessage_arena) {
      block_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_identifier, submessage_arena);
    }
    
  } else {
    
  }
  block_identifier_ = block_identifier;
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountBalanceRequest.block_identifier)
}

// -------------------------------------------------------------------

// AccountBalanceResponse

// int64 balance = 1;
inline void AccountBalanceResponse::clear_balance() {
  balance_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountBalanceResponse::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountBalanceResponse::balance() const {
  // @@protoc_insertion_point(field_get:protocol.AccountBalanceResponse.balance)
  return _internal_balance();
}
inline void AccountBalanceResponse::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  balance_ = value;
}
inline void AccountBalanceResponse::set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:protocol.AccountBalanceResponse.balance)
}

// .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
inline bool AccountBalanceResponse::_internal_has_block_identifier() const {
  return this != internal_default_instance() && block_identifier_ != nullptr;
}
inline bool AccountBalanceResponse::has_block_identifier() const {
  return _internal_has_block_identifier();
}
inline void AccountBalanceResponse::clear_block_identifier() {
  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& AccountBalanceResponse::_internal_block_identifier() const {
  const ::protocol::BlockBalanceTrace_BlockIdentifier* p = block_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::BlockBalanceTrace_BlockIdentifier&>(
      ::protocol::_BlockBalanceTrace_BlockIdentifier_default_instance_);
}
inline const ::protocol::BlockBalanceTrace_BlockIdentifier& AccountBalanceResponse::block_identifier() const {
  // @@protoc_insertion_point(field_get:protocol.AccountBalanceResponse.block_identifier)
  return _internal_block_identifier();
}
inline void AccountBalanceResponse::unsafe_arena_set_allocated_block_identifier(
    ::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_identifier_);
  }
  block_identifier_ = block_identifier;
  if (block_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.AccountBalanceResponse.block_identifier)
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceResponse::release_block_identifier() {
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceResponse::unsafe_arena_release_block_identifier() {
  // @@protoc_insertion_point(field_release:protocol.AccountBalanceResponse.block_identifier)
  
  ::protocol::BlockBalanceTrace_BlockIdentifier* temp = block_identifier_;
  block_identifier_ = nullptr;
  return temp;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceResponse::_internal_mutable_block_identifier() {
  
  if (block_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::BlockBalanceTrace_BlockIdentifier>(GetArenaForAllocation());
    block_identifier_ = p;
  }
  return block_identifier_;
}
inline ::protocol::BlockBalanceTrace_BlockIdentifier* AccountBalanceResponse::mutable_block_identifier() {
  ::protocol::BlockBalanceTrace_BlockIdentifier* _msg = _internal_mutable_block_identifier();
  // @@protoc_insertion_point(field_mutable:protocol.AccountBalanceResponse.block_identifier)
  return _msg;
}
inline void AccountBalanceResponse::set_allocated_block_identifier(::protocol::BlockBalanceTrace_BlockIdentifier* block_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_identifier_;
  }
  if (block_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::BlockBalanceTrace_BlockIdentifier>::GetOwningArena(block_identifier);
    if (message_arena != submessage_arena) {
      block_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_identifier, submessage_arena);
    }
    
  } else {
    
  }
  block_identifier_ = block_identifier;
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountBalanceResponse.block_identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fbalance_5fcontract_2eproto
