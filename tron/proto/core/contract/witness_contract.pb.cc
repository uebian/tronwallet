// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/witness_contract.proto

#include "core/contract/witness_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr WitnessCreateContract::WitnessCreateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WitnessCreateContractDefaultTypeInternal {
  constexpr WitnessCreateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WitnessCreateContractDefaultTypeInternal() {}
  union {
    WitnessCreateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WitnessCreateContractDefaultTypeInternal _WitnessCreateContract_default_instance_;
constexpr WitnessUpdateContract::WitnessUpdateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WitnessUpdateContractDefaultTypeInternal {
  constexpr WitnessUpdateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WitnessUpdateContractDefaultTypeInternal() {}
  union {
    WitnessUpdateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WitnessUpdateContractDefaultTypeInternal _WitnessUpdateContract_default_instance_;
constexpr VoteWitnessContract_Vote::VoteWitnessContract_Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vote_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_count_(int64_t{0}){}
struct VoteWitnessContract_VoteDefaultTypeInternal {
  constexpr VoteWitnessContract_VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteWitnessContract_VoteDefaultTypeInternal() {}
  union {
    VoteWitnessContract_Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteWitnessContract_VoteDefaultTypeInternal _VoteWitnessContract_Vote_default_instance_;
constexpr VoteWitnessContract::VoteWitnessContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_()
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , support_(false){}
struct VoteWitnessContractDefaultTypeInternal {
  constexpr VoteWitnessContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteWitnessContractDefaultTypeInternal() {}
  union {
    VoteWitnessContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteWitnessContractDefaultTypeInternal _VoteWitnessContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, update_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, support_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::WitnessCreateContract)},
  { 7, -1, sizeof(::protocol::WitnessUpdateContract)},
  { 14, -1, sizeof(::protocol::VoteWitnessContract_Vote)},
  { 21, -1, sizeof(::protocol::VoteWitnessContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WitnessCreateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WitnessUpdateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fwitness_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/witness_contract.proto\022\010"
  "protocol\";\n\025WitnessCreateContract\022\025\n\rown"
  "er_address\030\001 \001(\014\022\013\n\003url\030\002 \001(\014\"B\n\025Witness"
  "UpdateContract\022\025\n\rowner_address\030\001 \001(\014\022\022\n"
  "\nupdate_url\030\014 \001(\014\"\242\001\n\023VoteWitnessContrac"
  "t\022\025\n\rowner_address\030\001 \001(\014\0221\n\005votes\030\002 \003(\0132"
  "\".protocol.VoteWitnessContract.Vote\022\017\n\007s"
  "upport\030\003 \001(\010\0320\n\004Vote\022\024\n\014vote_address\030\001 \001"
  "(\014\022\022\n\nvote_count\030\002 \001(\003BE\n\030org.tron.proto"
  "s.contractZ)github.com/tronprotocol/grpc"
  "-gateway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto = {
  false, false, 421, descriptor_table_protodef_core_2fcontract_2fwitness_5fcontract_2eproto, "core/contract/witness_contract.proto", 
  &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fwitness_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class WitnessCreateContract::_Internal {
 public:
};

WitnessCreateContract::WitnessCreateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.WitnessCreateContract)
}
WitnessCreateContract::WitnessCreateContract(const WitnessCreateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WitnessCreateContract)
}

inline void WitnessCreateContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WitnessCreateContract::~WitnessCreateContract() {
  // @@protoc_insertion_point(destructor:protocol.WitnessCreateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WitnessCreateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WitnessCreateContract::ArenaDtor(void* object) {
  WitnessCreateContract* _this = reinterpret_cast< WitnessCreateContract* >(object);
  (void)_this;
}
void WitnessCreateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WitnessCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WitnessCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WitnessCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WitnessCreateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WitnessCreateContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WitnessCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes url = 2;
  if (!this->_internal_url().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WitnessCreateContract)
  return target;
}

size_t WitnessCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WitnessCreateContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WitnessCreateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WitnessCreateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WitnessCreateContract::GetClassData() const { return &_class_data_; }

void WitnessCreateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WitnessCreateContract *>(to)->MergeFrom(
      static_cast<const WitnessCreateContract &>(from));
}


void WitnessCreateContract::MergeFrom(const WitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WitnessCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessCreateContract::CopyFrom(const WitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WitnessCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessCreateContract::IsInitialized() const {
  return true;
}

void WitnessCreateContract::InternalSwap(WitnessCreateContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WitnessCreateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[0]);
}

// ===================================================================

class WitnessUpdateContract::_Internal {
 public:
};

WitnessUpdateContract::WitnessUpdateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.WitnessUpdateContract)
}
WitnessUpdateContract::WitnessUpdateContract(const WitnessUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_url().empty()) {
    update_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WitnessUpdateContract)
}

inline void WitnessUpdateContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WitnessUpdateContract::~WitnessUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.WitnessUpdateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WitnessUpdateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WitnessUpdateContract::ArenaDtor(void* object) {
  WitnessUpdateContract* _this = reinterpret_cast< WitnessUpdateContract* >(object);
  (void)_this;
}
void WitnessUpdateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WitnessUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WitnessUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WitnessUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  update_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WitnessUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes update_url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_update_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WitnessUpdateContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WitnessUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes update_url = 12;
  if (!this->_internal_update_url().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_update_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WitnessUpdateContract)
  return target;
}

size_t WitnessUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WitnessUpdateContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes update_url = 12;
  if (!this->_internal_update_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_update_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WitnessUpdateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WitnessUpdateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WitnessUpdateContract::GetClassData() const { return &_class_data_; }

void WitnessUpdateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WitnessUpdateContract *>(to)->MergeFrom(
      static_cast<const WitnessUpdateContract &>(from));
}


void WitnessUpdateContract::MergeFrom(const WitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WitnessUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_update_url().empty()) {
    _internal_set_update_url(from._internal_update_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessUpdateContract::CopyFrom(const WitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WitnessUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessUpdateContract::IsInitialized() const {
  return true;
}

void WitnessUpdateContract::InternalSwap(WitnessUpdateContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_url_, GetArenaForAllocation(),
      &other->update_url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WitnessUpdateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[1]);
}

// ===================================================================

class VoteWitnessContract_Vote::_Internal {
 public:
};

VoteWitnessContract_Vote::VoteWitnessContract_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.VoteWitnessContract.Vote)
}
VoteWitnessContract_Vote::VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_address().empty()) {
    vote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_address(), 
      GetArenaForAllocation());
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract.Vote)
}

inline void VoteWitnessContract_Vote::SharedCtor() {
vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_count_ = int64_t{0};
}

VoteWitnessContract_Vote::~VoteWitnessContract_Vote() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteWitnessContract_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract_Vote::ArenaDtor(void* object) {
  VoteWitnessContract_Vote* _this = reinterpret_cast< VoteWitnessContract_Vote* >(object);
  (void)_this;
}
void VoteWitnessContract_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteWitnessContract_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmpty();
  vote_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (!this->_internal_vote_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->_internal_vote_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_vote_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract.Vote)
  return target;
}

size_t VoteWitnessContract_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (!this->_internal_vote_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vote_address());
  }

  // int64 vote_count = 2;
  if (this->_internal_vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vote_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteWitnessContract_Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteWitnessContract_Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteWitnessContract_Vote::GetClassData() const { return &_class_data_; }

void VoteWitnessContract_Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VoteWitnessContract_Vote *>(to)->MergeFrom(
      static_cast<const VoteWitnessContract_Vote &>(from));
}


void VoteWitnessContract_Vote::MergeFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vote_address().empty()) {
    _internal_set_vote_address(from._internal_vote_address());
  }
  if (from._internal_vote_count() != 0) {
    _internal_set_vote_count(from._internal_vote_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteWitnessContract_Vote::CopyFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract_Vote::IsInitialized() const {
  return true;
}

void VoteWitnessContract_Vote::InternalSwap(VoteWitnessContract_Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_address_, GetArenaForAllocation(),
      &other->vote_address_, other->GetArenaForAllocation()
  );
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract_Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[2]);
}

// ===================================================================

class VoteWitnessContract::_Internal {
 public:
};

VoteWitnessContract::VoteWitnessContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.VoteWitnessContract)
}
VoteWitnessContract::VoteWitnessContract(const VoteWitnessContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  support_ = from.support_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract)
}

inline void VoteWitnessContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
support_ = false;
}

VoteWitnessContract::~VoteWitnessContract() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteWitnessContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract::ArenaDtor(void* object) {
  VoteWitnessContract* _this = reinterpret_cast< VoteWitnessContract* >(object);
  (void)_this;
}
void VoteWitnessContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteWitnessContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteWitnessContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  owner_address_.ClearToEmpty();
  support_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteWitnessContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.VoteWitnessContract.Vote votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  // bool support = 3;
  if (this->_internal_support() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract)
  return target;
}

size_t VoteWitnessContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bool support = 3;
  if (this->_internal_support() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteWitnessContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteWitnessContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteWitnessContract::GetClassData() const { return &_class_data_; }

void VoteWitnessContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VoteWitnessContract *>(to)->MergeFrom(
      static_cast<const VoteWitnessContract &>(from));
}


void VoteWitnessContract::MergeFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_support() != 0) {
    _internal_set_support(from._internal_support());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteWitnessContract::CopyFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract::IsInitialized() const {
  return true;
}

void VoteWitnessContract::InternalSwap(VoteWitnessContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  swap(support_, other->support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::WitnessCreateContract* Arena::CreateMaybeMessage< ::protocol::WitnessCreateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WitnessCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WitnessUpdateContract* Arena::CreateMaybeMessage< ::protocol::WitnessUpdateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WitnessUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract_Vote* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::VoteWitnessContract_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::VoteWitnessContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
