// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/account_contract.proto

#include "core/contract/account_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr AccountCreateContract::AccountCreateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct AccountCreateContractDefaultTypeInternal {
  constexpr AccountCreateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountCreateContractDefaultTypeInternal() {}
  union {
    AccountCreateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountCreateContractDefaultTypeInternal _AccountCreateContract_default_instance_;
constexpr AccountUpdateContract::AccountUpdateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountUpdateContractDefaultTypeInternal {
  constexpr AccountUpdateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountUpdateContractDefaultTypeInternal() {}
  union {
    AccountUpdateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountUpdateContractDefaultTypeInternal _AccountUpdateContract_default_instance_;
constexpr SetAccountIdContract::SetAccountIdContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetAccountIdContractDefaultTypeInternal {
  constexpr SetAccountIdContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAccountIdContractDefaultTypeInternal() {}
  union {
    SetAccountIdContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAccountIdContractDefaultTypeInternal _SetAccountIdContract_default_instance_;
constexpr AccountPermissionUpdateContract::AccountPermissionUpdateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actives_()
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(nullptr)
  , witness_(nullptr){}
struct AccountPermissionUpdateContractDefaultTypeInternal {
  constexpr AccountPermissionUpdateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountPermissionUpdateContractDefaultTypeInternal() {}
  union {
    AccountPermissionUpdateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountPermissionUpdateContractDefaultTypeInternal _AccountPermissionUpdateContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2faccount_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2faccount_5fcontract_2eproto = nullptr;

const uint32_t TableStruct_core_2fcontract_2faccount_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, account_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, account_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, account_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, owner_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, witness_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, actives_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::AccountCreateContract)},
  { 9, -1, -1, sizeof(::protocol::AccountUpdateContract)},
  { 17, -1, -1, sizeof(::protocol::SetAccountIdContract)},
  { 25, -1, -1, sizeof(::protocol::AccountPermissionUpdateContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountCreateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountUpdateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SetAccountIdContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountPermissionUpdateContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2faccount_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/account_contract.proto\022\010"
  "protocol\032\017core/Tron.proto\"l\n\025AccountCrea"
  "teContract\022\025\n\rowner_address\030\001 \001(\014\022\027\n\017acc"
  "ount_address\030\002 \001(\014\022#\n\004type\030\003 \001(\0162\025.proto"
  "col.AccountType\"D\n\025AccountUpdateContract"
  "\022\024\n\014account_name\030\001 \001(\014\022\025\n\rowner_address\030"
  "\002 \001(\014\"A\n\024SetAccountIdContract\022\022\n\naccount"
  "_id\030\001 \001(\014\022\025\n\rowner_address\030\002 \001(\014\"\253\001\n\037Acc"
  "ountPermissionUpdateContract\022\025\n\rowner_ad"
  "dress\030\001 \001(\014\022#\n\005owner\030\002 \001(\0132\024.protocol.Pe"
  "rmission\022%\n\007witness\030\003 \001(\0132\024.protocol.Per"
  "mission\022%\n\007actives\030\004 \003(\0132\024.protocol.Perm"
  "issionBE\n\030org.tron.protos.contractZ)gith"
  "ub.com/tronprotocol/grpc-gateway/coreb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_deps[1] = {
  &::descriptor_table_core_2fTron_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto = {
  false, false, 565, descriptor_table_protodef_core_2fcontract_2faccount_5fcontract_2eproto, "core/contract/account_contract.proto", 
  &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once, descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_core_2fcontract_2faccount_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2faccount_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2faccount_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2faccount_5fcontract_2eproto(&descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class AccountCreateContract::_Internal {
 public:
};

AccountCreateContract::AccountCreateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountCreateContract)
}
AccountCreateContract::AccountCreateContract(const AccountCreateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    account_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_address(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.AccountCreateContract)
}

inline void AccountCreateContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

AccountCreateContract::~AccountCreateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountCreateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountCreateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountCreateContract::ArenaDtor(void* object) {
  AccountCreateContract* _this = reinterpret_cast< AccountCreateContract* >(object);
  (void)_this;
}
void AccountCreateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountCreateContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  account_address_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes account_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.AccountType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::AccountType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountCreateContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountCreateContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes account_address = 2;
  if (!this->_internal_account_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account_address(), target);
  }

  // .protocol.AccountType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountCreateContract)
  return target;
}

size_t AccountCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountCreateContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes account_address = 2;
  if (!this->_internal_account_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_address());
  }

  // .protocol.AccountType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountCreateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreateContract::GetClassData() const { return &_class_data_; }

void AccountCreateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountCreateContract *>(to)->MergeFrom(
      static_cast<const AccountCreateContract &>(from));
}


void AccountCreateContract::MergeFrom(const AccountCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_account_address().empty()) {
    _internal_set_account_address(from._internal_account_address());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreateContract::CopyFrom(const AccountCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreateContract::IsInitialized() const {
  return true;
}

void AccountCreateContract::InternalSwap(AccountCreateContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_address_, lhs_arena,
      &other->account_address_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[0]);
}

// ===================================================================

class AccountUpdateContract::_Internal {
 public:
};

AccountUpdateContract::AccountUpdateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountUpdateContract)
}
AccountUpdateContract::AccountUpdateContract(const AccountUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_name().empty()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountUpdateContract)
}

inline void AccountUpdateContract::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountUpdateContract::~AccountUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountUpdateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountUpdateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountUpdateContract::ArenaDtor(void* object) {
  AccountUpdateContract* _this = reinterpret_cast< AccountUpdateContract* >(object);
  (void)_this;
}
void AccountUpdateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountUpdateContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_name_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountUpdateContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountUpdateContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (!this->_internal_account_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountUpdateContract)
  return target;
}

size_t AccountUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountUpdateContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_name());
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountUpdateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountUpdateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountUpdateContract::GetClassData() const { return &_class_data_; }

void AccountUpdateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountUpdateContract *>(to)->MergeFrom(
      static_cast<const AccountUpdateContract &>(from));
}


void AccountUpdateContract::MergeFrom(const AccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_name().empty()) {
    _internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountUpdateContract::CopyFrom(const AccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpdateContract::IsInitialized() const {
  return true;
}

void AccountUpdateContract::InternalSwap(AccountUpdateContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountUpdateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[1]);
}

// ===================================================================

class SetAccountIdContract::_Internal {
 public:
};

SetAccountIdContract::SetAccountIdContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SetAccountIdContract)
}
SetAccountIdContract::SetAccountIdContract(const SetAccountIdContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SetAccountIdContract)
}

inline void SetAccountIdContract::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetAccountIdContract::~SetAccountIdContract() {
  // @@protoc_insertion_point(destructor:protocol.SetAccountIdContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAccountIdContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAccountIdContract::ArenaDtor(void* object) {
  SetAccountIdContract* _this = reinterpret_cast< SetAccountIdContract* >(object);
  (void)_this;
}
void SetAccountIdContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAccountIdContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAccountIdContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SetAccountIdContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAccountIdContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAccountIdContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SetAccountIdContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_id = 1;
  if (!this->_internal_account_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SetAccountIdContract)
  return target;
}

size_t SetAccountIdContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SetAccountIdContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account_id());
  }

  // bytes owner_address = 2;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAccountIdContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAccountIdContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAccountIdContract::GetClassData() const { return &_class_data_; }

void SetAccountIdContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAccountIdContract *>(to)->MergeFrom(
      static_cast<const SetAccountIdContract &>(from));
}


void SetAccountIdContract::MergeFrom(const SetAccountIdContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SetAccountIdContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAccountIdContract::CopyFrom(const SetAccountIdContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SetAccountIdContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccountIdContract::IsInitialized() const {
  return true;
}

void SetAccountIdContract::InternalSwap(SetAccountIdContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_id_, lhs_arena,
      &other->account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccountIdContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[2]);
}

// ===================================================================

class AccountPermissionUpdateContract::_Internal {
 public:
  static const ::protocol::Permission& owner(const AccountPermissionUpdateContract* msg);
  static const ::protocol::Permission& witness(const AccountPermissionUpdateContract* msg);
};

const ::protocol::Permission&
AccountPermissionUpdateContract::_Internal::owner(const AccountPermissionUpdateContract* msg) {
  return *msg->owner_;
}
const ::protocol::Permission&
AccountPermissionUpdateContract::_Internal::witness(const AccountPermissionUpdateContract* msg) {
  return *msg->witness_;
}
void AccountPermissionUpdateContract::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void AccountPermissionUpdateContract::clear_witness() {
  if (GetArenaForAllocation() == nullptr && witness_ != nullptr) {
    delete witness_;
  }
  witness_ = nullptr;
}
void AccountPermissionUpdateContract::clear_actives() {
  actives_.Clear();
}
AccountPermissionUpdateContract::AccountPermissionUpdateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountPermissionUpdateContract)
}
AccountPermissionUpdateContract::AccountPermissionUpdateContract(const AccountPermissionUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actives_(from.actives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner()) {
    owner_ = new ::protocol::Permission(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from._internal_has_witness()) {
    witness_ = new ::protocol::Permission(*from.witness_);
  } else {
    witness_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountPermissionUpdateContract)
}

inline void AccountPermissionUpdateContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&witness_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(witness_));
}

AccountPermissionUpdateContract::~AccountPermissionUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountPermissionUpdateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountPermissionUpdateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete witness_;
}

void AccountPermissionUpdateContract::ArenaDtor(void* object) {
  AccountPermissionUpdateContract* _this = reinterpret_cast< AccountPermissionUpdateContract* >(object);
  (void)_this;
}
void AccountPermissionUpdateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountPermissionUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountPermissionUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountPermissionUpdateContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actives_.Clear();
  owner_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && witness_ != nullptr) {
    delete witness_;
  }
  witness_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountPermissionUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Permission owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Permission witness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_witness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.Permission actives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountPermissionUpdateContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountPermissionUpdateContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // .protocol.Permission owner = 2;
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner(this), target, stream);
  }

  // .protocol.Permission witness = 3;
  if (this->_internal_has_witness()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::witness(this), target, stream);
  }

  // repeated .protocol.Permission actives = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_actives(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountPermissionUpdateContract)
  return target;
}

size_t AccountPermissionUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountPermissionUpdateContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Permission actives = 4;
  total_size += 1UL * this->_internal_actives_size();
  for (const auto& msg : this->actives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // .protocol.Permission owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .protocol.Permission witness = 3;
  if (this->_internal_has_witness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *witness_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountPermissionUpdateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountPermissionUpdateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountPermissionUpdateContract::GetClassData() const { return &_class_data_; }

void AccountPermissionUpdateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountPermissionUpdateContract *>(to)->MergeFrom(
      static_cast<const AccountPermissionUpdateContract &>(from));
}


void AccountPermissionUpdateContract::MergeFrom(const AccountPermissionUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountPermissionUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actives_.MergeFrom(from.actives_);
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::protocol::Permission::MergeFrom(from._internal_owner());
  }
  if (from._internal_has_witness()) {
    _internal_mutable_witness()->::protocol::Permission::MergeFrom(from._internal_witness());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPermissionUpdateContract::CopyFrom(const AccountPermissionUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountPermissionUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountPermissionUpdateContract::IsInitialized() const {
  return true;
}

void AccountPermissionUpdateContract::InternalSwap(AccountPermissionUpdateContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actives_.InternalSwap(&other->actives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountPermissionUpdateContract, witness_)
      + sizeof(AccountPermissionUpdateContract::witness_)
      - PROTOBUF_FIELD_OFFSET(AccountPermissionUpdateContract, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountPermissionUpdateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AccountCreateContract* Arena::CreateMaybeMessage< ::protocol::AccountCreateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountUpdateContract* Arena::CreateMaybeMessage< ::protocol::AccountUpdateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SetAccountIdContract* Arena::CreateMaybeMessage< ::protocol::SetAccountIdContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SetAccountIdContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountPermissionUpdateContract* Arena::CreateMaybeMessage< ::protocol::AccountPermissionUpdateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountPermissionUpdateContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
