// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/exchange_contract.proto

#include "core/contract/exchange_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr ExchangeCreateContract::ExchangeCreateContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , second_token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_token_balance_(int64_t{0})
  , second_token_balance_(int64_t{0}){}
struct ExchangeCreateContractDefaultTypeInternal {
  constexpr ExchangeCreateContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeCreateContractDefaultTypeInternal() {}
  union {
    ExchangeCreateContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeCreateContractDefaultTypeInternal _ExchangeCreateContract_default_instance_;
constexpr ExchangeInjectContract::ExchangeInjectContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(int64_t{0})
  , quant_(int64_t{0}){}
struct ExchangeInjectContractDefaultTypeInternal {
  constexpr ExchangeInjectContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeInjectContractDefaultTypeInternal() {}
  union {
    ExchangeInjectContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeInjectContractDefaultTypeInternal _ExchangeInjectContract_default_instance_;
constexpr ExchangeWithdrawContract::ExchangeWithdrawContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(int64_t{0})
  , quant_(int64_t{0}){}
struct ExchangeWithdrawContractDefaultTypeInternal {
  constexpr ExchangeWithdrawContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeWithdrawContractDefaultTypeInternal() {}
  union {
    ExchangeWithdrawContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeWithdrawContractDefaultTypeInternal _ExchangeWithdrawContract_default_instance_;
constexpr ExchangeTransactionContract::ExchangeTransactionContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(int64_t{0})
  , quant_(int64_t{0})
  , expected_(int64_t{0}){}
struct ExchangeTransactionContractDefaultTypeInternal {
  constexpr ExchangeTransactionContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeTransactionContractDefaultTypeInternal() {}
  union {
    ExchangeTransactionContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeTransactionContractDefaultTypeInternal _ExchangeTransactionContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fexchange_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fexchange_5fcontract_2eproto = nullptr;

const uint32_t TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, first_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, first_token_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, second_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeCreateContract, second_token_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeInjectContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeInjectContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeInjectContract, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeInjectContract, token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeInjectContract, quant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeWithdrawContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeWithdrawContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeWithdrawContract, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeWithdrawContract, token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeWithdrawContract, quant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, quant_),
  PROTOBUF_FIELD_OFFSET(::protocol::ExchangeTransactionContract, expected_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::ExchangeCreateContract)},
  { 11, -1, -1, sizeof(::protocol::ExchangeInjectContract)},
  { 21, -1, -1, sizeof(::protocol::ExchangeWithdrawContract)},
  { 31, -1, -1, sizeof(::protocol::ExchangeTransactionContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExchangeCreateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExchangeInjectContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExchangeWithdrawContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ExchangeTransactionContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fexchange_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%core/contract/exchange_contract.proto\022"
  "\010protocol\"\233\001\n\026ExchangeCreateContract\022\025\n\r"
  "owner_address\030\001 \001(\014\022\026\n\016first_token_id\030\002 "
  "\001(\014\022\033\n\023first_token_balance\030\003 \001(\003\022\027\n\017seco"
  "nd_token_id\030\004 \001(\014\022\034\n\024second_token_balanc"
  "e\030\005 \001(\003\"e\n\026ExchangeInjectContract\022\025\n\rown"
  "er_address\030\001 \001(\014\022\023\n\013exchange_id\030\002 \001(\003\022\020\n"
  "\010token_id\030\003 \001(\014\022\r\n\005quant\030\004 \001(\003\"g\n\030Exchan"
  "geWithdrawContract\022\025\n\rowner_address\030\001 \001("
  "\014\022\023\n\013exchange_id\030\002 \001(\003\022\020\n\010token_id\030\003 \001(\014"
  "\022\r\n\005quant\030\004 \001(\003\"|\n\033ExchangeTransactionCo"
  "ntract\022\025\n\rowner_address\030\001 \001(\014\022\023\n\013exchang"
  "e_id\030\002 \001(\003\022\020\n\010token_id\030\003 \001(\014\022\r\n\005quant\030\004 "
  "\001(\003\022\020\n\010expected\030\005 \001(\003BE\n\030org.tron.protos"
  ".contractZ)github.com/tronprotocol/grpc-"
  "gateway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto = {
  false, false, 620, descriptor_table_protodef_core_2fcontract_2fexchange_5fcontract_2eproto, "core/contract/exchange_contract.proto", 
  &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fexchange_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fexchange_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fexchange_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class ExchangeCreateContract::_Internal {
 public:
};

ExchangeCreateContract::ExchangeCreateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExchangeCreateContract)
}
ExchangeCreateContract::ExchangeCreateContract(const ExchangeCreateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_token_id().empty()) {
    first_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_token_id(), 
      GetArenaForAllocation());
  }
  second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    second_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_second_token_id().empty()) {
    second_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_second_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&first_token_balance_, &from.first_token_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_token_balance_) -
    reinterpret_cast<char*>(&first_token_balance_)) + sizeof(second_token_balance_));
  // @@protoc_insertion_point(copy_constructor:protocol.ExchangeCreateContract)
}

inline void ExchangeCreateContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  second_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_token_balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_token_balance_) -
    reinterpret_cast<char*>(&first_token_balance_)) + sizeof(second_token_balance_));
}

ExchangeCreateContract::~ExchangeCreateContract() {
  // @@protoc_insertion_point(destructor:protocol.ExchangeCreateContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeCreateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangeCreateContract::ArenaDtor(void* object) {
  ExchangeCreateContract* _this = reinterpret_cast< ExchangeCreateContract* >(object);
  (void)_this;
}
void ExchangeCreateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExchangeCreateContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  first_token_id_.ClearToEmpty();
  second_token_id_.ClearToEmpty();
  ::memset(&first_token_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_token_balance_) -
      reinterpret_cast<char*>(&first_token_balance_)) + sizeof(second_token_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeCreateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes first_token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 first_token_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          first_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes second_token_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_second_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 second_token_balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          second_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeCreateContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExchangeCreateContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes first_token_id = 2;
  if (!this->_internal_first_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_first_token_id(), target);
  }

  // int64 first_token_balance = 3;
  if (this->_internal_first_token_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_first_token_balance(), target);
  }

  // bytes second_token_id = 4;
  if (!this->_internal_second_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_second_token_id(), target);
  }

  // int64 second_token_balance = 5;
  if (this->_internal_second_token_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_second_token_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExchangeCreateContract)
  return target;
}

size_t ExchangeCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExchangeCreateContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes first_token_id = 2;
  if (!this->_internal_first_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_first_token_id());
  }

  // bytes second_token_id = 4;
  if (!this->_internal_second_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_second_token_id());
  }

  // int64 first_token_balance = 3;
  if (this->_internal_first_token_balance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_first_token_balance());
  }

  // int64 second_token_balance = 5;
  if (this->_internal_second_token_balance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_second_token_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeCreateContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeCreateContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeCreateContract::GetClassData() const { return &_class_data_; }

void ExchangeCreateContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExchangeCreateContract *>(to)->MergeFrom(
      static_cast<const ExchangeCreateContract &>(from));
}


void ExchangeCreateContract::MergeFrom(const ExchangeCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExchangeCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_first_token_id().empty()) {
    _internal_set_first_token_id(from._internal_first_token_id());
  }
  if (!from._internal_second_token_id().empty()) {
    _internal_set_second_token_id(from._internal_second_token_id());
  }
  if (from._internal_first_token_balance() != 0) {
    _internal_set_first_token_balance(from._internal_first_token_balance());
  }
  if (from._internal_second_token_balance() != 0) {
    _internal_set_second_token_balance(from._internal_second_token_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeCreateContract::CopyFrom(const ExchangeCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExchangeCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeCreateContract::IsInitialized() const {
  return true;
}

void ExchangeCreateContract::InternalSwap(ExchangeCreateContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_token_id_, lhs_arena,
      &other->first_token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &second_token_id_, lhs_arena,
      &other->second_token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeCreateContract, second_token_balance_)
      + sizeof(ExchangeCreateContract::second_token_balance_)
      - PROTOBUF_FIELD_OFFSET(ExchangeCreateContract, first_token_balance_)>(
          reinterpret_cast<char*>(&first_token_balance_),
          reinterpret_cast<char*>(&other->first_token_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeCreateContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto[0]);
}

// ===================================================================

class ExchangeInjectContract::_Internal {
 public:
};

ExchangeInjectContract::ExchangeInjectContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExchangeInjectContract)
}
ExchangeInjectContract::ExchangeInjectContract(const ExchangeInjectContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exchange_id_, &from.exchange_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quant_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
  // @@protoc_insertion_point(copy_constructor:protocol.ExchangeInjectContract)
}

inline void ExchangeInjectContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exchange_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quant_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
}

ExchangeInjectContract::~ExchangeInjectContract() {
  // @@protoc_insertion_point(destructor:protocol.ExchangeInjectContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeInjectContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangeInjectContract::ArenaDtor(void* object) {
  ExchangeInjectContract* _this = reinterpret_cast< ExchangeInjectContract* >(object);
  (void)_this;
}
void ExchangeInjectContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeInjectContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeInjectContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExchangeInjectContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  token_id_.ClearToEmpty();
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quant_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeInjectContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeInjectContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExchangeInjectContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exchange_id(), target);
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_quant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExchangeInjectContract)
  return target;
}

size_t ExchangeInjectContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExchangeInjectContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_exchange_id());
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_quant());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeInjectContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeInjectContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeInjectContract::GetClassData() const { return &_class_data_; }

void ExchangeInjectContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExchangeInjectContract *>(to)->MergeFrom(
      static_cast<const ExchangeInjectContract &>(from));
}


void ExchangeInjectContract::MergeFrom(const ExchangeInjectContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExchangeInjectContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_quant() != 0) {
    _internal_set_quant(from._internal_quant());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeInjectContract::CopyFrom(const ExchangeInjectContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExchangeInjectContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeInjectContract::IsInitialized() const {
  return true;
}

void ExchangeInjectContract::InternalSwap(ExchangeInjectContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeInjectContract, quant_)
      + sizeof(ExchangeInjectContract::quant_)
      - PROTOBUF_FIELD_OFFSET(ExchangeInjectContract, exchange_id_)>(
          reinterpret_cast<char*>(&exchange_id_),
          reinterpret_cast<char*>(&other->exchange_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeInjectContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto[1]);
}

// ===================================================================

class ExchangeWithdrawContract::_Internal {
 public:
};

ExchangeWithdrawContract::ExchangeWithdrawContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExchangeWithdrawContract)
}
ExchangeWithdrawContract::ExchangeWithdrawContract(const ExchangeWithdrawContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exchange_id_, &from.exchange_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quant_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
  // @@protoc_insertion_point(copy_constructor:protocol.ExchangeWithdrawContract)
}

inline void ExchangeWithdrawContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exchange_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quant_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
}

ExchangeWithdrawContract::~ExchangeWithdrawContract() {
  // @@protoc_insertion_point(destructor:protocol.ExchangeWithdrawContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeWithdrawContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangeWithdrawContract::ArenaDtor(void* object) {
  ExchangeWithdrawContract* _this = reinterpret_cast< ExchangeWithdrawContract* >(object);
  (void)_this;
}
void ExchangeWithdrawContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeWithdrawContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeWithdrawContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExchangeWithdrawContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  token_id_.ClearToEmpty();
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quant_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(quant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeWithdrawContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeWithdrawContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExchangeWithdrawContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exchange_id(), target);
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_quant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExchangeWithdrawContract)
  return target;
}

size_t ExchangeWithdrawContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExchangeWithdrawContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_exchange_id());
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_quant());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeWithdrawContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeWithdrawContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeWithdrawContract::GetClassData() const { return &_class_data_; }

void ExchangeWithdrawContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExchangeWithdrawContract *>(to)->MergeFrom(
      static_cast<const ExchangeWithdrawContract &>(from));
}


void ExchangeWithdrawContract::MergeFrom(const ExchangeWithdrawContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExchangeWithdrawContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_quant() != 0) {
    _internal_set_quant(from._internal_quant());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeWithdrawContract::CopyFrom(const ExchangeWithdrawContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExchangeWithdrawContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeWithdrawContract::IsInitialized() const {
  return true;
}

void ExchangeWithdrawContract::InternalSwap(ExchangeWithdrawContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeWithdrawContract, quant_)
      + sizeof(ExchangeWithdrawContract::quant_)
      - PROTOBUF_FIELD_OFFSET(ExchangeWithdrawContract, exchange_id_)>(
          reinterpret_cast<char*>(&exchange_id_),
          reinterpret_cast<char*>(&other->exchange_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeWithdrawContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto[2]);
}

// ===================================================================

class ExchangeTransactionContract::_Internal {
 public:
};

ExchangeTransactionContract::ExchangeTransactionContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ExchangeTransactionContract)
}
ExchangeTransactionContract::ExchangeTransactionContract(const ExchangeTransactionContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exchange_id_, &from.exchange_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(expected_));
  // @@protoc_insertion_point(copy_constructor:protocol.ExchangeTransactionContract)
}

inline void ExchangeTransactionContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exchange_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expected_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(expected_));
}

ExchangeTransactionContract::~ExchangeTransactionContract() {
  // @@protoc_insertion_point(destructor:protocol.ExchangeTransactionContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeTransactionContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangeTransactionContract::ArenaDtor(void* object) {
  ExchangeTransactionContract* _this = reinterpret_cast< ExchangeTransactionContract* >(object);
  (void)_this;
}
void ExchangeTransactionContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeTransactionContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeTransactionContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ExchangeTransactionContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  token_id_.ClearToEmpty();
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(expected_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeTransactionContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          expected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeTransactionContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ExchangeTransactionContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exchange_id(), target);
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_quant(), target);
  }

  // int64 expected = 5;
  if (this->_internal_expected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ExchangeTransactionContract)
  return target;
}

size_t ExchangeTransactionContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ExchangeTransactionContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes token_id = 3;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  // int64 exchange_id = 2;
  if (this->_internal_exchange_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_exchange_id());
  }

  // int64 quant = 4;
  if (this->_internal_quant() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_quant());
  }

  // int64 expected = 5;
  if (this->_internal_expected() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_expected());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeTransactionContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeTransactionContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeTransactionContract::GetClassData() const { return &_class_data_; }

void ExchangeTransactionContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExchangeTransactionContract *>(to)->MergeFrom(
      static_cast<const ExchangeTransactionContract &>(from));
}


void ExchangeTransactionContract::MergeFrom(const ExchangeTransactionContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ExchangeTransactionContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from._internal_exchange_id() != 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from._internal_quant() != 0) {
    _internal_set_quant(from._internal_quant());
  }
  if (from._internal_expected() != 0) {
    _internal_set_expected(from._internal_expected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeTransactionContract::CopyFrom(const ExchangeTransactionContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ExchangeTransactionContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeTransactionContract::IsInitialized() const {
  return true;
}

void ExchangeTransactionContract::InternalSwap(ExchangeTransactionContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, lhs_arena,
      &other->token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeTransactionContract, expected_)
      + sizeof(ExchangeTransactionContract::expected_)
      - PROTOBUF_FIELD_OFFSET(ExchangeTransactionContract, exchange_id_)>(
          reinterpret_cast<char*>(&exchange_id_),
          reinterpret_cast<char*>(&other->exchange_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeTransactionContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fexchange_5fcontract_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::ExchangeCreateContract* Arena::CreateMaybeMessage< ::protocol::ExchangeCreateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExchangeCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ExchangeInjectContract* Arena::CreateMaybeMessage< ::protocol::ExchangeInjectContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExchangeInjectContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ExchangeWithdrawContract* Arena::CreateMaybeMessage< ::protocol::ExchangeWithdrawContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExchangeWithdrawContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ExchangeTransactionContract* Arena::CreateMaybeMessage< ::protocol::ExchangeTransactionContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ExchangeTransactionContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
