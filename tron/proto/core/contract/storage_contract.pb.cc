// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/storage_contract.proto

#include "core/contract/storage_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr BuyStorageBytesContract::BuyStorageBytesContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_(int64_t{0}){}
struct BuyStorageBytesContractDefaultTypeInternal {
  constexpr BuyStorageBytesContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuyStorageBytesContractDefaultTypeInternal() {}
  union {
    BuyStorageBytesContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuyStorageBytesContractDefaultTypeInternal _BuyStorageBytesContract_default_instance_;
constexpr BuyStorageContract::BuyStorageContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quant_(int64_t{0}){}
struct BuyStorageContractDefaultTypeInternal {
  constexpr BuyStorageContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuyStorageContractDefaultTypeInternal() {}
  union {
    BuyStorageContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuyStorageContractDefaultTypeInternal _BuyStorageContract_default_instance_;
constexpr SellStorageContract::SellStorageContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , storage_bytes_(int64_t{0}){}
struct SellStorageContractDefaultTypeInternal {
  constexpr SellStorageContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SellStorageContractDefaultTypeInternal() {}
  union {
    SellStorageContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SellStorageContractDefaultTypeInternal _SellStorageContract_default_instance_;
constexpr UpdateBrokerageContract::UpdateBrokerageContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , brokerage_(0){}
struct UpdateBrokerageContractDefaultTypeInternal {
  constexpr UpdateBrokerageContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateBrokerageContractDefaultTypeInternal() {}
  union {
    UpdateBrokerageContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateBrokerageContractDefaultTypeInternal _UpdateBrokerageContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fstorage_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fstorage_5fcontract_2eproto = nullptr;

const uint32_t TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageBytesContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageBytesContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageBytesContract, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::BuyStorageContract, quant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SellStorageContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SellStorageContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::SellStorageContract, storage_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UpdateBrokerageContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::UpdateBrokerageContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::UpdateBrokerageContract, brokerage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::BuyStorageBytesContract)},
  { 8, -1, -1, sizeof(::protocol::BuyStorageContract)},
  { 16, -1, -1, sizeof(::protocol::SellStorageContract)},
  { 24, -1, -1, sizeof(::protocol::UpdateBrokerageContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BuyStorageBytesContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BuyStorageContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SellStorageContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UpdateBrokerageContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fstorage_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/storage_contract.proto\022\010"
  "protocol\"\?\n\027BuyStorageBytesContract\022\025\n\ro"
  "wner_address\030\001 \001(\014\022\r\n\005bytes\030\002 \001(\003\":\n\022Buy"
  "StorageContract\022\025\n\rowner_address\030\001 \001(\014\022\r"
  "\n\005quant\030\002 \001(\003\"C\n\023SellStorageContract\022\025\n\r"
  "owner_address\030\001 \001(\014\022\025\n\rstorage_bytes\030\002 \001"
  "(\003\"C\n\027UpdateBrokerageContract\022\025\n\rowner_a"
  "ddress\030\001 \001(\014\022\021\n\tbrokerage\030\002 \001(\005BE\n\030org.t"
  "ron.protos.contractZ)github.com/tronprot"
  "ocol/grpc-gateway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto = {
  false, false, 390, descriptor_table_protodef_core_2fcontract_2fstorage_5fcontract_2eproto, "core/contract/storage_contract.proto", 
  &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fstorage_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fstorage_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fstorage_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class BuyStorageBytesContract::_Internal {
 public:
};

BuyStorageBytesContract::BuyStorageBytesContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BuyStorageBytesContract)
}
BuyStorageBytesContract::BuyStorageBytesContract(const BuyStorageBytesContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  bytes_ = from.bytes_;
  // @@protoc_insertion_point(copy_constructor:protocol.BuyStorageBytesContract)
}

inline void BuyStorageBytesContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bytes_ = int64_t{0};
}

BuyStorageBytesContract::~BuyStorageBytesContract() {
  // @@protoc_insertion_point(destructor:protocol.BuyStorageBytesContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuyStorageBytesContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuyStorageBytesContract::ArenaDtor(void* object) {
  BuyStorageBytesContract* _this = reinterpret_cast< BuyStorageBytesContract* >(object);
  (void)_this;
}
void BuyStorageBytesContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuyStorageBytesContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuyStorageBytesContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BuyStorageBytesContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyStorageBytesContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuyStorageBytesContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BuyStorageBytesContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 bytes = 2;
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BuyStorageBytesContract)
  return target;
}

size_t BuyStorageBytesContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BuyStorageBytesContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 bytes = 2;
  if (this->_internal_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuyStorageBytesContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuyStorageBytesContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuyStorageBytesContract::GetClassData() const { return &_class_data_; }

void BuyStorageBytesContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BuyStorageBytesContract *>(to)->MergeFrom(
      static_cast<const BuyStorageBytesContract &>(from));
}


void BuyStorageBytesContract::MergeFrom(const BuyStorageBytesContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BuyStorageBytesContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuyStorageBytesContract::CopyFrom(const BuyStorageBytesContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BuyStorageBytesContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyStorageBytesContract::IsInitialized() const {
  return true;
}

void BuyStorageBytesContract::InternalSwap(BuyStorageBytesContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  swap(bytes_, other->bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyStorageBytesContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto[0]);
}

// ===================================================================

class BuyStorageContract::_Internal {
 public:
};

BuyStorageContract::BuyStorageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BuyStorageContract)
}
BuyStorageContract::BuyStorageContract(const BuyStorageContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  quant_ = from.quant_;
  // @@protoc_insertion_point(copy_constructor:protocol.BuyStorageContract)
}

inline void BuyStorageContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quant_ = int64_t{0};
}

BuyStorageContract::~BuyStorageContract() {
  // @@protoc_insertion_point(destructor:protocol.BuyStorageContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuyStorageContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuyStorageContract::ArenaDtor(void* object) {
  BuyStorageContract* _this = reinterpret_cast< BuyStorageContract* >(object);
  (void)_this;
}
void BuyStorageContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuyStorageContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuyStorageContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BuyStorageContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  quant_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyStorageContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuyStorageContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BuyStorageContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 quant = 2;
  if (this->_internal_quant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_quant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BuyStorageContract)
  return target;
}

size_t BuyStorageContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BuyStorageContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 quant = 2;
  if (this->_internal_quant() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_quant());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuyStorageContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuyStorageContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuyStorageContract::GetClassData() const { return &_class_data_; }

void BuyStorageContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BuyStorageContract *>(to)->MergeFrom(
      static_cast<const BuyStorageContract &>(from));
}


void BuyStorageContract::MergeFrom(const BuyStorageContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BuyStorageContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_quant() != 0) {
    _internal_set_quant(from._internal_quant());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuyStorageContract::CopyFrom(const BuyStorageContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BuyStorageContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyStorageContract::IsInitialized() const {
  return true;
}

void BuyStorageContract::InternalSwap(BuyStorageContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  swap(quant_, other->quant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyStorageContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto[1]);
}

// ===================================================================

class SellStorageContract::_Internal {
 public:
};

SellStorageContract::SellStorageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SellStorageContract)
}
SellStorageContract::SellStorageContract(const SellStorageContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  storage_bytes_ = from.storage_bytes_;
  // @@protoc_insertion_point(copy_constructor:protocol.SellStorageContract)
}

inline void SellStorageContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
storage_bytes_ = int64_t{0};
}

SellStorageContract::~SellStorageContract() {
  // @@protoc_insertion_point(destructor:protocol.SellStorageContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SellStorageContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SellStorageContract::ArenaDtor(void* object) {
  SellStorageContract* _this = reinterpret_cast< SellStorageContract* >(object);
  (void)_this;
}
void SellStorageContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SellStorageContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellStorageContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SellStorageContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  storage_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellStorageContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 storage_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          storage_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SellStorageContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SellStorageContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 storage_bytes = 2;
  if (this->_internal_storage_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_storage_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SellStorageContract)
  return target;
}

size_t SellStorageContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SellStorageContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int64 storage_bytes = 2;
  if (this->_internal_storage_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_storage_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellStorageContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellStorageContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellStorageContract::GetClassData() const { return &_class_data_; }

void SellStorageContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SellStorageContract *>(to)->MergeFrom(
      static_cast<const SellStorageContract &>(from));
}


void SellStorageContract::MergeFrom(const SellStorageContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SellStorageContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_storage_bytes() != 0) {
    _internal_set_storage_bytes(from._internal_storage_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellStorageContract::CopyFrom(const SellStorageContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SellStorageContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellStorageContract::IsInitialized() const {
  return true;
}

void SellStorageContract::InternalSwap(SellStorageContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  swap(storage_bytes_, other->storage_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SellStorageContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto[2]);
}

// ===================================================================

class UpdateBrokerageContract::_Internal {
 public:
};

UpdateBrokerageContract::UpdateBrokerageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.UpdateBrokerageContract)
}
UpdateBrokerageContract::UpdateBrokerageContract(const UpdateBrokerageContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  brokerage_ = from.brokerage_;
  // @@protoc_insertion_point(copy_constructor:protocol.UpdateBrokerageContract)
}

inline void UpdateBrokerageContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
brokerage_ = 0;
}

UpdateBrokerageContract::~UpdateBrokerageContract() {
  // @@protoc_insertion_point(destructor:protocol.UpdateBrokerageContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateBrokerageContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateBrokerageContract::ArenaDtor(void* object) {
  UpdateBrokerageContract* _this = reinterpret_cast< UpdateBrokerageContract* >(object);
  (void)_this;
}
void UpdateBrokerageContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBrokerageContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateBrokerageContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UpdateBrokerageContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  brokerage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBrokerageContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 brokerage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          brokerage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBrokerageContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UpdateBrokerageContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int32 brokerage = 2;
  if (this->_internal_brokerage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_brokerage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UpdateBrokerageContract)
  return target;
}

size_t UpdateBrokerageContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UpdateBrokerageContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // int32 brokerage = 2;
  if (this->_internal_brokerage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_brokerage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBrokerageContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateBrokerageContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBrokerageContract::GetClassData() const { return &_class_data_; }

void UpdateBrokerageContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateBrokerageContract *>(to)->MergeFrom(
      static_cast<const UpdateBrokerageContract &>(from));
}


void UpdateBrokerageContract::MergeFrom(const UpdateBrokerageContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UpdateBrokerageContract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (from._internal_brokerage() != 0) {
    _internal_set_brokerage(from._internal_brokerage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBrokerageContract::CopyFrom(const UpdateBrokerageContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UpdateBrokerageContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBrokerageContract::IsInitialized() const {
  return true;
}

void UpdateBrokerageContract::InternalSwap(UpdateBrokerageContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, lhs_arena,
      &other->owner_address_, rhs_arena
  );
  swap(brokerage_, other->brokerage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBrokerageContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fstorage_5fcontract_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::BuyStorageBytesContract* Arena::CreateMaybeMessage< ::protocol::BuyStorageBytesContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BuyStorageBytesContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BuyStorageContract* Arena::CreateMaybeMessage< ::protocol::BuyStorageContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BuyStorageContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SellStorageContract* Arena::CreateMaybeMessage< ::protocol::SellStorageContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SellStorageContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UpdateBrokerageContract* Arena::CreateMaybeMessage< ::protocol::UpdateBrokerageContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UpdateBrokerageContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
