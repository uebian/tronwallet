// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/storage_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fstorage_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fstorage_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fstorage_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fstorage_5fcontract_2eproto;
namespace protocol {
class BuyStorageBytesContract;
struct BuyStorageBytesContractDefaultTypeInternal;
extern BuyStorageBytesContractDefaultTypeInternal _BuyStorageBytesContract_default_instance_;
class BuyStorageContract;
struct BuyStorageContractDefaultTypeInternal;
extern BuyStorageContractDefaultTypeInternal _BuyStorageContract_default_instance_;
class SellStorageContract;
struct SellStorageContractDefaultTypeInternal;
extern SellStorageContractDefaultTypeInternal _SellStorageContract_default_instance_;
class UpdateBrokerageContract;
struct UpdateBrokerageContractDefaultTypeInternal;
extern UpdateBrokerageContractDefaultTypeInternal _UpdateBrokerageContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::BuyStorageBytesContract* Arena::CreateMaybeMessage<::protocol::BuyStorageBytesContract>(Arena*);
template<> ::protocol::BuyStorageContract* Arena::CreateMaybeMessage<::protocol::BuyStorageContract>(Arena*);
template<> ::protocol::SellStorageContract* Arena::CreateMaybeMessage<::protocol::SellStorageContract>(Arena*);
template<> ::protocol::UpdateBrokerageContract* Arena::CreateMaybeMessage<::protocol::UpdateBrokerageContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class BuyStorageBytesContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BuyStorageBytesContract) */ {
 public:
  inline BuyStorageBytesContract() : BuyStorageBytesContract(nullptr) {}
  ~BuyStorageBytesContract() override;
  explicit constexpr BuyStorageBytesContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuyStorageBytesContract(const BuyStorageBytesContract& from);
  BuyStorageBytesContract(BuyStorageBytesContract&& from) noexcept
    : BuyStorageBytesContract() {
    *this = ::std::move(from);
  }

  inline BuyStorageBytesContract& operator=(const BuyStorageBytesContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyStorageBytesContract& operator=(BuyStorageBytesContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuyStorageBytesContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuyStorageBytesContract* internal_default_instance() {
    return reinterpret_cast<const BuyStorageBytesContract*>(
               &_BuyStorageBytesContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuyStorageBytesContract& a, BuyStorageBytesContract& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyStorageBytesContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyStorageBytesContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuyStorageBytesContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuyStorageBytesContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuyStorageBytesContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuyStorageBytesContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyStorageBytesContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BuyStorageBytesContract";
  }
  protected:
  explicit BuyStorageBytesContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kBytesFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int64 bytes = 2;
  void clear_bytes();
  int64_t bytes() const;
  void set_bytes(int64_t value);
  private:
  int64_t _internal_bytes() const;
  void _internal_set_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.BuyStorageBytesContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int64_t bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class BuyStorageContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BuyStorageContract) */ {
 public:
  inline BuyStorageContract() : BuyStorageContract(nullptr) {}
  ~BuyStorageContract() override;
  explicit constexpr BuyStorageContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuyStorageContract(const BuyStorageContract& from);
  BuyStorageContract(BuyStorageContract&& from) noexcept
    : BuyStorageContract() {
    *this = ::std::move(from);
  }

  inline BuyStorageContract& operator=(const BuyStorageContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyStorageContract& operator=(BuyStorageContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuyStorageContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuyStorageContract* internal_default_instance() {
    return reinterpret_cast<const BuyStorageContract*>(
               &_BuyStorageContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuyStorageContract& a, BuyStorageContract& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyStorageContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyStorageContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuyStorageContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuyStorageContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuyStorageContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BuyStorageContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyStorageContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BuyStorageContract";
  }
  protected:
  explicit BuyStorageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kQuantFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int64 quant = 2;
  void clear_quant();
  int64_t quant() const;
  void set_quant(int64_t value);
  private:
  int64_t _internal_quant() const;
  void _internal_set_quant(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.BuyStorageContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int64_t quant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SellStorageContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SellStorageContract) */ {
 public:
  inline SellStorageContract() : SellStorageContract(nullptr) {}
  ~SellStorageContract() override;
  explicit constexpr SellStorageContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SellStorageContract(const SellStorageContract& from);
  SellStorageContract(SellStorageContract&& from) noexcept
    : SellStorageContract() {
    *this = ::std::move(from);
  }

  inline SellStorageContract& operator=(const SellStorageContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline SellStorageContract& operator=(SellStorageContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SellStorageContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const SellStorageContract* internal_default_instance() {
    return reinterpret_cast<const SellStorageContract*>(
               &_SellStorageContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SellStorageContract& a, SellStorageContract& b) {
    a.Swap(&b);
  }
  inline void Swap(SellStorageContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SellStorageContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SellStorageContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SellStorageContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SellStorageContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SellStorageContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SellStorageContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SellStorageContract";
  }
  protected:
  explicit SellStorageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kStorageBytesFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int64 storage_bytes = 2;
  void clear_storage_bytes();
  int64_t storage_bytes() const;
  void set_storage_bytes(int64_t value);
  private:
  int64_t _internal_storage_bytes() const;
  void _internal_set_storage_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SellStorageContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int64_t storage_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UpdateBrokerageContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateBrokerageContract) */ {
 public:
  inline UpdateBrokerageContract() : UpdateBrokerageContract(nullptr) {}
  ~UpdateBrokerageContract() override;
  explicit constexpr UpdateBrokerageContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBrokerageContract(const UpdateBrokerageContract& from);
  UpdateBrokerageContract(UpdateBrokerageContract&& from) noexcept
    : UpdateBrokerageContract() {
    *this = ::std::move(from);
  }

  inline UpdateBrokerageContract& operator=(const UpdateBrokerageContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBrokerageContract& operator=(UpdateBrokerageContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBrokerageContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBrokerageContract* internal_default_instance() {
    return reinterpret_cast<const UpdateBrokerageContract*>(
               &_UpdateBrokerageContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateBrokerageContract& a, UpdateBrokerageContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBrokerageContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBrokerageContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBrokerageContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBrokerageContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBrokerageContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBrokerageContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBrokerageContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UpdateBrokerageContract";
  }
  protected:
  explicit UpdateBrokerageContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kBrokerageFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // int32 brokerage = 2;
  void clear_brokerage();
  int32_t brokerage() const;
  void set_brokerage(int32_t value);
  private:
  int32_t _internal_brokerage() const;
  void _internal_set_brokerage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.UpdateBrokerageContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  int32_t brokerage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fstorage_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuyStorageBytesContract

// bytes owner_address = 1;
inline void BuyStorageBytesContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& BuyStorageBytesContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.BuyStorageBytesContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuyStorageBytesContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.BuyStorageBytesContract.owner_address)
}
inline std::string* BuyStorageBytesContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.BuyStorageBytesContract.owner_address)
  return _s;
}
inline const std::string& BuyStorageBytesContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void BuyStorageBytesContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuyStorageBytesContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuyStorageBytesContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.BuyStorageBytesContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuyStorageBytesContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.BuyStorageBytesContract.owner_address)
}

// int64 bytes = 2;
inline void BuyStorageBytesContract::clear_bytes() {
  bytes_ = int64_t{0};
}
inline int64_t BuyStorageBytesContract::_internal_bytes() const {
  return bytes_;
}
inline int64_t BuyStorageBytesContract::bytes() const {
  // @@protoc_insertion_point(field_get:protocol.BuyStorageBytesContract.bytes)
  return _internal_bytes();
}
inline void BuyStorageBytesContract::_internal_set_bytes(int64_t value) {
  
  bytes_ = value;
}
inline void BuyStorageBytesContract::set_bytes(int64_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:protocol.BuyStorageBytesContract.bytes)
}

// -------------------------------------------------------------------

// BuyStorageContract

// bytes owner_address = 1;
inline void BuyStorageContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& BuyStorageContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.BuyStorageContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuyStorageContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.BuyStorageContract.owner_address)
}
inline std::string* BuyStorageContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.BuyStorageContract.owner_address)
  return _s;
}
inline const std::string& BuyStorageContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void BuyStorageContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BuyStorageContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BuyStorageContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.BuyStorageContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BuyStorageContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.BuyStorageContract.owner_address)
}

// int64 quant = 2;
inline void BuyStorageContract::clear_quant() {
  quant_ = int64_t{0};
}
inline int64_t BuyStorageContract::_internal_quant() const {
  return quant_;
}
inline int64_t BuyStorageContract::quant() const {
  // @@protoc_insertion_point(field_get:protocol.BuyStorageContract.quant)
  return _internal_quant();
}
inline void BuyStorageContract::_internal_set_quant(int64_t value) {
  
  quant_ = value;
}
inline void BuyStorageContract::set_quant(int64_t value) {
  _internal_set_quant(value);
  // @@protoc_insertion_point(field_set:protocol.BuyStorageContract.quant)
}

// -------------------------------------------------------------------

// SellStorageContract

// bytes owner_address = 1;
inline void SellStorageContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& SellStorageContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.SellStorageContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SellStorageContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SellStorageContract.owner_address)
}
inline std::string* SellStorageContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.SellStorageContract.owner_address)
  return _s;
}
inline const std::string& SellStorageContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void SellStorageContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SellStorageContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SellStorageContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.SellStorageContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SellStorageContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SellStorageContract.owner_address)
}

// int64 storage_bytes = 2;
inline void SellStorageContract::clear_storage_bytes() {
  storage_bytes_ = int64_t{0};
}
inline int64_t SellStorageContract::_internal_storage_bytes() const {
  return storage_bytes_;
}
inline int64_t SellStorageContract::storage_bytes() const {
  // @@protoc_insertion_point(field_get:protocol.SellStorageContract.storage_bytes)
  return _internal_storage_bytes();
}
inline void SellStorageContract::_internal_set_storage_bytes(int64_t value) {
  
  storage_bytes_ = value;
}
inline void SellStorageContract::set_storage_bytes(int64_t value) {
  _internal_set_storage_bytes(value);
  // @@protoc_insertion_point(field_set:protocol.SellStorageContract.storage_bytes)
}

// -------------------------------------------------------------------

// UpdateBrokerageContract

// bytes owner_address = 1;
inline void UpdateBrokerageContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& UpdateBrokerageContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateBrokerageContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateBrokerageContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UpdateBrokerageContract.owner_address)
}
inline std::string* UpdateBrokerageContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.UpdateBrokerageContract.owner_address)
  return _s;
}
inline const std::string& UpdateBrokerageContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void UpdateBrokerageContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateBrokerageContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateBrokerageContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateBrokerageContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateBrokerageContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateBrokerageContract.owner_address)
}

// int32 brokerage = 2;
inline void UpdateBrokerageContract::clear_brokerage() {
  brokerage_ = 0;
}
inline int32_t UpdateBrokerageContract::_internal_brokerage() const {
  return brokerage_;
}
inline int32_t UpdateBrokerageContract::brokerage() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateBrokerageContract.brokerage)
  return _internal_brokerage();
}
inline void UpdateBrokerageContract::_internal_set_brokerage(int32_t value) {
  
  brokerage_ = value;
}
inline void UpdateBrokerageContract::set_brokerage(int32_t value) {
  _internal_set_brokerage(value);
  // @@protoc_insertion_point(field_set:protocol.UpdateBrokerageContract.brokerage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fstorage_5fcontract_2eproto
