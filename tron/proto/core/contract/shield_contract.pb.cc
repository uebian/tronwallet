// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/shield_contract.proto

#include "core/contract/shield_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr AuthenticationPath::AuthenticationPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct AuthenticationPathDefaultTypeInternal {
  constexpr AuthenticationPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticationPathDefaultTypeInternal() {}
  union {
    AuthenticationPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticationPathDefaultTypeInternal _AuthenticationPath_default_instance_;
constexpr MerklePath::MerklePath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authentication_paths_()
  , index_()
  , rt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MerklePathDefaultTypeInternal {
  constexpr MerklePathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MerklePathDefaultTypeInternal() {}
  union {
    MerklePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MerklePathDefaultTypeInternal _MerklePath_default_instance_;
constexpr OutputPoint::OutputPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct OutputPointDefaultTypeInternal {
  constexpr OutputPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputPointDefaultTypeInternal() {}
  union {
    OutputPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputPointDefaultTypeInternal _OutputPoint_default_instance_;
constexpr OutputPointInfo::OutputPointInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : out_points_()
  , block_num_(0){}
struct OutputPointInfoDefaultTypeInternal {
  constexpr OutputPointInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputPointInfoDefaultTypeInternal() {}
  union {
    OutputPointInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputPointInfoDefaultTypeInternal _OutputPointInfo_default_instance_;
constexpr PedersenHash::PedersenHash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PedersenHashDefaultTypeInternal {
  constexpr PedersenHashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PedersenHashDefaultTypeInternal() {}
  union {
    PedersenHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PedersenHashDefaultTypeInternal _PedersenHash_default_instance_;
constexpr IncrementalMerkleTree::IncrementalMerkleTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parents_()
  , left_(nullptr)
  , right_(nullptr){}
struct IncrementalMerkleTreeDefaultTypeInternal {
  constexpr IncrementalMerkleTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncrementalMerkleTreeDefaultTypeInternal() {}
  union {
    IncrementalMerkleTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncrementalMerkleTreeDefaultTypeInternal _IncrementalMerkleTree_default_instance_;
constexpr IncrementalMerkleVoucher::IncrementalMerkleVoucher(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filled_()
  , rt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tree_(nullptr)
  , cursor_(nullptr)
  , output_point_(nullptr)
  , cursor_depth_(int64_t{0}){}
struct IncrementalMerkleVoucherDefaultTypeInternal {
  constexpr IncrementalMerkleVoucherDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncrementalMerkleVoucherDefaultTypeInternal() {}
  union {
    IncrementalMerkleVoucher _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncrementalMerkleVoucherDefaultTypeInternal _IncrementalMerkleVoucher_default_instance_;
constexpr IncrementalMerkleVoucherInfo::IncrementalMerkleVoucherInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vouchers_()
  , paths_(){}
struct IncrementalMerkleVoucherInfoDefaultTypeInternal {
  constexpr IncrementalMerkleVoucherInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncrementalMerkleVoucherInfoDefaultTypeInternal() {}
  union {
    IncrementalMerkleVoucherInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncrementalMerkleVoucherInfoDefaultTypeInternal _IncrementalMerkleVoucherInfo_default_instance_;
constexpr SpendDescription::SpendDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_commitment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , anchor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nullifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zkproof_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spend_authority_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SpendDescriptionDefaultTypeInternal {
  constexpr SpendDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpendDescriptionDefaultTypeInternal() {}
  union {
    SpendDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpendDescriptionDefaultTypeInternal _SpendDescription_default_instance_;
constexpr ReceiveDescription::ReceiveDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_commitment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_commitment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c_enc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c_out_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zkproof_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReceiveDescriptionDefaultTypeInternal {
  constexpr ReceiveDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReceiveDescriptionDefaultTypeInternal() {}
  union {
    ReceiveDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReceiveDescriptionDefaultTypeInternal _ReceiveDescription_default_instance_;
constexpr ShieldedTransferContract::ShieldedTransferContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spend_description_()
  , receive_description_()
  , transparent_from_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , binding_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transparent_to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_amount_(int64_t{0})
  , to_amount_(int64_t{0}){}
struct ShieldedTransferContractDefaultTypeInternal {
  constexpr ShieldedTransferContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShieldedTransferContractDefaultTypeInternal() {}
  union {
    ShieldedTransferContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShieldedTransferContractDefaultTypeInternal _ShieldedTransferContract_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fshield_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fshield_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2fshield_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AuthenticationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AuthenticationPath, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, authentication_paths_),
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, index_),
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, out_points_),
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PedersenHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PedersenHash, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, left_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, right_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, parents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, tree_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, filled_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, cursor_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, cursor_depth_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, rt_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, output_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, vouchers_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, value_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, anchor_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, nullifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, rk_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, zkproof_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, spend_authority_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, value_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, note_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, epk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, c_enc_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, c_out_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, zkproof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, transparent_from_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, spend_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, receive_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, binding_signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, to_amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::AuthenticationPath)},
  { 6, -1, sizeof(::protocol::MerklePath)},
  { 14, -1, sizeof(::protocol::OutputPoint)},
  { 21, -1, sizeof(::protocol::OutputPointInfo)},
  { 28, -1, sizeof(::protocol::PedersenHash)},
  { 34, -1, sizeof(::protocol::IncrementalMerkleTree)},
  { 42, -1, sizeof(::protocol::IncrementalMerkleVoucher)},
  { 53, -1, sizeof(::protocol::IncrementalMerkleVoucherInfo)},
  { 60, -1, sizeof(::protocol::SpendDescription)},
  { 71, -1, sizeof(::protocol::ReceiveDescription)},
  { 82, -1, sizeof(::protocol::ShieldedTransferContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AuthenticationPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MerklePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OutputPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OutputPointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PedersenHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleVoucher_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleVoucherInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ReceiveDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ShieldedTransferContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fshield_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#core/contract/shield_contract.proto\022\010p"
  "rotocol\"#\n\022AuthenticationPath\022\r\n\005value\030\001"
  " \003(\010\"c\n\nMerklePath\022:\n\024authentication_pat"
  "hs\030\001 \003(\0132\034.protocol.AuthenticationPath\022\r"
  "\n\005index\030\002 \003(\010\022\n\n\002rt\030\003 \001(\014\"*\n\013OutputPoint"
  "\022\014\n\004hash\030\001 \001(\014\022\r\n\005index\030\002 \001(\005\"O\n\017OutputP"
  "ointInfo\022)\n\nout_points\030\001 \003(\0132\025.protocol."
  "OutputPoint\022\021\n\tblock_num\030\002 \001(\005\"\037\n\014Peders"
  "enHash\022\017\n\007content\030\001 \001(\014\"\215\001\n\025IncrementalM"
  "erkleTree\022$\n\004left\030\001 \001(\0132\026.protocol.Peder"
  "senHash\022%\n\005right\030\002 \001(\0132\026.protocol.Peders"
  "enHash\022\'\n\007parents\030\003 \003(\0132\026.protocol.Peder"
  "senHash\"\361\001\n\030IncrementalMerkleVoucher\022-\n\004"
  "tree\030\001 \001(\0132\037.protocol.IncrementalMerkleT"
  "ree\022&\n\006filled\030\002 \003(\0132\026.protocol.PedersenH"
  "ash\022/\n\006cursor\030\003 \001(\0132\037.protocol.Increment"
  "alMerkleTree\022\024\n\014cursor_depth\030\004 \001(\003\022\n\n\002rt"
  "\030\005 \001(\014\022+\n\014output_point\030\n \001(\0132\025.protocol."
  "OutputPoint\"c\n\034IncrementalMerkleVoucherI"
  "nfo\0224\n\010vouchers\030\001 \003(\0132\".protocol.Increme"
  "ntalMerkleVoucher\022\r\n\005paths\030\002 \003(\014\"\217\001\n\020Spe"
  "ndDescription\022\030\n\020value_commitment\030\001 \001(\014\022"
  "\016\n\006anchor\030\002 \001(\014\022\021\n\tnullifier\030\003 \001(\014\022\n\n\002rk"
  "\030\004 \001(\014\022\017\n\007zkproof\030\005 \001(\014\022!\n\031spend_authori"
  "ty_signature\030\006 \001(\014\"\203\001\n\022ReceiveDescriptio"
  "n\022\030\n\020value_commitment\030\001 \001(\014\022\027\n\017note_comm"
  "itment\030\002 \001(\014\022\013\n\003epk\030\003 \001(\014\022\r\n\005c_enc\030\004 \001(\014"
  "\022\r\n\005c_out\030\005 \001(\014\022\017\n\007zkproof\030\006 \001(\014\"\221\002\n\030Shi"
  "eldedTransferContract\022 \n\030transparent_fro"
  "m_address\030\001 \001(\014\022\023\n\013from_amount\030\002 \001(\003\0225\n\021"
  "spend_description\030\003 \003(\0132\032.protocol.Spend"
  "Description\0229\n\023receive_description\030\004 \003(\013"
  "2\034.protocol.ReceiveDescription\022\031\n\021bindin"
  "g_signature\030\005 \001(\014\022\036\n\026transparent_to_addr"
  "ess\030\006 \001(\014\022\021\n\tto_amount\030\007 \001(\003BE\n\030org.tron"
  ".protos.contractZ)github.com/tronprotoco"
  "l/grpc-gateway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto = {
  false, false, 1467, descriptor_table_protodef_core_2fcontract_2fshield_5fcontract_2eproto, "core/contract/shield_contract.proto", 
  &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fshield_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fshield_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fshield_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fshield_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class AuthenticationPath::_Internal {
 public:
};

AuthenticationPath::AuthenticationPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AuthenticationPath)
}
AuthenticationPath::AuthenticationPath(const AuthenticationPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.AuthenticationPath)
}

inline void AuthenticationPath::SharedCtor() {
}

AuthenticationPath::~AuthenticationPath() {
  // @@protoc_insertion_point(destructor:protocol.AuthenticationPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticationPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthenticationPath::ArenaDtor(void* object) {
  AuthenticationPath* _this = reinterpret_cast< AuthenticationPath* >(object);
  (void)_this;
}
void AuthenticationPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticationPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AuthenticationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AuthenticationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool value = 1;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AuthenticationPath)
  return target;
}

size_t AuthenticationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AuthenticationPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticationPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationPath::GetClassData() const { return &_class_data_; }

void AuthenticationPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticationPath *>(to)->MergeFrom(
      static_cast<const AuthenticationPath &>(from));
}


void AuthenticationPath::MergeFrom(const AuthenticationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AuthenticationPath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationPath::CopyFrom(const AuthenticationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AuthenticationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationPath::IsInitialized() const {
  return true;
}

void AuthenticationPath::InternalSwap(AuthenticationPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[0]);
}

// ===================================================================

class MerklePath::_Internal {
 public:
};

MerklePath::MerklePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  authentication_paths_(arena),
  index_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      authentication_paths_(from.authentication_paths_),
      index_(from.index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rt().empty()) {
    rt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rt(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MerklePath)
}

inline void MerklePath::SharedCtor() {
rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:protocol.MerklePath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MerklePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MerklePath::ArenaDtor(void* object) {
  MerklePath* _this = reinterpret_cast< MerklePath* >(object);
  (void)_this;
}
void MerklePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MerklePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authentication_paths_.Clear();
  index_.Clear();
  rt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerklePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.AuthenticationPath authentication_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_authentication_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MerklePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_authentication_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_authentication_paths(i), target, stream);
  }

  // repeated bool index = 2;
  if (this->_internal_index_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_index(), target);
  }

  // bytes rt = 3;
  if (!this->_internal_rt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MerklePath)
  return target;
}

size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MerklePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  total_size += 1UL * this->_internal_authentication_paths_size();
  for (const auto& msg : this->authentication_paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool index = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_index_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // bytes rt = 3;
  if (!this->_internal_rt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MerklePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MerklePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MerklePath::GetClassData() const { return &_class_data_; }

void MerklePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MerklePath *>(to)->MergeFrom(
      static_cast<const MerklePath &>(from));
}


void MerklePath::MergeFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authentication_paths_.MergeFrom(from.authentication_paths_);
  index_.MergeFrom(from.index_);
  if (!from._internal_rt().empty()) {
    _internal_set_rt(from._internal_rt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  authentication_paths_.InternalSwap(&other->authentication_paths_);
  index_.InternalSwap(&other->index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rt_, GetArenaForAllocation(),
      &other->rt_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[1]);
}

// ===================================================================

class OutputPoint::_Internal {
 public:
};

OutputPoint::OutputPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.OutputPoint)
}
OutputPoint::OutputPoint(const OutputPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.OutputPoint)
}

inline void OutputPoint::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0;
}

OutputPoint::~OutputPoint() {
  // @@protoc_insertion_point(destructor:protocol.OutputPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputPoint::ArenaDtor(void* object) {
  OutputPoint* _this = reinterpret_cast< OutputPoint* >(object);
  (void)_this;
}
void OutputPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OutputPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OutputPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OutputPoint)
  return target;
}

size_t OutputPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OutputPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputPoint::GetClassData() const { return &_class_data_; }

void OutputPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutputPoint *>(to)->MergeFrom(
      static_cast<const OutputPoint &>(from));
}


void OutputPoint::MergeFrom(const OutputPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OutputPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputPoint::CopyFrom(const OutputPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OutputPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPoint::IsInitialized() const {
  return true;
}

void OutputPoint::InternalSwap(OutputPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[2]);
}

// ===================================================================

class OutputPointInfo::_Internal {
 public:
};

OutputPointInfo::OutputPointInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  out_points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.OutputPointInfo)
}
OutputPointInfo::OutputPointInfo(const OutputPointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      out_points_(from.out_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_num_ = from.block_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.OutputPointInfo)
}

inline void OutputPointInfo::SharedCtor() {
block_num_ = 0;
}

OutputPointInfo::~OutputPointInfo() {
  // @@protoc_insertion_point(destructor:protocol.OutputPointInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputPointInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutputPointInfo::ArenaDtor(void* object) {
  OutputPointInfo* _this = reinterpret_cast< OutputPointInfo* >(object);
  (void)_this;
}
void OutputPointInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputPointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OutputPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_points_.Clear();
  block_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputPointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.OutputPoint out_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_out_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 block_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputPointInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OutputPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.OutputPoint out_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_out_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_out_points(i), target, stream);
  }

  // int32 block_num = 2;
  if (this->_internal_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OutputPointInfo)
  return target;
}

size_t OutputPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OutputPointInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.OutputPoint out_points = 1;
  total_size += 1UL * this->_internal_out_points_size();
  for (const auto& msg : this->out_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 block_num = 2;
  if (this->_internal_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputPointInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputPointInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputPointInfo::GetClassData() const { return &_class_data_; }

void OutputPointInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutputPointInfo *>(to)->MergeFrom(
      static_cast<const OutputPointInfo &>(from));
}


void OutputPointInfo::MergeFrom(const OutputPointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OutputPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  out_points_.MergeFrom(from.out_points_);
  if (from._internal_block_num() != 0) {
    _internal_set_block_num(from._internal_block_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputPointInfo::CopyFrom(const OutputPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OutputPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPointInfo::IsInitialized() const {
  return true;
}

void OutputPointInfo::InternalSwap(OutputPointInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  out_points_.InternalSwap(&other->out_points_);
  swap(block_num_, other->block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputPointInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[3]);
}

// ===================================================================

class PedersenHash::_Internal {
 public:
};

PedersenHash::PedersenHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.PedersenHash)
}
PedersenHash::PedersenHash(const PedersenHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PedersenHash)
}

inline void PedersenHash::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PedersenHash::~PedersenHash() {
  // @@protoc_insertion_point(destructor:protocol.PedersenHash)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PedersenHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PedersenHash::ArenaDtor(void* object) {
  PedersenHash* _this = reinterpret_cast< PedersenHash* >(object);
  (void)_this;
}
void PedersenHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PedersenHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PedersenHash::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PedersenHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PedersenHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PedersenHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PedersenHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PedersenHash)
  return target;
}

size_t PedersenHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PedersenHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PedersenHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PedersenHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PedersenHash::GetClassData() const { return &_class_data_; }

void PedersenHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PedersenHash *>(to)->MergeFrom(
      static_cast<const PedersenHash &>(from));
}


void PedersenHash::MergeFrom(const PedersenHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PedersenHash)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PedersenHash::CopyFrom(const PedersenHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PedersenHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedersenHash::IsInitialized() const {
  return true;
}

void PedersenHash::InternalSwap(PedersenHash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PedersenHash::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[4]);
}

// ===================================================================

class IncrementalMerkleTree::_Internal {
 public:
  static const ::protocol::PedersenHash& left(const IncrementalMerkleTree* msg);
  static const ::protocol::PedersenHash& right(const IncrementalMerkleTree* msg);
};

const ::protocol::PedersenHash&
IncrementalMerkleTree::_Internal::left(const IncrementalMerkleTree* msg) {
  return *msg->left_;
}
const ::protocol::PedersenHash&
IncrementalMerkleTree::_Internal::right(const IncrementalMerkleTree* msg) {
  return *msg->right_;
}
IncrementalMerkleTree::IncrementalMerkleTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IncrementalMerkleTree)
}
IncrementalMerkleTree::IncrementalMerkleTree(const IncrementalMerkleTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::protocol::PedersenHash(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::protocol::PedersenHash(*from.right_);
  } else {
    right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleTree)
}

inline void IncrementalMerkleTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

IncrementalMerkleTree::~IncrementalMerkleTree() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleTree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncrementalMerkleTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void IncrementalMerkleTree::ArenaDtor(void* object) {
  IncrementalMerkleTree* _this = reinterpret_cast< IncrementalMerkleTree* >(object);
  (void)_this;
}
void IncrementalMerkleTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementalMerkleTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncrementalMerkleTree::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncrementalMerkleTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.PedersenHash left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.PedersenHash right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.PedersenHash parents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.PedersenHash left = 1;
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left(this), target, stream);
  }

  // .protocol.PedersenHash right = 2;
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right(this), target, stream);
  }

  // repeated .protocol.PedersenHash parents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleTree)
  return target;
}

size_t IncrementalMerkleTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.PedersenHash parents = 3;
  total_size += 1UL * this->_internal_parents_size();
  for (const auto& msg : this->parents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.PedersenHash left = 1;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .protocol.PedersenHash right = 2;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncrementalMerkleTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncrementalMerkleTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncrementalMerkleTree::GetClassData() const { return &_class_data_; }

void IncrementalMerkleTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IncrementalMerkleTree *>(to)->MergeFrom(
      static_cast<const IncrementalMerkleTree &>(from));
}


void IncrementalMerkleTree::MergeFrom(const IncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  if (from._internal_has_left()) {
    _internal_mutable_left()->::protocol::PedersenHash::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::protocol::PedersenHash::MergeFrom(from._internal_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncrementalMerkleTree::CopyFrom(const IncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleTree::IsInitialized() const {
  return true;
}

void IncrementalMerkleTree::InternalSwap(IncrementalMerkleTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parents_.InternalSwap(&other->parents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncrementalMerkleTree, right_)
      + sizeof(IncrementalMerkleTree::right_)
      - PROTOBUF_FIELD_OFFSET(IncrementalMerkleTree, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleTree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[5]);
}

// ===================================================================

class IncrementalMerkleVoucher::_Internal {
 public:
  static const ::protocol::IncrementalMerkleTree& tree(const IncrementalMerkleVoucher* msg);
  static const ::protocol::IncrementalMerkleTree& cursor(const IncrementalMerkleVoucher* msg);
  static const ::protocol::OutputPoint& output_point(const IncrementalMerkleVoucher* msg);
};

const ::protocol::IncrementalMerkleTree&
IncrementalMerkleVoucher::_Internal::tree(const IncrementalMerkleVoucher* msg) {
  return *msg->tree_;
}
const ::protocol::IncrementalMerkleTree&
IncrementalMerkleVoucher::_Internal::cursor(const IncrementalMerkleVoucher* msg) {
  return *msg->cursor_;
}
const ::protocol::OutputPoint&
IncrementalMerkleVoucher::_Internal::output_point(const IncrementalMerkleVoucher* msg) {
  return *msg->output_point_;
}
IncrementalMerkleVoucher::IncrementalMerkleVoucher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filled_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IncrementalMerkleVoucher)
}
IncrementalMerkleVoucher::IncrementalMerkleVoucher(const IncrementalMerkleVoucher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filled_(from.filled_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rt().empty()) {
    rt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rt(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tree()) {
    tree_ = new ::protocol::IncrementalMerkleTree(*from.tree_);
  } else {
    tree_ = nullptr;
  }
  if (from._internal_has_cursor()) {
    cursor_ = new ::protocol::IncrementalMerkleTree(*from.cursor_);
  } else {
    cursor_ = nullptr;
  }
  if (from._internal_has_output_point()) {
    output_point_ = new ::protocol::OutputPoint(*from.output_point_);
  } else {
    output_point_ = nullptr;
  }
  cursor_depth_ = from.cursor_depth_;
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleVoucher)
}

inline void IncrementalMerkleVoucher::SharedCtor() {
rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tree_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cursor_depth_) -
    reinterpret_cast<char*>(&tree_)) + sizeof(cursor_depth_));
}

IncrementalMerkleVoucher::~IncrementalMerkleVoucher() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleVoucher)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncrementalMerkleVoucher::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tree_;
  if (this != internal_default_instance()) delete cursor_;
  if (this != internal_default_instance()) delete output_point_;
}

void IncrementalMerkleVoucher::ArenaDtor(void* object) {
  IncrementalMerkleVoucher* _this = reinterpret_cast< IncrementalMerkleVoucher* >(object);
  (void)_this;
}
void IncrementalMerkleVoucher::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementalMerkleVoucher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncrementalMerkleVoucher::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleVoucher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filled_.Clear();
  rt_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tree_ != nullptr) {
    delete tree_;
  }
  tree_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cursor_ != nullptr) {
    delete cursor_;
  }
  cursor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_point_ != nullptr) {
    delete output_point_;
  }
  output_point_ = nullptr;
  cursor_depth_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncrementalMerkleVoucher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.IncrementalMerkleTree tree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.PedersenHash filled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .protocol.IncrementalMerkleTree cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cursor_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cursor_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.OutputPoint output_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleVoucher::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleVoucher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.IncrementalMerkleTree tree = 1;
  if (this->_internal_has_tree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tree(this), target, stream);
  }

  // repeated .protocol.PedersenHash filled = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filled_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filled(i), target, stream);
  }

  // .protocol.IncrementalMerkleTree cursor = 3;
  if (this->_internal_has_cursor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cursor(this), target, stream);
  }

  // int64 cursor_depth = 4;
  if (this->_internal_cursor_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_cursor_depth(), target);
  }

  // bytes rt = 5;
  if (!this->_internal_rt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rt(), target);
  }

  // .protocol.OutputPoint output_point = 10;
  if (this->_internal_has_output_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::output_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleVoucher)
  return target;
}

size_t IncrementalMerkleVoucher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleVoucher)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.PedersenHash filled = 2;
  total_size += 1UL * this->_internal_filled_size();
  for (const auto& msg : this->filled_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes rt = 5;
  if (!this->_internal_rt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rt());
  }

  // .protocol.IncrementalMerkleTree tree = 1;
  if (this->_internal_has_tree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tree_);
  }

  // .protocol.IncrementalMerkleTree cursor = 3;
  if (this->_internal_has_cursor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cursor_);
  }

  // .protocol.OutputPoint output_point = 10;
  if (this->_internal_has_output_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_point_);
  }

  // int64 cursor_depth = 4;
  if (this->_internal_cursor_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cursor_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncrementalMerkleVoucher::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncrementalMerkleVoucher::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncrementalMerkleVoucher::GetClassData() const { return &_class_data_; }

void IncrementalMerkleVoucher::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IncrementalMerkleVoucher *>(to)->MergeFrom(
      static_cast<const IncrementalMerkleVoucher &>(from));
}


void IncrementalMerkleVoucher::MergeFrom(const IncrementalMerkleVoucher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleVoucher)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filled_.MergeFrom(from.filled_);
  if (!from._internal_rt().empty()) {
    _internal_set_rt(from._internal_rt());
  }
  if (from._internal_has_tree()) {
    _internal_mutable_tree()->::protocol::IncrementalMerkleTree::MergeFrom(from._internal_tree());
  }
  if (from._internal_has_cursor()) {
    _internal_mutable_cursor()->::protocol::IncrementalMerkleTree::MergeFrom(from._internal_cursor());
  }
  if (from._internal_has_output_point()) {
    _internal_mutable_output_point()->::protocol::OutputPoint::MergeFrom(from._internal_output_point());
  }
  if (from._internal_cursor_depth() != 0) {
    _internal_set_cursor_depth(from._internal_cursor_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncrementalMerkleVoucher::CopyFrom(const IncrementalMerkleVoucher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleVoucher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleVoucher::IsInitialized() const {
  return true;
}

void IncrementalMerkleVoucher::InternalSwap(IncrementalMerkleVoucher* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filled_.InternalSwap(&other->filled_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rt_, GetArenaForAllocation(),
      &other->rt_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncrementalMerkleVoucher, cursor_depth_)
      + sizeof(IncrementalMerkleVoucher::cursor_depth_)
      - PROTOBUF_FIELD_OFFSET(IncrementalMerkleVoucher, tree_)>(
          reinterpret_cast<char*>(&tree_),
          reinterpret_cast<char*>(&other->tree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleVoucher::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[6]);
}

// ===================================================================

class IncrementalMerkleVoucherInfo::_Internal {
 public:
};

IncrementalMerkleVoucherInfo::IncrementalMerkleVoucherInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vouchers_(arena),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.IncrementalMerkleVoucherInfo)
}
IncrementalMerkleVoucherInfo::IncrementalMerkleVoucherInfo(const IncrementalMerkleVoucherInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vouchers_(from.vouchers_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleVoucherInfo)
}

inline void IncrementalMerkleVoucherInfo::SharedCtor() {
}

IncrementalMerkleVoucherInfo::~IncrementalMerkleVoucherInfo() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleVoucherInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncrementalMerkleVoucherInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncrementalMerkleVoucherInfo::ArenaDtor(void* object) {
  IncrementalMerkleVoucherInfo* _this = reinterpret_cast< IncrementalMerkleVoucherInfo* >(object);
  (void)_this;
}
void IncrementalMerkleVoucherInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementalMerkleVoucherInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncrementalMerkleVoucherInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleVoucherInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vouchers_.Clear();
  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncrementalMerkleVoucherInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vouchers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleVoucherInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleVoucherInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vouchers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vouchers(i), target, stream);
  }

  // repeated bytes paths = 2;
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleVoucherInfo)
  return target;
}

size_t IncrementalMerkleVoucherInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleVoucherInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  total_size += 1UL * this->_internal_vouchers_size();
  for (const auto& msg : this->vouchers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paths_.size());
  for (int i = 0, n = paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      paths_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncrementalMerkleVoucherInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncrementalMerkleVoucherInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncrementalMerkleVoucherInfo::GetClassData() const { return &_class_data_; }

void IncrementalMerkleVoucherInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IncrementalMerkleVoucherInfo *>(to)->MergeFrom(
      static_cast<const IncrementalMerkleVoucherInfo &>(from));
}


void IncrementalMerkleVoucherInfo::MergeFrom(const IncrementalMerkleVoucherInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleVoucherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vouchers_.MergeFrom(from.vouchers_);
  paths_.MergeFrom(from.paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncrementalMerkleVoucherInfo::CopyFrom(const IncrementalMerkleVoucherInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleVoucherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleVoucherInfo::IsInitialized() const {
  return true;
}

void IncrementalMerkleVoucherInfo::InternalSwap(IncrementalMerkleVoucherInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vouchers_.InternalSwap(&other->vouchers_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleVoucherInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[7]);
}

// ===================================================================

class SpendDescription::_Internal {
 public:
};

SpendDescription::SpendDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SpendDescription)
}
SpendDescription::SpendDescription(const SpendDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_commitment().empty()) {
    value_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_commitment(), 
      GetArenaForAllocation());
  }
  anchor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anchor().empty()) {
    anchor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_anchor(), 
      GetArenaForAllocation());
  }
  nullifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nullifier().empty()) {
    nullifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nullifier(), 
      GetArenaForAllocation());
  }
  rk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rk().empty()) {
    rk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rk(), 
      GetArenaForAllocation());
  }
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zkproof().empty()) {
    zkproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zkproof(), 
      GetArenaForAllocation());
  }
  spend_authority_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spend_authority_signature().empty()) {
    spend_authority_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spend_authority_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SpendDescription)
}

inline void SpendDescription::SharedCtor() {
value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
anchor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nullifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spend_authority_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpendDescription::~SpendDescription() {
  // @@protoc_insertion_point(destructor:protocol.SpendDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpendDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nullifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_authority_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpendDescription::ArenaDtor(void* object) {
  SpendDescription* _this = reinterpret_cast< SpendDescription* >(object);
  (void)_this;
}
void SpendDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpendDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpendDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_commitment_.ClearToEmpty();
  anchor_.ClearToEmpty();
  nullifier_.ClearToEmpty();
  rk_.ClearToEmpty();
  zkproof_.ClearToEmpty();
  spend_authority_signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpendDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value_commitment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_anchor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nullifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nullifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zkproof = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_zkproof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes spend_authority_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_spend_authority_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (!this->_internal_value_commitment().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value_commitment(), target);
  }

  // bytes anchor = 2;
  if (!this->_internal_anchor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_anchor(), target);
  }

  // bytes nullifier = 3;
  if (!this->_internal_nullifier().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nullifier(), target);
  }

  // bytes rk = 4;
  if (!this->_internal_rk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_rk(), target);
  }

  // bytes zkproof = 5;
  if (!this->_internal_zkproof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_zkproof(), target);
  }

  // bytes spend_authority_signature = 6;
  if (!this->_internal_spend_authority_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_spend_authority_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendDescription)
  return target;
}

size_t SpendDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (!this->_internal_value_commitment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value_commitment());
  }

  // bytes anchor = 2;
  if (!this->_internal_anchor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_anchor());
  }

  // bytes nullifier = 3;
  if (!this->_internal_nullifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nullifier());
  }

  // bytes rk = 4;
  if (!this->_internal_rk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rk());
  }

  // bytes zkproof = 5;
  if (!this->_internal_zkproof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zkproof());
  }

  // bytes spend_authority_signature = 6;
  if (!this->_internal_spend_authority_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spend_authority_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpendDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpendDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpendDescription::GetClassData() const { return &_class_data_; }

void SpendDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpendDescription *>(to)->MergeFrom(
      static_cast<const SpendDescription &>(from));
}


void SpendDescription::MergeFrom(const SpendDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value_commitment().empty()) {
    _internal_set_value_commitment(from._internal_value_commitment());
  }
  if (!from._internal_anchor().empty()) {
    _internal_set_anchor(from._internal_anchor());
  }
  if (!from._internal_nullifier().empty()) {
    _internal_set_nullifier(from._internal_nullifier());
  }
  if (!from._internal_rk().empty()) {
    _internal_set_rk(from._internal_rk());
  }
  if (!from._internal_zkproof().empty()) {
    _internal_set_zkproof(from._internal_zkproof());
  }
  if (!from._internal_spend_authority_signature().empty()) {
    _internal_set_spend_authority_signature(from._internal_spend_authority_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpendDescription::CopyFrom(const SpendDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendDescription::IsInitialized() const {
  return true;
}

void SpendDescription::InternalSwap(SpendDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_commitment_, GetArenaForAllocation(),
      &other->value_commitment_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &anchor_, GetArenaForAllocation(),
      &other->anchor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nullifier_, GetArenaForAllocation(),
      &other->nullifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rk_, GetArenaForAllocation(),
      &other->rk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zkproof_, GetArenaForAllocation(),
      &other->zkproof_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spend_authority_signature_, GetArenaForAllocation(),
      &other->spend_authority_signature_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[8]);
}

// ===================================================================

class ReceiveDescription::_Internal {
 public:
};

ReceiveDescription::ReceiveDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ReceiveDescription)
}
ReceiveDescription::ReceiveDescription(const ReceiveDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_commitment().empty()) {
    value_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_commitment(), 
      GetArenaForAllocation());
  }
  note_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note_commitment().empty()) {
    note_commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_note_commitment(), 
      GetArenaForAllocation());
  }
  epk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epk().empty()) {
    epk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_epk(), 
      GetArenaForAllocation());
  }
  c_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c_enc().empty()) {
    c_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c_enc(), 
      GetArenaForAllocation());
  }
  c_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c_out().empty()) {
    c_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c_out(), 
      GetArenaForAllocation());
  }
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zkproof().empty()) {
    zkproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zkproof(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ReceiveDescription)
}

inline void ReceiveDescription::SharedCtor() {
value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
note_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
epk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReceiveDescription::~ReceiveDescription() {
  // @@protoc_insertion_point(destructor:protocol.ReceiveDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReceiveDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReceiveDescription::ArenaDtor(void* object) {
  ReceiveDescription* _this = reinterpret_cast< ReceiveDescription* >(object);
  (void)_this;
}
void ReceiveDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceiveDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReceiveDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ReceiveDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_commitment_.ClearToEmpty();
  note_commitment_.ClearToEmpty();
  epk_.ClearToEmpty();
  c_enc_.ClearToEmpty();
  c_out_.ClearToEmpty();
  zkproof_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value_commitment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes note_commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_note_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes epk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_epk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c_enc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_c_enc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_c_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zkproof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_zkproof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ReceiveDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (!this->_internal_value_commitment().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value_commitment(), target);
  }

  // bytes note_commitment = 2;
  if (!this->_internal_note_commitment().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_note_commitment(), target);
  }

  // bytes epk = 3;
  if (!this->_internal_epk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_epk(), target);
  }

  // bytes c_enc = 4;
  if (!this->_internal_c_enc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_c_enc(), target);
  }

  // bytes c_out = 5;
  if (!this->_internal_c_out().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_c_out(), target);
  }

  // bytes zkproof = 6;
  if (!this->_internal_zkproof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_zkproof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ReceiveDescription)
  return target;
}

size_t ReceiveDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ReceiveDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (!this->_internal_value_commitment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value_commitment());
  }

  // bytes note_commitment = 2;
  if (!this->_internal_note_commitment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_note_commitment());
  }

  // bytes epk = 3;
  if (!this->_internal_epk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_epk());
  }

  // bytes c_enc = 4;
  if (!this->_internal_c_enc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_c_enc());
  }

  // bytes c_out = 5;
  if (!this->_internal_c_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_c_out());
  }

  // bytes zkproof = 6;
  if (!this->_internal_zkproof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zkproof());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReceiveDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveDescription::GetClassData() const { return &_class_data_; }

void ReceiveDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReceiveDescription *>(to)->MergeFrom(
      static_cast<const ReceiveDescription &>(from));
}


void ReceiveDescription::MergeFrom(const ReceiveDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ReceiveDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value_commitment().empty()) {
    _internal_set_value_commitment(from._internal_value_commitment());
  }
  if (!from._internal_note_commitment().empty()) {
    _internal_set_note_commitment(from._internal_note_commitment());
  }
  if (!from._internal_epk().empty()) {
    _internal_set_epk(from._internal_epk());
  }
  if (!from._internal_c_enc().empty()) {
    _internal_set_c_enc(from._internal_c_enc());
  }
  if (!from._internal_c_out().empty()) {
    _internal_set_c_out(from._internal_c_out());
  }
  if (!from._internal_zkproof().empty()) {
    _internal_set_zkproof(from._internal_zkproof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveDescription::CopyFrom(const ReceiveDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ReceiveDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveDescription::IsInitialized() const {
  return true;
}

void ReceiveDescription::InternalSwap(ReceiveDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_commitment_, GetArenaForAllocation(),
      &other->value_commitment_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &note_commitment_, GetArenaForAllocation(),
      &other->note_commitment_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &epk_, GetArenaForAllocation(),
      &other->epk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c_enc_, GetArenaForAllocation(),
      &other->c_enc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c_out_, GetArenaForAllocation(),
      &other->c_out_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zkproof_, GetArenaForAllocation(),
      &other->zkproof_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[9]);
}

// ===================================================================

class ShieldedTransferContract::_Internal {
 public:
};

ShieldedTransferContract::ShieldedTransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spend_description_(arena),
  receive_description_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ShieldedTransferContract)
}
ShieldedTransferContract::ShieldedTransferContract(const ShieldedTransferContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spend_description_(from.spend_description_),
      receive_description_(from.receive_description_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_from_address().empty()) {
    transparent_from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_from_address(), 
      GetArenaForAllocation());
  }
  binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_binding_signature().empty()) {
    binding_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binding_signature(), 
      GetArenaForAllocation());
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transparent_to_address().empty()) {
    transparent_to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transparent_to_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_amount_, &from.from_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_amount_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
  // @@protoc_insertion_point(copy_constructor:protocol.ShieldedTransferContract)
}

inline void ShieldedTransferContract::SharedCtor() {
transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_amount_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
}

ShieldedTransferContract::~ShieldedTransferContract() {
  // @@protoc_insertion_point(destructor:protocol.ShieldedTransferContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShieldedTransferContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transparent_from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binding_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShieldedTransferContract::ArenaDtor(void* object) {
  ShieldedTransferContract* _this = reinterpret_cast< ShieldedTransferContract* >(object);
  (void)_this;
}
void ShieldedTransferContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShieldedTransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShieldedTransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ShieldedTransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spend_description_.Clear();
  receive_description_.Clear();
  transparent_from_address_.ClearToEmpty();
  binding_signature_.ClearToEmpty();
  transparent_to_address_.ClearToEmpty();
  ::memset(&from_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_amount_) -
      reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShieldedTransferContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transparent_from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transparent_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          from_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendDescription spend_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spend_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveDescription receive_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receive_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes binding_signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_binding_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_transparent_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          to_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldedTransferContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ShieldedTransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transparent_from_address(), target);
  }

  // int64 from_amount = 2;
  if (this->_internal_from_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_amount(), target);
  }

  // repeated .protocol.SpendDescription spend_description = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spend_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_spend_description(i), target, stream);
  }

  // repeated .protocol.ReceiveDescription receive_description = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receive_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_receive_description(i), target, stream);
  }

  // bytes binding_signature = 5;
  if (!this->_internal_binding_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_binding_signature(), target);
  }

  // bytes transparent_to_address = 6;
  if (!this->_internal_transparent_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_transparent_to_address(), target);
  }

  // int64 to_amount = 7;
  if (this->_internal_to_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_to_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ShieldedTransferContract)
  return target;
}

size_t ShieldedTransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ShieldedTransferContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendDescription spend_description = 3;
  total_size += 1UL * this->_internal_spend_description_size();
  for (const auto& msg : this->spend_description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ReceiveDescription receive_description = 4;
  total_size += 1UL * this->_internal_receive_description_size();
  for (const auto& msg : this->receive_description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transparent_from_address = 1;
  if (!this->_internal_transparent_from_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_from_address());
  }

  // bytes binding_signature = 5;
  if (!this->_internal_binding_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binding_signature());
  }

  // bytes transparent_to_address = 6;
  if (!this->_internal_transparent_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transparent_to_address());
  }

  // int64 from_amount = 2;
  if (this->_internal_from_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_amount());
  }

  // int64 to_amount = 7;
  if (this->_internal_to_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShieldedTransferContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShieldedTransferContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShieldedTransferContract::GetClassData() const { return &_class_data_; }

void ShieldedTransferContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShieldedTransferContract *>(to)->MergeFrom(
      static_cast<const ShieldedTransferContract &>(from));
}


void ShieldedTransferContract::MergeFrom(const ShieldedTransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ShieldedTransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spend_description_.MergeFrom(from.spend_description_);
  receive_description_.MergeFrom(from.receive_description_);
  if (!from._internal_transparent_from_address().empty()) {
    _internal_set_transparent_from_address(from._internal_transparent_from_address());
  }
  if (!from._internal_binding_signature().empty()) {
    _internal_set_binding_signature(from._internal_binding_signature());
  }
  if (!from._internal_transparent_to_address().empty()) {
    _internal_set_transparent_to_address(from._internal_transparent_to_address());
  }
  if (from._internal_from_amount() != 0) {
    _internal_set_from_amount(from._internal_from_amount());
  }
  if (from._internal_to_amount() != 0) {
    _internal_set_to_amount(from._internal_to_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShieldedTransferContract::CopyFrom(const ShieldedTransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ShieldedTransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldedTransferContract::IsInitialized() const {
  return true;
}

void ShieldedTransferContract::InternalSwap(ShieldedTransferContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spend_description_.InternalSwap(&other->spend_description_);
  receive_description_.InternalSwap(&other->receive_description_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_from_address_, GetArenaForAllocation(),
      &other->transparent_from_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &binding_signature_, GetArenaForAllocation(),
      &other->binding_signature_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transparent_to_address_, GetArenaForAllocation(),
      &other->transparent_to_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShieldedTransferContract, to_amount_)
      + sizeof(ShieldedTransferContract::to_amount_)
      - PROTOBUF_FIELD_OFFSET(ShieldedTransferContract, from_amount_)>(
          reinterpret_cast<char*>(&from_amount_),
          reinterpret_cast<char*>(&other->from_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShieldedTransferContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AuthenticationPath* Arena::CreateMaybeMessage< ::protocol::AuthenticationPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AuthenticationPath >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MerklePath* Arena::CreateMaybeMessage< ::protocol::MerklePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::MerklePath >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OutputPoint* Arena::CreateMaybeMessage< ::protocol::OutputPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::OutputPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OutputPointInfo* Arena::CreateMaybeMessage< ::protocol::OutputPointInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::OutputPointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PedersenHash* Arena::CreateMaybeMessage< ::protocol::PedersenHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::PedersenHash >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleTree* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IncrementalMerkleTree >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleVoucher* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleVoucher >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IncrementalMerkleVoucher >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleVoucherInfo* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleVoucherInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::IncrementalMerkleVoucherInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendDescription* Arena::CreateMaybeMessage< ::protocol::SpendDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SpendDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ReceiveDescription* Arena::CreateMaybeMessage< ::protocol::ReceiveDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ReceiveDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ShieldedTransferContract* Arena::CreateMaybeMessage< ::protocol::ShieldedTransferContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ShieldedTransferContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
