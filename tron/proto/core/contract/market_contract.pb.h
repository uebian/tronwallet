// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/market_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fmarket_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fmarket_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fmarket_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fmarket_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fmarket_5fcontract_2eproto;
namespace protocol {
class MarketCancelOrderContract;
struct MarketCancelOrderContractDefaultTypeInternal;
extern MarketCancelOrderContractDefaultTypeInternal _MarketCancelOrderContract_default_instance_;
class MarketSellAssetContract;
struct MarketSellAssetContractDefaultTypeInternal;
extern MarketSellAssetContractDefaultTypeInternal _MarketSellAssetContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::MarketCancelOrderContract* Arena::CreateMaybeMessage<::protocol::MarketCancelOrderContract>(Arena*);
template<> ::protocol::MarketSellAssetContract* Arena::CreateMaybeMessage<::protocol::MarketSellAssetContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class MarketSellAssetContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MarketSellAssetContract) */ {
 public:
  inline MarketSellAssetContract() : MarketSellAssetContract(nullptr) {}
  ~MarketSellAssetContract() override;
  explicit constexpr MarketSellAssetContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketSellAssetContract(const MarketSellAssetContract& from);
  MarketSellAssetContract(MarketSellAssetContract&& from) noexcept
    : MarketSellAssetContract() {
    *this = ::std::move(from);
  }

  inline MarketSellAssetContract& operator=(const MarketSellAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketSellAssetContract& operator=(MarketSellAssetContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketSellAssetContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketSellAssetContract* internal_default_instance() {
    return reinterpret_cast<const MarketSellAssetContract*>(
               &_MarketSellAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarketSellAssetContract& a, MarketSellAssetContract& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketSellAssetContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketSellAssetContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketSellAssetContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketSellAssetContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketSellAssetContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MarketSellAssetContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSellAssetContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MarketSellAssetContract";
  }
  protected:
  explicit MarketSellAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kSellTokenIdFieldNumber = 2,
    kBuyTokenIdFieldNumber = 4,
    kSellTokenQuantityFieldNumber = 3,
    kBuyTokenQuantityFieldNumber = 5,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes sell_token_id = 2;
  void clear_sell_token_id();
  const std::string& sell_token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_token_id();
  PROTOBUF_NODISCARD std::string* release_sell_token_id();
  void set_allocated_sell_token_id(std::string* sell_token_id);
  private:
  const std::string& _internal_sell_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_token_id(const std::string& value);
  std::string* _internal_mutable_sell_token_id();
  public:

  // bytes buy_token_id = 4;
  void clear_buy_token_id();
  const std::string& buy_token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_token_id();
  PROTOBUF_NODISCARD std::string* release_buy_token_id();
  void set_allocated_buy_token_id(std::string* buy_token_id);
  private:
  const std::string& _internal_buy_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_token_id(const std::string& value);
  std::string* _internal_mutable_buy_token_id();
  public:

  // int64 sell_token_quantity = 3;
  void clear_sell_token_quantity();
  int64_t sell_token_quantity() const;
  void set_sell_token_quantity(int64_t value);
  private:
  int64_t _internal_sell_token_quantity() const;
  void _internal_set_sell_token_quantity(int64_t value);
  public:

  // int64 buy_token_quantity = 5;
  void clear_buy_token_quantity();
  int64_t buy_token_quantity() const;
  void set_buy_token_quantity(int64_t value);
  private:
  int64_t _internal_buy_token_quantity() const;
  void _internal_set_buy_token_quantity(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.MarketSellAssetContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_token_id_;
  int64_t sell_token_quantity_;
  int64_t buy_token_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fmarket_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class MarketCancelOrderContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MarketCancelOrderContract) */ {
 public:
  inline MarketCancelOrderContract() : MarketCancelOrderContract(nullptr) {}
  ~MarketCancelOrderContract() override;
  explicit constexpr MarketCancelOrderContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketCancelOrderContract(const MarketCancelOrderContract& from);
  MarketCancelOrderContract(MarketCancelOrderContract&& from) noexcept
    : MarketCancelOrderContract() {
    *this = ::std::move(from);
  }

  inline MarketCancelOrderContract& operator=(const MarketCancelOrderContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketCancelOrderContract& operator=(MarketCancelOrderContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketCancelOrderContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketCancelOrderContract* internal_default_instance() {
    return reinterpret_cast<const MarketCancelOrderContract*>(
               &_MarketCancelOrderContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketCancelOrderContract& a, MarketCancelOrderContract& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketCancelOrderContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketCancelOrderContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketCancelOrderContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketCancelOrderContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketCancelOrderContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MarketCancelOrderContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketCancelOrderContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MarketCancelOrderContract";
  }
  protected:
  explicit MarketCancelOrderContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.MarketCancelOrderContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fmarket_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketSellAssetContract

// bytes owner_address = 1;
inline void MarketSellAssetContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& MarketSellAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.MarketSellAssetContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarketSellAssetContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MarketSellAssetContract.owner_address)
}
inline std::string* MarketSellAssetContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.MarketSellAssetContract.owner_address)
  return _s;
}
inline const std::string& MarketSellAssetContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void MarketSellAssetContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.MarketSellAssetContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MarketSellAssetContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MarketSellAssetContract.owner_address)
}

// bytes sell_token_id = 2;
inline void MarketSellAssetContract::clear_sell_token_id() {
  sell_token_id_.ClearToEmpty();
}
inline const std::string& MarketSellAssetContract::sell_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.MarketSellAssetContract.sell_token_id)
  return _internal_sell_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarketSellAssetContract::set_sell_token_id(ArgT0&& arg0, ArgT... args) {
 
 sell_token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MarketSellAssetContract.sell_token_id)
}
inline std::string* MarketSellAssetContract::mutable_sell_token_id() {
  std::string* _s = _internal_mutable_sell_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.MarketSellAssetContract.sell_token_id)
  return _s;
}
inline const std::string& MarketSellAssetContract::_internal_sell_token_id() const {
  return sell_token_id_.Get();
}
inline void MarketSellAssetContract::_internal_set_sell_token_id(const std::string& value) {
  
  sell_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::_internal_mutable_sell_token_id() {
  
  return sell_token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::release_sell_token_id() {
  // @@protoc_insertion_point(field_release:protocol.MarketSellAssetContract.sell_token_id)
  return sell_token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MarketSellAssetContract::set_allocated_sell_token_id(std::string* sell_token_id) {
  if (sell_token_id != nullptr) {
    
  } else {
    
  }
  sell_token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sell_token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sell_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MarketSellAssetContract.sell_token_id)
}

// int64 sell_token_quantity = 3;
inline void MarketSellAssetContract::clear_sell_token_quantity() {
  sell_token_quantity_ = int64_t{0};
}
inline int64_t MarketSellAssetContract::_internal_sell_token_quantity() const {
  return sell_token_quantity_;
}
inline int64_t MarketSellAssetContract::sell_token_quantity() const {
  // @@protoc_insertion_point(field_get:protocol.MarketSellAssetContract.sell_token_quantity)
  return _internal_sell_token_quantity();
}
inline void MarketSellAssetContract::_internal_set_sell_token_quantity(int64_t value) {
  
  sell_token_quantity_ = value;
}
inline void MarketSellAssetContract::set_sell_token_quantity(int64_t value) {
  _internal_set_sell_token_quantity(value);
  // @@protoc_insertion_point(field_set:protocol.MarketSellAssetContract.sell_token_quantity)
}

// bytes buy_token_id = 4;
inline void MarketSellAssetContract::clear_buy_token_id() {
  buy_token_id_.ClearToEmpty();
}
inline const std::string& MarketSellAssetContract::buy_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.MarketSellAssetContract.buy_token_id)
  return _internal_buy_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarketSellAssetContract::set_buy_token_id(ArgT0&& arg0, ArgT... args) {
 
 buy_token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MarketSellAssetContract.buy_token_id)
}
inline std::string* MarketSellAssetContract::mutable_buy_token_id() {
  std::string* _s = _internal_mutable_buy_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.MarketSellAssetContract.buy_token_id)
  return _s;
}
inline const std::string& MarketSellAssetContract::_internal_buy_token_id() const {
  return buy_token_id_.Get();
}
inline void MarketSellAssetContract::_internal_set_buy_token_id(const std::string& value) {
  
  buy_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::_internal_mutable_buy_token_id() {
  
  return buy_token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MarketSellAssetContract::release_buy_token_id() {
  // @@protoc_insertion_point(field_release:protocol.MarketSellAssetContract.buy_token_id)
  return buy_token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MarketSellAssetContract::set_allocated_buy_token_id(std::string* buy_token_id) {
  if (buy_token_id != nullptr) {
    
  } else {
    
  }
  buy_token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buy_token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buy_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MarketSellAssetContract.buy_token_id)
}

// int64 buy_token_quantity = 5;
inline void MarketSellAssetContract::clear_buy_token_quantity() {
  buy_token_quantity_ = int64_t{0};
}
inline int64_t MarketSellAssetContract::_internal_buy_token_quantity() const {
  return buy_token_quantity_;
}
inline int64_t MarketSellAssetContract::buy_token_quantity() const {
  // @@protoc_insertion_point(field_get:protocol.MarketSellAssetContract.buy_token_quantity)
  return _internal_buy_token_quantity();
}
inline void MarketSellAssetContract::_internal_set_buy_token_quantity(int64_t value) {
  
  buy_token_quantity_ = value;
}
inline void MarketSellAssetContract::set_buy_token_quantity(int64_t value) {
  _internal_set_buy_token_quantity(value);
  // @@protoc_insertion_point(field_set:protocol.MarketSellAssetContract.buy_token_quantity)
}

// -------------------------------------------------------------------

// MarketCancelOrderContract

// bytes owner_address = 1;
inline void MarketCancelOrderContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& MarketCancelOrderContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.MarketCancelOrderContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarketCancelOrderContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MarketCancelOrderContract.owner_address)
}
inline std::string* MarketCancelOrderContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.MarketCancelOrderContract.owner_address)
  return _s;
}
inline const std::string& MarketCancelOrderContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void MarketCancelOrderContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MarketCancelOrderContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MarketCancelOrderContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.MarketCancelOrderContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MarketCancelOrderContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MarketCancelOrderContract.owner_address)
}

// bytes order_id = 2;
inline void MarketCancelOrderContract::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& MarketCancelOrderContract::order_id() const {
  // @@protoc_insertion_point(field_get:protocol.MarketCancelOrderContract.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MarketCancelOrderContract::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.MarketCancelOrderContract.order_id)
}
inline std::string* MarketCancelOrderContract::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:protocol.MarketCancelOrderContract.order_id)
  return _s;
}
inline const std::string& MarketCancelOrderContract::_internal_order_id() const {
  return order_id_.Get();
}
inline void MarketCancelOrderContract::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MarketCancelOrderContract::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MarketCancelOrderContract::release_order_id() {
  // @@protoc_insertion_point(field_release:protocol.MarketCancelOrderContract.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MarketCancelOrderContract::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.MarketCancelOrderContract.order_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fmarket_5fcontract_2eproto
