// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/asset_issue_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fasset_5fissue_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fasset_5fissue_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fasset_5fissue_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
namespace protocol {
class AssetIssueContract;
struct AssetIssueContractDefaultTypeInternal;
extern AssetIssueContractDefaultTypeInternal _AssetIssueContract_default_instance_;
class AssetIssueContract_FrozenSupply;
struct AssetIssueContract_FrozenSupplyDefaultTypeInternal;
extern AssetIssueContract_FrozenSupplyDefaultTypeInternal _AssetIssueContract_FrozenSupply_default_instance_;
class ParticipateAssetIssueContract;
struct ParticipateAssetIssueContractDefaultTypeInternal;
extern ParticipateAssetIssueContractDefaultTypeInternal _ParticipateAssetIssueContract_default_instance_;
class TransferAssetContract;
struct TransferAssetContractDefaultTypeInternal;
extern TransferAssetContractDefaultTypeInternal _TransferAssetContract_default_instance_;
class UnfreezeAssetContract;
struct UnfreezeAssetContractDefaultTypeInternal;
extern UnfreezeAssetContractDefaultTypeInternal _UnfreezeAssetContract_default_instance_;
class UpdateAssetContract;
struct UpdateAssetContractDefaultTypeInternal;
extern UpdateAssetContractDefaultTypeInternal _UpdateAssetContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::AssetIssueContract* Arena::CreateMaybeMessage<::protocol::AssetIssueContract>(Arena*);
template<> ::protocol::AssetIssueContract_FrozenSupply* Arena::CreateMaybeMessage<::protocol::AssetIssueContract_FrozenSupply>(Arena*);
template<> ::protocol::ParticipateAssetIssueContract* Arena::CreateMaybeMessage<::protocol::ParticipateAssetIssueContract>(Arena*);
template<> ::protocol::TransferAssetContract* Arena::CreateMaybeMessage<::protocol::TransferAssetContract>(Arena*);
template<> ::protocol::UnfreezeAssetContract* Arena::CreateMaybeMessage<::protocol::UnfreezeAssetContract>(Arena*);
template<> ::protocol::UpdateAssetContract* Arena::CreateMaybeMessage<::protocol::UpdateAssetContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class AssetIssueContract_FrozenSupply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AssetIssueContract.FrozenSupply) */ {
 public:
  inline AssetIssueContract_FrozenSupply() : AssetIssueContract_FrozenSupply(nullptr) {}
  ~AssetIssueContract_FrozenSupply() override;
  explicit constexpr AssetIssueContract_FrozenSupply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetIssueContract_FrozenSupply(const AssetIssueContract_FrozenSupply& from);
  AssetIssueContract_FrozenSupply(AssetIssueContract_FrozenSupply&& from) noexcept
    : AssetIssueContract_FrozenSupply() {
    *this = ::std::move(from);
  }

  inline AssetIssueContract_FrozenSupply& operator=(const AssetIssueContract_FrozenSupply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetIssueContract_FrozenSupply& operator=(AssetIssueContract_FrozenSupply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetIssueContract_FrozenSupply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetIssueContract_FrozenSupply* internal_default_instance() {
    return reinterpret_cast<const AssetIssueContract_FrozenSupply*>(
               &_AssetIssueContract_FrozenSupply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssetIssueContract_FrozenSupply& a, AssetIssueContract_FrozenSupply& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetIssueContract_FrozenSupply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetIssueContract_FrozenSupply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetIssueContract_FrozenSupply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetIssueContract_FrozenSupply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetIssueContract_FrozenSupply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssetIssueContract_FrozenSupply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetIssueContract_FrozenSupply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AssetIssueContract.FrozenSupply";
  }
  protected:
  explicit AssetIssueContract_FrozenSupply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenAmountFieldNumber = 1,
    kFrozenDaysFieldNumber = 2,
  };
  // int64 frozen_amount = 1;
  void clear_frozen_amount();
  int64_t frozen_amount() const;
  void set_frozen_amount(int64_t value);
  private:
  int64_t _internal_frozen_amount() const;
  void _internal_set_frozen_amount(int64_t value);
  public:

  // int64 frozen_days = 2;
  void clear_frozen_days();
  int64_t frozen_days() const;
  void set_frozen_days(int64_t value);
  private:
  int64_t _internal_frozen_days() const;
  void _internal_set_frozen_days(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.AssetIssueContract.FrozenSupply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t frozen_amount_;
  int64_t frozen_days_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AssetIssueContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AssetIssueContract) */ {
 public:
  inline AssetIssueContract() : AssetIssueContract(nullptr) {}
  ~AssetIssueContract() override;
  explicit constexpr AssetIssueContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetIssueContract(const AssetIssueContract& from);
  AssetIssueContract(AssetIssueContract&& from) noexcept
    : AssetIssueContract() {
    *this = ::std::move(from);
  }

  inline AssetIssueContract& operator=(const AssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetIssueContract& operator=(AssetIssueContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetIssueContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const AssetIssueContract*>(
               &_AssetIssueContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssetIssueContract& a, AssetIssueContract& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetIssueContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetIssueContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetIssueContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetIssueContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetIssueContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssetIssueContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetIssueContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AssetIssueContract";
  }
  protected:
  explicit AssetIssueContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AssetIssueContract_FrozenSupply FrozenSupply;

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenSupplyFieldNumber = 5,
    kOwnerAddressFieldNumber = 1,
    kNameFieldNumber = 2,
    kAbbrFieldNumber = 3,
    kDescriptionFieldNumber = 20,
    kUrlFieldNumber = 21,
    kIdFieldNumber = 41,
    kTotalSupplyFieldNumber = 4,
    kTrxNumFieldNumber = 6,
    kPrecisionFieldNumber = 7,
    kStartTimeFieldNumber = 9,
    kEndTimeFieldNumber = 10,
    kOrderFieldNumber = 11,
    kNumFieldNumber = 8,
    kVoteScoreFieldNumber = 16,
    kFreeAssetNetLimitFieldNumber = 22,
    kPublicFreeAssetNetLimitFieldNumber = 23,
    kPublicFreeAssetNetUsageFieldNumber = 24,
    kPublicLatestFreeNetTimeFieldNumber = 25,
  };
  // repeated .protocol.AssetIssueContract.FrozenSupply frozen_supply = 5;
  int frozen_supply_size() const;
  private:
  int _internal_frozen_supply_size() const;
  public:
  void clear_frozen_supply();
  ::protocol::AssetIssueContract_FrozenSupply* mutable_frozen_supply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >*
      mutable_frozen_supply();
  private:
  const ::protocol::AssetIssueContract_FrozenSupply& _internal_frozen_supply(int index) const;
  ::protocol::AssetIssueContract_FrozenSupply* _internal_add_frozen_supply();
  public:
  const ::protocol::AssetIssueContract_FrozenSupply& frozen_supply(int index) const;
  ::protocol::AssetIssueContract_FrozenSupply* add_frozen_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >&
      frozen_supply() const;

  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes abbr = 3;
  void clear_abbr();
  const std::string& abbr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abbr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abbr();
  PROTOBUF_NODISCARD std::string* release_abbr();
  void set_allocated_abbr(std::string* abbr);
  private:
  const std::string& _internal_abbr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abbr(const std::string& value);
  std::string* _internal_mutable_abbr();
  public:

  // bytes description = 20;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes url = 21;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string id = 41;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 total_supply = 4;
  void clear_total_supply();
  int64_t total_supply() const;
  void set_total_supply(int64_t value);
  private:
  int64_t _internal_total_supply() const;
  void _internal_set_total_supply(int64_t value);
  public:

  // int32 trx_num = 6;
  void clear_trx_num();
  int32_t trx_num() const;
  void set_trx_num(int32_t value);
  private:
  int32_t _internal_trx_num() const;
  void _internal_set_trx_num(int32_t value);
  public:

  // int32 precision = 7;
  void clear_precision();
  int32_t precision() const;
  void set_precision(int32_t value);
  private:
  int32_t _internal_precision() const;
  void _internal_set_precision(int32_t value);
  public:

  // int64 start_time = 9;
  void clear_start_time();
  int64_t start_time() const;
  void set_start_time(int64_t value);
  private:
  int64_t _internal_start_time() const;
  void _internal_set_start_time(int64_t value);
  public:

  // int64 end_time = 10;
  void clear_end_time();
  int64_t end_time() const;
  void set_end_time(int64_t value);
  private:
  int64_t _internal_end_time() const;
  void _internal_set_end_time(int64_t value);
  public:

  // int64 order = 11;
  void clear_order();
  int64_t order() const;
  void set_order(int64_t value);
  private:
  int64_t _internal_order() const;
  void _internal_set_order(int64_t value);
  public:

  // int32 num = 8;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 vote_score = 16;
  void clear_vote_score();
  int32_t vote_score() const;
  void set_vote_score(int32_t value);
  private:
  int32_t _internal_vote_score() const;
  void _internal_set_vote_score(int32_t value);
  public:

  // int64 free_asset_net_limit = 22;
  void clear_free_asset_net_limit();
  int64_t free_asset_net_limit() const;
  void set_free_asset_net_limit(int64_t value);
  private:
  int64_t _internal_free_asset_net_limit() const;
  void _internal_set_free_asset_net_limit(int64_t value);
  public:

  // int64 public_free_asset_net_limit = 23;
  void clear_public_free_asset_net_limit();
  int64_t public_free_asset_net_limit() const;
  void set_public_free_asset_net_limit(int64_t value);
  private:
  int64_t _internal_public_free_asset_net_limit() const;
  void _internal_set_public_free_asset_net_limit(int64_t value);
  public:

  // int64 public_free_asset_net_usage = 24;
  void clear_public_free_asset_net_usage();
  int64_t public_free_asset_net_usage() const;
  void set_public_free_asset_net_usage(int64_t value);
  private:
  int64_t _internal_public_free_asset_net_usage() const;
  void _internal_set_public_free_asset_net_usage(int64_t value);
  public:

  // int64 public_latest_free_net_time = 25;
  void clear_public_latest_free_net_time();
  int64_t public_latest_free_net_time() const;
  void set_public_latest_free_net_time(int64_t value);
  private:
  int64_t _internal_public_latest_free_net_time() const;
  void _internal_set_public_latest_free_net_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.AssetIssueContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply > frozen_supply_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abbr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int64_t total_supply_;
  int32_t trx_num_;
  int32_t precision_;
  int64_t start_time_;
  int64_t end_time_;
  int64_t order_;
  int32_t num_;
  int32_t vote_score_;
  int64_t free_asset_net_limit_;
  int64_t public_free_asset_net_limit_;
  int64_t public_free_asset_net_usage_;
  int64_t public_latest_free_net_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class TransferAssetContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransferAssetContract) */ {
 public:
  inline TransferAssetContract() : TransferAssetContract(nullptr) {}
  ~TransferAssetContract() override;
  explicit constexpr TransferAssetContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferAssetContract(const TransferAssetContract& from);
  TransferAssetContract(TransferAssetContract&& from) noexcept
    : TransferAssetContract() {
    *this = ::std::move(from);
  }

  inline TransferAssetContract& operator=(const TransferAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferAssetContract& operator=(TransferAssetContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferAssetContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferAssetContract* internal_default_instance() {
    return reinterpret_cast<const TransferAssetContract*>(
               &_TransferAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransferAssetContract& a, TransferAssetContract& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferAssetContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferAssetContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferAssetContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferAssetContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferAssetContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferAssetContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferAssetContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransferAssetContract";
  }
  protected:
  explicit TransferAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetNameFieldNumber = 1,
    kOwnerAddressFieldNumber = 2,
    kToAddressFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // bytes asset_name = 1;
  void clear_asset_name();
  const std::string& asset_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_name();
  PROTOBUF_NODISCARD std::string* release_asset_name();
  void set_allocated_asset_name(std::string* asset_name);
  private:
  const std::string& _internal_asset_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_name(const std::string& value);
  std::string* _internal_mutable_asset_name();
  public:

  // bytes owner_address = 2;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes to_address = 3;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // int64 amount = 4;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.TransferAssetContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UnfreezeAssetContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UnfreezeAssetContract) */ {
 public:
  inline UnfreezeAssetContract() : UnfreezeAssetContract(nullptr) {}
  ~UnfreezeAssetContract() override;
  explicit constexpr UnfreezeAssetContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfreezeAssetContract(const UnfreezeAssetContract& from);
  UnfreezeAssetContract(UnfreezeAssetContract&& from) noexcept
    : UnfreezeAssetContract() {
    *this = ::std::move(from);
  }

  inline UnfreezeAssetContract& operator=(const UnfreezeAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfreezeAssetContract& operator=(UnfreezeAssetContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnfreezeAssetContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfreezeAssetContract* internal_default_instance() {
    return reinterpret_cast<const UnfreezeAssetContract*>(
               &_UnfreezeAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnfreezeAssetContract& a, UnfreezeAssetContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfreezeAssetContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfreezeAssetContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnfreezeAssetContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnfreezeAssetContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnfreezeAssetContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnfreezeAssetContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfreezeAssetContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UnfreezeAssetContract";
  }
  protected:
  explicit UnfreezeAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // @@protoc_insertion_point(class_scope:protocol.UnfreezeAssetContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UpdateAssetContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateAssetContract) */ {
 public:
  inline UpdateAssetContract() : UpdateAssetContract(nullptr) {}
  ~UpdateAssetContract() override;
  explicit constexpr UpdateAssetContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAssetContract(const UpdateAssetContract& from);
  UpdateAssetContract(UpdateAssetContract&& from) noexcept
    : UpdateAssetContract() {
    *this = ::std::move(from);
  }

  inline UpdateAssetContract& operator=(const UpdateAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAssetContract& operator=(UpdateAssetContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAssetContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAssetContract* internal_default_instance() {
    return reinterpret_cast<const UpdateAssetContract*>(
               &_UpdateAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateAssetContract& a, UpdateAssetContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAssetContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAssetContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAssetContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAssetContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAssetContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateAssetContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAssetContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UpdateAssetContract";
  }
  protected:
  explicit UpdateAssetContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUrlFieldNumber = 3,
    kNewLimitFieldNumber = 4,
    kNewPublicLimitFieldNumber = 5,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes url = 3;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int64 new_limit = 4;
  void clear_new_limit();
  int64_t new_limit() const;
  void set_new_limit(int64_t value);
  private:
  int64_t _internal_new_limit() const;
  void _internal_set_new_limit(int64_t value);
  public:

  // int64 new_public_limit = 5;
  void clear_new_public_limit();
  int64_t new_public_limit() const;
  void set_new_public_limit(int64_t value);
  private:
  int64_t _internal_new_public_limit() const;
  void _internal_set_new_public_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.UpdateAssetContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int64_t new_limit_;
  int64_t new_public_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ParticipateAssetIssueContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ParticipateAssetIssueContract) */ {
 public:
  inline ParticipateAssetIssueContract() : ParticipateAssetIssueContract(nullptr) {}
  ~ParticipateAssetIssueContract() override;
  explicit constexpr ParticipateAssetIssueContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParticipateAssetIssueContract(const ParticipateAssetIssueContract& from);
  ParticipateAssetIssueContract(ParticipateAssetIssueContract&& from) noexcept
    : ParticipateAssetIssueContract() {
    *this = ::std::move(from);
  }

  inline ParticipateAssetIssueContract& operator=(const ParticipateAssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipateAssetIssueContract& operator=(ParticipateAssetIssueContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipateAssetIssueContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParticipateAssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const ParticipateAssetIssueContract*>(
               &_ParticipateAssetIssueContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ParticipateAssetIssueContract& a, ParticipateAssetIssueContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipateAssetIssueContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipateAssetIssueContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipateAssetIssueContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParticipateAssetIssueContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParticipateAssetIssueContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParticipateAssetIssueContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticipateAssetIssueContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ParticipateAssetIssueContract";
  }
  protected:
  explicit ParticipateAssetIssueContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kAssetNameFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // bytes asset_name = 3;
  void clear_asset_name();
  const std::string& asset_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_name();
  PROTOBUF_NODISCARD std::string* release_asset_name();
  void set_allocated_asset_name(std::string* asset_name);
  private:
  const std::string& _internal_asset_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_name(const std::string& value);
  std::string* _internal_mutable_asset_name();
  public:

  // int64 amount = 4;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ParticipateAssetIssueContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_name_;
  int64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fasset_5fissue_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssetIssueContract_FrozenSupply

// int64 frozen_amount = 1;
inline void AssetIssueContract_FrozenSupply::clear_frozen_amount() {
  frozen_amount_ = int64_t{0};
}
inline int64_t AssetIssueContract_FrozenSupply::_internal_frozen_amount() const {
  return frozen_amount_;
}
inline int64_t AssetIssueContract_FrozenSupply::frozen_amount() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.FrozenSupply.frozen_amount)
  return _internal_frozen_amount();
}
inline void AssetIssueContract_FrozenSupply::_internal_set_frozen_amount(int64_t value) {
  
  frozen_amount_ = value;
}
inline void AssetIssueContract_FrozenSupply::set_frozen_amount(int64_t value) {
  _internal_set_frozen_amount(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.FrozenSupply.frozen_amount)
}

// int64 frozen_days = 2;
inline void AssetIssueContract_FrozenSupply::clear_frozen_days() {
  frozen_days_ = int64_t{0};
}
inline int64_t AssetIssueContract_FrozenSupply::_internal_frozen_days() const {
  return frozen_days_;
}
inline int64_t AssetIssueContract_FrozenSupply::frozen_days() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.FrozenSupply.frozen_days)
  return _internal_frozen_days();
}
inline void AssetIssueContract_FrozenSupply::_internal_set_frozen_days(int64_t value) {
  
  frozen_days_ = value;
}
inline void AssetIssueContract_FrozenSupply::set_frozen_days(int64_t value) {
  _internal_set_frozen_days(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.FrozenSupply.frozen_days)
}

// -------------------------------------------------------------------

// AssetIssueContract

// string id = 41;
inline void AssetIssueContract::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::id() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.id)
}
inline std::string* AssetIssueContract::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.id)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_id() const {
  return id_.Get();
}
inline void AssetIssueContract::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_id() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.id)
}

// bytes owner_address = 1;
inline void AssetIssueContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.owner_address)
}
inline std::string* AssetIssueContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.owner_address)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void AssetIssueContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.owner_address)
}

// bytes name = 2;
inline void AssetIssueContract::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::name() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.name)
}
inline std::string* AssetIssueContract::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.name)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_name() const {
  return name_.Get();
}
inline void AssetIssueContract::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_name() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.name)
}

// bytes abbr = 3;
inline void AssetIssueContract::clear_abbr() {
  abbr_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::abbr() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.abbr)
  return _internal_abbr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_abbr(ArgT0&& arg0, ArgT... args) {
 
 abbr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.abbr)
}
inline std::string* AssetIssueContract::mutable_abbr() {
  std::string* _s = _internal_mutable_abbr();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.abbr)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_abbr() const {
  return abbr_.Get();
}
inline void AssetIssueContract::_internal_set_abbr(const std::string& value) {
  
  abbr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_abbr() {
  
  return abbr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_abbr() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.abbr)
  return abbr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_abbr(std::string* abbr) {
  if (abbr != nullptr) {
    
  } else {
    
  }
  abbr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abbr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (abbr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    abbr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.abbr)
}

// int64 total_supply = 4;
inline void AssetIssueContract::clear_total_supply() {
  total_supply_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_total_supply() const {
  return total_supply_;
}
inline int64_t AssetIssueContract::total_supply() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.total_supply)
  return _internal_total_supply();
}
inline void AssetIssueContract::_internal_set_total_supply(int64_t value) {
  
  total_supply_ = value;
}
inline void AssetIssueContract::set_total_supply(int64_t value) {
  _internal_set_total_supply(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.total_supply)
}

// repeated .protocol.AssetIssueContract.FrozenSupply frozen_supply = 5;
inline int AssetIssueContract::_internal_frozen_supply_size() const {
  return frozen_supply_.size();
}
inline int AssetIssueContract::frozen_supply_size() const {
  return _internal_frozen_supply_size();
}
inline void AssetIssueContract::clear_frozen_supply() {
  frozen_supply_.Clear();
}
inline ::protocol::AssetIssueContract_FrozenSupply* AssetIssueContract::mutable_frozen_supply(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >*
AssetIssueContract::mutable_frozen_supply() {
  // @@protoc_insertion_point(field_mutable_list:protocol.AssetIssueContract.frozen_supply)
  return &frozen_supply_;
}
inline const ::protocol::AssetIssueContract_FrozenSupply& AssetIssueContract::_internal_frozen_supply(int index) const {
  return frozen_supply_.Get(index);
}
inline const ::protocol::AssetIssueContract_FrozenSupply& AssetIssueContract::frozen_supply(int index) const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.frozen_supply)
  return _internal_frozen_supply(index);
}
inline ::protocol::AssetIssueContract_FrozenSupply* AssetIssueContract::_internal_add_frozen_supply() {
  return frozen_supply_.Add();
}
inline ::protocol::AssetIssueContract_FrozenSupply* AssetIssueContract::add_frozen_supply() {
  ::protocol::AssetIssueContract_FrozenSupply* _add = _internal_add_frozen_supply();
  // @@protoc_insertion_point(field_add:protocol.AssetIssueContract.frozen_supply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::AssetIssueContract_FrozenSupply >&
AssetIssueContract::frozen_supply() const {
  // @@protoc_insertion_point(field_list:protocol.AssetIssueContract.frozen_supply)
  return frozen_supply_;
}

// int32 trx_num = 6;
inline void AssetIssueContract::clear_trx_num() {
  trx_num_ = 0;
}
inline int32_t AssetIssueContract::_internal_trx_num() const {
  return trx_num_;
}
inline int32_t AssetIssueContract::trx_num() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.trx_num)
  return _internal_trx_num();
}
inline void AssetIssueContract::_internal_set_trx_num(int32_t value) {
  
  trx_num_ = value;
}
inline void AssetIssueContract::set_trx_num(int32_t value) {
  _internal_set_trx_num(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.trx_num)
}

// int32 precision = 7;
inline void AssetIssueContract::clear_precision() {
  precision_ = 0;
}
inline int32_t AssetIssueContract::_internal_precision() const {
  return precision_;
}
inline int32_t AssetIssueContract::precision() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.precision)
  return _internal_precision();
}
inline void AssetIssueContract::_internal_set_precision(int32_t value) {
  
  precision_ = value;
}
inline void AssetIssueContract::set_precision(int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.precision)
}

// int32 num = 8;
inline void AssetIssueContract::clear_num() {
  num_ = 0;
}
inline int32_t AssetIssueContract::_internal_num() const {
  return num_;
}
inline int32_t AssetIssueContract::num() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.num)
  return _internal_num();
}
inline void AssetIssueContract::_internal_set_num(int32_t value) {
  
  num_ = value;
}
inline void AssetIssueContract::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.num)
}

// int64 start_time = 9;
inline void AssetIssueContract::clear_start_time() {
  start_time_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_start_time() const {
  return start_time_;
}
inline int64_t AssetIssueContract::start_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.start_time)
  return _internal_start_time();
}
inline void AssetIssueContract::_internal_set_start_time(int64_t value) {
  
  start_time_ = value;
}
inline void AssetIssueContract::set_start_time(int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.start_time)
}

// int64 end_time = 10;
inline void AssetIssueContract::clear_end_time() {
  end_time_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_end_time() const {
  return end_time_;
}
inline int64_t AssetIssueContract::end_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.end_time)
  return _internal_end_time();
}
inline void AssetIssueContract::_internal_set_end_time(int64_t value) {
  
  end_time_ = value;
}
inline void AssetIssueContract::set_end_time(int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.end_time)
}

// int64 order = 11;
inline void AssetIssueContract::clear_order() {
  order_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_order() const {
  return order_;
}
inline int64_t AssetIssueContract::order() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.order)
  return _internal_order();
}
inline void AssetIssueContract::_internal_set_order(int64_t value) {
  
  order_ = value;
}
inline void AssetIssueContract::set_order(int64_t value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.order)
}

// int32 vote_score = 16;
inline void AssetIssueContract::clear_vote_score() {
  vote_score_ = 0;
}
inline int32_t AssetIssueContract::_internal_vote_score() const {
  return vote_score_;
}
inline int32_t AssetIssueContract::vote_score() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.vote_score)
  return _internal_vote_score();
}
inline void AssetIssueContract::_internal_set_vote_score(int32_t value) {
  
  vote_score_ = value;
}
inline void AssetIssueContract::set_vote_score(int32_t value) {
  _internal_set_vote_score(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.vote_score)
}

// bytes description = 20;
inline void AssetIssueContract::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::description() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.description)
}
inline std::string* AssetIssueContract::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.description)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_description() const {
  return description_.Get();
}
inline void AssetIssueContract::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_description() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.description)
}

// bytes url = 21;
inline void AssetIssueContract::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& AssetIssueContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetIssueContract::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.url)
}
inline std::string* AssetIssueContract::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:protocol.AssetIssueContract.url)
  return _s;
}
inline const std::string& AssetIssueContract::_internal_url() const {
  return url_.Get();
}
inline void AssetIssueContract::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssetIssueContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.AssetIssueContract.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssetIssueContract::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetIssueContract.url)
}

// int64 free_asset_net_limit = 22;
inline void AssetIssueContract::clear_free_asset_net_limit() {
  free_asset_net_limit_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_free_asset_net_limit() const {
  return free_asset_net_limit_;
}
inline int64_t AssetIssueContract::free_asset_net_limit() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.free_asset_net_limit)
  return _internal_free_asset_net_limit();
}
inline void AssetIssueContract::_internal_set_free_asset_net_limit(int64_t value) {
  
  free_asset_net_limit_ = value;
}
inline void AssetIssueContract::set_free_asset_net_limit(int64_t value) {
  _internal_set_free_asset_net_limit(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.free_asset_net_limit)
}

// int64 public_free_asset_net_limit = 23;
inline void AssetIssueContract::clear_public_free_asset_net_limit() {
  public_free_asset_net_limit_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_public_free_asset_net_limit() const {
  return public_free_asset_net_limit_;
}
inline int64_t AssetIssueContract::public_free_asset_net_limit() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_free_asset_net_limit)
  return _internal_public_free_asset_net_limit();
}
inline void AssetIssueContract::_internal_set_public_free_asset_net_limit(int64_t value) {
  
  public_free_asset_net_limit_ = value;
}
inline void AssetIssueContract::set_public_free_asset_net_limit(int64_t value) {
  _internal_set_public_free_asset_net_limit(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_free_asset_net_limit)
}

// int64 public_free_asset_net_usage = 24;
inline void AssetIssueContract::clear_public_free_asset_net_usage() {
  public_free_asset_net_usage_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_public_free_asset_net_usage() const {
  return public_free_asset_net_usage_;
}
inline int64_t AssetIssueContract::public_free_asset_net_usage() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_free_asset_net_usage)
  return _internal_public_free_asset_net_usage();
}
inline void AssetIssueContract::_internal_set_public_free_asset_net_usage(int64_t value) {
  
  public_free_asset_net_usage_ = value;
}
inline void AssetIssueContract::set_public_free_asset_net_usage(int64_t value) {
  _internal_set_public_free_asset_net_usage(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_free_asset_net_usage)
}

// int64 public_latest_free_net_time = 25;
inline void AssetIssueContract::clear_public_latest_free_net_time() {
  public_latest_free_net_time_ = int64_t{0};
}
inline int64_t AssetIssueContract::_internal_public_latest_free_net_time() const {
  return public_latest_free_net_time_;
}
inline int64_t AssetIssueContract::public_latest_free_net_time() const {
  // @@protoc_insertion_point(field_get:protocol.AssetIssueContract.public_latest_free_net_time)
  return _internal_public_latest_free_net_time();
}
inline void AssetIssueContract::_internal_set_public_latest_free_net_time(int64_t value) {
  
  public_latest_free_net_time_ = value;
}
inline void AssetIssueContract::set_public_latest_free_net_time(int64_t value) {
  _internal_set_public_latest_free_net_time(value);
  // @@protoc_insertion_point(field_set:protocol.AssetIssueContract.public_latest_free_net_time)
}

// -------------------------------------------------------------------

// TransferAssetContract

// bytes asset_name = 1;
inline void TransferAssetContract::clear_asset_name() {
  asset_name_.ClearToEmpty();
}
inline const std::string& TransferAssetContract::asset_name() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.asset_name)
  return _internal_asset_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferAssetContract::set_asset_name(ArgT0&& arg0, ArgT... args) {
 
 asset_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.asset_name)
}
inline std::string* TransferAssetContract::mutable_asset_name() {
  std::string* _s = _internal_mutable_asset_name();
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.asset_name)
  return _s;
}
inline const std::string& TransferAssetContract::_internal_asset_name() const {
  return asset_name_.Get();
}
inline void TransferAssetContract::_internal_set_asset_name(const std::string& value) {
  
  asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::_internal_mutable_asset_name() {
  
  return asset_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.asset_name)
  return asset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferAssetContract::set_allocated_asset_name(std::string* asset_name) {
  if (asset_name != nullptr) {
    
  } else {
    
  }
  asset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.asset_name)
}

// bytes owner_address = 2;
inline void TransferAssetContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& TransferAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferAssetContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.owner_address)
}
inline std::string* TransferAssetContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.owner_address)
  return _s;
}
inline const std::string& TransferAssetContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void TransferAssetContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferAssetContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.owner_address)
}

// bytes to_address = 3;
inline void TransferAssetContract::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& TransferAssetContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferAssetContract::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.to_address)
}
inline std::string* TransferAssetContract::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:protocol.TransferAssetContract.to_address)
  return _s;
}
inline const std::string& TransferAssetContract::_internal_to_address() const {
  return to_address_.Get();
}
inline void TransferAssetContract::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransferAssetContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.TransferAssetContract.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransferAssetContract::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.TransferAssetContract.to_address)
}

// int64 amount = 4;
inline void TransferAssetContract::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t TransferAssetContract::_internal_amount() const {
  return amount_;
}
inline int64_t TransferAssetContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransferAssetContract.amount)
  return _internal_amount();
}
inline void TransferAssetContract::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void TransferAssetContract::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protocol.TransferAssetContract.amount)
}

// -------------------------------------------------------------------

// UnfreezeAssetContract

// bytes owner_address = 1;
inline void UnfreezeAssetContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& UnfreezeAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UnfreezeAssetContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfreezeAssetContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UnfreezeAssetContract.owner_address)
}
inline std::string* UnfreezeAssetContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.UnfreezeAssetContract.owner_address)
  return _s;
}
inline const std::string& UnfreezeAssetContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void UnfreezeAssetContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnfreezeAssetContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnfreezeAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UnfreezeAssetContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnfreezeAssetContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.UnfreezeAssetContract.owner_address)
}

// -------------------------------------------------------------------

// UpdateAssetContract

// bytes owner_address = 1;
inline void UpdateAssetContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& UpdateAssetContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateAssetContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.owner_address)
}
inline std::string* UpdateAssetContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.owner_address)
  return _s;
}
inline const std::string& UpdateAssetContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void UpdateAssetContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateAssetContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.owner_address)
}

// bytes description = 2;
inline void UpdateAssetContract::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UpdateAssetContract::description() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateAssetContract::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.description)
}
inline std::string* UpdateAssetContract::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.description)
  return _s;
}
inline const std::string& UpdateAssetContract::_internal_description() const {
  return description_.Get();
}
inline void UpdateAssetContract::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::release_description() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateAssetContract::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.description)
}

// bytes url = 3;
inline void UpdateAssetContract::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& UpdateAssetContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateAssetContract::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.url)
}
inline std::string* UpdateAssetContract::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:protocol.UpdateAssetContract.url)
  return _s;
}
inline const std::string& UpdateAssetContract::_internal_url() const {
  return url_.Get();
}
inline void UpdateAssetContract::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateAssetContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.UpdateAssetContract.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateAssetContract::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateAssetContract.url)
}

// int64 new_limit = 4;
inline void UpdateAssetContract::clear_new_limit() {
  new_limit_ = int64_t{0};
}
inline int64_t UpdateAssetContract::_internal_new_limit() const {
  return new_limit_;
}
inline int64_t UpdateAssetContract::new_limit() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.new_limit)
  return _internal_new_limit();
}
inline void UpdateAssetContract::_internal_set_new_limit(int64_t value) {
  
  new_limit_ = value;
}
inline void UpdateAssetContract::set_new_limit(int64_t value) {
  _internal_set_new_limit(value);
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.new_limit)
}

// int64 new_public_limit = 5;
inline void UpdateAssetContract::clear_new_public_limit() {
  new_public_limit_ = int64_t{0};
}
inline int64_t UpdateAssetContract::_internal_new_public_limit() const {
  return new_public_limit_;
}
inline int64_t UpdateAssetContract::new_public_limit() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateAssetContract.new_public_limit)
  return _internal_new_public_limit();
}
inline void UpdateAssetContract::_internal_set_new_public_limit(int64_t value) {
  
  new_public_limit_ = value;
}
inline void UpdateAssetContract::set_new_public_limit(int64_t value) {
  _internal_set_new_public_limit(value);
  // @@protoc_insertion_point(field_set:protocol.UpdateAssetContract.new_public_limit)
}

// -------------------------------------------------------------------

// ParticipateAssetIssueContract

// bytes owner_address = 1;
inline void ParticipateAssetIssueContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ParticipateAssetIssueContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipateAssetIssueContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.owner_address)
}
inline std::string* ParticipateAssetIssueContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.owner_address)
  return _s;
}
inline const std::string& ParticipateAssetIssueContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ParticipateAssetIssueContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParticipateAssetIssueContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.owner_address)
}

// bytes to_address = 2;
inline void ParticipateAssetIssueContract::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& ParticipateAssetIssueContract::to_address() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipateAssetIssueContract::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.to_address)
}
inline std::string* ParticipateAssetIssueContract::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.to_address)
  return _s;
}
inline const std::string& ParticipateAssetIssueContract::_internal_to_address() const {
  return to_address_.Get();
}
inline void ParticipateAssetIssueContract::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::release_to_address() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParticipateAssetIssueContract::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.to_address)
}

// bytes asset_name = 3;
inline void ParticipateAssetIssueContract::clear_asset_name() {
  asset_name_.ClearToEmpty();
}
inline const std::string& ParticipateAssetIssueContract::asset_name() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.asset_name)
  return _internal_asset_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParticipateAssetIssueContract::set_asset_name(ArgT0&& arg0, ArgT... args) {
 
 asset_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.asset_name)
}
inline std::string* ParticipateAssetIssueContract::mutable_asset_name() {
  std::string* _s = _internal_mutable_asset_name();
  // @@protoc_insertion_point(field_mutable:protocol.ParticipateAssetIssueContract.asset_name)
  return _s;
}
inline const std::string& ParticipateAssetIssueContract::_internal_asset_name() const {
  return asset_name_.Get();
}
inline void ParticipateAssetIssueContract::_internal_set_asset_name(const std::string& value) {
  
  asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::_internal_mutable_asset_name() {
  
  return asset_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParticipateAssetIssueContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:protocol.ParticipateAssetIssueContract.asset_name)
  return asset_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParticipateAssetIssueContract::set_allocated_asset_name(std::string* asset_name) {
  if (asset_name != nullptr) {
    
  } else {
    
  }
  asset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ParticipateAssetIssueContract.asset_name)
}

// int64 amount = 4;
inline void ParticipateAssetIssueContract::clear_amount() {
  amount_ = int64_t{0};
}
inline int64_t ParticipateAssetIssueContract::_internal_amount() const {
  return amount_;
}
inline int64_t ParticipateAssetIssueContract::amount() const {
  // @@protoc_insertion_point(field_get:protocol.ParticipateAssetIssueContract.amount)
  return _internal_amount();
}
inline void ParticipateAssetIssueContract::_internal_set_amount(int64_t value) {
  
  amount_ = value;
}
inline void ParticipateAssetIssueContract::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protocol.ParticipateAssetIssueContract.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fasset_5fissue_5fcontract_2eproto
