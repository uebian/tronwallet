// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/exchange_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fexchange_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fexchange_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fexchange_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fexchange_5fcontract_2eproto;
namespace protocol {
class ExchangeCreateContract;
struct ExchangeCreateContractDefaultTypeInternal;
extern ExchangeCreateContractDefaultTypeInternal _ExchangeCreateContract_default_instance_;
class ExchangeInjectContract;
struct ExchangeInjectContractDefaultTypeInternal;
extern ExchangeInjectContractDefaultTypeInternal _ExchangeInjectContract_default_instance_;
class ExchangeTransactionContract;
struct ExchangeTransactionContractDefaultTypeInternal;
extern ExchangeTransactionContractDefaultTypeInternal _ExchangeTransactionContract_default_instance_;
class ExchangeWithdrawContract;
struct ExchangeWithdrawContractDefaultTypeInternal;
extern ExchangeWithdrawContractDefaultTypeInternal _ExchangeWithdrawContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::ExchangeCreateContract* Arena::CreateMaybeMessage<::protocol::ExchangeCreateContract>(Arena*);
template<> ::protocol::ExchangeInjectContract* Arena::CreateMaybeMessage<::protocol::ExchangeInjectContract>(Arena*);
template<> ::protocol::ExchangeTransactionContract* Arena::CreateMaybeMessage<::protocol::ExchangeTransactionContract>(Arena*);
template<> ::protocol::ExchangeWithdrawContract* Arena::CreateMaybeMessage<::protocol::ExchangeWithdrawContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class ExchangeCreateContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ExchangeCreateContract) */ {
 public:
  inline ExchangeCreateContract() : ExchangeCreateContract(nullptr) {}
  ~ExchangeCreateContract() override;
  explicit constexpr ExchangeCreateContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeCreateContract(const ExchangeCreateContract& from);
  ExchangeCreateContract(ExchangeCreateContract&& from) noexcept
    : ExchangeCreateContract() {
    *this = ::std::move(from);
  }

  inline ExchangeCreateContract& operator=(const ExchangeCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeCreateContract& operator=(ExchangeCreateContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeCreateContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeCreateContract* internal_default_instance() {
    return reinterpret_cast<const ExchangeCreateContract*>(
               &_ExchangeCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExchangeCreateContract& a, ExchangeCreateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeCreateContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeCreateContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeCreateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeCreateContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeCreateContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExchangeCreateContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeCreateContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ExchangeCreateContract";
  }
  protected:
  explicit ExchangeCreateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kFirstTokenIdFieldNumber = 2,
    kSecondTokenIdFieldNumber = 4,
    kFirstTokenBalanceFieldNumber = 3,
    kSecondTokenBalanceFieldNumber = 5,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes first_token_id = 2;
  void clear_first_token_id();
  const std::string& first_token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_token_id();
  PROTOBUF_NODISCARD std::string* release_first_token_id();
  void set_allocated_first_token_id(std::string* first_token_id);
  private:
  const std::string& _internal_first_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_token_id(const std::string& value);
  std::string* _internal_mutable_first_token_id();
  public:

  // bytes second_token_id = 4;
  void clear_second_token_id();
  const std::string& second_token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_second_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_second_token_id();
  PROTOBUF_NODISCARD std::string* release_second_token_id();
  void set_allocated_second_token_id(std::string* second_token_id);
  private:
  const std::string& _internal_second_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_second_token_id(const std::string& value);
  std::string* _internal_mutable_second_token_id();
  public:

  // int64 first_token_balance = 3;
  void clear_first_token_balance();
  int64_t first_token_balance() const;
  void set_first_token_balance(int64_t value);
  private:
  int64_t _internal_first_token_balance() const;
  void _internal_set_first_token_balance(int64_t value);
  public:

  // int64 second_token_balance = 5;
  void clear_second_token_balance();
  int64_t second_token_balance() const;
  void set_second_token_balance(int64_t value);
  private:
  int64_t _internal_second_token_balance() const;
  void _internal_set_second_token_balance(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ExchangeCreateContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_token_id_;
  int64_t first_token_balance_;
  int64_t second_token_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ExchangeInjectContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ExchangeInjectContract) */ {
 public:
  inline ExchangeInjectContract() : ExchangeInjectContract(nullptr) {}
  ~ExchangeInjectContract() override;
  explicit constexpr ExchangeInjectContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeInjectContract(const ExchangeInjectContract& from);
  ExchangeInjectContract(ExchangeInjectContract&& from) noexcept
    : ExchangeInjectContract() {
    *this = ::std::move(from);
  }

  inline ExchangeInjectContract& operator=(const ExchangeInjectContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeInjectContract& operator=(ExchangeInjectContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeInjectContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeInjectContract* internal_default_instance() {
    return reinterpret_cast<const ExchangeInjectContract*>(
               &_ExchangeInjectContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExchangeInjectContract& a, ExchangeInjectContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeInjectContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeInjectContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeInjectContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeInjectContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeInjectContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExchangeInjectContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeInjectContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ExchangeInjectContract";
  }
  protected:
  explicit ExchangeInjectContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kTokenIdFieldNumber = 3,
    kExchangeIdFieldNumber = 2,
    kQuantFieldNumber = 4,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // int64 exchange_id = 2;
  void clear_exchange_id();
  int64_t exchange_id() const;
  void set_exchange_id(int64_t value);
  private:
  int64_t _internal_exchange_id() const;
  void _internal_set_exchange_id(int64_t value);
  public:

  // int64 quant = 4;
  void clear_quant();
  int64_t quant() const;
  void set_quant(int64_t value);
  private:
  int64_t _internal_quant() const;
  void _internal_set_quant(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ExchangeInjectContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  int64_t exchange_id_;
  int64_t quant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ExchangeWithdrawContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ExchangeWithdrawContract) */ {
 public:
  inline ExchangeWithdrawContract() : ExchangeWithdrawContract(nullptr) {}
  ~ExchangeWithdrawContract() override;
  explicit constexpr ExchangeWithdrawContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeWithdrawContract(const ExchangeWithdrawContract& from);
  ExchangeWithdrawContract(ExchangeWithdrawContract&& from) noexcept
    : ExchangeWithdrawContract() {
    *this = ::std::move(from);
  }

  inline ExchangeWithdrawContract& operator=(const ExchangeWithdrawContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeWithdrawContract& operator=(ExchangeWithdrawContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeWithdrawContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeWithdrawContract* internal_default_instance() {
    return reinterpret_cast<const ExchangeWithdrawContract*>(
               &_ExchangeWithdrawContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExchangeWithdrawContract& a, ExchangeWithdrawContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeWithdrawContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeWithdrawContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeWithdrawContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeWithdrawContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeWithdrawContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExchangeWithdrawContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeWithdrawContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ExchangeWithdrawContract";
  }
  protected:
  explicit ExchangeWithdrawContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kTokenIdFieldNumber = 3,
    kExchangeIdFieldNumber = 2,
    kQuantFieldNumber = 4,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // int64 exchange_id = 2;
  void clear_exchange_id();
  int64_t exchange_id() const;
  void set_exchange_id(int64_t value);
  private:
  int64_t _internal_exchange_id() const;
  void _internal_set_exchange_id(int64_t value);
  public:

  // int64 quant = 4;
  void clear_quant();
  int64_t quant() const;
  void set_quant(int64_t value);
  private:
  int64_t _internal_quant() const;
  void _internal_set_quant(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ExchangeWithdrawContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  int64_t exchange_id_;
  int64_t quant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ExchangeTransactionContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ExchangeTransactionContract) */ {
 public:
  inline ExchangeTransactionContract() : ExchangeTransactionContract(nullptr) {}
  ~ExchangeTransactionContract() override;
  explicit constexpr ExchangeTransactionContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeTransactionContract(const ExchangeTransactionContract& from);
  ExchangeTransactionContract(ExchangeTransactionContract&& from) noexcept
    : ExchangeTransactionContract() {
    *this = ::std::move(from);
  }

  inline ExchangeTransactionContract& operator=(const ExchangeTransactionContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeTransactionContract& operator=(ExchangeTransactionContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeTransactionContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeTransactionContract* internal_default_instance() {
    return reinterpret_cast<const ExchangeTransactionContract*>(
               &_ExchangeTransactionContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExchangeTransactionContract& a, ExchangeTransactionContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeTransactionContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeTransactionContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeTransactionContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeTransactionContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeTransactionContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExchangeTransactionContract& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeTransactionContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ExchangeTransactionContract";
  }
  protected:
  explicit ExchangeTransactionContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kTokenIdFieldNumber = 3,
    kExchangeIdFieldNumber = 2,
    kQuantFieldNumber = 4,
    kExpectedFieldNumber = 5,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_NODISCARD std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // bytes token_id = 3;
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // int64 exchange_id = 2;
  void clear_exchange_id();
  int64_t exchange_id() const;
  void set_exchange_id(int64_t value);
  private:
  int64_t _internal_exchange_id() const;
  void _internal_set_exchange_id(int64_t value);
  public:

  // int64 quant = 4;
  void clear_quant();
  int64_t quant() const;
  void set_quant(int64_t value);
  private:
  int64_t _internal_quant() const;
  void _internal_set_quant(int64_t value);
  public:

  // int64 expected = 5;
  void clear_expected();
  int64_t expected() const;
  void set_expected(int64_t value);
  private:
  int64_t _internal_expected() const;
  void _internal_set_expected(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ExchangeTransactionContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  int64_t exchange_id_;
  int64_t quant_;
  int64_t expected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fexchange_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExchangeCreateContract

// bytes owner_address = 1;
inline void ExchangeCreateContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ExchangeCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeCreateContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeCreateContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeCreateContract.owner_address)
}
inline std::string* ExchangeCreateContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeCreateContract.owner_address)
  return _s;
}
inline const std::string& ExchangeCreateContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ExchangeCreateContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeCreateContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeCreateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeCreateContract.owner_address)
}

// bytes first_token_id = 2;
inline void ExchangeCreateContract::clear_first_token_id() {
  first_token_id_.ClearToEmpty();
}
inline const std::string& ExchangeCreateContract::first_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeCreateContract.first_token_id)
  return _internal_first_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeCreateContract::set_first_token_id(ArgT0&& arg0, ArgT... args) {
 
 first_token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeCreateContract.first_token_id)
}
inline std::string* ExchangeCreateContract::mutable_first_token_id() {
  std::string* _s = _internal_mutable_first_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeCreateContract.first_token_id)
  return _s;
}
inline const std::string& ExchangeCreateContract::_internal_first_token_id() const {
  return first_token_id_.Get();
}
inline void ExchangeCreateContract::_internal_set_first_token_id(const std::string& value) {
  
  first_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::_internal_mutable_first_token_id() {
  
  return first_token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::release_first_token_id() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeCreateContract.first_token_id)
  return first_token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeCreateContract::set_allocated_first_token_id(std::string* first_token_id) {
  if (first_token_id != nullptr) {
    
  } else {
    
  }
  first_token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeCreateContract.first_token_id)
}

// int64 first_token_balance = 3;
inline void ExchangeCreateContract::clear_first_token_balance() {
  first_token_balance_ = int64_t{0};
}
inline int64_t ExchangeCreateContract::_internal_first_token_balance() const {
  return first_token_balance_;
}
inline int64_t ExchangeCreateContract::first_token_balance() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeCreateContract.first_token_balance)
  return _internal_first_token_balance();
}
inline void ExchangeCreateContract::_internal_set_first_token_balance(int64_t value) {
  
  first_token_balance_ = value;
}
inline void ExchangeCreateContract::set_first_token_balance(int64_t value) {
  _internal_set_first_token_balance(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeCreateContract.first_token_balance)
}

// bytes second_token_id = 4;
inline void ExchangeCreateContract::clear_second_token_id() {
  second_token_id_.ClearToEmpty();
}
inline const std::string& ExchangeCreateContract::second_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeCreateContract.second_token_id)
  return _internal_second_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeCreateContract::set_second_token_id(ArgT0&& arg0, ArgT... args) {
 
 second_token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeCreateContract.second_token_id)
}
inline std::string* ExchangeCreateContract::mutable_second_token_id() {
  std::string* _s = _internal_mutable_second_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeCreateContract.second_token_id)
  return _s;
}
inline const std::string& ExchangeCreateContract::_internal_second_token_id() const {
  return second_token_id_.Get();
}
inline void ExchangeCreateContract::_internal_set_second_token_id(const std::string& value) {
  
  second_token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::_internal_mutable_second_token_id() {
  
  return second_token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeCreateContract::release_second_token_id() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeCreateContract.second_token_id)
  return second_token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeCreateContract::set_allocated_second_token_id(std::string* second_token_id) {
  if (second_token_id != nullptr) {
    
  } else {
    
  }
  second_token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (second_token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    second_token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeCreateContract.second_token_id)
}

// int64 second_token_balance = 5;
inline void ExchangeCreateContract::clear_second_token_balance() {
  second_token_balance_ = int64_t{0};
}
inline int64_t ExchangeCreateContract::_internal_second_token_balance() const {
  return second_token_balance_;
}
inline int64_t ExchangeCreateContract::second_token_balance() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeCreateContract.second_token_balance)
  return _internal_second_token_balance();
}
inline void ExchangeCreateContract::_internal_set_second_token_balance(int64_t value) {
  
  second_token_balance_ = value;
}
inline void ExchangeCreateContract::set_second_token_balance(int64_t value) {
  _internal_set_second_token_balance(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeCreateContract.second_token_balance)
}

// -------------------------------------------------------------------

// ExchangeInjectContract

// bytes owner_address = 1;
inline void ExchangeInjectContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ExchangeInjectContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeInjectContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeInjectContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeInjectContract.owner_address)
}
inline std::string* ExchangeInjectContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeInjectContract.owner_address)
  return _s;
}
inline const std::string& ExchangeInjectContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ExchangeInjectContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeInjectContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeInjectContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeInjectContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeInjectContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeInjectContract.owner_address)
}

// int64 exchange_id = 2;
inline void ExchangeInjectContract::clear_exchange_id() {
  exchange_id_ = int64_t{0};
}
inline int64_t ExchangeInjectContract::_internal_exchange_id() const {
  return exchange_id_;
}
inline int64_t ExchangeInjectContract::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeInjectContract.exchange_id)
  return _internal_exchange_id();
}
inline void ExchangeInjectContract::_internal_set_exchange_id(int64_t value) {
  
  exchange_id_ = value;
}
inline void ExchangeInjectContract::set_exchange_id(int64_t value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeInjectContract.exchange_id)
}

// bytes token_id = 3;
inline void ExchangeInjectContract::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& ExchangeInjectContract::token_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeInjectContract.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeInjectContract::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeInjectContract.token_id)
}
inline std::string* ExchangeInjectContract::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeInjectContract.token_id)
  return _s;
}
inline const std::string& ExchangeInjectContract::_internal_token_id() const {
  return token_id_.Get();
}
inline void ExchangeInjectContract::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeInjectContract::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeInjectContract::release_token_id() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeInjectContract.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeInjectContract::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeInjectContract.token_id)
}

// int64 quant = 4;
inline void ExchangeInjectContract::clear_quant() {
  quant_ = int64_t{0};
}
inline int64_t ExchangeInjectContract::_internal_quant() const {
  return quant_;
}
inline int64_t ExchangeInjectContract::quant() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeInjectContract.quant)
  return _internal_quant();
}
inline void ExchangeInjectContract::_internal_set_quant(int64_t value) {
  
  quant_ = value;
}
inline void ExchangeInjectContract::set_quant(int64_t value) {
  _internal_set_quant(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeInjectContract.quant)
}

// -------------------------------------------------------------------

// ExchangeWithdrawContract

// bytes owner_address = 1;
inline void ExchangeWithdrawContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ExchangeWithdrawContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeWithdrawContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeWithdrawContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeWithdrawContract.owner_address)
}
inline std::string* ExchangeWithdrawContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeWithdrawContract.owner_address)
  return _s;
}
inline const std::string& ExchangeWithdrawContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ExchangeWithdrawContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeWithdrawContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeWithdrawContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeWithdrawContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeWithdrawContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeWithdrawContract.owner_address)
}

// int64 exchange_id = 2;
inline void ExchangeWithdrawContract::clear_exchange_id() {
  exchange_id_ = int64_t{0};
}
inline int64_t ExchangeWithdrawContract::_internal_exchange_id() const {
  return exchange_id_;
}
inline int64_t ExchangeWithdrawContract::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeWithdrawContract.exchange_id)
  return _internal_exchange_id();
}
inline void ExchangeWithdrawContract::_internal_set_exchange_id(int64_t value) {
  
  exchange_id_ = value;
}
inline void ExchangeWithdrawContract::set_exchange_id(int64_t value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeWithdrawContract.exchange_id)
}

// bytes token_id = 3;
inline void ExchangeWithdrawContract::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& ExchangeWithdrawContract::token_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeWithdrawContract.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeWithdrawContract::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeWithdrawContract.token_id)
}
inline std::string* ExchangeWithdrawContract::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeWithdrawContract.token_id)
  return _s;
}
inline const std::string& ExchangeWithdrawContract::_internal_token_id() const {
  return token_id_.Get();
}
inline void ExchangeWithdrawContract::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeWithdrawContract::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeWithdrawContract::release_token_id() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeWithdrawContract.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeWithdrawContract::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeWithdrawContract.token_id)
}

// int64 quant = 4;
inline void ExchangeWithdrawContract::clear_quant() {
  quant_ = int64_t{0};
}
inline int64_t ExchangeWithdrawContract::_internal_quant() const {
  return quant_;
}
inline int64_t ExchangeWithdrawContract::quant() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeWithdrawContract.quant)
  return _internal_quant();
}
inline void ExchangeWithdrawContract::_internal_set_quant(int64_t value) {
  
  quant_ = value;
}
inline void ExchangeWithdrawContract::set_quant(int64_t value) {
  _internal_set_quant(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeWithdrawContract.quant)
}

// -------------------------------------------------------------------

// ExchangeTransactionContract

// bytes owner_address = 1;
inline void ExchangeTransactionContract::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& ExchangeTransactionContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeTransactionContract.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeTransactionContract::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeTransactionContract.owner_address)
}
inline std::string* ExchangeTransactionContract::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeTransactionContract.owner_address)
  return _s;
}
inline const std::string& ExchangeTransactionContract::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void ExchangeTransactionContract::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeTransactionContract::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeTransactionContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeTransactionContract.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeTransactionContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeTransactionContract.owner_address)
}

// int64 exchange_id = 2;
inline void ExchangeTransactionContract::clear_exchange_id() {
  exchange_id_ = int64_t{0};
}
inline int64_t ExchangeTransactionContract::_internal_exchange_id() const {
  return exchange_id_;
}
inline int64_t ExchangeTransactionContract::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeTransactionContract.exchange_id)
  return _internal_exchange_id();
}
inline void ExchangeTransactionContract::_internal_set_exchange_id(int64_t value) {
  
  exchange_id_ = value;
}
inline void ExchangeTransactionContract::set_exchange_id(int64_t value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeTransactionContract.exchange_id)
}

// bytes token_id = 3;
inline void ExchangeTransactionContract::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& ExchangeTransactionContract::token_id() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeTransactionContract.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeTransactionContract::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ExchangeTransactionContract.token_id)
}
inline std::string* ExchangeTransactionContract::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:protocol.ExchangeTransactionContract.token_id)
  return _s;
}
inline const std::string& ExchangeTransactionContract::_internal_token_id() const {
  return token_id_.Get();
}
inline void ExchangeTransactionContract::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeTransactionContract::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeTransactionContract::release_token_id() {
  // @@protoc_insertion_point(field_release:protocol.ExchangeTransactionContract.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeTransactionContract::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ExchangeTransactionContract.token_id)
}

// int64 quant = 4;
inline void ExchangeTransactionContract::clear_quant() {
  quant_ = int64_t{0};
}
inline int64_t ExchangeTransactionContract::_internal_quant() const {
  return quant_;
}
inline int64_t ExchangeTransactionContract::quant() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeTransactionContract.quant)
  return _internal_quant();
}
inline void ExchangeTransactionContract::_internal_set_quant(int64_t value) {
  
  quant_ = value;
}
inline void ExchangeTransactionContract::set_quant(int64_t value) {
  _internal_set_quant(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeTransactionContract.quant)
}

// int64 expected = 5;
inline void ExchangeTransactionContract::clear_expected() {
  expected_ = int64_t{0};
}
inline int64_t ExchangeTransactionContract::_internal_expected() const {
  return expected_;
}
inline int64_t ExchangeTransactionContract::expected() const {
  // @@protoc_insertion_point(field_get:protocol.ExchangeTransactionContract.expected)
  return _internal_expected();
}
inline void ExchangeTransactionContract::_internal_set_expected(int64_t value) {
  
  expected_ = value;
}
inline void ExchangeTransactionContract::set_expected(int64_t value) {
  _internal_set_expected(value);
  // @@protoc_insertion_point(field_set:protocol.ExchangeTransactionContract.expected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fexchange_5fcontract_2eproto
