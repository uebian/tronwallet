// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/balance_contract.proto

#include "core/contract/balance_contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr FreezeBalanceContract::FreezeBalanceContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frozen_balance_(int64_t{0})
  , frozen_duration_(int64_t{0})
  , resource_(0)
{}
struct FreezeBalanceContractDefaultTypeInternal {
  constexpr FreezeBalanceContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreezeBalanceContractDefaultTypeInternal() {}
  union {
    FreezeBalanceContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreezeBalanceContractDefaultTypeInternal _FreezeBalanceContract_default_instance_;
constexpr UnfreezeBalanceContract::UnfreezeBalanceContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resource_(0)
{}
struct UnfreezeBalanceContractDefaultTypeInternal {
  constexpr UnfreezeBalanceContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnfreezeBalanceContractDefaultTypeInternal() {}
  union {
    UnfreezeBalanceContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnfreezeBalanceContractDefaultTypeInternal _UnfreezeBalanceContract_default_instance_;
constexpr WithdrawBalanceContract::WithdrawBalanceContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WithdrawBalanceContractDefaultTypeInternal {
  constexpr WithdrawBalanceContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WithdrawBalanceContractDefaultTypeInternal() {}
  union {
    WithdrawBalanceContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WithdrawBalanceContractDefaultTypeInternal _WithdrawBalanceContract_default_instance_;
constexpr TransferContract::TransferContract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(int64_t{0}){}
struct TransferContractDefaultTypeInternal {
  constexpr TransferContractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferContractDefaultTypeInternal() {}
  union {
    TransferContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferContractDefaultTypeInternal _TransferContract_default_instance_;
constexpr TransactionBalanceTrace_Operation::TransactionBalanceTrace_Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_identifier_(int64_t{0})
  , amount_(int64_t{0}){}
struct TransactionBalanceTrace_OperationDefaultTypeInternal {
  constexpr TransactionBalanceTrace_OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionBalanceTrace_OperationDefaultTypeInternal() {}
  union {
    TransactionBalanceTrace_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionBalanceTrace_OperationDefaultTypeInternal _TransactionBalanceTrace_Operation_default_instance_;
constexpr TransactionBalanceTrace::TransactionBalanceTrace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_()
  , transaction_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionBalanceTraceDefaultTypeInternal {
  constexpr TransactionBalanceTraceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionBalanceTraceDefaultTypeInternal() {}
  union {
    TransactionBalanceTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionBalanceTraceDefaultTypeInternal _TransactionBalanceTrace_default_instance_;
constexpr BlockBalanceTrace_BlockIdentifier::BlockBalanceTrace_BlockIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_(int64_t{0}){}
struct BlockBalanceTrace_BlockIdentifierDefaultTypeInternal {
  constexpr BlockBalanceTrace_BlockIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockBalanceTrace_BlockIdentifierDefaultTypeInternal() {}
  union {
    BlockBalanceTrace_BlockIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockBalanceTrace_BlockIdentifierDefaultTypeInternal _BlockBalanceTrace_BlockIdentifier_default_instance_;
constexpr BlockBalanceTrace::BlockBalanceTrace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_balance_trace_()
  , block_identifier_(nullptr)
  , timestamp_(int64_t{0}){}
struct BlockBalanceTraceDefaultTypeInternal {
  constexpr BlockBalanceTraceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockBalanceTraceDefaultTypeInternal() {}
  union {
    BlockBalanceTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockBalanceTraceDefaultTypeInternal _BlockBalanceTrace_default_instance_;
constexpr AccountTrace::AccountTrace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_(int64_t{0})
  , placeholder_(int64_t{0}){}
struct AccountTraceDefaultTypeInternal {
  constexpr AccountTraceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountTraceDefaultTypeInternal() {}
  union {
    AccountTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountTraceDefaultTypeInternal _AccountTrace_default_instance_;
constexpr AccountIdentifier::AccountIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountIdentifierDefaultTypeInternal {
  constexpr AccountIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountIdentifierDefaultTypeInternal() {}
  union {
    AccountIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountIdentifierDefaultTypeInternal _AccountIdentifier_default_instance_;
constexpr AccountBalanceRequest::AccountBalanceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_identifier_(nullptr)
  , block_identifier_(nullptr){}
struct AccountBalanceRequestDefaultTypeInternal {
  constexpr AccountBalanceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountBalanceRequestDefaultTypeInternal() {}
  union {
    AccountBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountBalanceRequestDefaultTypeInternal _AccountBalanceRequest_default_instance_;
constexpr AccountBalanceResponse::AccountBalanceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_identifier_(nullptr)
  , balance_(int64_t{0}){}
struct AccountBalanceResponseDefaultTypeInternal {
  constexpr AccountBalanceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountBalanceResponseDefaultTypeInternal() {}
  union {
    AccountBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountBalanceResponseDefaultTypeInternal _AccountBalanceResponse_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fbalance_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fbalance_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, frozen_duration_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::FreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnfreezeBalanceContract, receiver_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WithdrawBalanceContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransferContract, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace_Operation, operation_identifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace_Operation, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace_Operation, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace, transaction_identifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace, operation_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionBalanceTrace, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace_BlockIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace_BlockIdentifier, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace_BlockIdentifier, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace, block_identifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockBalanceTrace, transaction_balance_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountTrace, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountTrace, placeholder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountIdentifier, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceRequest, account_identifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceRequest, block_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceResponse, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountBalanceResponse, block_identifier_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::FreezeBalanceContract)},
  { 10, -1, sizeof(::protocol::UnfreezeBalanceContract)},
  { 18, -1, sizeof(::protocol::WithdrawBalanceContract)},
  { 24, -1, sizeof(::protocol::TransferContract)},
  { 32, -1, sizeof(::protocol::TransactionBalanceTrace_Operation)},
  { 40, -1, sizeof(::protocol::TransactionBalanceTrace)},
  { 49, -1, sizeof(::protocol::BlockBalanceTrace_BlockIdentifier)},
  { 56, -1, sizeof(::protocol::BlockBalanceTrace)},
  { 64, -1, sizeof(::protocol::AccountTrace)},
  { 71, -1, sizeof(::protocol::AccountIdentifier)},
  { 77, -1, sizeof(::protocol::AccountBalanceRequest)},
  { 84, -1, sizeof(::protocol::AccountBalanceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_FreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnfreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WithdrawBalanceContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransferContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionBalanceTrace_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionBalanceTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockBalanceTrace_BlockIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockBalanceTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountBalanceResponse_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fbalance_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/balance_contract.proto\022\010"
  "protocol\032\032core/contract/common.proto\"\243\001\n"
  "\025FreezeBalanceContract\022\025\n\rowner_address\030"
  "\001 \001(\014\022\026\n\016frozen_balance\030\002 \001(\003\022\027\n\017frozen_"
  "duration\030\003 \001(\003\022(\n\010resource\030\n \001(\0162\026.proto"
  "col.ResourceCode\022\030\n\020receiver_address\030\017 \001"
  "(\014\"t\n\027UnfreezeBalanceContract\022\025\n\rowner_a"
  "ddress\030\001 \001(\014\022(\n\010resource\030\n \001(\0162\026.protoco"
  "l.ResourceCode\022\030\n\020receiver_address\030\017 \001(\014"
  "\"0\n\027WithdrawBalanceContract\022\025\n\rowner_add"
  "ress\030\001 \001(\014\"M\n\020TransferContract\022\025\n\rowner_"
  "address\030\001 \001(\014\022\022\n\nto_address\030\002 \001(\014\022\016\n\006amo"
  "unt\030\003 \001(\003\"\343\001\n\027TransactionBalanceTrace\022\036\n"
  "\026transaction_identifier\030\001 \001(\014\022>\n\toperati"
  "on\030\002 \003(\0132+.protocol.TransactionBalanceTr"
  "ace.Operation\022\014\n\004type\030\003 \001(\t\022\016\n\006status\030\004 "
  "\001(\t\032J\n\tOperation\022\034\n\024operation_identifier"
  "\030\001 \001(\003\022\017\n\007address\030\002 \001(\014\022\016\n\006amount\030\003 \001(\003\""
  "\344\001\n\021BlockBalanceTrace\022E\n\020block_identifie"
  "r\030\001 \001(\0132+.protocol.BlockBalanceTrace.Blo"
  "ckIdentifier\022\021\n\ttimestamp\030\002 \001(\003\022D\n\031trans"
  "action_balance_trace\030\003 \003(\0132!.protocol.Tr"
  "ansactionBalanceTrace\032/\n\017BlockIdentifier"
  "\022\014\n\004hash\030\001 \001(\014\022\016\n\006number\030\002 \001(\003\"4\n\014Accoun"
  "tTrace\022\017\n\007balance\030\001 \001(\003\022\023\n\013placeholder\030c"
  " \001(\003\"$\n\021AccountIdentifier\022\017\n\007address\030\001 \001"
  "(\014\"\227\001\n\025AccountBalanceRequest\0227\n\022account_"
  "identifier\030\001 \001(\0132\033.protocol.AccountIdent"
  "ifier\022E\n\020block_identifier\030\002 \001(\0132+.protoc"
  "ol.BlockBalanceTrace.BlockIdentifier\"p\n\026"
  "AccountBalanceResponse\022\017\n\007balance\030\001 \001(\003\022"
  "E\n\020block_identifier\030\002 \001(\0132+.protocol.Blo"
  "ckBalanceTrace.BlockIdentifierBE\n\030org.tr"
  "on.protos.contractZ)github.com/tronproto"
  "col/grpc-gateway/coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_deps[1] = {
  &::descriptor_table_core_2fcontract_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto = {
  false, false, 1389, descriptor_table_protodef_core_2fcontract_2fbalance_5fcontract_2eproto, "core/contract/balance_contract.proto", 
  &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once, descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fbalance_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto, file_level_enum_descriptors_core_2fcontract_2fbalance_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fbalance_5fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter() {
  return &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcontract_2fbalance_5fcontract_2eproto(&descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto);
namespace protocol {

// ===================================================================

class FreezeBalanceContract::_Internal {
 public:
};

FreezeBalanceContract::FreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.FreezeBalanceContract)
}
FreezeBalanceContract::FreezeBalanceContract(const FreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:protocol.FreezeBalanceContract)
}

inline void FreezeBalanceContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frozen_balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
}

FreezeBalanceContract::~FreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.FreezeBalanceContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FreezeBalanceContract::ArenaDtor(void* object) {
  FreezeBalanceContract* _this = reinterpret_cast< FreezeBalanceContract* >(object);
  (void)_this;
}
void FreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(resource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frozen_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.FreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // int64 frozen_balance = 2;
  if (this->_internal_frozen_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frozen_balance(), target);
  }

  // int64 frozen_duration = 3;
  if (this->_internal_frozen_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_frozen_duration(), target);
  }

  // .protocol.ResourceCode resource = 10;
  if (this->_internal_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_resource(), target);
  }

  // bytes receiver_address = 15;
  if (!this->_internal_receiver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.FreezeBalanceContract)
  return target;
}

size_t FreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.FreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 15;
  if (!this->_internal_receiver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // int64 frozen_balance = 2;
  if (this->_internal_frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_balance());
  }

  // int64 frozen_duration = 3;
  if (this->_internal_frozen_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frozen_duration());
  }

  // .protocol.ResourceCode resource = 10;
  if (this->_internal_resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreezeBalanceContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FreezeBalanceContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreezeBalanceContract::GetClassData() const { return &_class_data_; }

void FreezeBalanceContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FreezeBalanceContract *>(to)->MergeFrom(
      static_cast<const FreezeBalanceContract &>(from));
}


void FreezeBalanceContract::MergeFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.FreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_receiver_address().empty()) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from._internal_frozen_balance() != 0) {
    _internal_set_frozen_balance(from._internal_frozen_balance());
  }
  if (from._internal_frozen_duration() != 0) {
    _internal_set_frozen_duration(from._internal_frozen_duration());
  }
  if (from._internal_resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreezeBalanceContract::CopyFrom(const FreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.FreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeBalanceContract::IsInitialized() const {
  return true;
}

void FreezeBalanceContract::InternalSwap(FreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_address_, GetArenaForAllocation(),
      &other->receiver_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, resource_)
      + sizeof(FreezeBalanceContract::resource_)
      - PROTOBUF_FIELD_OFFSET(FreezeBalanceContract, frozen_balance_)>(
          reinterpret_cast<char*>(&frozen_balance_),
          reinterpret_cast<char*>(&other->frozen_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeBalanceContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[0]);
}

// ===================================================================

class UnfreezeBalanceContract::_Internal {
 public:
};

UnfreezeBalanceContract::UnfreezeBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.UnfreezeBalanceContract)
}
UnfreezeBalanceContract::UnfreezeBalanceContract(const UnfreezeBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_address(), 
      GetArenaForAllocation());
  }
  resource_ = from.resource_;
  // @@protoc_insertion_point(copy_constructor:protocol.UnfreezeBalanceContract)
}

inline void UnfreezeBalanceContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resource_ = 0;
}

UnfreezeBalanceContract::~UnfreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.UnfreezeBalanceContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnfreezeBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnfreezeBalanceContract::ArenaDtor(void* object) {
  UnfreezeBalanceContract* _this = reinterpret_cast< UnfreezeBalanceContract* >(object);
  (void)_this;
}
void UnfreezeBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnfreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnfreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  receiver_address_.ClearToEmpty();
  resource_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfreezeBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceCode resource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource(static_cast<::protocol::ResourceCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes receiver_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnfreezeBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnfreezeBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // .protocol.ResourceCode resource = 10;
  if (this->_internal_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_resource(), target);
  }

  // bytes receiver_address = 15;
  if (!this->_internal_receiver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_receiver_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnfreezeBalanceContract)
  return target;
}

size_t UnfreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnfreezeBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes receiver_address = 15;
  if (!this->_internal_receiver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // .protocol.ResourceCode resource = 10;
  if (this->_internal_resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnfreezeBalanceContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnfreezeBalanceContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnfreezeBalanceContract::GetClassData() const { return &_class_data_; }

void UnfreezeBalanceContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnfreezeBalanceContract *>(to)->MergeFrom(
      static_cast<const UnfreezeBalanceContract &>(from));
}


void UnfreezeBalanceContract::MergeFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_receiver_address().empty()) {
    _internal_set_receiver_address(from._internal_receiver_address());
  }
  if (from._internal_resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnfreezeBalanceContract::CopyFrom(const UnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfreezeBalanceContract::IsInitialized() const {
  return true;
}

void UnfreezeBalanceContract::InternalSwap(UnfreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_address_, GetArenaForAllocation(),
      &other->receiver_address_, other->GetArenaForAllocation()
  );
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfreezeBalanceContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[1]);
}

// ===================================================================

class WithdrawBalanceContract::_Internal {
 public:
};

WithdrawBalanceContract::WithdrawBalanceContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.WithdrawBalanceContract)
}
WithdrawBalanceContract::WithdrawBalanceContract(const WithdrawBalanceContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WithdrawBalanceContract)
}

inline void WithdrawBalanceContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawBalanceContract::~WithdrawBalanceContract() {
  // @@protoc_insertion_point(destructor:protocol.WithdrawBalanceContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WithdrawBalanceContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawBalanceContract::ArenaDtor(void* object) {
  WithdrawBalanceContract* _this = reinterpret_cast< WithdrawBalanceContract* >(object);
  (void)_this;
}
void WithdrawBalanceContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WithdrawBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawBalanceContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawBalanceContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WithdrawBalanceContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WithdrawBalanceContract)
  return target;
}

size_t WithdrawBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WithdrawBalanceContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WithdrawBalanceContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WithdrawBalanceContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WithdrawBalanceContract::GetClassData() const { return &_class_data_; }

void WithdrawBalanceContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WithdrawBalanceContract *>(to)->MergeFrom(
      static_cast<const WithdrawBalanceContract &>(from));
}


void WithdrawBalanceContract::MergeFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WithdrawBalanceContract::CopyFrom(const WithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawBalanceContract::IsInitialized() const {
  return true;
}

void WithdrawBalanceContract::InternalSwap(WithdrawBalanceContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawBalanceContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[2]);
}

// ===================================================================

class TransferContract::_Internal {
 public:
};

TransferContract::TransferContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransferContract)
}
TransferContract::TransferContract(const TransferContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_address().empty()) {
    to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransferContract)
}

inline void TransferContract::SharedCtor() {
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = int64_t{0};
}

TransferContract::~TransferContract() {
  // @@protoc_insertion_point(destructor:protocol.TransferContract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransferContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferContract::ArenaDtor(void* object) {
  TransferContract* _this = reinterpret_cast< TransferContract* >(object);
  (void)_this;
}
void TransferContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmpty();
  to_address_.ClearToEmpty();
  amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner_address(), target);
  }

  // bytes to_address = 2;
  if (!this->_internal_to_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to_address(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransferContract)
  return target;
}

size_t TransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransferContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_address());
  }

  // bytes to_address = 2;
  if (!this->_internal_to_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_address());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferContract::GetClassData() const { return &_class_data_; }

void TransferContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransferContract *>(to)->MergeFrom(
      static_cast<const TransferContract &>(from));
}


void TransferContract::MergeFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_to_address().empty()) {
    _internal_set_to_address(from._internal_to_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferContract::CopyFrom(const TransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferContract::IsInitialized() const {
  return true;
}

void TransferContract::InternalSwap(TransferContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_address_, GetArenaForAllocation(),
      &other->to_address_, other->GetArenaForAllocation()
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferContract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[3]);
}

// ===================================================================

class TransactionBalanceTrace_Operation::_Internal {
 public:
};

TransactionBalanceTrace_Operation::TransactionBalanceTrace_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionBalanceTrace.Operation)
}
TransactionBalanceTrace_Operation::TransactionBalanceTrace_Operation(const TransactionBalanceTrace_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&operation_identifier_, &from.operation_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&operation_identifier_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionBalanceTrace.Operation)
}

inline void TransactionBalanceTrace_Operation::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&operation_identifier_)) + sizeof(amount_));
}

TransactionBalanceTrace_Operation::~TransactionBalanceTrace_Operation() {
  // @@protoc_insertion_point(destructor:protocol.TransactionBalanceTrace.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionBalanceTrace_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionBalanceTrace_Operation::ArenaDtor(void* object) {
  TransactionBalanceTrace_Operation* _this = reinterpret_cast< TransactionBalanceTrace_Operation* >(object);
  (void)_this;
}
void TransactionBalanceTrace_Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionBalanceTrace_Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionBalanceTrace_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionBalanceTrace.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&operation_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&operation_identifier_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionBalanceTrace_Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 operation_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionBalanceTrace_Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionBalanceTrace.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 operation_identifier = 1;
  if (this->_internal_operation_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_operation_identifier(), target);
  }

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionBalanceTrace.Operation)
  return target;
}

size_t TransactionBalanceTrace_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionBalanceTrace.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 operation_identifier = 1;
  if (this->_internal_operation_identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_operation_identifier());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionBalanceTrace_Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionBalanceTrace_Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionBalanceTrace_Operation::GetClassData() const { return &_class_data_; }

void TransactionBalanceTrace_Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionBalanceTrace_Operation *>(to)->MergeFrom(
      static_cast<const TransactionBalanceTrace_Operation &>(from));
}


void TransactionBalanceTrace_Operation::MergeFrom(const TransactionBalanceTrace_Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionBalanceTrace.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_operation_identifier() != 0) {
    _internal_set_operation_identifier(from._internal_operation_identifier());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionBalanceTrace_Operation::CopyFrom(const TransactionBalanceTrace_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionBalanceTrace.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBalanceTrace_Operation::IsInitialized() const {
  return true;
}

void TransactionBalanceTrace_Operation::InternalSwap(TransactionBalanceTrace_Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionBalanceTrace_Operation, amount_)
      + sizeof(TransactionBalanceTrace_Operation::amount_)
      - PROTOBUF_FIELD_OFFSET(TransactionBalanceTrace_Operation, operation_identifier_)>(
          reinterpret_cast<char*>(&operation_identifier_),
          reinterpret_cast<char*>(&other->operation_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionBalanceTrace_Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[4]);
}

// ===================================================================

class TransactionBalanceTrace::_Internal {
 public:
};

TransactionBalanceTrace::TransactionBalanceTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.TransactionBalanceTrace)
}
TransactionBalanceTrace::TransactionBalanceTrace(const TransactionBalanceTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operation_(from.operation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_identifier().empty()) {
    transaction_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_identifier(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionBalanceTrace)
}

inline void TransactionBalanceTrace::SharedCtor() {
transaction_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionBalanceTrace::~TransactionBalanceTrace() {
  // @@protoc_insertion_point(destructor:protocol.TransactionBalanceTrace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionBalanceTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionBalanceTrace::ArenaDtor(void* object) {
  TransactionBalanceTrace* _this = reinterpret_cast< TransactionBalanceTrace* >(object);
  (void)_this;
}
void TransactionBalanceTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionBalanceTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionBalanceTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionBalanceTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.Clear();
  transaction_identifier_.ClearToEmpty();
  type_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionBalanceTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionBalanceTrace.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.TransactionBalanceTrace.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.TransactionBalanceTrace.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionBalanceTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionBalanceTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_identifier = 1;
  if (!this->_internal_transaction_identifier().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_identifier(), target);
  }

  // repeated .protocol.TransactionBalanceTrace.Operation operation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operation(i), target, stream);
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionBalanceTrace.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionBalanceTrace.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionBalanceTrace)
  return target;
}

size_t TransactionBalanceTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionBalanceTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionBalanceTrace.Operation operation = 2;
  total_size += 1UL * this->_internal_operation_size();
  for (const auto& msg : this->operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transaction_identifier = 1;
  if (!this->_internal_transaction_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_identifier());
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionBalanceTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionBalanceTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionBalanceTrace::GetClassData() const { return &_class_data_; }

void TransactionBalanceTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionBalanceTrace *>(to)->MergeFrom(
      static_cast<const TransactionBalanceTrace &>(from));
}


void TransactionBalanceTrace::MergeFrom(const TransactionBalanceTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionBalanceTrace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_.MergeFrom(from.operation_);
  if (!from._internal_transaction_identifier().empty()) {
    _internal_set_transaction_identifier(from._internal_transaction_identifier());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionBalanceTrace::CopyFrom(const TransactionBalanceTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionBalanceTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBalanceTrace::IsInitialized() const {
  return true;
}

void TransactionBalanceTrace::InternalSwap(TransactionBalanceTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operation_.InternalSwap(&other->operation_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_identifier_, GetArenaForAllocation(),
      &other->transaction_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionBalanceTrace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[5]);
}

// ===================================================================

class BlockBalanceTrace_BlockIdentifier::_Internal {
 public:
};

BlockBalanceTrace_BlockIdentifier::BlockBalanceTrace_BlockIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockBalanceTrace.BlockIdentifier)
}
BlockBalanceTrace_BlockIdentifier::BlockBalanceTrace_BlockIdentifier(const BlockBalanceTrace_BlockIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockBalanceTrace.BlockIdentifier)
}

inline void BlockBalanceTrace_BlockIdentifier::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_ = int64_t{0};
}

BlockBalanceTrace_BlockIdentifier::~BlockBalanceTrace_BlockIdentifier() {
  // @@protoc_insertion_point(destructor:protocol.BlockBalanceTrace.BlockIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockBalanceTrace_BlockIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockBalanceTrace_BlockIdentifier::ArenaDtor(void* object) {
  BlockBalanceTrace_BlockIdentifier* _this = reinterpret_cast< BlockBalanceTrace_BlockIdentifier* >(object);
  (void)_this;
}
void BlockBalanceTrace_BlockIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockBalanceTrace_BlockIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockBalanceTrace_BlockIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockBalanceTrace.BlockIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBalanceTrace_BlockIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockBalanceTrace_BlockIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockBalanceTrace.BlockIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockBalanceTrace.BlockIdentifier)
  return target;
}

size_t BlockBalanceTrace_BlockIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockBalanceTrace.BlockIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBalanceTrace_BlockIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockBalanceTrace_BlockIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBalanceTrace_BlockIdentifier::GetClassData() const { return &_class_data_; }

void BlockBalanceTrace_BlockIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockBalanceTrace_BlockIdentifier *>(to)->MergeFrom(
      static_cast<const BlockBalanceTrace_BlockIdentifier &>(from));
}


void BlockBalanceTrace_BlockIdentifier::MergeFrom(const BlockBalanceTrace_BlockIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockBalanceTrace.BlockIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBalanceTrace_BlockIdentifier::CopyFrom(const BlockBalanceTrace_BlockIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockBalanceTrace.BlockIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBalanceTrace_BlockIdentifier::IsInitialized() const {
  return true;
}

void BlockBalanceTrace_BlockIdentifier::InternalSwap(BlockBalanceTrace_BlockIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBalanceTrace_BlockIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[6]);
}

// ===================================================================

class BlockBalanceTrace::_Internal {
 public:
  static const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier(const BlockBalanceTrace* msg);
};

const ::protocol::BlockBalanceTrace_BlockIdentifier&
BlockBalanceTrace::_Internal::block_identifier(const BlockBalanceTrace* msg) {
  return *msg->block_identifier_;
}
BlockBalanceTrace::BlockBalanceTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_balance_trace_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.BlockBalanceTrace)
}
BlockBalanceTrace::BlockBalanceTrace(const BlockBalanceTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_balance_trace_(from.transaction_balance_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_identifier()) {
    block_identifier_ = new ::protocol::BlockBalanceTrace_BlockIdentifier(*from.block_identifier_);
  } else {
    block_identifier_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockBalanceTrace)
}

inline void BlockBalanceTrace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&block_identifier_)) + sizeof(timestamp_));
}

BlockBalanceTrace::~BlockBalanceTrace() {
  // @@protoc_insertion_point(destructor:protocol.BlockBalanceTrace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockBalanceTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_identifier_;
}

void BlockBalanceTrace::ArenaDtor(void* object) {
  BlockBalanceTrace* _this = reinterpret_cast< BlockBalanceTrace* >(object);
  (void)_this;
}
void BlockBalanceTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockBalanceTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockBalanceTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockBalanceTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_balance_trace_.Clear();
  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBalanceTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionBalanceTrace transaction_balance_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_balance_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockBalanceTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockBalanceTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 1;
  if (this->_internal_has_block_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_identifier(this), target, stream);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .protocol.TransactionBalanceTrace transaction_balance_trace = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_balance_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transaction_balance_trace(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockBalanceTrace)
  return target;
}

size_t BlockBalanceTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockBalanceTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionBalanceTrace transaction_balance_trace = 3;
  total_size += 1UL * this->_internal_transaction_balance_trace_size();
  for (const auto& msg : this->transaction_balance_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 1;
  if (this->_internal_has_block_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_identifier_);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBalanceTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockBalanceTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBalanceTrace::GetClassData() const { return &_class_data_; }

void BlockBalanceTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockBalanceTrace *>(to)->MergeFrom(
      static_cast<const BlockBalanceTrace &>(from));
}


void BlockBalanceTrace::MergeFrom(const BlockBalanceTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockBalanceTrace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_balance_trace_.MergeFrom(from.transaction_balance_trace_);
  if (from._internal_has_block_identifier()) {
    _internal_mutable_block_identifier()->::protocol::BlockBalanceTrace_BlockIdentifier::MergeFrom(from._internal_block_identifier());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBalanceTrace::CopyFrom(const BlockBalanceTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockBalanceTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBalanceTrace::IsInitialized() const {
  return true;
}

void BlockBalanceTrace::InternalSwap(BlockBalanceTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_balance_trace_.InternalSwap(&other->transaction_balance_trace_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBalanceTrace, timestamp_)
      + sizeof(BlockBalanceTrace::timestamp_)
      - PROTOBUF_FIELD_OFFSET(BlockBalanceTrace, block_identifier_)>(
          reinterpret_cast<char*>(&block_identifier_),
          reinterpret_cast<char*>(&other->block_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBalanceTrace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[7]);
}

// ===================================================================

class AccountTrace::_Internal {
 public:
};

AccountTrace::AccountTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountTrace)
}
AccountTrace::AccountTrace(const AccountTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&placeholder_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(placeholder_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountTrace)
}

inline void AccountTrace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placeholder_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(placeholder_));
}

AccountTrace::~AccountTrace() {
  // @@protoc_insertion_point(destructor:protocol.AccountTrace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountTrace::ArenaDtor(void* object) {
  AccountTrace* _this = reinterpret_cast< AccountTrace* >(object);
  (void)_this;
}
void AccountTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&placeholder_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(placeholder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 placeholder = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 balance = 1;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_balance(), target);
  }

  // int64 placeholder = 99;
  if (this->_internal_placeholder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(99, this->_internal_placeholder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountTrace)
  return target;
}

size_t AccountTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 balance = 1;
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // int64 placeholder = 99;
  if (this->_internal_placeholder() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_placeholder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountTrace::GetClassData() const { return &_class_data_; }

void AccountTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountTrace *>(to)->MergeFrom(
      static_cast<const AccountTrace &>(from));
}


void AccountTrace::MergeFrom(const AccountTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountTrace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from._internal_placeholder() != 0) {
    _internal_set_placeholder(from._internal_placeholder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountTrace::CopyFrom(const AccountTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountTrace::IsInitialized() const {
  return true;
}

void AccountTrace::InternalSwap(AccountTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountTrace, placeholder_)
      + sizeof(AccountTrace::placeholder_)
      - PROTOBUF_FIELD_OFFSET(AccountTrace, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountTrace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[8]);
}

// ===================================================================

class AccountIdentifier::_Internal {
 public:
};

AccountIdentifier::AccountIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountIdentifier)
}
AccountIdentifier::AccountIdentifier(const AccountIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountIdentifier)
}

inline void AccountIdentifier::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountIdentifier::~AccountIdentifier() {
  // @@protoc_insertion_point(destructor:protocol.AccountIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountIdentifier::ArenaDtor(void* object) {
  AccountIdentifier* _this = reinterpret_cast< AccountIdentifier* >(object);
  (void)_this;
}
void AccountIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountIdentifier)
  return target;
}

size_t AccountIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountIdentifier::GetClassData() const { return &_class_data_; }

void AccountIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountIdentifier *>(to)->MergeFrom(
      static_cast<const AccountIdentifier &>(from));
}


void AccountIdentifier::MergeFrom(const AccountIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountIdentifier::CopyFrom(const AccountIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountIdentifier::IsInitialized() const {
  return true;
}

void AccountIdentifier::InternalSwap(AccountIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[9]);
}

// ===================================================================

class AccountBalanceRequest::_Internal {
 public:
  static const ::protocol::AccountIdentifier& account_identifier(const AccountBalanceRequest* msg);
  static const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier(const AccountBalanceRequest* msg);
};

const ::protocol::AccountIdentifier&
AccountBalanceRequest::_Internal::account_identifier(const AccountBalanceRequest* msg) {
  return *msg->account_identifier_;
}
const ::protocol::BlockBalanceTrace_BlockIdentifier&
AccountBalanceRequest::_Internal::block_identifier(const AccountBalanceRequest* msg) {
  return *msg->block_identifier_;
}
AccountBalanceRequest::AccountBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountBalanceRequest)
}
AccountBalanceRequest::AccountBalanceRequest(const AccountBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account_identifier()) {
    account_identifier_ = new ::protocol::AccountIdentifier(*from.account_identifier_);
  } else {
    account_identifier_ = nullptr;
  }
  if (from._internal_has_block_identifier()) {
    block_identifier_ = new ::protocol::BlockBalanceTrace_BlockIdentifier(*from.block_identifier_);
  } else {
    block_identifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountBalanceRequest)
}

inline void AccountBalanceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_identifier_) -
    reinterpret_cast<char*>(&account_identifier_)) + sizeof(block_identifier_));
}

AccountBalanceRequest::~AccountBalanceRequest() {
  // @@protoc_insertion_point(destructor:protocol.AccountBalanceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete account_identifier_;
  if (this != internal_default_instance()) delete block_identifier_;
}

void AccountBalanceRequest::ArenaDtor(void* object) {
  AccountBalanceRequest* _this = reinterpret_cast< AccountBalanceRequest* >(object);
  (void)_this;
}
void AccountBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && account_identifier_ != nullptr) {
    delete account_identifier_;
  }
  account_identifier_ = nullptr;
  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.AccountIdentifier account_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.AccountIdentifier account_identifier = 1;
  if (this->_internal_has_account_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_identifier(this), target, stream);
  }

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  if (this->_internal_has_block_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountBalanceRequest)
  return target;
}

size_t AccountBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.AccountIdentifier account_identifier = 1;
  if (this->_internal_has_account_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_identifier_);
  }

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  if (this->_internal_has_block_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_identifier_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountBalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountBalanceRequest::GetClassData() const { return &_class_data_; }

void AccountBalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountBalanceRequest *>(to)->MergeFrom(
      static_cast<const AccountBalanceRequest &>(from));
}


void AccountBalanceRequest::MergeFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_identifier()) {
    _internal_mutable_account_identifier()->::protocol::AccountIdentifier::MergeFrom(from._internal_account_identifier());
  }
  if (from._internal_has_block_identifier()) {
    _internal_mutable_block_identifier()->::protocol::BlockBalanceTrace_BlockIdentifier::MergeFrom(from._internal_block_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountBalanceRequest::CopyFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceRequest::IsInitialized() const {
  return true;
}

void AccountBalanceRequest::InternalSwap(AccountBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountBalanceRequest, block_identifier_)
      + sizeof(AccountBalanceRequest::block_identifier_)
      - PROTOBUF_FIELD_OFFSET(AccountBalanceRequest, account_identifier_)>(
          reinterpret_cast<char*>(&account_identifier_),
          reinterpret_cast<char*>(&other->account_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountBalanceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[10]);
}

// ===================================================================

class AccountBalanceResponse::_Internal {
 public:
  static const ::protocol::BlockBalanceTrace_BlockIdentifier& block_identifier(const AccountBalanceResponse* msg);
};

const ::protocol::BlockBalanceTrace_BlockIdentifier&
AccountBalanceResponse::_Internal::block_identifier(const AccountBalanceResponse* msg) {
  return *msg->block_identifier_;
}
AccountBalanceResponse::AccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.AccountBalanceResponse)
}
AccountBalanceResponse::AccountBalanceResponse(const AccountBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_identifier()) {
    block_identifier_ = new ::protocol::BlockBalanceTrace_BlockIdentifier(*from.block_identifier_);
  } else {
    block_identifier_ = nullptr;
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:protocol.AccountBalanceResponse)
}

inline void AccountBalanceResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&block_identifier_)) + sizeof(balance_));
}

AccountBalanceResponse::~AccountBalanceResponse() {
  // @@protoc_insertion_point(destructor:protocol.AccountBalanceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_identifier_;
}

void AccountBalanceResponse::ArenaDtor(void* object) {
  AccountBalanceResponse* _this = reinterpret_cast< AccountBalanceResponse* >(object);
  (void)_this;
}
void AccountBalanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_identifier_ != nullptr) {
    delete block_identifier_;
  }
  block_identifier_ = nullptr;
  balance_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 balance = 1;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_balance(), target);
  }

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  if (this->_internal_has_block_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountBalanceResponse)
  return target;
}

size_t AccountBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.BlockBalanceTrace.BlockIdentifier block_identifier = 2;
  if (this->_internal_has_block_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_identifier_);
  }

  // int64 balance = 1;
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountBalanceResponse::GetClassData() const { return &_class_data_; }

void AccountBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccountBalanceResponse *>(to)->MergeFrom(
      static_cast<const AccountBalanceResponse &>(from));
}


void AccountBalanceResponse::MergeFrom(const AccountBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_identifier()) {
    _internal_mutable_block_identifier()->::protocol::BlockBalanceTrace_BlockIdentifier::MergeFrom(from._internal_block_identifier());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountBalanceResponse::CopyFrom(const AccountBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceResponse::IsInitialized() const {
  return true;
}

void AccountBalanceResponse::InternalSwap(AccountBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountBalanceResponse, balance_)
      + sizeof(AccountBalanceResponse::balance_)
      - PROTOBUF_FIELD_OFFSET(AccountBalanceResponse, block_identifier_)>(
          reinterpret_cast<char*>(&block_identifier_),
          reinterpret_cast<char*>(&other->block_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountBalanceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_getter, &descriptor_table_core_2fcontract_2fbalance_5fcontract_2eproto_once,
      file_level_metadata_core_2fcontract_2fbalance_5fcontract_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::FreezeBalanceContract* Arena::CreateMaybeMessage< ::protocol::FreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::FreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnfreezeBalanceContract* Arena::CreateMaybeMessage< ::protocol::UnfreezeBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnfreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WithdrawBalanceContract* Arena::CreateMaybeMessage< ::protocol::WithdrawBalanceContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::WithdrawBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransferContract* Arena::CreateMaybeMessage< ::protocol::TransferContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransferContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionBalanceTrace_Operation* Arena::CreateMaybeMessage< ::protocol::TransactionBalanceTrace_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionBalanceTrace_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionBalanceTrace* Arena::CreateMaybeMessage< ::protocol::TransactionBalanceTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::TransactionBalanceTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockBalanceTrace_BlockIdentifier* Arena::CreateMaybeMessage< ::protocol::BlockBalanceTrace_BlockIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockBalanceTrace_BlockIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockBalanceTrace* Arena::CreateMaybeMessage< ::protocol::BlockBalanceTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::BlockBalanceTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountTrace* Arena::CreateMaybeMessage< ::protocol::AccountTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountIdentifier* Arena::CreateMaybeMessage< ::protocol::AccountIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountBalanceRequest* Arena::CreateMaybeMessage< ::protocol::AccountBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountBalanceResponse* Arena::CreateMaybeMessage< ::protocol::AccountBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::AccountBalanceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
