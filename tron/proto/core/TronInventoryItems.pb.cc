// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/TronInventoryItems.proto

#include "core/TronInventoryItems.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr InventoryItems::InventoryItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , type_(0){}
struct InventoryItemsDefaultTypeInternal {
  constexpr InventoryItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InventoryItemsDefaultTypeInternal() {}
  union {
    InventoryItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InventoryItemsDefaultTypeInternal _InventoryItems_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fTronInventoryItems_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fTronInventoryItems_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fTronInventoryItems_2eproto = nullptr;

const uint32_t TableStruct_core_2fTronInventoryItems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::InventoryItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::InventoryItems, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::InventoryItems, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::InventoryItems)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_InventoryItems_default_instance_),
};

const char descriptor_table_protodef_core_2fTronInventoryItems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035core/TronInventoryItems.proto\022\010protoco"
  "l\"-\n\016InventoryItems\022\014\n\004type\030\001 \001(\005\022\r\n\005ite"
  "ms\030\002 \003(\014BP\n\017org.tron.protosB\022TronInvento"
  "ryItemsZ)github.com/tronprotocol/grpc-ga"
  "teway/coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fTronInventoryItems_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fTronInventoryItems_2eproto = {
  false, false, 178, descriptor_table_protodef_core_2fTronInventoryItems_2eproto, "core/TronInventoryItems.proto", 
  &descriptor_table_core_2fTronInventoryItems_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_core_2fTronInventoryItems_2eproto::offsets,
  file_level_metadata_core_2fTronInventoryItems_2eproto, file_level_enum_descriptors_core_2fTronInventoryItems_2eproto, file_level_service_descriptors_core_2fTronInventoryItems_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fTronInventoryItems_2eproto_getter() {
  return &descriptor_table_core_2fTronInventoryItems_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fTronInventoryItems_2eproto(&descriptor_table_core_2fTronInventoryItems_2eproto);
namespace protocol {

// ===================================================================

class InventoryItems::_Internal {
 public:
};

InventoryItems::InventoryItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.InventoryItems)
}
InventoryItems::InventoryItems(const InventoryItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.InventoryItems)
}

inline void InventoryItems::SharedCtor() {
type_ = 0;
}

InventoryItems::~InventoryItems() {
  // @@protoc_insertion_point(destructor:protocol.InventoryItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InventoryItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InventoryItems::ArenaDtor(void* object) {
  InventoryItems* _this = reinterpret_cast< InventoryItems* >(object);
  (void)_this;
}
void InventoryItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InventoryItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InventoryItems::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.InventoryItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InventoryItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.InventoryItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated bytes items = 2;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.InventoryItems)
  return target;
}

size_t InventoryItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.InventoryItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes items = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(items_.size());
  for (int i = 0, n = items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      items_.Get(i));
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InventoryItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InventoryItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InventoryItems::GetClassData() const { return &_class_data_; }

void InventoryItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InventoryItems *>(to)->MergeFrom(
      static_cast<const InventoryItems &>(from));
}


void InventoryItems::MergeFrom(const InventoryItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.InventoryItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InventoryItems::CopyFrom(const InventoryItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.InventoryItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryItems::IsInitialized() const {
  return true;
}

void InventoryItems::InternalSwap(InventoryItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fTronInventoryItems_2eproto_getter, &descriptor_table_core_2fTronInventoryItems_2eproto_once,
      file_level_metadata_core_2fTronInventoryItems_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::InventoryItems* Arena::CreateMaybeMessage< ::protocol::InventoryItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::InventoryItems >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
